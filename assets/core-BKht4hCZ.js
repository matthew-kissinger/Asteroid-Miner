const r=Object.freeze({GAME_OVER:"game.over",PLAYER_CREATED:"player.created",TRANSFORM_UPDATED:"transform.updated",VFX_EXPLOSION:"vfx.explosion",MINING_START:"player.mining.start",MINING_STOP:"player.mining.stop",ENEMY_DESTROYED:"enemy.destroyed",WEAPON_FIRED:"weapon.fired"}),c={[r.GAME_OVER]:{reason:"string"},[r.PLAYER_CREATED]:{entity:"object"},[r.TRANSFORM_UPDATED]:{entity:"object"},[r.VFX_EXPLOSION]:{position:"object",color:"number",size:"number",duration:"number"},[r.MINING_START]:{sourceEntity:"object",targetEntity:"object"},[r.MINING_STOP]:{sourceEntity:"object"},[r.ENEMY_DESTROYED]:{entityId:"string"},[r.WEAPON_FIRED]:{entity:"object"}};function l(a,e){if(!window||!window.DEBUG_MODE)return!0;const s=c[a];if(!s)return!0;if(typeof e!="object"||e==null)return u(a,"payload is not object");for(const[t,n]of Object.entries(s)){const i=e[t];if(n==="object"){if(typeof i!="object"||i==null)return u(a,`field ${t} must be object`)}else if(typeof i!==n)return u(a,`field ${t} must be ${n}`)}return!0}function u(a,e){return console.warn(`[EVENT VALIDATION] ${a}: ${e}`),!1}class d{constructor(){this.listeners=new Map,this.queuedMessages=[],this.dispatching=!1,this.highFrequencyTypes=new Set(["transform.updated","physics.update","render.update"]),window.messageRegistry||(window.messageRegistry=new Set),window.messageRegistry.add(this),window.mainMessageBus?window.mainMessageBus!==this&&console.log("MessageBus: This instance will forward game.over events to window.mainMessageBus"):(window.mainMessageBus=this,console.log("MessageBus: Set this instance as window.mainMessageBus")),console.log("MessageBus: New instance created and added to registry")}subscribe(e,s,t=null){return this.listeners.has(e)||this.listeners.set(e,[]),this.listeners.get(e).push({callback:s,context:t}),()=>this.unsubscribe(e,s,t)}unsubscribe(e,s,t=null){if(!this.listeners.has(e))return;const n=this.listeners.get(e),i=n.findIndex(o=>o.callback===s&&o.context===t);i!==-1&&n.splice(i,1),n.length===0&&this.listeners.delete(e)}fastPublish(e,s={}){try{l&&l(e,s)}catch{}if(!this.listeners.has(e))return;const t=this.listeners.get(e),n={type:e,data:s,timestamp:Date.now()};for(let i=0;i<t.length;i++){const o=t[i];o.callback.call(o.context,n)}}publish(e,s={}){try{l&&l(e,s)}catch{}if(this.highFrequencyTypes.has(e))return this.fastPublish(e,s);if(["entity.created","entity.destroyed","component.added","component.removed","game.over"].includes(e)&&console.log(`MessageBus: Publishing ${e}`,s),e==="game.over"){if(window.mainMessageBus&&window.mainMessageBus!==this){console.log("MessageBus: Forwarding game.over event to window.mainMessageBus"),window.mainMessageBus.publish(e,s);return}if(this.listeners.has(e)){const n=this.listeners.get(e);console.log(`MessageBus: Found ${n.length} listeners for '${e}' event`)}else{console.error(`MessageBus: No listeners found for '${e}' event!`),console.log("MessageBus: Registered event types:",Array.from(this.listeners.keys())),console.trace("MessageBus: This is where the game.over event was published from"),window.game?(console.log("MessageBus: window.game exists:",window.game),console.log("MessageBus: window.game.messageBus exists:",window.game.messageBus),console.log("MessageBus: Directly calling window.game.gameOver as an emergency measure"),window.game.gameOver(s.reason||"Unknown reason")):console.error("MessageBus: window.game does not exist - critical issue");return}}if(this.listeners.has(e)){if(this.dispatching){console.log(`MessageBus: Already dispatching, queueing ${e} message`),this.queuedMessages.push({type:e,data:s});return}try{this.dispatching=!0,this.listeners.get(e).forEach((i,o)=>{try{e==="game.over"&&console.log(`MessageBus: Calling listener #${o+1} for game.over event`),i.callback.call(i.context,{type:e,data:s,timestamp:Date.now()}),e==="game.over"&&console.log(`MessageBus: Listener #${o+1} for game.over event completed successfully`)}catch(g){console.error(`Error in message listener #${o+1} (${e}):`,g),console.error("Error stack:",g.stack)}})}finally{if(this.dispatching=!1,this.queuedMessages.length>0){const n=[...this.queuedMessages];this.queuedMessages=[],n.forEach(i=>{this.publish(i.type,i.data)})}}}}queue(e,s={}){this.queuedMessages.push({type:e,data:s})}static triggerGameOver(e,s){console.log("MessageBus.triggerGameOver called:",e,"from",s);let t=null;if(window.mainMessageBus?(console.log("MessageBus: Using window.mainMessageBus for game over"),t=window.mainMessageBus):window.game&&window.game.messageBus&&(console.log("MessageBus: Using window.game.messageBus for game over"),t=window.game.messageBus),t){if(console.log("MessageBus: Publishing game.over event"),t.listeners.has("game.over")){const n=t.listeners.get("game.over");console.log(`MessageBus: Found ${n.length} game.over listeners`)}else console.warn("MessageBus: No game.over listeners found before publishing");t.publish("game.over",{reason:e,source:s})}else console.error("MessageBus: No message bus instance found for game over!")}}export{d as MessageBus};
//# sourceMappingURL=core-BKht4hCZ.js.map
