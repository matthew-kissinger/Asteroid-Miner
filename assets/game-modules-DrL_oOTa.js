var Ve=Object.defineProperty;var je=(g,e,t)=>e in g?Ve(g,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):g[e]=t;var ie=(g,e,t)=>je(g,typeof e!="symbol"?e+"":e,t);import{M as w,O as We,B as q,F as De,S as j,U as Pe,V as U,W as me,H as ge,N as qe,C as Ye,a as M,b as f,A as z,c as Y,d as Qe,P as Je,e as Xe,f as ve,g as Ze,h as $,i as Ke,D as Te,j as et,k as we,I as tt,l as st,m as fe,E as ae,G,n as ye,o as ee,p as it,q as N,r as _,T as Ce,s as Z,t as ne,u as te,R as ot,Q as nt,v as Q,w as ce,x as at,y as Me,z as ke,J as rt,K as I,L as Se,X as lt,Y as He,Z as Ie,_ as X,$ as Ae,a0 as Ee,a1 as ct,a2 as dt,a3 as ht,a4 as ut,a5 as Le,a6 as pt,a7 as mt,a8 as gt,a9 as ft,aa as yt}from"./three-DEtojxaq.js";import{H as bt,S as xt}from"./ui-modules-C3FA310U.js";const vt="modulepreload",wt=function(g){return"/Asteroid-Miner/"+g},$e={},St=function(e,t,s){let i=Promise.resolve();if(t&&t.length>0){document.getElementsByTagName("link");const n=document.querySelector("meta[property=csp-nonce]"),a=(n==null?void 0:n.nonce)||(n==null?void 0:n.getAttribute("nonce"));i=Promise.allSettled(t.map(r=>{if(r=wt(r),r in $e)return;$e[r]=!0;const l=r.endsWith(".css"),d=l?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${r}"]${d}`))return;const c=document.createElement("link");if(c.rel=l?"stylesheet":vt,l||(c.as="script"),c.crossOrigin="",c.href=r,a&&c.setAttribute("nonce",a),document.head.appendChild(c),l)return new Promise((h,u)=>{c.addEventListener("load",h),c.addEventListener("error",()=>u(new Error(`Unable to preload CSS for ${r}`)))})}))}function o(n){const a=new Event("vite:preloadError",{cancelable:!0});if(a.payload=n,window.dispatchEvent(a),!a.defaultPrevented)throw n}return i.then(n=>{for(const a of n||[])a.status==="rejected"&&o(a.reason);return e().catch(o)})},be={name:"CopyShader",uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = opacity * texel;


		}`};class de{constructor(){this.isPass=!0,this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1}setSize(){}render(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}dispose(){}}const Ct=new We(-1,1,1,-1,0,1);class Mt extends q{constructor(){super(),this.setAttribute("position",new De([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new De([0,2,0,0,2,0],2))}}const kt=new Mt;class Oe{constructor(e){this._mesh=new w(kt,e)}dispose(){this._mesh.geometry.dispose()}render(e){e.render(this._mesh,Ct)}get material(){return this._mesh.material}set material(e){this._mesh.material=e}}class oe extends de{constructor(e,t="tDiffuse"){super(),this.textureID=t,this.uniforms=null,this.material=null,e instanceof j?(this.uniforms=e.uniforms,this.material=e):e&&(this.uniforms=Pe.clone(e.uniforms),this.material=new j({name:e.name!==void 0?e.name:"unspecified",defines:Object.assign({},e.defines),uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader})),this._fsQuad=new Oe(this.material)}render(e,t,s){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=s.texture),this._fsQuad.material=this.material,this.renderToScreen?(e.setRenderTarget(null),this._fsQuad.render(e)):(e.setRenderTarget(t),this.clear&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),this._fsQuad.render(e))}dispose(){this.material.dispose(),this._fsQuad.dispose()}}class Fe extends de{constructor(e,t){super(),this.scene=e,this.camera=t,this.clear=!0,this.needsSwap=!1,this.inverse=!1}render(e,t,s){const i=e.getContext(),o=e.state;o.buffers.color.setMask(!1),o.buffers.depth.setMask(!1),o.buffers.color.setLocked(!0),o.buffers.depth.setLocked(!0);let n,a;this.inverse?(n=0,a=1):(n=1,a=0),o.buffers.stencil.setTest(!0),o.buffers.stencil.setOp(i.REPLACE,i.REPLACE,i.REPLACE),o.buffers.stencil.setFunc(i.ALWAYS,n,4294967295),o.buffers.stencil.setClear(a),o.buffers.stencil.setLocked(!0),e.setRenderTarget(s),this.clear&&e.clear(),e.render(this.scene,this.camera),e.setRenderTarget(t),this.clear&&e.clear(),e.render(this.scene,this.camera),o.buffers.color.setLocked(!1),o.buffers.depth.setLocked(!1),o.buffers.color.setMask(!0),o.buffers.depth.setMask(!0),o.buffers.stencil.setLocked(!1),o.buffers.stencil.setFunc(i.EQUAL,1,4294967295),o.buffers.stencil.setOp(i.KEEP,i.KEEP,i.KEEP),o.buffers.stencil.setLocked(!0)}}class Et extends de{constructor(){super(),this.needsSwap=!1}render(e){e.state.buffers.stencil.setLocked(!1),e.state.buffers.stencil.setTest(!1)}}class Pt{constructor(e,t){if(this.renderer=e,this._pixelRatio=e.getPixelRatio(),t===void 0){const s=e.getSize(new U);this._width=s.width,this._height=s.height,t=new me(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:ge}),t.texture.name="EffectComposer.rt1"}else this._width=t.width,this._height=t.height;this.renderTarget1=t,this.renderTarget2=t.clone(),this.renderTarget2.texture.name="EffectComposer.rt2",this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.renderToScreen=!0,this.passes=[],this.copyPass=new oe(be),this.copyPass.material.blending=qe,this.clock=new Ye}swapBuffers(){const e=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=e}addPass(e){this.passes.push(e),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}insertPass(e,t){this.passes.splice(t,0,e),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}removePass(e){const t=this.passes.indexOf(e);t!==-1&&this.passes.splice(t,1)}isLastEnabledPass(e){for(let t=e+1;t<this.passes.length;t++)if(this.passes[t].enabled)return!1;return!0}render(e){e===void 0&&(e=this.clock.getDelta());const t=this.renderer.getRenderTarget();let s=!1;for(let i=0,o=this.passes.length;i<o;i++){const n=this.passes[i];if(n.enabled!==!1){if(n.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(i),n.render(this.renderer,this.writeBuffer,this.readBuffer,e,s),n.needsSwap){if(s){const a=this.renderer.getContext(),r=this.renderer.state.buffers.stencil;r.setFunc(a.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e),r.setFunc(a.EQUAL,1,4294967295)}this.swapBuffers()}Fe!==void 0&&(n instanceof Fe?s=!0:n instanceof Et&&(s=!1))}}this.renderer.setRenderTarget(t)}reset(e){if(e===void 0){const t=this.renderer.getSize(new U);this._pixelRatio=this.renderer.getPixelRatio(),this._width=t.width,this._height=t.height,e=this.renderTarget1.clone(),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=e,this.renderTarget2=e.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2}setSize(e,t){this._width=e,this._height=t;const s=this._width*this._pixelRatio,i=this._height*this._pixelRatio;this.renderTarget1.setSize(s,i),this.renderTarget2.setSize(s,i);for(let o=0;o<this.passes.length;o++)this.passes[o].setSize(s,i)}setPixelRatio(e){this._pixelRatio=e,this.setSize(this._width,this._height)}dispose(){this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.copyPass.dispose()}}class Tt extends de{constructor(e,t,s=null,i=null,o=null){super(),this.scene=e,this.camera=t,this.overrideMaterial=s,this.clearColor=i,this.clearAlpha=o,this.clear=!0,this.clearDepth=!1,this.needsSwap=!1,this._oldClearColor=new M}render(e,t,s){const i=e.autoClear;e.autoClear=!1;let o,n;this.overrideMaterial!==null&&(n=this.scene.overrideMaterial,this.scene.overrideMaterial=this.overrideMaterial),this.clearColor!==null&&(e.getClearColor(this._oldClearColor),e.setClearColor(this.clearColor,e.getClearAlpha())),this.clearAlpha!==null&&(o=e.getClearAlpha(),e.setClearAlpha(this.clearAlpha)),this.clearDepth==!0&&e.clearDepth(),e.setRenderTarget(this.renderToScreen?null:s),this.clear===!0&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),e.render(this.scene,this.camera),this.clearColor!==null&&e.setClearColor(this._oldClearColor),this.clearAlpha!==null&&e.setClearAlpha(o),this.overrideMaterial!==null&&(this.scene.overrideMaterial=n),e.autoClear=i}}const It={uniforms:{tDiffuse:{value:null},luminosityThreshold:{value:1},smoothWidth:{value:1},defaultColor:{value:new M(0)},defaultOpacity:{value:0}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;

			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform sampler2D tDiffuse;
		uniform vec3 defaultColor;
		uniform float defaultOpacity;
		uniform float luminosityThreshold;
		uniform float smoothWidth;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );

			float v = luminance( texel.xyz );

			vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );

			float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );

			gl_FragColor = mix( outputColor, texel, alpha );

		}`};class re extends de{constructor(e,t=1,s,i){super(),this.strength=t,this.radius=s,this.threshold=i,this.resolution=e!==void 0?new U(e.x,e.y):new U(256,256),this.clearColor=new M(0,0,0),this.needsSwap=!1,this.renderTargetsHorizontal=[],this.renderTargetsVertical=[],this.nMips=5;let o=Math.round(this.resolution.x/2),n=Math.round(this.resolution.y/2);this.renderTargetBright=new me(o,n,{type:ge}),this.renderTargetBright.texture.name="UnrealBloomPass.bright",this.renderTargetBright.texture.generateMipmaps=!1;for(let d=0;d<this.nMips;d++){const c=new me(o,n,{type:ge});c.texture.name="UnrealBloomPass.h"+d,c.texture.generateMipmaps=!1,this.renderTargetsHorizontal.push(c);const h=new me(o,n,{type:ge});h.texture.name="UnrealBloomPass.v"+d,h.texture.generateMipmaps=!1,this.renderTargetsVertical.push(h),o=Math.round(o/2),n=Math.round(n/2)}const a=It;this.highPassUniforms=Pe.clone(a.uniforms),this.highPassUniforms.luminosityThreshold.value=i,this.highPassUniforms.smoothWidth.value=.01,this.materialHighPassFilter=new j({uniforms:this.highPassUniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader}),this.separableBlurMaterials=[];const r=[3,5,7,9,11];o=Math.round(this.resolution.x/2),n=Math.round(this.resolution.y/2);for(let d=0;d<this.nMips;d++)this.separableBlurMaterials.push(this._getSeparableBlurMaterial(r[d])),this.separableBlurMaterials[d].uniforms.invSize.value=new U(1/o,1/n),o=Math.round(o/2),n=Math.round(n/2);this.compositeMaterial=this._getCompositeMaterial(this.nMips),this.compositeMaterial.uniforms.blurTexture1.value=this.renderTargetsVertical[0].texture,this.compositeMaterial.uniforms.blurTexture2.value=this.renderTargetsVertical[1].texture,this.compositeMaterial.uniforms.blurTexture3.value=this.renderTargetsVertical[2].texture,this.compositeMaterial.uniforms.blurTexture4.value=this.renderTargetsVertical[3].texture,this.compositeMaterial.uniforms.blurTexture5.value=this.renderTargetsVertical[4].texture,this.compositeMaterial.uniforms.bloomStrength.value=t,this.compositeMaterial.uniforms.bloomRadius.value=.1;const l=[1,.8,.6,.4,.2];this.compositeMaterial.uniforms.bloomFactors.value=l,this.bloomTintColors=[new f(1,1,1),new f(1,1,1),new f(1,1,1),new f(1,1,1),new f(1,1,1)],this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,this.copyUniforms=Pe.clone(be.uniforms),this.blendMaterial=new j({uniforms:this.copyUniforms,vertexShader:be.vertexShader,fragmentShader:be.fragmentShader,blending:z,depthTest:!1,depthWrite:!1,transparent:!0}),this._oldClearColor=new M,this._oldClearAlpha=1,this._basic=new Y,this._fsQuad=new Oe(null)}dispose(){for(let e=0;e<this.renderTargetsHorizontal.length;e++)this.renderTargetsHorizontal[e].dispose();for(let e=0;e<this.renderTargetsVertical.length;e++)this.renderTargetsVertical[e].dispose();this.renderTargetBright.dispose();for(let e=0;e<this.separableBlurMaterials.length;e++)this.separableBlurMaterials[e].dispose();this.compositeMaterial.dispose(),this.blendMaterial.dispose(),this._basic.dispose(),this._fsQuad.dispose()}setSize(e,t){let s=Math.round(e/2),i=Math.round(t/2);this.renderTargetBright.setSize(s,i);for(let o=0;o<this.nMips;o++)this.renderTargetsHorizontal[o].setSize(s,i),this.renderTargetsVertical[o].setSize(s,i),this.separableBlurMaterials[o].uniforms.invSize.value=new U(1/s,1/i),s=Math.round(s/2),i=Math.round(i/2)}render(e,t,s,i,o){e.getClearColor(this._oldClearColor),this._oldClearAlpha=e.getClearAlpha();const n=e.autoClear;e.autoClear=!1,e.setClearColor(this.clearColor,0),o&&e.state.buffers.stencil.setTest(!1),this.renderToScreen&&(this._fsQuad.material=this._basic,this._basic.map=s.texture,e.setRenderTarget(null),e.clear(),this._fsQuad.render(e)),this.highPassUniforms.tDiffuse.value=s.texture,this.highPassUniforms.luminosityThreshold.value=this.threshold,this._fsQuad.material=this.materialHighPassFilter,e.setRenderTarget(this.renderTargetBright),e.clear(),this._fsQuad.render(e);let a=this.renderTargetBright;for(let r=0;r<this.nMips;r++)this._fsQuad.material=this.separableBlurMaterials[r],this.separableBlurMaterials[r].uniforms.colorTexture.value=a.texture,this.separableBlurMaterials[r].uniforms.direction.value=re.BlurDirectionX,e.setRenderTarget(this.renderTargetsHorizontal[r]),e.clear(),this._fsQuad.render(e),this.separableBlurMaterials[r].uniforms.colorTexture.value=this.renderTargetsHorizontal[r].texture,this.separableBlurMaterials[r].uniforms.direction.value=re.BlurDirectionY,e.setRenderTarget(this.renderTargetsVertical[r]),e.clear(),this._fsQuad.render(e),a=this.renderTargetsVertical[r];this._fsQuad.material=this.compositeMaterial,this.compositeMaterial.uniforms.bloomStrength.value=this.strength,this.compositeMaterial.uniforms.bloomRadius.value=this.radius,this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,e.setRenderTarget(this.renderTargetsHorizontal[0]),e.clear(),this._fsQuad.render(e),this._fsQuad.material=this.blendMaterial,this.copyUniforms.tDiffuse.value=this.renderTargetsHorizontal[0].texture,o&&e.state.buffers.stencil.setTest(!0),this.renderToScreen?(e.setRenderTarget(null),this._fsQuad.render(e)):(e.setRenderTarget(s),this._fsQuad.render(e)),e.setClearColor(this._oldClearColor,this._oldClearAlpha),e.autoClear=n}_getSeparableBlurMaterial(e){const t=[];for(let s=0;s<e;s++)t.push(.39894*Math.exp(-.5*s*s/(e*e))/e);return new j({defines:{KERNEL_RADIUS:e},uniforms:{colorTexture:{value:null},invSize:{value:new U(.5,.5)},direction:{value:new U(.5,.5)},gaussianCoefficients:{value:t}},vertexShader:`varying vec2 vUv;
				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:`#include <common>
				varying vec2 vUv;
				uniform sampler2D colorTexture;
				uniform vec2 invSize;
				uniform vec2 direction;
				uniform float gaussianCoefficients[KERNEL_RADIUS];

				void main() {
					float weightSum = gaussianCoefficients[0];
					vec3 diffuseSum = texture2D( colorTexture, vUv ).rgb * weightSum;
					for( int i = 1; i < KERNEL_RADIUS; i ++ ) {
						float x = float(i);
						float w = gaussianCoefficients[i];
						vec2 uvOffset = direction * invSize * x;
						vec3 sample1 = texture2D( colorTexture, vUv + uvOffset ).rgb;
						vec3 sample2 = texture2D( colorTexture, vUv - uvOffset ).rgb;
						diffuseSum += (sample1 + sample2) * w;
						weightSum += 2.0 * w;
					}
					gl_FragColor = vec4(diffuseSum/weightSum, 1.0);
				}`})}_getCompositeMaterial(e){return new j({defines:{NUM_MIPS:e},uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},vertexShader:`varying vec2 vUv;
				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:`varying vec2 vUv;
				uniform sampler2D blurTexture1;
				uniform sampler2D blurTexture2;
				uniform sampler2D blurTexture3;
				uniform sampler2D blurTexture4;
				uniform sampler2D blurTexture5;
				uniform float bloomStrength;
				uniform float bloomRadius;
				uniform float bloomFactors[NUM_MIPS];
				uniform vec3 bloomTintColors[NUM_MIPS];

				float lerpBloomFactor(const in float factor) {
					float mirrorFactor = 1.2 - factor;
					return mix(factor, mirrorFactor, bloomRadius);
				}

				void main() {
					gl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +
						lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +
						lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +
						lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +
						lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );
				}`})}}re.BlurDirectionX=new U(1,0);re.BlurDirectionY=new U(0,1);const At={name:"FXAAShader",uniforms:{tDiffuse:{value:null},resolution:{value:new U(1/1024,1/512)}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform sampler2D tDiffuse;
		uniform vec2 resolution;
		varying vec2 vUv;

		#define EDGE_STEP_COUNT 6
		#define EDGE_GUESS 8.0
		#define EDGE_STEPS 1.0, 1.5, 2.0, 2.0, 2.0, 4.0
		const float edgeSteps[EDGE_STEP_COUNT] = float[EDGE_STEP_COUNT]( EDGE_STEPS );

		float _ContrastThreshold = 0.0312;
		float _RelativeThreshold = 0.063;
		float _SubpixelBlending = 1.0;

		vec4 Sample( sampler2D  tex2D, vec2 uv ) {

			return texture( tex2D, uv );

		}

		float SampleLuminance( sampler2D tex2D, vec2 uv ) {

			return dot( Sample( tex2D, uv ).rgb, vec3( 0.3, 0.59, 0.11 ) );

		}

		float SampleLuminance( sampler2D tex2D, vec2 texSize, vec2 uv, float uOffset, float vOffset ) {

			uv += texSize * vec2(uOffset, vOffset);
			return SampleLuminance(tex2D, uv);

		}

		struct LuminanceData {

			float m, n, e, s, w;
			float ne, nw, se, sw;
			float highest, lowest, contrast;

		};

		LuminanceData SampleLuminanceNeighborhood( sampler2D tex2D, vec2 texSize, vec2 uv ) {

			LuminanceData l;
			l.m = SampleLuminance( tex2D, uv );
			l.n = SampleLuminance( tex2D, texSize, uv,  0.0,  1.0 );
			l.e = SampleLuminance( tex2D, texSize, uv,  1.0,  0.0 );
			l.s = SampleLuminance( tex2D, texSize, uv,  0.0, -1.0 );
			l.w = SampleLuminance( tex2D, texSize, uv, -1.0,  0.0 );

			l.ne = SampleLuminance( tex2D, texSize, uv,  1.0,  1.0 );
			l.nw = SampleLuminance( tex2D, texSize, uv, -1.0,  1.0 );
			l.se = SampleLuminance( tex2D, texSize, uv,  1.0, -1.0 );
			l.sw = SampleLuminance( tex2D, texSize, uv, -1.0, -1.0 );

			l.highest = max( max( max( max( l.n, l.e ), l.s ), l.w ), l.m );
			l.lowest = min( min( min( min( l.n, l.e ), l.s ), l.w ), l.m );
			l.contrast = l.highest - l.lowest;
			return l;

		}

		bool ShouldSkipPixel( LuminanceData l ) {

			float threshold = max( _ContrastThreshold, _RelativeThreshold * l.highest );
			return l.contrast < threshold;

		}

		float DeterminePixelBlendFactor( LuminanceData l ) {

			float f = 2.0 * ( l.n + l.e + l.s + l.w );
			f += l.ne + l.nw + l.se + l.sw;
			f *= 1.0 / 12.0;
			f = abs( f - l.m );
			f = clamp( f / l.contrast, 0.0, 1.0 );

			float blendFactor = smoothstep( 0.0, 1.0, f );
			return blendFactor * blendFactor * _SubpixelBlending;

		}

		struct EdgeData {

			bool isHorizontal;
			float pixelStep;
			float oppositeLuminance, gradient;

		};

		EdgeData DetermineEdge( vec2 texSize, LuminanceData l ) {

			EdgeData e;
			float horizontal =
				abs( l.n + l.s - 2.0 * l.m ) * 2.0 +
				abs( l.ne + l.se - 2.0 * l.e ) +
				abs( l.nw + l.sw - 2.0 * l.w );
			float vertical =
				abs( l.e + l.w - 2.0 * l.m ) * 2.0 +
				abs( l.ne + l.nw - 2.0 * l.n ) +
				abs( l.se + l.sw - 2.0 * l.s );
			e.isHorizontal = horizontal >= vertical;

			float pLuminance = e.isHorizontal ? l.n : l.e;
			float nLuminance = e.isHorizontal ? l.s : l.w;
			float pGradient = abs( pLuminance - l.m );
			float nGradient = abs( nLuminance - l.m );

			e.pixelStep = e.isHorizontal ? texSize.y : texSize.x;

			if (pGradient < nGradient) {

				e.pixelStep = -e.pixelStep;
				e.oppositeLuminance = nLuminance;
				e.gradient = nGradient;

			} else {

				e.oppositeLuminance = pLuminance;
				e.gradient = pGradient;

			}

			return e;

		}

		float DetermineEdgeBlendFactor( sampler2D  tex2D, vec2 texSize, LuminanceData l, EdgeData e, vec2 uv ) {

			vec2 uvEdge = uv;
			vec2 edgeStep;
			if (e.isHorizontal) {

				uvEdge.y += e.pixelStep * 0.5;
				edgeStep = vec2( texSize.x, 0.0 );

			} else {

				uvEdge.x += e.pixelStep * 0.5;
				edgeStep = vec2( 0.0, texSize.y );

			}

			float edgeLuminance = ( l.m + e.oppositeLuminance ) * 0.5;
			float gradientThreshold = e.gradient * 0.25;

			vec2 puv = uvEdge + edgeStep * edgeSteps[0];
			float pLuminanceDelta = SampleLuminance( tex2D, puv ) - edgeLuminance;
			bool pAtEnd = abs( pLuminanceDelta ) >= gradientThreshold;

			for ( int i = 1; i < EDGE_STEP_COUNT && !pAtEnd; i++ ) {

				puv += edgeStep * edgeSteps[i];
				pLuminanceDelta = SampleLuminance( tex2D, puv ) - edgeLuminance;
				pAtEnd = abs( pLuminanceDelta ) >= gradientThreshold;

			}

			if ( !pAtEnd ) {

				puv += edgeStep * EDGE_GUESS;

			}

			vec2 nuv = uvEdge - edgeStep * edgeSteps[0];
			float nLuminanceDelta = SampleLuminance( tex2D, nuv ) - edgeLuminance;
			bool nAtEnd = abs( nLuminanceDelta ) >= gradientThreshold;

			for ( int i = 1; i < EDGE_STEP_COUNT && !nAtEnd; i++ ) {

				nuv -= edgeStep * edgeSteps[i];
				nLuminanceDelta = SampleLuminance( tex2D, nuv ) - edgeLuminance;
				nAtEnd = abs( nLuminanceDelta ) >= gradientThreshold;

			}

			if ( !nAtEnd ) {

				nuv -= edgeStep * EDGE_GUESS;

			}

			float pDistance, nDistance;
			if ( e.isHorizontal ) {

				pDistance = puv.x - uv.x;
				nDistance = uv.x - nuv.x;

			} else {

				pDistance = puv.y - uv.y;
				nDistance = uv.y - nuv.y;

			}

			float shortestDistance;
			bool deltaSign;
			if ( pDistance <= nDistance ) {

				shortestDistance = pDistance;
				deltaSign = pLuminanceDelta >= 0.0;

			} else {

				shortestDistance = nDistance;
				deltaSign = nLuminanceDelta >= 0.0;

			}

			if ( deltaSign == ( l.m - edgeLuminance >= 0.0 ) ) {

				return 0.0;

			}

			return 0.5 - shortestDistance / ( pDistance + nDistance );

		}

		vec4 ApplyFXAA( sampler2D  tex2D, vec2 texSize, vec2 uv ) {

			LuminanceData luminance = SampleLuminanceNeighborhood( tex2D, texSize, uv );
			if ( ShouldSkipPixel( luminance ) ) {

				return Sample( tex2D, uv );

			}

			float pixelBlend = DeterminePixelBlendFactor( luminance );
			EdgeData edge = DetermineEdge( texSize, luminance );
			float edgeBlend = DetermineEdgeBlendFactor( tex2D, texSize, luminance, edge, uv );
			float finalBlend = max( pixelBlend, edgeBlend );

			if (edge.isHorizontal) {

				uv.y += edge.pixelStep * finalBlend;

			} else {

				uv.x += edge.pixelStep * finalBlend;

			}

			return Sample( tex2D, uv );

		}

		void main() {

			gl_FragColor = ApplyFXAA( tDiffuse, resolution.xy, vUv );

		}`},Bt={name:"ColorCorrectionShader",uniforms:{tDiffuse:{value:null},powRGB:{value:new f(2,2,2)},mulRGB:{value:new f(1,1,1)},addRGB:{value:new f(0,0,0)}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;

			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform sampler2D tDiffuse;
		uniform vec3 powRGB;
		uniform vec3 mulRGB;
		uniform vec3 addRGB;

		varying vec2 vUv;

		void main() {

			gl_FragColor = texture2D( tDiffuse, vUv );
			gl_FragColor.rgb = mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );

		}`},Rt={name:"FilmShader",uniforms:{tDiffuse:{value:null},time:{value:0},intensity:{value:.5},grayscale:{value:!1}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		#include <common>

		uniform float intensity;
		uniform bool grayscale;
		uniform float time;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 base = texture2D( tDiffuse, vUv );

			float noise = rand( fract( vUv + time ) );

			vec3 color = base.rgb + base.rgb * clamp( 0.1 + noise, 0.0, 1.0 );

			color = mix( base.rgb, color, intensity );

			if ( grayscale ) {

				color = vec3( luminance( color ) ); // assuming linear-srgb

			}

			gl_FragColor = vec4( color, base.a );

		}`},Dt={name:"VignetteShader",uniforms:{tDiffuse:{value:null},offset:{value:1},darkness:{value:1}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform float offset;
		uniform float darkness;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			// Eskil's vignette

			vec4 texel = texture2D( tDiffuse, vUv );
			vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );
			gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );

		}`};class Ue{static isWebGL2Available(){try{const e=document.createElement("canvas");return!!(window.WebGL2RenderingContext&&e.getContext("webgl2"))}catch{return!1}}static isColorSpaceAvailable(e){try{const t=document.createElement("canvas"),s=window.WebGL2RenderingContext&&t.getContext("webgl2");return s.drawingBufferColorSpace=e,s.drawingBufferColorSpace===e}catch{return!1}}static getWebGL2ErrorMessage(){return this._getErrorMessage(2)}static _getErrorMessage(e){const t={1:"WebGL",2:"WebGL 2"},s={1:window.WebGLRenderingContext,2:window.WebGL2RenderingContext};let i='Your $0 does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">$1</a>';const o=document.createElement("div");return o.id="webglmessage",o.style.fontFamily="monospace",o.style.fontSize="13px",o.style.fontWeight="normal",o.style.textAlign="center",o.style.background="#fff",o.style.color="#000",o.style.padding="1.5em",o.style.width="400px",o.style.margin="5em auto 0",s[e]?i=i.replace("$0","graphics card"):i=i.replace("$0","browser"),i=i.replace("$1",t[e]),o.innerHTML=i,o}static isWebGLAvailable(){console.warn("isWebGLAvailable() has been deprecated and will be removed in r178. Use isWebGL2Available() instead.");try{const e=document.createElement("canvas");return!!(window.WebGLRenderingContext&&(e.getContext("webgl")||e.getContext("experimental-webgl")))}catch{return!1}}static getWebGLErrorMessage(){return console.warn("getWebGLErrorMessage() has been deprecated and will be removed in r178. Use getWebGL2ErrorMessage() instead."),this._getErrorMessage(1)}}class ls{constructor(){if(console.log("Initializing enhanced renderer..."),Ue.isWebGL2Available())console.log("WebGL 2 is available.");else{const e=Ue.getWebGL2ErrorMessage();throw document.body.appendChild(e),console.error("WebGL 2 is required but not available."),new Error("WebGL 2 not available")}this.scene=new Qe,this.camera=new Je(50,window.innerWidth/window.innerHeight,.1,4e5),this.renderer=new Xe({antialias:!0,powerPreference:"high-performance",logarithmicDepthBuffer:!0,stencil:!0}),this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=ve,this.renderer.useLegacyLights=!1,this.renderer.toneMapping=Ze,this.renderer.toneMappingExposure=1,this.instancedMeshes=new Map,this.setupRenderer(),this.setupPostProcessing(),this.setupLighting(),this.setupResizeHandler(),console.log("Enhanced renderer initialized successfully")}setupRenderer(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.setClearColor(0),document.body.appendChild(this.renderer.domElement),this.renderer.outputColorSpace=$,this.camera.position.z=10,this.camera.far=4e5,this.camera.updateProjectionMatrix(),this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=ve,this.renderer.shadowMap.autoUpdate=!0}setupPostProcessing(){try{this.composer=new Pt(this.renderer);const e=new Tt(this.scene,this.camera);this.composer.addPass(e),this.setupGodRayEffects();try{this.bloomPass=new re(new U(window.innerWidth,window.innerHeight),.2,.2,.95),this.composer.addPass(this.bloomPass)}catch(t){console.warn("Error setting up UnrealBloomPass:",t)}try{const t=new oe(At);if(t.material&&t.material.uniforms&&t.material.uniforms.resolution){const s=this.renderer.getPixelRatio();t.material.uniforms.resolution.value.x=1/(window.innerWidth*s),t.material.uniforms.resolution.value.y=1/(window.innerHeight*s),this.composer.addPass(t)}else console.warn("FXAAShader uniforms not as expected, skipping pass")}catch(t){console.warn("Error setting up FXAAShader:",t)}try{this.colorCorrectionPass=new oe(Bt),this.colorCorrectionPass.uniforms&&this.colorCorrectionPass.uniforms.powRGB&&this.colorCorrectionPass.uniforms.mulRGB?(this.colorCorrectionPass.uniforms.powRGB.value=new f(1.1,1.1,1.2),this.colorCorrectionPass.uniforms.mulRGB.value=new f(1.2,1.1,1),this.composer.addPass(this.colorCorrectionPass)):console.warn("ColorCorrectionShader uniforms not as expected, skipping pass")}catch(t){console.warn("Error setting up ColorCorrectionShader:",t)}try{this.filmPass=new oe(Rt),this.filmPass.uniforms&&this.filmPass.uniforms.nIntensity&&this.filmPass.uniforms.sIntensity&&this.filmPass.uniforms.grayscale?(this.filmPass.uniforms.nIntensity.value=.15,this.filmPass.uniforms.sIntensity.value=.05,this.filmPass.uniforms.grayscale.value=0,this.composer.addPass(this.filmPass)):console.warn("FilmShader uniforms not as expected, skipping pass")}catch(t){console.warn("Error setting up FilmShader:",t)}try{this.vignettePass=new oe(Dt),this.vignettePass.uniforms&&this.vignettePass.uniforms.offset&&this.vignettePass.uniforms.darkness?(this.vignettePass.uniforms.offset.value=.95,this.vignettePass.uniforms.darkness.value=1.6,this.composer.addPass(this.vignettePass)):console.warn("VignetteShader uniforms not as expected, skipping pass")}catch(t){console.warn("Error setting up VignetteShader:",t)}console.log("Post-processing setup complete")}catch(e){console.error("Error setting up post-processing:",e),console.log("Continuing with basic rendering without post-processing"),this.useBasicRendering=!0}}setupGodRayEffects(){try{this.volumetricLightEnabled=!0,this.useClaudeRays=!1,this.claudeRayPass=this.createClaudeRayShader(),this.claudeRayPass.enabled=this.volumetricLightEnabled&&this.useClaudeRays,this.composer.addPass(this.claudeRayPass),console.log("Claude Rays effect created (disabled by default)"),this.godRayPass=this.createVolumetricLightShader(),this.godRayPass.enabled=this.volumetricLightEnabled&&!this.useClaudeRays,this.composer.addPass(this.godRayPass),console.log("New volumetric light ray effect added to post-processing chain")}catch(e){console.warn("Error setting up volumetric light shaders:",e)}}setupLighting(){const e=new Ke(4210768,1);this.scene.add(e),this.ambientLight=e;const t=new Te(16777184,2);t.position.set(1,.5,1).normalize(),t.castShadow=!0,t.shadow.mapSize.width=2048,t.shadow.mapSize.height=2048,t.shadow.camera.near=.5,t.shadow.camera.far=500,t.shadow.bias=-5e-4,this.scene.add(t);const s=new Te(11193599,.3);s.position.set(-1,-.3,-1).normalize(),this.scene.add(s);const i=new et(6316176,1052704,.4);this.scene.add(i);const o=new we(16777215,1.2,1200,2);o.position.set(0,500,0),this.scene.add(o)}setupResizeHandler(){window.addEventListener("resize",()=>{this.handleResize()})}getScene(){return this.scene}getCamera(){return this.camera}handleResize(){if(this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight),this.composer){this.composer.setSize(window.innerWidth,window.innerHeight);try{const e=this.renderer.getPixelRatio(),t=this.composer.passes.find(s=>s.material&&s.material.uniforms&&s.material.uniforms.resolution&&s.material.uniforms.resolution.value);t&&(t.material.uniforms.resolution.value.x=1/(window.innerWidth*e),t.material.uniforms.resolution.value.y=1/(window.innerHeight*e))}catch(e){console.warn("Error updating FXAA resolution:",e)}}}add(e){this.scene.add(e)}adjustBloom(e,t,s){this.bloomPass&&(this.bloomPass.strength=e!==void 0?e:this.bloomPass.strength,this.bloomPass.radius=t!==void 0?t:this.bloomPass.radius,this.bloomPass.threshold=s!==void 0?s:this.bloomPass.threshold)}update(e){if(this.filmPass&&this.filmPass.uniforms&&this.filmPass.uniforms.time&&this.filmPass.uniforms.time.value!==void 0)try{this.filmPass.uniforms.time.value+=e}catch(t){console.warn("Error updating film pass time:",t)}this.volumetricLightEnabled&&(this.useClaudeRays?this.updateClaudeRayPosition():this.updateVolumetricLightPosition()),this.updateInstancedMeshes()}updateClaudeRayPosition(){try{if(!this.claudeRayPass||!this.claudeRayPass.uniforms||!this.claudeRayPass.uniforms.lightPosition||!this.camera||!this.scene)return;let e=this.findSunObject();if(e){const t=new f;e.getWorldPosition(t);const s=t.clone();s.project(this.camera);const i=(s.x+1)/2,o=(s.y+1)/2;this.claudeRayPass.uniforms.lightPosition.value.set(i,o)}else this.claudeRayPass.uniforms.lightPosition.value.set(.5,.5)}catch(e){console.warn("Error updating Claude Ray position:",e),this.claudeRayPass&&this.claudeRayPass.uniforms&&this.claudeRayPass.uniforms.lightPosition&&this.claudeRayPass.uniforms.lightPosition.value.set(.5,.5)}}updateVolumetricLightPosition(){try{if(!this.godRayPass||!this.godRayPass.uniforms||!this.godRayPass.uniforms.lightPosition||!this.camera||!this.scene)return;let e=this.findSunObject();if(e){const t=new f;e.getWorldPosition(t);const s=t.clone();s.project(this.camera);const i=(s.x+1)/2,o=(s.y+1)/2,n=this.camera.position.distanceTo(t);this.godRayPass.uniforms.lightPosition.value.set(i,o);const r=Math.min(1,n/13e4);this.godRayPass.uniforms.sunDistance.value=r;const l=new f(0,0,-1).applyQuaternion(this.camera.quaternion),d=new f().subVectors(t,this.camera.position).normalize(),c=l.dot(d);this.godRayPass.uniforms.sunVisibility.value=Math.max(0,c)}else this.godRayPass.uniforms.lightPosition.value.set(.5,.5),this.godRayPass.uniforms.sunDistance.value=1,this.godRayPass.uniforms.sunVisibility.value=0}catch(e){console.warn("Error updating volumetric light position:",e),this.godRayPass&&this.godRayPass.uniforms&&(this.godRayPass.uniforms.lightPosition&&this.godRayPass.uniforms.lightPosition.value.set(.5,.5),this.godRayPass.uniforms.sunDistance&&(this.godRayPass.uniforms.sunDistance.value=1),this.godRayPass.uniforms.sunVisibility&&(this.godRayPass.uniforms.sunVisibility.value=0))}}findSunObject(){let e=null;return e=this.scene.getObjectByName("sun"),e||this.scene.traverse(t=>{t.name==="sun"&&(e=t)}),e}render(){this.composer&&!this.useBasicRendering?this.composer.render():this.renderer.render(this.scene,this.camera)}createInstancedMesh(e,t,s,i){const o=new tt(t,s,i);return o.count=0,o.frustumCulled=!0,this.scene.add(o),this.instancedMeshes.set(e,{mesh:o,count:0,maxCount:i,dummy:new st}),o}updateInstance(e,t,s,i,o){const n=this.instancedMeshes.get(e);if(!n)return-1;const a=t!==void 0?t:n.count;if(a>=n.count){if(a>=n.maxCount)return-1;n.count=a+1}return n.dummy.position.copy(s),i&&n.dummy.quaternion.copy(i),o&&n.dummy.scale.copy(o),n.dummy.updateMatrix(),n.mesh.setMatrixAt(a,n.dummy.matrix),n.mesh.instanceMatrix.needsUpdate=!0,a}updateInstancedMeshes(){for(const[e,t]of this.instancedMeshes.entries())t.mesh.instanceMatrix.needsUpdate&&(t.mesh.instanceMatrix.needsUpdate=!1)}removeInstance(e,t){const s=this.instancedMeshes.get(e);if(!(!s||t>=s.count)){if(t<s.count-1){const i=new fe;s.mesh.getMatrixAt(s.count-1,i),s.mesh.setMatrixAt(t,i)}s.count--,s.mesh.count=s.count,s.mesh.instanceMatrix.needsUpdate=!0}}dispose(){console.log("Disposing renderer resources..."),window.removeEventListener("resize",this.handleResize),this.composer&&this.composer.passes.forEach(e=>{e.dispose&&e.dispose(),e.material&&e.material.dispose()}),this.instancedMeshes.forEach(e=>{e.mesh&&(e.mesh.geometry&&e.mesh.geometry.dispose(),e.mesh.material&&(Array.isArray(e.mesh.material)?e.mesh.material.forEach(t=>t.dispose()):e.mesh.material.dispose()),this.scene.remove(e.mesh))}),this.scene.traverse(e=>{e.geometry&&e.geometry.dispose(),e.material&&(Array.isArray(e.material)?e.material.forEach(t=>this.disposeMaterial(t)):this.disposeMaterial(e.material))}),this.renderer.dispose(),console.log("Renderer resources disposed")}disposeMaterial(e){for(const t in e){const s=e[t];s&&s.isTexture&&s.dispose()}e.dispose()}createVolumetricLightShader(){const e={uniforms:{tDiffuse:{value:null},lightPosition:{value:new U(.5,.5)},intensity:{value:.45},decay:{value:.94},density:{value:.6},weight:{value:.5},samples:{value:100},sunColor:{value:new M(16775920)},sunDistance:{value:.5},sunVisibility:{value:1},scattering:{value:.4},attenuationMultiplier:{value:3.5}},vertexShader:`
                varying vec2 vUv;
                
                void main() {
                    vUv = uv;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                }
            `,fragmentShader:`
                precision highp float;
                
                varying vec2 vUv;
                uniform sampler2D tDiffuse;
                uniform vec2 lightPosition;
                uniform float intensity;
                uniform float decay;
                uniform float density;
                uniform float weight;
                uniform int samples;
                uniform vec3 sunColor;
                uniform float sunDistance;
                uniform float sunVisibility;
                uniform float scattering;
                uniform float attenuationMultiplier;
                
                const int MAX_SAMPLES = 150;
                
                float illuminationDecay(float rayProgress, float dist) {
                    // rayProgress: 0.0 to a1.0 (how far along the ray)
                    // dist: normalized distance to sun (0 = close, 1 = far)
                    
                    // Base decay from exponential falloff
                    float baseFalloff = pow(decay, rayProgress * 100.0);
                    
                    // More decay the further the sun is 
                    float distanceAttenuation = 1.0 - (dist * dist * attenuationMultiplier);
                    distanceAttenuation = max(0.0, distanceAttenuation);
                    
                    // Apply visibility factor
                    float visibilityFactor = sunVisibility;
                    
                    return baseFalloff * distanceAttenuation * visibilityFactor;
                }
                
                void main() {
                    // Get the texture color (original scene)
                    vec4 sceneColor = texture2D(tDiffuse, vUv);
                    
                    // Calculate ray direction from pixel to light source
                    vec2 rayVector = (vUv - lightPosition);
                    float rayLength = length(rayVector);
                    vec2 rayDirection = normalize(rayVector);
                    
                    // Skip calculation if ray is too long (reduces artifacts far from sun)
                    if (rayLength > 1.0) {
                        gl_FragColor = sceneColor;
                        return;
                    }
                    
                    // Angle factor (rays stronger when looking near sun)
                    float angleFactor = 1.0 - rayLength;
                    angleFactor = pow(angleFactor, 0.8); // Adjust the power for ray spread
                    
                    // Calculate ray sampling parameters
                    vec2 sampleStep = -rayDirection * min(density, 1.0) / float(samples);
                    
                    // Use a tighter sampling box around the light source
                    // This creates more defined rays and reduces artifacts
                    float rayProgress = max(0.0, (1.0 - rayLength * 2.0)); // Start closer to light source
                    vec2 samplePosition = vUv - sampleStep * rayProgress * 10.0; // Start closer to current position
                    
                    // Clamp sample count for performance
                    int sampleCount = min(samples, MAX_SAMPLES);
                    
                    // Start with current scene color
                    vec4 finalColor = sceneColor;
                    
                    // Calculate scattering factor based on distance and angle
                    float scatterFactor = scattering * angleFactor * (1.0 - sunDistance * 0.5);
                    
                    // Sample the light path
                    for (int i = 0; i < MAX_SAMPLES; i++) {
                        if (i >= sampleCount) break;
                        
                        // Move along the ray
                        samplePosition += sampleStep;
                        
                        // Sample at the current position
                        vec4 sampledColor = texture2D(tDiffuse, samplePosition);
                        
                        // Calculate illumination decay factor
                        float decayFactor = illuminationDecay(float(i) / float(sampleCount), sunDistance);
                        
                        // Create the ray sample with attenuation
                        vec4 raySample = sampledColor * decayFactor * weight;
                        
                        // Apply sun color to the ray (tinted by scene color)
                        raySample.rgb *= mix(sunColor, sampledColor.rgb, 0.3);
                        
                        // Apply scattering effect - brightens areas around sun
                        if (i < sampleCount / 3) {
                            raySample.rgb += sunColor * scatterFactor * decayFactor * 0.2 * (1.0 - float(i) / float(sampleCount / 3));
                        }
                        
                        // Add to accumulated color
                        finalColor += raySample;
                    }
                    
                    // Apply master intensity factor
                    finalColor *= mix(1.0, intensity, sunVisibility);
                    
                    // Preserve original scene color with a blend factor
                    finalColor = mix(sceneColor, finalColor, min(0.95, intensity * sunVisibility));
                    
                    gl_FragColor = finalColor;
                }
            `},t=new oe(e);return t.renderToScreen=!1,t}createClaudeRayShader(){const e={uniforms:{tDiffuse:{value:null},lightPosition:{value:new U(.5,.5)},exposure:{value:.4},decay:{value:.93},density:{value:.8},weight:{value:.25},lightColor:{value:new M(16775920)}},vertexShader:`
                varying vec2 vUv;
                void main() {
                    vUv = uv;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                }
            `,fragmentShader:`
                precision highp float;
                
                varying vec2 vUv;
                uniform sampler2D tDiffuse;
                uniform vec2 lightPosition;
                uniform float exposure;
                uniform float decay;
                uniform float density;
                uniform float weight;
                uniform vec3 lightColor;
                
                const int NUM_SAMPLES = 24; // Reduced from 30 for better balance of quality and performance
                
                void main() {
                    // Get the texture color
                    vec4 color = texture2D(tDiffuse, vUv);
                    
                    // Ray direction
                    vec2 texCoord = vUv;
                    vec2 deltaTextCoord = (texCoord - lightPosition) * density / float(NUM_SAMPLES);
                    
                    // Start illumination decay at 1.0
                    float illuminationDecay = 1.0;
                    
                    // Sample the light path with a fixed number of steps
                    for(int i = 0; i < NUM_SAMPLES; i++) {
                        // Move along the ray
                        texCoord -= deltaTextCoord;
                        
                        // Sample at the current position
                        vec4 sampleColor = texture2D(tDiffuse, texCoord);
                        
                        // Apply decay and weight
                        sampleColor *= illuminationDecay * weight;
                        
                        // Apply light color
                        sampleColor.rgb *= lightColor;
                        
                        // Add to the final color
                        color += sampleColor;
                        
                        // Reduce illumination for the next sample
                        illuminationDecay *= decay;
                    }
                    
                    // Apply exposure
                    color *= exposure;
                    
                    // Output the final color
                    gl_FragColor = color;
                }
            `},t=new oe(e);return t.renderToScreen=!1,t}setRayType(e){this.useClaudeRays=e,this.claudeRayPass&&(this.claudeRayPass.enabled=this.volumetricLightEnabled&&this.useClaudeRays),this.godRayPass&&(this.godRayPass.enabled=this.volumetricLightEnabled&&!this.useClaudeRays),this.adjustLightingForRayType(),console.log(`Using ${this.useClaudeRays?"Claude Rays":"Volumetric God Rays"} effect`)}adjustLightingForRayType(){this.ambientLight&&(this.useClaudeRays?this.ambientLight.intensity=1:this.ambientLight.intensity=1.8)}setVolumetricLightEnabled(e){this.volumetricLightEnabled=e,this.useClaudeRays&&this.claudeRayPass?this.claudeRayPass.enabled=e:this.godRayPass&&(this.godRayPass.enabled=e),console.log(`Volumetric lighting ${e?"enabled":"disabled"}`)}updateVolumetricLightParams(e={}){if(!this.godRayPass||!this.godRayPass.uniforms)return;const t=this.godRayPass.uniforms;e.intensity!==void 0&&(t.intensity.value=e.intensity),e.decay!==void 0&&(t.decay.value=e.decay),e.density!==void 0&&(t.density.value=e.density),e.weight!==void 0&&(t.weight.value=e.weight),e.samples!==void 0&&(t.samples.value=e.samples),e.sunColor!==void 0&&(t.sunColor.value=new M(e.sunColor)),e.scattering!==void 0&&(t.scattering.value=e.scattering),e.attenuationMultiplier!==void 0&&(t.attenuationMultiplier.value=e.attenuationMultiplier)}updateClaudeRayParams(e={}){if(!this.claudeRayPass||!this.claudeRayPass.uniforms)return;const t=this.claudeRayPass.uniforms;e.exposure!==void 0&&(t.exposure.value=e.exposure),e.decay!==void 0&&(t.decay.value=e.decay),e.density!==void 0&&(t.density.value=e.density),e.weight!==void 0&&(t.weight.value=e.weight),e.lightColor!==void 0&&(t.lightColor.value=new M(e.lightColor))}setVolumetricLightIntensity(e){if(this.useClaudeRays){if(!this.claudeRayPass||!this.claudeRayPass.uniforms)return;e=Math.max(0,Math.min(1,e));const t=.2+e*.4,s=.15+e*.25,i=.7+e*.3;this.updateClaudeRayParams({exposure:t,weight:s,density:i})}else{if(!this.godRayPass||!this.godRayPass.uniforms)return;e=Math.max(0,Math.min(1,e)),this.updateVolumetricLightParams({intensity:.3+e*.4,weight:.35+e*.3,density:.45+e*.25,scattering:.25+e*.25})}console.log(`Volumetric light intensity set to ${e.toFixed(2)}`)}}class cs{constructor(e){this.scene=e,this.mesh=null,this.thrusters=[],this.leftCannon=null,this.rightCannon=null,this.leftEmitter=null,this.rightEmitter=null,this.miningLaser=null,this.velocity=new f(0,0,0),this.rotation=new ae(0,0,0),this.thrust={forward:!1,backward:!1,left:!1,right:!1,boost:!1},this.particleSystems=[],this.trailParticles=null,this.shipScale=2,this.hull=100,this.maxHull=100,this.shield=50,this.maxShield=50,this.isDestroyed=!1,this.fuel=100,this.maxFuel=100,this.fuelConsumptionRate=.01,this.isDocked=!0,this.credits=1e3,this.cargo={iron:0,gold:0,platinum:0},this.fuelTankLevel=1,this.fuelUpgradeCost=1e3,this.engineLevel=1,this.engineUpgradeCost=800,this.maxVelocity=25,this.miningLevel=1,this.miningUpgradeCost=1200,this.miningEfficiency=1,this.hullLevel=1,this.hullUpgradeCost=1500,this.collisionResistance=1,this.scannerLevel=1,this.scannerUpgradeCost=600,this.scanRange=1e3,this.deployableLaserCount=0,this.undockLocation=new f(0,1e4,0),console.log("Creating spaceship..."),this.createSpaceship(),this.createTrailEffect(),this.mesh&&(this.mesh.visible=!1),console.log("Spaceship created successfully (docked state)")}update(e){this.updateParticles&&!this.isDocked&&this.updateParticles()}createSpaceship(){this.mesh=new G,this.mesh.scale.set(this.shipScale,this.shipScale,this.shipScale),this.mesh.position.set(0,2e3,0);const e=new G,t=new ye(.4,.5,1.8,12),s=new ee({color:16777215,specular:16766720,shininess:100,emissive:2236962,emissiveIntensity:.1}),i=new w(t,s);i.rotation.x=Math.PI/2,e.add(i);const o=new it(.4,.8,12),n=new w(o,s);n.position.set(0,0,-1.2),n.rotation.x=-Math.PI/2,e.add(n),this.mesh.add(e);const a=new N(.35,16,16,0,Math.PI*2,0,Math.PI/2),r=new ee({color:8965375,specular:16777215,shininess:100,transparent:!0,opacity:.7,emissive:26367,emissiveIntensity:.1}),l=new w(a,r);l.position.set(0,.25,-.2),l.rotation.x=-Math.PI/2,this.mesh.add(l);const d=new ye(.08,.06,2,8),c=new ee({color:16766720,specular:16777215,shininess:80,emissive:16766720,emissiveIntensity:.2});this.leftCannon=new w(d,c),this.leftCannon.position.set(.2,0,-1.5),this.leftCannon.rotation.x=Math.PI/2,this.mesh.add(this.leftCannon),this.rightCannon=new w(d,c),this.rightCannon.position.set(-.2,0,-1.5),this.rightCannon.rotation.x=Math.PI/2,this.mesh.add(this.rightCannon);const h=new N(.08,16,16),u=new ee({color:16737792,emissive:16724736,emissiveIntensity:1});this.leftEmitter=new w(h,u),this.leftEmitter.position.set(.2,0,-2.5),this.mesh.add(this.leftEmitter),this.rightEmitter=new w(h,u),this.rightEmitter.position.set(-.2,0,-2.5),this.mesh.add(this.rightEmitter),this.miningLaser=this.leftEmitter;const p=D=>{const F=new G,B=new ee({color:16777215,specular:16766720,shininess:80,emissive:16777215,emissiveIntensity:.1}),K=new ne(.1,.2,.6),J=new w(K,B);J.position.set(D?.55:-.55,0,.2),F.add(J);const se=new ne(.8,.1,.5),R=new w(se,B);R.position.set(D?1:-1,0,.2),R.rotation.z=D?Math.PI/8:-Math.PI/8,F.add(R);const he=new ne(.3,.08,.3),L=new ee({color:16766720,specular:16777215,shininess:100,emissive:16766720,emissiveIntensity:.3}),C=new w(he,L);return C.position.set(D?1.4:-1.4,0,.2),C.rotation.z=D?Math.PI/6:-Math.PI/6,F.add(C),F},y=p(!0);this.mesh.add(y);const m=p(!1);this.mesh.add(m);const v=(D,F,B,K,J,se,R=0,he=0,L=0)=>{const C=new ne(D,F,B),b=new ee({color:16766720,specular:16777215,shininess:100,emissive:16766720,emissiveIntensity:.3}),H=new w(C,b);return H.position.set(K,J,se),H.rotation.set(R,he,L),this.mesh.add(H),H};v(.8,.05,.1,0,-.25,-.3),v(.8,.05,.1,0,-.25,.3),v(.05,.05,1,.3,-.25,0),v(.05,.05,1,-.3,-.25,0);const k=new ye(.2,.15,.5,8),S=new ee({color:16766720,emissive:16733440,emissiveIntensity:.5}),x=new w(k,S);x.position.z=1.2,x.rotation.x=Math.PI,this.mesh.add(x),this.thrusters.push({mesh:x,type:"main"});const E=new w(k.clone(),S.clone());E.position.z=-1,E.rotation.x=0,E.scale.set(.6,.6,.6),this.mesh.add(E),this.thrusters.push({mesh:E,type:"reverse"});const P=new w(k.clone(),S.clone());P.position.set(.5,0,.5),P.rotation.z=Math.PI/2,P.scale.set(.5,.5,.5),this.mesh.add(P),this.thrusters.push({mesh:P,type:"left"});const A=new w(k.clone(),S.clone());A.position.set(-.5,0,.5),A.rotation.z=-Math.PI/2,A.scale.set(.5,.5,.5),this.mesh.add(A),this.thrusters.push({mesh:A,type:"right"}),this.scene.add(this.mesh),this.createThrusterParticles()}activateMiningLaser(){this.leftEmitter&&this.rightEmitter&&(this.leftEmitter.material.emissiveIntensity=1.5,this.leftEmitter.scale.set(1.2,1.2,1.2),this.rightEmitter.material.emissiveIntensity=1.5,this.rightEmitter.scale.set(1.2,1.2,1.2))}deactivateMiningLaser(){this.leftEmitter&&this.rightEmitter&&(this.leftEmitter.material.emissiveIntensity=1,this.leftEmitter.scale.set(1,1,1),this.rightEmitter.material.emissiveIntensity=1,this.rightEmitter.scale.set(1,1,1))}createThrusterParticles(){const t=(s,i,o,n,a=16733440)=>{const r=new Float32Array(450);for(let h=0;h<150;h++){const u=h*3;r[u]=(Math.random()-.5)*o.x*.7,r[u+1]=(Math.random()-.5)*o.y*.7,r[u+2]=Math.random()*o.z*.7}const l=new q;l.setAttribute("position",new _(r,3));const d=new te({color:a,size:.04,transparent:!0,opacity:.6,blending:z}),c=new Z(l,d);return c.visible=!1,c.position.copy(s),i&&c.rotation.copy(i),this.mesh.add(c),{system:c,geometry:l,positions:r,type:n,baseSize:o}};this.particleSystems.push(t(new f(0,0,1.1),new ae(Math.PI,0,0),new f(.15,.15,2),"main",16729088)),this.particleSystems.push(t(new f(.5,0,.5),new ae(0,0,Math.PI/2),new f(.08,.08,.8),"left",16724736)),this.particleSystems.push(t(new f(-.5,0,.5),new ae(0,0,-Math.PI/2),new f(.08,.08,.8),"right",16724736)),this.particleSystems.push(t(new f(0,0,-1.1),new ae(0,0,0),new f(.15,.15,1.4),"reverse",4508927))}createTrailEffect(){const t=new q,s=new Float32Array(1800*3),i=new Float32Array(1800*3),o=new Float32Array(1800*3),n=new Float32Array(1800);for(let r=0;r<1800;r++){const l=r*3;s[l]=Math.floor((Math.random()-.5)*10)/10*.4,s[l+1]=Math.floor((Math.random()-.5)*10)/10*.4,s[l+2]=1.8+Math.random()*.4,i[l]=(Math.random()-.5)*.008,i[l+1]=(Math.random()-.5)*.008,i[l+2]=.12+Math.random()*.05;const d=Math.floor(Math.random()*3);d===0?(o[l]=0,o[l+1]=.7+Math.random()*.3,o[l+2]=.8+Math.random()*.2):d===1?(o[l]=.7+Math.random()*.3,o[l+1]=0,o[l+2]=.8+Math.random()*.2):(o[l]=0,o[l+1]=.9+Math.random()*.1,o[l+2]=.4+Math.random()*.2),n[r]=Math.random()<.7?.8+Math.random()*.4:1.5+Math.random()*.5}t.setAttribute("position",new _(s,3)),t.setAttribute("customColor",new _(o,3)),t.setAttribute("size",new _(n,1));const a=new j({uniforms:{color:{value:new M(65535)},pointTexture:{value:new Ce().load("https://threejs.org/examples/textures/sprites/spark1.png")}},vertexShader:`
                attribute float size;
                attribute vec3 customColor;
                varying vec3 vColor;
                void main() {
                    vColor = customColor;
                    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
                    
                    // Add slight "digital jitter" to the position for glitch effect
                    if (mod(mvPosition.y * 10.0, 4.0) < 0.1) {
                        mvPosition.x += sin(mvPosition.z) * 0.05;
                    }
                    
                    gl_PointSize = size * (180.0 / -mvPosition.z); // Adjusted size calculation
                    gl_Position = projectionMatrix * mvPosition;
                }
            `,fragmentShader:`
                uniform vec3 color;
                uniform sampler2D pointTexture;
                varying vec3 vColor;
                void main() {
                    // Create more angular particles by manipulating texture coordinates
                    vec2 uv = gl_PointCoord;
                    
                    // Digital distortion effect - occasional "glitch" lines
                    if (mod(gl_FragCoord.y, 16.0) < 0.5) {
                        uv.x = mod(uv.x + sin(uv.y * 10.0) * 0.1, 1.0);
                    }
                    
                    // Apply texture with the modified coordinates
                    vec4 texColor = texture2D(pointTexture, uv);
                    
                    // Sharper edges for angular look
                    texColor.a = step(0.2, texColor.r);
                    
                    // Combine with color
                    gl_FragColor = vec4(color * vColor, 0.75) * texColor;
                    
                    // Hard cutoff for sharper particle edges
                    if (gl_FragColor.a < 0.2) discard;
                }
            `,blending:z,depthTest:!1,transparent:!0});a.uniforms.pointTexture.value.colorSpace=$,this.trailParticles=new Z(t,a),this.trailParticles.visible=!1,this.mesh.add(this.trailParticles),this.trailParticles.userData={positions:s,velocities:i,colors:o}}updateParticles(){if(this.particleSystems&&(this.particleSystems.forEach(e=>{if(e.system.visible){const t=e.positions,s=e.baseSize;for(let i=0;i<t.length;i+=3)t[i]+=(Math.random()-.5)*.02,t[i+1]+=(Math.random()-.5)*.02,t[i+2]+=.15,t[i]+=(Math.random()-.5)*.01,t[i+1]+=(Math.random()-.5)*.01,t[i+2]>s.z&&(t[i]=(Math.random()-.5)*s.x,t[i+1]=(Math.random()-.5)*s.y,t[i+2]=0);e.geometry.attributes.position.needsUpdate=!0}}),this.trailParticles&&this.trailParticles.visible)){const e=this.trailParticles.userData.positions,t=this.trailParticles.userData.velocities,s=this.trailParticles.userData.colors,i=this.velocity.length()/8;for(let o=0;o<e.length;o+=3){Math.random()<.01&&(e[o]+=(Math.random()-.5)*.2,e[o+1]+=(Math.random()-.5)*.2);const n=Math.random()<.05?0:1;if(e[o]+=t[o]*i*n,e[o+1]+=t[o+1]*i*n,e[o+2]+=t[o+2]*i*n,Math.random()<.005){const r=s[o];s[o]=s[o+2],s[o+2]=r}if(s[o]*=.99,s[o+1]*=.99,s[o+2]*=.99,Math.sqrt(e[o]*e[o]+e[o+1]*e[o+1]+e[o+2]*e[o+2])>45||s[o]+s[o+1]+s[o+2]<.3){e[o]=Math.floor((Math.random()-.5)*10)/10*.4,e[o+1]=Math.floor((Math.random()-.5)*10)/10*.4,e[o+2]=1.8+Math.random()*.4,t[o]=(Math.random()-.5)*.008,t[o+1]=(Math.random()-.5)*.008,t[o+2]=.12+Math.random()*.05;const r=Math.floor(Math.random()*3);r===0?(s[o]=0,s[o+1]=.7+Math.random()*.3,s[o+2]=.8+Math.random()*.2):r===1?(s[o]=.7+Math.random()*.3,s[o+1]=0,s[o+2]=.8+Math.random()*.2):(s[o]=0,s[o+1]=.9+Math.random()*.1,s[o+2]=.4+Math.random()*.2)}}this.trailParticles.geometry.attributes.position.needsUpdate=!0,this.trailParticles.geometry.attributes.customColor.needsUpdate=!0}}dock(){console.log("Docking spaceship"),console.log("Spaceship values before docking:",{shield:this.shield,maxShield:this.maxShield,hull:this.hull,maxHull:this.maxHull,isDocked:this.isDocked}),this.isDocked=!0,this.velocity.set(0,0,0),this.mesh.visible=!1,console.log("Spaceship values after docking:",{shield:this.shield,maxShield:this.maxShield,hull:this.hull,maxHull:this.maxHull,isDocked:this.isDocked})}undock(){console.log("Undocking spaceship"),console.log("Spaceship values before undocking:",{shield:this.shield,maxShield:this.maxShield,hull:this.hull,maxHull:this.maxHull,isDocked:this.isDocked});const e=this.shield;if(this.isDocked=!1,this.mesh.visible=!0,this.shield!==e&&(console.log(`SHIELD RESET DETECTED during undock! Value changed from ${e} to ${this.shield}`),console.log("Restoring shield value to:",e),this.shield=e),console.log("Spaceship values after undocking:",{shield:this.shield,maxShield:this.maxShield,hull:this.hull,maxHull:this.maxHull,isDocked:this.isDocked}),this.syncValuesToHealthComponent(),this.undockLocation)this.mesh.position.copy(this.undockLocation),this.mesh.rotation.set(Math.PI/2,0,0);else{const t=this.scene.getObjectByName("stargate").position.clone();t.z+=550,this.mesh.position.copy(t),this.mesh.rotation.set(0,Math.PI,0)}return this.velocity.set(0,0,0),this.mesh.position.clone()}refuel(){return console.log("Refueling spaceship"),this.fuel=this.maxFuel,100}repairShield(){const e=this.shield;if(console.log("===== SHIELD REPAIR INITIATED ====="),console.log(`Repairing shield: ${e} → ${this.maxShield}`),this.shield=this.maxShield,console.log(`Shield value is now: ${this.shield} (Expected: ${this.maxShield})`),console.log("Full spaceship state after shield repair:",{shield:this.shield,maxShield:this.maxShield,hull:this.hull,maxHull:this.maxHull,fuel:this.fuel,maxFuel:this.maxFuel}),console.log("===== SHIELD REPAIR COMPLETED ====="),window.game&&window.game.world)try{const t=window.game.world.getEntitiesByTag("player");if(t&&t.length>0){const s=t[0].getComponent("HealthComponent");if(s){const i=s.shield;s.shield=this.shield,console.log(`Direct shield update on HealthComponent: ${i} → ${s.shield}`)}}}catch(t){console.error("Error during direct HealthComponent update:",t)}return this.syncValuesToHealthComponent(),150}repairHull(){const e=this.hull;if(console.log("===== HULL REPAIR INITIATED ====="),console.log(`Repairing hull: ${e} → ${this.maxHull}`),this.hull=this.maxHull,console.log(`Hull value is now: ${this.hull} (Expected: ${this.maxHull})`),console.log("Full spaceship state after hull repair:",{shield:this.shield,maxShield:this.maxShield,hull:this.hull,maxHull:this.maxHull,fuel:this.fuel,maxFuel:this.maxFuel}),console.log("===== HULL REPAIR COMPLETED ====="),window.game&&window.game.world)try{const t=window.game.world.getEntitiesByTag("player");if(t&&t.length>0){const s=t[0].getComponent("HealthComponent");if(s){const i=s.health;s.health=this.hull,console.log(`Direct hull update on HealthComponent: ${i} → ${s.health}`)}}}catch(t){console.error("Error during direct HealthComponent update:",t)}return this.syncValuesToHealthComponent(),200}consumeFuel(){if(this.thrust.forward||this.thrust.backward||this.thrust.left||this.thrust.right){let e=this.fuelConsumptionRate;this.thrust.boost&&(e*=3),this.fuel=Math.max(0,this.fuel-e)}return this.fuel>0}upgradeFuelTank(){return console.log("Upgrading fuel tank"),this.maxFuel*=2,this.fuel=this.maxFuel,this.fuelTankLevel++,this.fuelUpgradeCost*=4,this.maxFuel}upgradeEngine(){return console.log("Upgrading engines"),this.maxVelocity*=1.25,this.thrusters.forEach(e=>{e.mesh&&e.mesh.material&&(e.mesh.material.emissiveIntensity+=.2,this.engineLevel%2===0?e.mesh.material.emissive.setHex(16746496):e.mesh.material.emissive.setHex(16755200))}),this.engineLevel++,this.engineUpgradeCost=Math.floor(this.engineUpgradeCost*2.5),this.maxVelocity}upgradeMiningLaser(){if(console.log("Upgrading mining laser"),this.miningEfficiency*=1.3,this.leftEmitter&&this.leftEmitter.material){this.leftEmitter.scale.set(1.1,1.1,1.1);const e=[16711680,16733440,16750848,16763904,16772608];this.miningLevel<e.length&&(this.leftEmitter.material.color.setHex(e[this.miningLevel]),this.leftEmitter.material.emissive.setHex(e[this.miningLevel])),this.leftEmitter.material.emissiveIntensity+=.2}if(this.rightEmitter&&this.rightEmitter.material){this.rightEmitter.scale.set(1.1,1.1,1.1);const e=[16711680,16733440,16750848,16763904,16772608];this.miningLevel<e.length&&(this.rightEmitter.material.color.setHex(e[this.miningLevel]),this.rightEmitter.material.emissive.setHex(e[this.miningLevel])),this.rightEmitter.material.emissiveIntensity+=.2}return this.leftCannon&&this.leftCannon.material&&(this.leftCannon.scale.x*=1.1,this.leftCannon.scale.y*=1.1),this.rightCannon&&this.rightCannon.material&&(this.rightCannon.scale.x*=1.1,this.rightCannon.scale.y*=1.1),this.miningLevel++,this.miningUpgradeCost=Math.floor(this.miningUpgradeCost*3),this.miningEfficiency}upgradeHull(){console.log("Upgrading hull"),this.collisionResistance*=1.25;const e=this.mesh.children.find(t=>t instanceof G);return e&&e.children&&e.children.forEach(t=>{t instanceof w&&t.material&&(this.hullLevel%2===0?t.material.color.setHex(3195088):t.material.color.setHex(3199168),t.material.shininess+=10)}),this.hullLevel++,this.hullUpgradeCost=Math.floor(this.hullUpgradeCost*2),this.collisionResistance}upgradeScanner(){return console.log("Upgrading scanner"),this.scanRange*=1.2,this.scannerLevel++,this.scannerUpgradeCost=Math.floor(this.scannerUpgradeCost*1.8),this.scanRange}updateTrailVisibility(e){this.trailParticles&&(this.trailParticles.visible=e)}subscribeToDestructionEvents(e){e&&(e.subscribe("entity.destroyed",t=>{const s=t.data.entity;if(s&&s.hasTag&&s.hasTag("player")){console.log("Player entity destroyed - updating spaceship state"),this.isDestroyed=!0;const i=s.getComponent("HealthComponent");i?(this.hull=i.health,this.shield=i.shield):(this.hull=0,this.shield=0),this.handleDestruction()}}),console.log("Spaceship subscribed to destruction events"))}handleDestruction(){this.mesh&&(this.particleSystems.forEach(e=>{e&&e.system&&(e.system.visible=!1)}),this.trailParticles&&(this.trailParticles.visible=!1))}syncValuesToHealthComponent(){console.log("Beginning shield and hull sync to HealthComponent"),console.log("Current spaceship values:",{shield:this.shield,maxShield:this.maxShield,hull:this.hull,maxHull:this.maxHull});const e={shield:this.shield,maxShield:this.maxShield,hull:this.hull,maxHull:this.maxHull};console.log(`Preparing to sync values to player HealthComponent: Shield=${this.shield}, Hull=${this.hull}`);try{window.game&&window.game.messageBus?(window.game.messageBus.publish("player.syncHealth",e),console.log("Published player.syncHealth event to game.messageBus with values:",e)):window.mainMessageBus?(window.mainMessageBus.publish("player.syncHealth",e),console.log("Published player.syncHealth event to mainMessageBus with values:",e)):console.warn("No message bus available to sync health values")}catch(t){console.error("Error publishing sync event:",t)}try{if(window.game&&window.game.world){const t=window.game.world.getEntitiesByTag("player");if(console.log(`Found ${t?t.length:0} player entities for direct sync`),t&&t.length>0){const i=t[0].getComponent("HealthComponent");if(i){console.log("DIRECT SYNC - HealthComponent before sync:",{shield:i.shield,maxShield:i.maxShield,health:i.health,maxHealth:i.maxHealth}),console.log("DIRECT SYNC - Spaceship values to sync:",{shield:this.shield,maxShield:this.maxShield,hull:this.hull,maxHull:this.maxHull});const o=i.shield;i.shield=this.shield,i.maxShield=this.maxShield;const n=i.health;i.health=this.hull,i.maxHealth=this.maxHull,console.log(`Directly synced values to HealthComponent: Shield ${o} → ${i.shield}, Hull ${n} → ${i.health}`),console.log("DIRECT SYNC - HealthComponent after sync:",{shield:i.shield,maxShield:i.maxShield,health:i.health,maxHealth:i.maxHealth})}else console.warn("Player entity found but has no HealthComponent")}else console.warn("No player entities found for direct sync")}}catch(t){console.error("Error directly syncing values to HealthComponent:",t)}}}const O=class O{constructor(e){this.scene=e,this.spaceship=null,this.camera=null,this.rotationState={x:0,y:0},this.collided=!1,this.raycaster=new ot,this.direction=new f(0,0,-1),this.collisionDistance=O.COLLISION_DISTANCE}setSpaceship(e){this.spaceship=e}setCamera(e){this.camera=e}update(e){if(!this.spaceship||this.spaceship.isDestroyed||this.spaceship.isDocked||window.game&&window.game.introSequenceActive)return;this.normalizedDeltaTime=e*60;const t=this.spaceship.consumeFuel();let s=new f(0,0,0),i=!1;const o=new f(0,0,-1);o.applyQuaternion(this.spaceship.mesh.quaternion);const n=o.dot(this.spaceship.velocity),a=this.spaceship.particleSystems.find(m=>m.type==="main"),r=this.spaceship.thrusters.find(m=>m.type==="main"),l=this.spaceship.particleSystems.find(m=>m.type==="reverse"),d=this.spaceship.thrusters.find(m=>m.type==="reverse"),c=this.spaceship.particleSystems.find(m=>m.type==="left"),h=this.spaceship.thrusters.find(m=>m.type==="left"),u=this.spaceship.particleSystems.find(m=>m.type==="right"),p=this.spaceship.thrusters.find(m=>m.type==="right");if(t){if(this.spaceship.thrust.forward){i=!0;const m=new f(0,0,-.5);this.spaceship.thrust.boost&&m.multiplyScalar(O.BOOST_MULTIPLIER),s.add(m),a&&(a.system.visible=!0,r&&(r.mesh.material.emissiveIntensity=this.spaceship.thrust.boost?1.5:1,this.spaceship.thrust.boost?r.mesh.material.emissive.setHex(16746496):r.mesh.material.emissive.setHex(16733440)))}else if(n>5&&a){const m=this.getMaxVelocity(),v=Math.min(n/m,.8);a.system.visible=!0,r&&(r.mesh.material.emissiveIntensity=v*.8,r.mesh.material.emissive.setHex(16724736))}else a&&(a.system.visible=!1,r&&(r.mesh.material.emissiveIntensity=.5,r.mesh.material.emissive.setHex(16733440)));if(this.spaceship.thrust.backward)i=!0,s.add(new f(0,0,O.THRUST_FORCE)),l&&(l.system.visible=!0,d&&(d.mesh.material.emissiveIntensity=1,d.mesh.material.emissive.setHex(3394815)));else if(n<-5){if(l&&(l.system.visible=!0,d)){const m=this.getMaxVelocity(),v=Math.min(Math.abs(n)/m,.8);d.mesh.material.emissiveIntensity=v*.8}}else l&&(l.system.visible=!1,d&&(d.mesh.material.emissiveIntensity=.5,d.mesh.material.emissive.setHex(3394815)));if(this.spaceship.thrust.left?(i=!0,s.add(new f(O.THRUST_FORCE,0,0)),u&&(u.system.visible=!0,p&&(p.mesh.material.emissiveIntensity=.8))):u&&(u.system.visible=!1,p&&(p.mesh.material.emissiveIntensity=.5)),this.spaceship.thrust.right?(i=!0,s.add(new f(-.5,0,0)),c&&(c.system.visible=!0,h&&(h.mesh.material.emissiveIntensity=.8))):c&&(c.system.visible=!1,h&&(h.mesh.material.emissiveIntensity=.5)),i){s.applyQuaternion(this.spaceship.mesh.quaternion),s.multiplyScalar(this.normalizedDeltaTime),this.spaceship.velocity.add(s);const m=this.getMaxVelocity();this.spaceship.velocity.length()>m&&this.spaceship.velocity.normalize().multiplyScalar(m)}}if(!i&&this.spaceship.velocity.length()>0){const m=O.FRICTION*this.normalizedDeltaTime;this.spaceship.velocity.length()>m?this.spaceship.velocity.multiplyScalar(1-m):this.spaceship.velocity.set(0,0,0)}const y=this.spaceship.velocity.clone().multiplyScalar(this.normalizedDeltaTime);if(this.spaceship.mesh.position.add(y),this.updateShipRotation(),this.updateCamera(),this.spaceship.updateParticles){const m=this.spaceship.thrust.forward;this.spaceship.updateTrailVisibility(m),this.spaceship.updateParticles()}this.checkCollisions()}getMaxVelocity(){return this.spaceship&&this.spaceship.maxVelocity?this.spaceship.maxVelocity:O.MAX_VELOCITY}updateShipRotation(){if(!this.spaceship)return;const e=Math.PI*.45;this.rotationState.y=Math.max(Math.min(this.rotationState.y,e),-e);const t=new ae(this.rotationState.y,this.rotationState.x,0,"YXZ"),s=new nt().setFromEuler(t);this.spaceship.mesh.quaternion.slerp(s,O.ROTATION_SPEED*this.normalizedDeltaTime)}updateCamera(){if(!this.spaceship||!this.camera)return;if(window.game&&window.game.introSequenceActive){console.log("Skipping camera update - intro sequence active");return}const t=new f(0,5,25).clone();t.applyQuaternion(this.spaceship.mesh.quaternion),this.camera.position.copy(this.spaceship.mesh.position).add(t);const s=new f(0,0,-60);s.applyQuaternion(this.spaceship.mesh.quaternion),s.add(this.spaceship.mesh.position),this.camera.lookAt(s),this.camera.far=4e5,this.camera.updateProjectionMatrix()}updateRotation(e,t){this.rotationState.x-=e,this.rotationState.y-=t}checkCollisions(){if(!this.scene||!this.spaceship)return;const e=15,t=this.spaceship.mesh.position.clone();this.scene.traverse(n=>{var a;n.type==="Mesh"&&((a=n.geometry.type)!=null&&a.includes("SphereGeometry"))&&n.userData.isPlayerProjectile&&n.userData.sourceId});const s=[],i=this.scene.children.find(n=>n.name==="asteroidBelt");let o=[];i&&i.userData&&i.userData.asteroids?(o=i.userData.asteroids,s.push(...o.map(n=>n.mesh))):this.scene.traverse(n=>{var a,r,l;if(n.type==="Mesh"&&((a=n.geometry.type)!=null&&a.includes("IcosahedronGeometry")||(r=n.geometry.type)!=null&&r.includes("TetrahedronGeometry")||(l=n.geometry.type)!=null&&l.includes("OctahedronGeometry"))){const d=Math.sqrt(n.position.x*n.position.x+n.position.z*n.position.z);d>16e3&&d<32e3&&s.push(n)}});for(const n of s){if(!n||!n.visible)continue;const a=t.distanceTo(n.position);let r=0;if(n.geometry&&n.geometry.parameters&&n.geometry.parameters.radius?r=n.geometry.parameters.radius:r=60,a<e+r){window.DEBUG_MODE&&console.log("Asteroid collision detected!","Ship position:",t,"Asteroid position:",n.position,"Distance:",a,"Detection threshold:",e+r),this.handleCollision(n,"asteroid");return}}this.scene.traverse(n=>{var a;if(n.type==="Mesh"&&n.geometry.type.includes("SphereGeometry")&&n.scale.x>=1&&!((a=n.userData.id)!=null&&a.startsWith("asteroid-"))&&!n.userData.isPlayerProjectile&&n!==this.spaceship.mesh){const r=t.distanceTo(n.position),l=n.geometry.parameters.radius*n.scale.x;if(n.material.emissive&&n.material.emissive.r>.5&&n.material.emissive.g>.5){if(r<l+e){this.handleCollision(n,"sun");return}}else if(r<l+e){this.handleCollision(n,"planet");return}}})}handleCollision(e,t){if(this.collided||!this.scene)return;if(this.collided=!0,window.DEBUG_MODE&&(console.log("=== COLLISION DETECTED ==="),console.log(`Collision type: ${t}`),console.log(`Ship velocity at impact: ${this.spaceship.velocity.length().toFixed(2)} units/frame`),console.log(`Ship position: x=${this.spaceship.mesh.position.x.toFixed(0)}, y=${this.spaceship.mesh.position.y.toFixed(0)}, z=${this.spaceship.mesh.position.z.toFixed(0)}`),console.log(`${t} position: x=${e.position.x.toFixed(0)}, y=${e.position.y.toFixed(0)}, z=${e.position.z.toFixed(0)}`),console.log(`Hull resistance: ${this.spaceship.collisionResistance}`)),this.attemptCollisionRecovery(t)){if(window.DEBUG_MODE&&console.log("Hull absorbed collision damage!"),this.createRecoveryEffect(),e&&e.position){const d=new f().subVectors(this.spaceship.mesh.position,e.position).normalize();this.spaceship.velocity.copy(d.multiplyScalar(5))}window.game&&window.game.audio&&window.game.audio.playSound("boink"),setTimeout(()=>{this.collided=!1,window.DEBUG_MODE&&console.log("Collision state reset - ship ready for new collisions")},1e3);return}this.spaceship.velocity.set(0,0,0);let s,i,o,n;t==="sun"?(s=16776960,i=60,o="Your ship was incinerated by the sun!",n="SUN_DEATH"):t==="planet"?(s=3394815,i=40,o="Your ship crashed into a planet!",n="COLLISION_PLANET"):(s=16737792,i=20,o="Your ship was destroyed by an asteroid!",n="COLLISION_ASTEROID");const a=new N(i,32,32),r=new Y({color:s,transparent:!0,opacity:.8}),l=new w(a,r);l.position.copy(this.spaceship.mesh.position),this.scene.add(l),this.animateExplosion(l),this.spaceship&&(this.spaceship.isDestroyed=!0),console.log("Physics: Initiating game over sequence for collision with",t),window.mainMessageBus?(console.log("Physics: Using window.mainMessageBus"),window.mainMessageBus.publish("game.over",{reason:o,source:"physics",collisionType:t,type:n})):window.game&&window.game.messageBus?(console.log("Physics: Using window.game.messageBus"),window.game.messageBus.publish("game.over",{reason:o,source:"physics",collisionType:t,type:n})):St(()=>import("./core-AGMxUAyq.js").then(d=>d.m),[]).then(d=>{const c=d.MessageBus;console.log("Physics: Using MessageBus.triggerGameOver"),c.triggerGameOver(o,"physics")}).catch(d=>{console.error("Physics: Error importing MessageBus:",d)})}attemptCollisionRecovery(e){if(!this.spaceship||!this.spaceship.collisionResistance)return!1;const t=this.spaceship.collisionResistance;let s=0;switch(e){case"asteroid":s=.5+(t-1)*.08,window.DEBUG_MODE&&console.log(`Asteroid collision recovery chance: ${(s*100).toFixed(1)}%`);break;case"planet":s=.1+(t-1)*.2,window.DEBUG_MODE&&console.log(`Planet collision recovery chance: ${(s*100).toFixed(1)}%`);break;case"sun":s=(t-1)*.05,window.DEBUG_MODE&&console.log(`Sun collision recovery chance: ${(s*100).toFixed(1)}%`);break;default:s=.2+(t-1)*.3,window.DEBUG_MODE&&console.log(`Generic collision recovery chance: ${(s*100).toFixed(1)}%`)}const i=Math.random(),o=i<s;return window.DEBUG_MODE&&console.log(`Recovery roll: ${i.toFixed(3)}, needed ${s.toFixed(3)} or lower to survive`),o}createRecoveryEffect(){if(!this.spaceship||!this.scene)return;const e=new N(60,32,32),t=new Y({color:3198928,transparent:!0,opacity:.6,side:Q}),s=new w(e,t);s.position.copy(this.spaceship.mesh.position),this.scene.add(s);let i=1;const o=.05,n=.02,a=()=>{if(i>2||s.material.opacity<=0){this.scene.remove(s);return}i+=o,s.scale.set(i,i,i),s.material.opacity-=n,this.spaceship&&this.spaceship.mesh&&s.position.copy(this.spaceship.mesh.position),requestAnimationFrame(a)};a()}animateExplosion(e){let t=1;const s=.5,i=.02,o=()=>{if(t>20||e.material.opacity<=0){this.scene.remove(e);return}t+=s,e.scale.set(t,t,t),e.material.opacity-=i,requestAnimationFrame(o)};o()}};ie(O,"THRUST_FORCE",.5),ie(O,"BOOST_MULTIPLIER",4),ie(O,"MAX_VELOCITY",25),ie(O,"ROTATION_SPEED",.3),ie(O,"COLLISION_DISTANCE",15),ie(O,"FRICTION",.01);let ze=O;class Lt{constructor(e){this.scene=e,this.skybox=null,this.time=0,this.textureLoader=new Ce,this.milkyWayTexture=this.textureLoader.load("./assets/2k_stars_milky_way.jpg"),this.milkyWayTexture.colorSpace=$,this.skyboxTextures={},this.solarSystemParams={starDensity:1,nebulaDensity:.5,color:16777215,texturePath:"./assets/2k_stars_milky_way.jpg",brightness:1},this.createProceduralSkybox(this.solarSystemParams)}updateForSystem(e){e&&(console.log("Updating skybox with parameters:",e),(e.isSolarSystem||e.color===16777215&&e.starDensity===1&&e.nebulaDensity===.5)&&(console.log("Detected Solar System skybox parameters, using stored solar system configuration"),e=this.solarSystemParams),this.skybox&&(console.log("Removing existing skybox"),this.scene.remove(this.skybox)),e.resetTime&&(this.time=0),this.createProceduralSkybox(e))}getTexture(e){if(!e)return this.milkyWayTexture;if(e==="./assets/2k_stars_milky_way.jpg")return this.milkyWayTexture;let t=e;return e.startsWith("/images/")&&window.location.port==="8000"&&(t=`http://${window.location.hostname}:8001${e}`,console.log(`Adjusted texture path to API server: ${t}`)),this.skyboxTextures[e]||(console.log(`Loading new skybox texture: ${t}`),this.skyboxTextures[e]=this.textureLoader.load(t),this.skyboxTextures[e].colorSpace=$),this.skyboxTextures[e]}createProceduralSkybox(e={}){let t=(e==null?void 0:e.starDensity)||1,s=(e==null?void 0:e.nebulaDensity)||.5,i=(e==null?void 0:e.color)||0,o=(e==null?void 0:e.brightness)!==void 0?e.brightness:1;const n=32e4,a=(e==null?void 0:e.texturePath)||"./assets/2k_stars_milky_way.jpg";console.log(`Creating enhanced skybox with star density: ${t}, nebula density: ${s}, color: 0x${i.toString(16)}, texture: ${a}, brightness: ${o}`);const r=this.getTexture(a),l=new j({uniforms:{time:{value:this.time||0},milkyWayTexture:{value:r},starDensity:{value:t},nebulaDensity:{value:s},skyColor:{value:new M(i)},brightness:{value:o}},vertexShader:`
                varying vec2 vUv;
                varying vec3 vPosition;
                
                void main() {
                    vUv = uv;
                    vPosition = position;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                }
            `,fragmentShader:`
                uniform sampler2D milkyWayTexture;
                uniform float time;
                uniform float starDensity;
                uniform float nebulaDensity;
                uniform vec3 skyColor;
                uniform float brightness;
                
                varying vec2 vUv;
                varying vec3 vPosition;
                
                void main() {
                    // Sample the Milky Way texture with adjusted brightness
                    vec4 milkyWay = texture2D(milkyWayTexture, vUv);
                    milkyWay.rgb *= 1.5 * brightness; // Apply brightness factor
                    
                    // Use only the Milky Way texture without procedural stars
                    vec3 finalColor = milkyWay.rgb * nebulaDensity * 1.2 * brightness;
                    
                    // Reduced ambient light
                    finalColor += vec3(0.05);
                    
                    // Subtle color tint
                    finalColor = mix(finalColor, skyColor * 1.2 * brightness, 0.1);
                    
                    // Apply gamma correction for more natural brightness
                    finalColor = pow(finalColor, vec3(0.9));
                    
                    gl_FragColor = vec4(finalColor, 1.0);
                }
            `,side:ce}),d=new ne(n,n,n);this.skybox=new w(d,l),this.skybox.rotation.x=Math.PI/4,this.skybox.rotation.y=Math.PI/6,this.scene.add(this.skybox),this.skyMaterial=l,console.log("Enhanced skybox created with texture")}update(e=.016,t){this.skyMaterial&&(this.time+=e*.1,this.skyMaterial.uniforms.time.value=this.time),this.skybox&&t&&this.skybox.position.copy(t.position)}}class $t{constructor(e){this.scene=e,this.sun=null,this.sunFlickerIntensity=1,this.sunFlickerDirection=.02,this.time=0,this.sunType="G",this.lensFlares=[],this.createSun()}createSun(){this.sun=new G,this.sun.name="sun",this.scene.add(this.sun);const e=new N(1e3,64,64),t=new j({uniforms:{time:{value:0},sunColor:{value:new M(16742144)},surfaceDetail:{value:1.2},surfaceDistortion:{value:.3},sunActivity:{value:.8}},vertexShader:`
                varying vec3 vNormal;
                varying vec2 vUv;
                varying vec3 vPosition;
                
                void main() {
                    vUv = uv;
                    vNormal = normalize(normalMatrix * normal);
                    vPosition = position;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                }
            `,fragmentShader:`
                uniform float time;
                uniform vec3 sunColor;
                uniform float surfaceDetail;
                uniform float surfaceDistortion;
                uniform float sunActivity;
                
                varying vec3 vNormal;
                varying vec2 vUv;
                varying vec3 vPosition;
                
                // Noise functions for surface detail
                float hash(float n) { return fract(sin(n) * 43758.5453123); }
                float hash(vec2 p) { return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453); }
                
                float noise(vec3 x) {
                    vec3 p = floor(x);
                    vec3 f = fract(x);
                    f = f * f * (3.0 - 2.0 * f);
                    
                    float n = p.x + p.y * 157.0 + 113.0 * p.z;
                    return mix(
                        mix(mix(hash(n + 0.0), hash(n + 1.0), f.x),
                            mix(hash(n + 157.0), hash(n + 158.0), f.x), f.y),
                        mix(mix(hash(n + 113.0), hash(n + 114.0), f.x),
                            mix(hash(n + 270.0), hash(n + 271.0), f.x), f.y),
                        f.z);
                }
                
                // Fractional Brownian Motion for layered detail
                float fbm(vec3 x) {
                    float v = 0.0;
                    float a = 0.5;
                    vec3 shift = vec3(100);
                    
                    for (int i = 0; i < 7; ++i) { // Increased iterations for more detail
                        v += a * noise(x);
                        x = x * 2.0 + shift;
                        a *= 0.5;
                    }
                    
                    return v;
                }
                
                void main() {
                    // Calculate dynamic granulation based on noise
                    vec3 surfacePos = vPosition * surfaceDetail * 0.01;
                    float granulation = fbm(surfacePos + time * 0.15); // Increased speed
                    
                    // Calculate solar prominences and flares with more dynamic movement
                    float flareBase = fbm(surfacePos * 2.5 + time * 0.3); // Increased detail and speed
                    float flares = pow(flareBase, 1.8) * sunActivity;
                    flares = smoothstep(0.65, 0.9, flares); // Lower threshold for more flares
                    
                    // Create dynamic hotspots that move across the surface
                    float hotspots = fbm(surfacePos * 3.0 + time * 0.2) * fbm(surfacePos * 1.5 - time * 0.1);
                    hotspots = pow(hotspots, 3.0) * 1.5;
                    
                    // Calculate normal distortion for surface waves with more turbulence
                    vec3 distortedNormal = vNormal;
                    distortedNormal.x += noise(surfacePos * 6.0 + time * 0.15) * surfaceDistortion;
                    distortedNormal.y += noise(surfacePos * 6.0 + time * 0.2) * surfaceDistortion;
                    distortedNormal.z += noise(surfacePos * 6.0 + time * 0.17) * surfaceDistortion;
                    distortedNormal = normalize(distortedNormal);
                    
                    // Edge brightness (limb darkening inverse - brighter at the edges)
                    float edgeBrightness = 1.0 - dot(distortedNormal, vec3(0.0, 0.0, 1.0));
                    edgeBrightness = pow(edgeBrightness, 2.5) * 0.4; // Reduced power and multiplier
                    
                    // Create fire-like color variations
                    vec3 baseColor = sunColor;
                    vec3 hotColor = vec3(1.0, 0.8, 0.4); // Yellow-white hot spots
                    vec3 flareColor = vec3(1.0, 0.6, 0.3); // Orange-red flares
                    
                    // Combine effects for a more dynamic fireball look
                    vec3 finalColor = baseColor * (1.0 + granulation * 0.4);
                    finalColor = mix(finalColor, hotColor, hotspots);
                    finalColor += flareColor * flares;
                    finalColor += vec3(1.0, 0.9, 0.7) * edgeBrightness;
                    
                    // Output with HDR values
                    gl_FragColor = vec4(finalColor, 1.0);
                }
            `,side:at}),s=new w(e,t);this.sun.add(s);const i=new N(2e3,64,64),o=new j({uniforms:{time:{value:0},coronaColor:{value:new M(16750912)},viewVector:{value:new f(0,0,1)},turbulence:{value:.6}},vertexShader:`
                uniform vec3 viewVector;
                varying vec3 vNormal;
                varying vec3 vPosition;
                varying float vIntensity;
                
                void main() {
                    vNormal = normalize(normalMatrix * normal);
                    vPosition = position;
                    
                    // Calculate view-dependent intensity with less view dependency
                    vec3 viewDir = normalize(viewVector);
                    // Use a lower exponent and add a base intensity to ensure visibility from all angles
                    vIntensity = pow(1.15 - dot(vNormal, viewDir), 1.5) * 0.8 + 0.2;
                    
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                }
            `,fragmentShader:`
                uniform float time;
                uniform vec3 coronaColor;
                uniform float turbulence;
                
                varying vec3 vNormal;
                varying vec3 vPosition;
                varying float vIntensity;
                
                // Noise functions
                float hash(vec3 p) {
                    p = fract(p * vec3(443.897, 441.423, 437.195));
                    p += dot(p, p.yzx + 19.19);
                    return fract((p.x + p.y) * p.z);
                }
                
                float noise(vec3 p) {
                    vec3 i = floor(p);
                    vec3 f = fract(p);
                    f = f*f*(3.0-2.0*f);
                    
                    return mix(
                        mix(mix(hash(i), hash(i + vec3(1,0,0)), f.x),
                            mix(hash(i + vec3(0,1,0)), hash(i + vec3(1,1,0)), f.x), f.y),
                        mix(mix(hash(i + vec3(0,0,1)), hash(i + vec3(1,0,1)), f.x),
                            mix(hash(i + vec3(0,1,1)), hash(i + vec3(1,1,1)), f.x), f.y), f.z);
                }
                
                float fbm(vec3 p) {
                    float f = 0.0;
                    float weight = 0.5;
                    for (int i = 0; i < 5; i++) {
                        f += weight * noise(p);
                        weight *= 0.5;
                        p *= 2.0;
                    }
                    return f;
                }
                
                void main() {
                    // Add turbulence to the corona intensity based on position
                    float turbulenceFactor = fbm(vPosition * 0.005 + time * 0.15) * turbulence;
                    float finalIntensity = vIntensity * (1.0 + turbulenceFactor);
                    
                    // Create dynamic wisps in the corona for a fire-like effect
                    float wisps = fbm(vPosition * 0.01 - time * 0.05) * fbm(vPosition * 0.02 + time * 0.1);
                    wisps = pow(wisps, 2.0) * 0.5;
                    
                    // HDR color with variation
                    vec3 finalColor = coronaColor * (finalIntensity + wisps);
                    
                    // Add color variation based on intensity
                    if (finalIntensity > 0.7) {
                        finalColor = mix(finalColor, vec3(1.0, 0.9, 0.7), (finalIntensity - 0.7) * 3.0);
                    }
                    
                    // Add transparency at the edges for volumetric feel
                    float alpha = smoothstep(0.0, 0.15, finalIntensity + wisps * 0.5);
                    
                    gl_FragColor = vec4(finalColor, alpha * 0.9); // Slightly more transparent
                }
            `,transparent:!0,blending:z,depthWrite:!1,side:ce}),n=new w(i,o);this.sun.add(n);const a=new N(3e3,32,32),r=new j({uniforms:{time:{value:0},coronaColor:{value:new M(16746496)},viewVector:{value:new f(0,0,1)}},vertexShader:`
                uniform vec3 viewVector;
                varying float vIntensity;
                varying vec3 vPosition;
                
                void main() {
                    vec3 vNormal = normalize(normalMatrix * normal);
                    vec3 vNormel = normalize(viewVector);
                    // Less extreme view dependency to ensure more consistent appearance
                    vIntensity = pow(1.05 - dot(vNormal, vNormel), 2.0) * 0.7 + 0.3;
                    vPosition = position;
                    
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                }
            `,fragmentShader:`
                uniform float time;
                uniform vec3 coronaColor;
                varying float vIntensity;
                varying vec3 vPosition;
                
                // Simple noise for variation
                float hash(vec3 p) {
                    p = fract(p * vec3(443.897, 441.423, 437.195));
                    p += dot(p, p.yzx + 19.19);
                    return fract((p.x + p.y) * p.z);
                }
                
                float noise(vec3 p) {
                    vec3 i = floor(p);
                    vec3 f = fract(p);
                    f = f*f*(3.0-2.0*f);
                    
                    return mix(
                        mix(mix(hash(i), hash(i + vec3(1,0,0)), f.x),
                            mix(hash(i + vec3(0,1,0)), hash(i + vec3(1,1,0)), f.x), f.y),
                        mix(mix(hash(i + vec3(0,0,1)), hash(i + vec3(1,0,1)), f.x),
                            mix(hash(i + vec3(0,1,1)), hash(i + vec3(1,1,1)), f.x), f.y), f.z);
                }
                
                void main() {
                    // Apply time-based pulsing with noise variation
                    float noiseVal = noise(vPosition * 0.002 + time * 0.1);
                    float pulseIntensity = vIntensity * (1.0 + 0.2 * sin(time + noiseVal * 5.0));
                    
                    // Add subtle fire-like variations
                    pulseIntensity += noiseVal * 0.2;
                    
                    vec3 glow = coronaColor * pulseIntensity;
                    gl_FragColor = vec4(glow, pulseIntensity * 0.4); // Reduced from 0.6
                }
            `,transparent:!0,blending:z,depthWrite:!1,side:ce}),l=new w(a,r);this.sun.add(l);const d=new we(16775920,2e5,1e5,2);this.sun.add(d),this.createFireballFlares(),this.sunMaterial=t,this.coronaMaterial=o,this.outerCoronaMaterial=r,this.sunLight=d,this.baseLightIntensity=2e5;const c=new Te(16775920,1.5);c.position.set(0,0,0),c.castShadow=!0,c.shadow.mapSize.width=4096,c.shadow.mapSize.height=4096,c.shadow.camera.near=1e3,c.shadow.camera.far=1e5,c.shadow.camera.left=-5e4,c.shadow.camera.right=5e4,c.shadow.camera.top=5e4,c.shadow.camera.bottom=-5e4,c.shadow.bias=-5e-5,c.shadow.normalBias=.02,c.shadow.radius=2,this.scene&&this.scene.renderer&&(this.scene.renderer.shadowMap.type=ve),this.sun.add(c),this.sunDirectionalLight=c}createFireballFlares(){const e=["https://cdn.jsdelivr.net/gh/mrdoob/three.js@r128/examples/textures/lensflare/lensflare0.png","https://cdn.jsdelivr.net/gh/mrdoob/three.js@r128/examples/textures/lensflare/lensflare2.png","https://cdn.jsdelivr.net/gh/mrdoob/three.js@r128/examples/textures/lensflare/lensflare3.png"],t=new Ce;this.lensFlares.forEach(a=>{a.parent&&a.parent.remove(a)}),this.lensFlares=[];const s=t.load(e[0]);s.colorSpace=$;const i=new Me(new ke({map:s,color:16755285,transparent:!0,blending:z,depthTest:!1}));i.scale.set(700,700,1),this.sun.add(i),this.lensFlares.push(i);const o=8,n=300;for(let a=0;a<o;a++){const r=1+a%2,l=t.load(e[r]);l.colorSpace=$;const d=new Me(new ke({map:l,color:a%3===0?16764023:a%3===1?16746581:16737826,transparent:!0,blending:z,depthTest:!1})),c=a/o*Math.PI*2,h=Math.cos(c)*n,u=Math.sin(c)*n;d.position.set(h,u,0);const p=200+Math.random()*200;if(d.scale.set(p,p,1),this.sun.add(d),this.lensFlares.push(d),a%2===0){const y=t.load(e[a%3]);y.colorSpace=$;const m=new Me(new ke({map:y,color:16755234,transparent:!0,blending:z,depthTest:!1})),v=n*2,k=c+(Math.random()*.2-.1),S=Math.cos(k)*v,x=Math.sin(k)*v;m.position.set(S,x,0);const E=100+Math.random()*150;m.scale.set(E,E,1),this.sun.add(m),this.lensFlares.push(m)}}}updateSunType(e,t=1){this.sunType=e||"G";let s,i,o;switch(this.sunType){case"O":s=10335487,i=3e4,o=.8;break;case"B":s=11190271,i=2e4,o=.75;break;case"A":s=13293567,i=1e4,o=.7;break;case"F":s=16316415,i=7e3,o=.65;break;case"G":s=16774378,i=5500,o=.6;break;case"K":s=16765601,i=4e3,o=.5;break;case"M":s=16764015,i=3e3,o=.4;break;default:s=16774378,i=5500,o=.6}if(this.sunMaterial&&(this.sunMaterial.uniforms.sunColor.value.setHex(s),this.sunMaterial.uniforms.sunActivity.value=o),this.coronaMaterial){const n=new M(s);n.r=Math.min(1,n.r*1.2),n.g=Math.min(1,n.g*1.1),n.b=Math.min(1,n.b*1),this.coronaMaterial.uniforms.coronaColor.value=n}if(this.outerCoronaMaterial){const n=new M(s);n.r=Math.min(1,n.r*1.3),n.g=Math.min(1,n.g*1.2),n.b=Math.min(1,n.b*1.1),this.outerCoronaMaterial.uniforms.coronaColor.value=n}this.sunLight&&(this.sunLight.color.setHex(s),this.sunLight.intensity=(2e5+i/1e4*2e5)*t),this.lensFlares.forEach((n,a)=>{if(n&&n.material){const r=new M(s);a%3===0?r.r=Math.min(1,r.r*1.2):a%3===1&&(r.g=Math.min(1,r.g*1.1)),n.material.color=r}}),console.log(`Updated sun to type ${this.sunType}, color: ${s.toString(16)}, intensity multiplier: ${t}`)}getRadius(){return 3e3}getPosition(){return new f(0,0,0)}update(e=.016){if(this.sun){if(this.time+=e*.4,this.sunMaterial&&this.sunMaterial.uniforms.time&&(this.sunMaterial.uniforms.time.value=this.time),this.coronaMaterial&&this.coronaMaterial.uniforms.time&&(this.coronaMaterial.uniforms.time.value=this.time),this.outerCoronaMaterial&&this.outerCoronaMaterial.uniforms.time&&(this.outerCoronaMaterial.uniforms.time.value=this.time),this.sunFlickerIntensity+=this.sunFlickerDirection,this.sunFlickerIntensity>1.2?(this.sunFlickerIntensity=1.2,this.sunFlickerDirection=-Math.random()*.03):this.sunFlickerIntensity<.9&&(this.sunFlickerIntensity=.9,this.sunFlickerDirection=Math.random()*.03),this.sunLight){const t=this.sunLight._intensityMultiplier||1,s=this.baseLightIntensity+(this.sunType==="G"?3e4:this.sunType==="O"||this.sunType==="B"?1e5:this.sunType==="M"?1e4:5e4);let i=1;if(this.scene&&this.scene.camera){const o=new f().subVectors(this.scene.camera.position,this.sun.position).normalize(),n=new f(0,0,-1).applyQuaternion(this.scene.camera.quaternion),a=o.dot(n);a>.8&&(i=.5+(1-a)*.5)}this.sunLight.intensity=s*this.sunFlickerIntensity*t*i}if(this.sunDirectionalLight&&this.scene&&this.scene.camera){const t=this.scene.camera.position.clone(),i=t.clone().sub(this.sun.position).normalize().clone().multiplyScalar(-15e3).add(this.sun.position);this.sunDirectionalLight.position.copy(i),this.sunDirectionalLight.target.position.copy(this.sun.position),this.sunDirectionalLight.target.parent||this.scene.add(this.sunDirectionalLight.target);const o=t.distanceTo(this.sun.position),n=Math.max(5e4,o*2);this.sunDirectionalLight.shadow.camera.left=-n,this.sunDirectionalLight.shadow.camera.right=n,this.sunDirectionalLight.shadow.camera.top=n,this.sunDirectionalLight.shadow.camera.bottom=-n,this.sunDirectionalLight.shadow.camera.updateProjectionMatrix(),this.sunDirectionalLight.intensity=1.5*this.sunFlickerIntensity}if(this.scene&&this.scene.camera){const t=new f().subVectors(this.scene.camera.position,this.sun.position).normalize();this.coronaMaterial&&this.coronaMaterial.uniforms.viewVector&&(this.coronaMaterial.uniforms.viewVector.value=t),this.outerCoronaMaterial&&this.outerCoronaMaterial.uniforms.viewVector&&(this.outerCoronaMaterial.uniforms.viewVector.value=t);const s=this.time;this.lensFlares.forEach((i,o)=>{if(!i)return;const n=.5+o%3*.3,a=.9+Math.sin(s*n+o)*.1;if(o===0){const l=700*a;i.scale.set(l,l,1)}else{const l=200+o%3*100,d=l*a;if(i.scale.set(d,d,1),i.userData.originalPos){const c=.1+o%5*.05,h=.3+o%4*.1;i.position.x=i.userData.originalPos.x+Math.sin(s*h)*c*l,i.position.y=i.userData.originalPos.y+Math.cos(s*h)*c*l}else i.userData.originalPos=i.position.clone()}const r=t.dot(new f(0,0,-1).applyQuaternion(this.scene.camera.quaternion));if(r>.5){const l=Math.min(1,(r-.5)/.3+.3);i.material.opacity=l,i.visible=!0}else{const l=Math.max(.1,(r+.5)/1)*.5;i.material.opacity=l,i.visible=!0}})}}}toggleShadowHelper(e){this.shadowHelper&&this.shadowHelper.parent&&(this.shadowHelper.parent.remove(this.shadowHelper),this.shadowHelper=null),e&&this.sunDirectionalLight&&this.scene&&(this.shadowHelper=new rt(this.sunDirectionalLight.shadow.camera),this.scene.add(this.shadowHelper),console.log("Shadow camera helper enabled - showing sun shadow frustum"))}}const V=new Ce,T={mercury:V.load("./assets/2k_mercury.jpg"),venus:{surface:V.load("./assets/2k_venus_surface.jpg"),atmosphere:V.load("./assets/2k_venus_atmosphere.jpg")},earth:V.load("./assets/2k_earth_daymap.jpg"),mars:V.load("./assets/2k_mars.jpg"),jupiter:V.load("./assets/2k_jupiter.jpg"),saturn:{surface:V.load("./assets/2k_saturn.jpg"),rings:V.load("./assets/2k_saturn_ring_alpha.png")},uranus:V.load("./assets/2k_uranus.jpg"),neptune:V.load("./assets/2k_neptune.jpg")};T.mercury.colorSpace=$;T.venus.surface.colorSpace=$;T.venus.atmosphere.colorSpace=$;T.earth.colorSpace=$;T.mars.colorSpace=$;T.jupiter.colorSpace=$;T.saturn.surface.colorSpace=$;T.saturn.rings.colorSpace=$;T.uranus.colorSpace=$;T.neptune.colorSpace=$;const xe=[];for(let g=1;g<=22;g++){const e=V.load(`./assets/p${g}.jpeg`);e.colorSpace=$,xe.push(e)}class Ft{constructor(e,t){this.scene=e,this.starSystemGenerator=t,this.planets=[],this.planetRegions={},this.currentSystemId="Solar System",this.systemPlanets={},this.createHomeSolarSystem()}createHomeSolarSystem(){const e=[{name:"Mercury",size:220,distance:4800,speed:.0016,color:11184810,rings:!1},{name:"Venus",size:400,distance:8e3,speed:.0013,color:15125660,rings:!1},{name:"Earth",size:420,distance:12e3,speed:.001,color:4286945,rings:!1},{name:"Mars",size:320,distance:16800,speed:8e-4,color:13000005,rings:!1},{name:"Jupiter",size:1e3,distance:3e4,speed:4e-4,color:14070398,rings:!0},{name:"Saturn",size:880,distance:4e4,speed:3e-4,color:15787465,rings:!0},{name:"Uranus",size:720,distance:56e3,speed:2e-4,color:13298929,rings:!0},{name:"Neptune",size:700,distance:72e3,speed:16e-5,color:6267867,rings:!1}];this.systemPlanets["Solar System"]=e,this.createPlanetsForSystem("Solar System")}createPlanetsForSystem(e){if(this.clearPlanets(),this.currentSystemId=e,this.systemPlanets[e]){this.createPlanetsFromData(this.systemPlanets[e]);return}const t=this.generatePlanetsForSystem(e);this.systemPlanets[e]=t,this.createPlanetsFromData(t)}generatePlanetsForSystem(e){if(console.log(`Generating new planets for system: ${e}`),this.starSystemGenerator&&this.starSystemGenerator.customPlanetData&&this.starSystemGenerator.customPlanetData[e]){const d=this.starSystemGenerator.customPlanetData[e];return console.log(`Using ${d.length} custom planets for system: ${e}`),d.forEach(c=>{c.textureUrl?console.log(`Custom planet ${c.name} has texture URL: ${c.textureUrl}`):console.log(`Custom planet ${c.name} does not have a texture URL`)}),this.starSystemGenerator.customPlanetData[e]}const t=["New","Alpha","Beta","Gamma","Delta","Nova","Proxima","Ultima","Astro","Cosmo","Stella","Terra","Astra","Prime","Orb"],s=["sphere","world","orb","terra","oid","globus","ium","ian","aria","anth","urus","alos","onos","era","ax","is","os"],i=e.includes("System-")?e.split("-")[1][0]:"M",o=2+Math.floor(Math.random()*7),n=[];let a=1,r=1,l=[];switch(i){case"O":a=1.8,r=1.6,l=[6711039,10066431,13421823,11184895,8947933];break;case"B":a=1.5,r=1.3,l=[10070783,11189247,13421823,14540287,12298956];break;case"A":a=1.3,r=1.1,l=[13421823,14540287,15658751,16777215,14535901];break;case"F":a=1.1,r=1,l=[10070783,11193514,13426124,16764074,15658700];break;case"G":a=1,r=1,l=[11184810,4286945,13000005,14070398,15787465];break;case"K":a=.8,r=.9,l=[15125660,13413e3,14531481,12294519,13404262];break;case"M":a=.6,r=.7,l=[13395524,14514005,15632486,16750967,12277043];break;default:l=[11184810,4286945,13000005,14070398,15787465]}for(let d=0;d<o;d++){const c=t[Math.floor(Math.random()*t.length)],h=s[Math.floor(Math.random()*s.length)],u=`${c}${h}`,p=Math.random();let y;p<.5?y=(240+Math.random()*200)*a:p<.8?y=(440+Math.random()*280)*a:y=(720+Math.random()*360)*a;const m=4800+d*8e3,v=m*.2,k=(m+(Math.random()*v-v/2))*r,S=.002/(k/1e3),x=l[Math.floor(Math.random()*l.length)],E=y>600?Math.random()<.4:!1,P=Math.random()*Math.PI*.5,A=Math.random()*Math.PI*.2;n.push({name:u,size:Math.floor(y),distance:Math.floor(k),speed:S,color:x,rings:E,axialTilt:P,orbitalTilt:A})}return n}createPlanetsFromData(e){this.clearPlanets(),e.forEach(t=>{const s=new N(t.size,32,32);let i;if(t.textureUrl){console.log(`Creating planet ${t.name} with custom texture: ${t.textureUrl}`);let l=t.textureUrl;t.textureUrl.startsWith("/images/")&&window.location.port==="8000"&&(l=`http://${window.location.hostname}:8001${t.textureUrl}`,console.log(`Adjusted planet texture path to API server: ${l}`));const d=V.load(l);d.colorSpace=$,i=new I({map:d,roughness:.7,metalness:.2,flatShading:!1,emissive:new M(t.color||16777215),emissiveIntensity:.2,emissiveMap:d})}else switch(t.name){case"Mercury":i=new I({map:T.mercury,roughness:.7,metalness:.2,flatShading:!1,emissive:new M(5592405),emissiveIntensity:.2,emissiveMap:T.mercury});break;case"Venus":i=new I({map:T.venus.surface,roughness:.6,metalness:.1,flatShading:!1,emissive:new M(15125660),emissiveIntensity:.25,emissiveMap:T.venus.surface});break;case"Earth":i=new I({map:T.earth,roughness:.5,metalness:.1,flatShading:!1,emissive:new M(4286945),emissiveIntensity:.2,emissiveMap:T.earth});break;case"Mars":i=new I({map:T.mars,roughness:.7,metalness:.1,flatShading:!1,emissive:new M(13000005),emissiveIntensity:.25,emissiveMap:T.mars});break;case"Jupiter":i=new I({map:T.jupiter,roughness:.5,metalness:0,flatShading:!1,emissive:new M(14070398),emissiveIntensity:.2,emissiveMap:T.jupiter});break;case"Saturn":i=new I({map:T.saturn.surface,roughness:.6,metalness:.1,flatShading:!1,emissive:new M(15787465),emissiveIntensity:.2,emissiveMap:T.saturn.surface});break;case"Uranus":i=new I({map:T.uranus,roughness:.5,metalness:0,flatShading:!1,emissive:new M(8960972),emissiveIntensity:.25,emissiveMap:T.uranus});break;case"Neptune":i=new I({map:T.neptune,roughness:.5,metalness:0,flatShading:!1,emissive:new M(6267867),emissiveIntensity:.25,emissiveMap:T.neptune});break;default:const l=Math.floor(Math.random()*xe.length);i=new I({map:xe[l],roughness:.6,metalness:.2,color:new M(t.color),flatShading:!1,emissive:new M(t.color),emissiveIntensity:.3,emissiveMap:xe[l]});break}const o=new w(s,i),n=Math.random()*Math.PI*2;let a=t.orbitalTilt||0,r=t.axialTilt||0;if(o.position.x=Math.cos(n)*t.distance,o.position.y=Math.sin(a)*t.distance,o.position.z=Math.sin(n)*Math.cos(a)*t.distance,o.rotation.x=r,o.castShadow=!0,o.receiveShadow=!0,this.scene.add(o),t.rings){let l,d,c;t.name==="Saturn"?(l=new Se(t.size*1.4,t.size*2,32),d=new I({map:T.saturn.rings,side:Q,transparent:!0,opacity:.8,roughness:.8,metalness:.1,emissive:new M(15787465),emissiveIntensity:.2,emissiveMap:T.saturn.rings})):(l=new Se(t.size*1.3,t.size*1.8,32),d=new I({color:t.color,side:Q,transparent:!0,opacity:.4,roughness:.7,metalness:.2,emissive:new M(t.color),emissiveIntensity:.3})),c=new w(l,d),c.rotation.x=Math.PI/2,c.castShadow=!0,c.receiveShadow=!0,o.add(c)}this.planets.push({mesh:o,distance:t.distance,speed:t.speed,angle:n,orbitalTilt:a}),this.planetRegions[t.name]={name:t.name,position:o.position.clone(),radius:t.size*2}})}clearPlanets(){this.planets.forEach(e=>{this.scene.remove(e.mesh)}),this.planets=[],this.planetRegions={}}updateForSystem(e){return console.log(`Updating planets for system: ${e}`),this.createPlanetsForSystem(e),!0}getPlanetRegions(){return this.planetRegions}getPlanets(){return this.planets}update(e){this.planets.forEach(t=>{t.angle+=t.speed*e,t.mesh.position.x=Math.cos(t.angle)*t.distance,t.mesh.position.z=Math.sin(t.angle)*Math.cos(t.orbitalTilt)*t.distance,t.mesh.position.y=Math.sin(t.angle)*Math.sin(t.orbitalTilt)*t.distance,t.mesh.rotation.y+=e*.1,t.mesh&&Object.values(this.planetRegions).forEach(s=>{s&&s.position&&s.position.distanceTo(t.mesh.position)<5e3&&s.position.copy(t.mesh.position)})})}}class Ut{constructor(e){this.scene=e,this.asteroids=[],this.innerRadius=2e4,this.outerRadius=28e3,this.width=1800,this.resourceMultipliers={iron:1,gold:1,platinum:1},this.createAsteroidBelt()}createAsteroidBelt(){for(let t=0;t<1e3;t++){const s=Math.random()*120+120;let i;const o=Math.floor(Math.random()*3);o===0?i=new lt(s,0):o===1?i=new He(s,0):i=new Ie(s,0);const n=i.attributes.position;for(let S=0;S<n.count;S++){const x=new f;x.fromBufferAttribute(n,S),x.x+=(Math.random()-.5)*.4*s,x.y+=(Math.random()-.5)*.4*s,x.z+=(Math.random()-.5)*.4*s,n.setXYZ(S,x.x,x.y,x.z)}i.computeVertexNormals();const a=new M,r=Math.random();let l=null;r<.7?(a.setHSL(.02,.3,.35+Math.random()*.2),l="iron"):r<.93?(a.setHSL(.12,.7,.5+Math.random()*.2),l="gold"):(a.setHSL(.1,.3,.7+Math.random()*.15),l="platinum");const d=new I({color:a,roughness:.6+Math.random()*.2,metalness:.4+Math.random()*.4,flatShading:!0,emissive:a.clone().multiplyScalar(.3),emissiveIntensity:.2}),c=new w(i,d),h=Math.random()*Math.PI*2,u=this.innerRadius+Math.random()*(this.outerRadius-this.innerRadius),p=(Math.random()-.5)*this.width;c.position.set(Math.cos(h)*u,p,Math.sin(h)*u),c.rotation.set(Math.random()*Math.PI,Math.random()*Math.PI,Math.random()*Math.PI);const y=1e-4+Math.random()*1e-4,m=u,v=Math.random()*Math.PI*.15;this.scene.add(c);const k=50+Math.random()*50;this.asteroids.push({mesh:c,size:s,orbitSpeed:y,orbitRadius:m,orbitAngle:h,orbitTilt:v,initialHeight:p,rotationSpeed:{x:(Math.random()-.5)*.005,y:(Math.random()-.5)*.005,z:(Math.random()-.5)*.005},resourceType:l,baseResourceAmount:k,resourceAmount:k,maxResourceAmount:k,minable:!0})}}getRegionInfo(){return{center:new f(0,0,0),innerRadius:this.innerRadius,outerRadius:this.outerRadius}}getAsteroids(){return this.asteroids}setResourceMultipliers(e){e&&(this.resourceMultipliers=e,this.updateAsteroidResources(),console.log("Updated asteroid belt with resource multipliers:",e))}updateAsteroidResources(){this.asteroids.forEach(e=>{if(e.resourceType)switch(e.resourceType){case"iron":e.resourceAmount=e.baseResourceAmount*this.resourceMultipliers.iron;break;case"gold":e.resourceAmount=e.baseResourceAmount*this.resourceMultipliers.gold;break;case"platinum":e.resourceAmount=e.baseResourceAmount*this.resourceMultipliers.platinum;break}})}updateForSystem(e){e&&(e.asteroidDensity&&this.updateDensity(e.asteroidDensity),e.resourceMultipliers&&this.setResourceMultipliers(e.resourceMultipliers))}updateDensity(e=1){e<.5&&(e=.5),e>3&&(e=3),this.asteroids.forEach((t,s)=>{const i=s%10<e*5;t.mesh.visible=i})}findClosestAsteroid(e,t=1600){let s=null,i=t;return this.asteroids.forEach(o=>{if(!o.minable||!o.mesh.visible)return;const n=e.distanceTo(o.mesh.position);n<i&&(i=n,s=o)}),s}removeAsteroid(e){this.scene.remove(e.mesh);const t=this.asteroids.findIndex(s=>s===e);t!==-1&&this.asteroids.splice(t,1)}update(){this.asteroids.forEach(e=>{e.mesh.rotation.x+=e.rotationSpeed.x,e.mesh.rotation.y+=e.rotationSpeed.y,e.mesh.rotation.z+=e.rotationSpeed.z,e.orbitAngle+=e.orbitSpeed;const t=Math.cos(e.orbitAngle)*e.orbitRadius,s=Math.sin(e.orbitAngle)*e.orbitRadius;if(e.orbitTilt){const i=s*Math.sin(e.orbitTilt),o=s*Math.cos(e.orbitTilt);e.mesh.position.x=t,e.mesh.position.z=o,e.mesh.position.y=i+e.initialHeight}else e.mesh.position.x=t,e.mesh.position.z=s,e.mesh.position.y=e.initialHeight})}}class zt{constructor(e){this.scene=e,this.stargate=null,this.navLights=[],this.portalParticles=[],this.createStargate()}createStargate(){const e=new G;e.name="stargate";const t=new X(1e3,200,32,100),s=new I({color:1118481,roughness:.9,metalness:.1,emissive:0}),i=new w(t,s);e.add(i);const o=(d,c,h={x:0,y:0,z:0},u={x:0,y:0,z:0})=>{const p=new X(d,c,16,100),y=new I({color:65535,emissive:65535,emissiveIntensity:1.5,roughness:.2,metalness:.8}),m=new w(p,y);return m.position.set(h.x,h.y,h.z),m.rotation.set(u.x,u.y,u.z),m},n=o(1060,10),a=o(940,10),r=o(850,5);e.add(n),e.add(a),e.add(r),this.createPortalEffect(e);const l=this.createNeonDetails();e.add(l),e.position.set(0,1e4,0),e.rotation.x=Math.PI/2,this.scene.add(e),this.stargate=e,this.createCounterRotatingRing(e)}createCounterRotatingRing(e){const t=new G,s=new X(820,3,16,100),i=new I({color:65535,emissive:65535,emissiveIntensity:2,roughness:.1,metalness:.9,transparent:!0,opacity:.7});for(let o=0;o<3;o++){const n=new w(s,i.clone());n.rotation.x=Math.PI*o/3,n.rotation.y=Math.PI*o/3,t.add(n)}e.add(t),this.counterRotatingRing=t}createPortalEffect(e){const t=new j({uniforms:{time:{value:0},resolution:{value:new U(1024,1024)},baseColor:{value:new M(65535)}},vertexShader:`
            varying vec2 vUv;
            
            void main() {
              vUv = uv;
              gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
            }
          `,fragmentShader:`
            uniform float time;
            uniform vec2 resolution;
            uniform vec3 baseColor;
            varying vec2 vUv;
            
            // Simple noise function
            float noise(vec2 p) {
              return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);
            }
            
            // Smoothed noise
            float smoothNoise(vec2 p) {
              vec2 ip = floor(p);
              vec2 fp = fract(p);
              
              vec2 u = fp * fp * (3.0 - 2.0 * fp);
              
              float a = noise(ip);
              float b = noise(ip + vec2(1.0, 0.0));
              float c = noise(ip + vec2(0.0, 1.0));
              float d = noise(ip + vec2(1.0, 1.0));
              
              return mix(mix(a, b, u.x), mix(c, d, u.x), u.y);
            }
            
            // Fractal Brownian Motion
            float fbm(vec2 p) {
              float value = 0.0;
              float amplitude = 0.5;
              float frequency = 3.0;
              
              for (int i = 0; i < 6; i++) {
                value += amplitude * smoothNoise(p * frequency);
                amplitude *= 0.5;
                frequency *= 2.0;
              }
              
              return value;
            }
            
            void main() {
              // Convert uv to be centered at (0.5, 0.5) with range -1 to 1
              vec2 centeredUV = (vUv - 0.5) * 2.0;
              float dist = length(centeredUV);
              
              // Create angle for rotation
              float angle = atan(centeredUV.y, centeredUV.x);
              
              // Enhanced swirling effect parameters - more aggressive
              float swirl = sin(angle * 6.0 + time * 2.0) * 0.5 + 0.5;
              float pulse = sin(time * 0.8) * 0.5 + 0.5;
              
              // Create more distorted coordinates for noise - enhances warp feel
              vec2 distortedUV = vec2(
                centeredUV.x + sin(time * 0.7 + centeredUV.y * 5.0) * 0.2,
                centeredUV.y + cos(time * 0.6 + centeredUV.x * 5.0) * 0.2
              );
              
              // Create noise patterns - more contrast
              float noiseValue = fbm(distortedUV * 3.0 + time * 0.3);
              float ripple = sin(dist * 20.0 - time * 3.0) * 0.5 + 0.5;
              
              // Combine effects with more intensity
              float alpha = smoothstep(0.9, 0.0, dist);
              float intensity = mix(noiseValue, ripple, 0.7) * swirl * pulse;
              
              // Enhanced portal colors - bright cyan to deep blue
              vec3 darkColor = vec3(0.0, 0.1, 0.3);
              vec3 brightColor = vec3(0.0, 1.0, 1.0) * 2.0;
              vec3 accentColor = vec3(0.3, 0.8, 1.0);
              
              // More complex color mixing
              vec3 finalColor = mix(darkColor, brightColor, intensity);
              finalColor = mix(finalColor, accentColor, ripple * swirl);
              
              // Enhanced edge glow for portal effect
              float edgeGlow = smoothstep(0.8, 0.4, dist) * smoothstep(0.0, 0.6, dist);
              finalColor = mix(finalColor, brightColor, edgeGlow * pulse);
              
              // Add portal event horizon effect
              float eventHorizon = smoothstep(0.8, 0.78, dist) * 2.0;
              finalColor += vec3(0.0, 1.0, 1.0) * eventHorizon;
              
              gl_FragColor = vec4(finalColor, alpha);
            }
          `,transparent:!0,side:Q}),s=new Ae(800,128),i=new w(s,t);e.add(i);const o=new we(65535,400,2e3,2);o.position.set(0,0,0),e.add(o);const n=()=>{const a=new X(650,10,8,100),r=new I({color:65535,emissive:65535,emissiveIntensity:2,transparent:!0,opacity:.3,side:Q}),l=new w(a,r);return l.rotation.x=Math.random()*Math.PI,l.rotation.y=Math.random()*Math.PI,l.userData={rotationSpeed:{x:(Math.random()-.5)*.02,y:(Math.random()-.5)*.02,z:(Math.random()-.5)*.02},pulseSpeed:.5+Math.random()*.3},this.portalParticles.push(l),l};for(let a=0;a<8;a++)e.add(n());this.portalShaderMaterial=t,this.portalLight=o}createNeonDetails(){const e=new G,t=s=>{const i=new G,o=new ye(10,10,300,8),n=new I({color:65535,emissive:65535,emissiveIntensity:1,transparent:!0,opacity:.8}),a=new w(o,n);a.rotation.x=Math.PI/2;const r=new we(65535,100,400,2);return r.position.set(0,0,0),i.add(a),i.add(r),i.position.x=Math.cos(s)*1e3,i.position.y=Math.sin(s)*1e3,i.rotation.z=s-Math.PI/2,r.userData={originalIntensity:r.intensity,phase:Math.random()*Math.PI*2},this.navLights.push({light:r,lightMesh:a}),i};for(let s=0;s<8;s++){const i=s/8*Math.PI*2;e.add(t(i))}return e}getPosition(){return new f(0,1e4,0)}getRegionInfo(){return{center:new f(0,1e4,0),radius:2e3}}update(){if(this.navLights&&this.navLights.forEach(({light:e,lightMesh:t})=>{const s=Date.now()*.001,i=.7+.3*Math.sin(s*2+e.userData.phase);e.intensity=e.userData.originalIntensity*i,t.material&&(t.material.emissiveIntensity=i,t.material.opacity=.5+i*.5)}),this.portalShaderMaterial&&(this.portalShaderMaterial.uniforms.time.value=Date.now()*.001,this.portalLight)){const e=Date.now()*.001;this.portalLight.intensity=400+Math.sin(e*2)*150}this.portalParticles&&this.portalParticles.forEach(e=>{const t=Date.now()*.001;if(e.userData.rotationSpeed&&(e.rotation.x+=e.userData.rotationSpeed.x,e.rotation.y+=e.userData.rotationSpeed.y,e.rotation.z+=e.userData.rotationSpeed.z),e.userData.pulseSpeed){const s=.9+.2*Math.sin(t*e.userData.pulseSpeed);e.scale.set(s,s,s)}}),this.counterRotatingRing&&(this.counterRotatingRing.rotation.x+=.006,this.counterRotatingRing.rotation.y+=.009,this.counterRotatingRing.rotation.z-=.003),this.stargate&&(this.stargate.rotation.x+=.003,this.stargate.rotation.y+=.0045,this.stargate.rotation.z+=.006)}}class Gt{constructor(e){this.scene=e,this.systems={},this.currentSystem=null,this.warpGates={},this.starClasses=["O","B","A","F","G","K","M"],this.systemClassifications=["Resource-Rich","Ancient","Unstable","Barren","Hazardous","Peaceful"],this.skyboxTextures=["./assets/s1.jpg","./assets/s2.jpg","./assets/s3.jpg","./assets/s4.jpg","./assets/s5.jpg","./assets/s6.jpg","./assets/s7.jpg","./assets/s8.jpg","./assets/s9.jpg"],this.resourceDistribution={O:{iron:.3,gold:.4,platinum:.3},B:{iron:.2,gold:.3,platinum:.5},A:{iron:.2,gold:.5,platinum:.3},F:{iron:.3,gold:.4,platinum:.3},G:{iron:.4,gold:.3,platinum:.3},K:{iron:.5,gold:.3,platinum:.2},M:{iron:.6,gold:.2,platinum:.2}},this.classificationMultipliers={"Resource-Rich":{iron:2,gold:2,platinum:2},Ancient:{iron:1,gold:1.5,platinum:2.5},Unstable:{iron:1,gold:1,platinum:3},Barren:{iron:.5,gold:.5,platinum:.5},Hazardous:{iron:1.5,gold:1.5,platinum:1.5},Peaceful:{iron:1,gold:1,platinum:1},"Home System":{iron:1,gold:1,platinum:1}},this.initializeSystems()}initializeSystems(){console.log("Initializing star systems..."),this.createSolarSystem(),this.generateRandomSystems(5),this.createSystemConnections(),this.setCurrentSystem("Solar System"),console.log("Star systems initialized")}createSolarSystem(){const e={id:"Solar System",name:"Solar System",starClass:"G",classification:"Home System",starColor:16776960,planetCount:8,asteroidDensity:1,specialFeatures:["Earth"],description:"Our home system, with Earth as the starting location.",connections:[],position:new f(0,0,0),skyboxParams:{starDensity:1,nebulaDensity:.5,color:16777215,texturePath:"./assets/2k_stars_milky_way.jpg",brightness:1},resourceMultipliers:{iron:1,gold:1,platinum:1}};this.systems["Solar System"]=e}generateRandomSystems(e){for(let t=0;t<e;t++){const s=`System-${t+1}`,i=this.getRandomStarClass(),o=this.getRandomClassification(),n=this.getStarColorFromClass(i),a=this.calculateResourceMultipliers(i,o),r=this.getRandomSkyboxTexture(),l={id:s,name:this.generateSystemName(i),starClass:i,classification:o,starColor:n,planetCount:this.getRandomInt(2,10),asteroidDensity:this.getRandomFloat(.5,2.5),specialFeatures:this.generateSpecialFeatures(o),description:this.generateDescription(i,o),connections:[],position:this.generateMapPosition(),skyboxParams:{starDensity:this.getRandomFloat(.7,1.5),nebulaDensity:this.getRandomFloat(.3,1.2),color:this.getSkyboxColorFromClass(i),texturePath:r,brightness:.8},resourceMultipliers:a};this.systems[s]=l}}getRandomSkyboxTexture(){return this.skyboxTextures[this.getRandomInt(0,this.skyboxTextures.length-1)]}createSystemConnections(){const e=Object.keys(this.systems);this.systems["Solar System"];const t=this.getRandomSystemsExcept("Solar System",2);for(const i of t)this.createConnection("Solar System",i);for(const i of e)if(this.systems[i].connections.length===0){const n=this.getRandomSystemExcept(i);this.createConnection(i,n)}const s=Math.floor(e.length/2);for(let i=0;i<s;i++){const o=e[this.getRandomInt(0,e.length-1)],n=this.getRandomSystemExcept(o);this.systems[o].connections.includes(n)||this.createConnection(o,n)}}createConnection(e,t){this.systems[e].connections.push(t),this.systems[t].connections.push(e),this.warpGates[e]||(this.warpGates[e]=[]),this.warpGates[t]||(this.warpGates[t]=[]),this.warpGates[e].push(t),this.warpGates[t].push(e),console.log(`Created connection between ${e} and ${t}`)}getCurrentSystemConnections(){return this.currentSystem?this.systems[this.currentSystem].connections:[]}getCurrentSystemResources(){return this.currentSystem?this.systems[this.currentSystem].resourceMultipliers:{iron:1,gold:1,platinum:1}}setCurrentSystem(e){return this.systems[e]?(this.currentSystem=e,console.log(`Traveled to system: ${e}`),!0):!1}travelToSystem(e){if(!this.systems[e])return console.error(`System ${e} does not exist`),!1;if(!this.getCurrentSystemConnections().includes(e))return console.error(`No connection from ${this.currentSystem} to ${e}`),!1;if(window.game&&window.game.spaceship&&window.game.spaceship.isDocked&&console.log("Player is docked during interstellar travel"),this.systems[this.currentSystem]){const s=this.systems[this.currentSystem].skyboxParams;console.log(`${this.currentSystem} skybox params before travel: 
                         color=${s.color.toString(16)}, 
                         starDensity=${s.starDensity}, 
                         nebulaDensity=${s.nebulaDensity}, 
                         texture=${s.texturePath}`)}if(this.systems[e]){const s=this.systems[e].skyboxParams;console.log(`Traveling to ${e} with skybox params: 
                         color=${s.color.toString(16)}, 
                         starDensity=${s.starDensity}, 
                         nebulaDensity=${s.nebulaDensity}, 
                         texture=${s.texturePath}`)}return this.setCurrentSystem(e),!0}getAllSystems(){return this.systems}getCurrentSystemData(){return this.currentSystem?this.systems[this.currentSystem]:null}getRandomStarClass(){const e=[1,2,5,10,15,20,50],t=e.reduce((i,o)=>i+o,0);let s=Math.random()*t;for(let i=0;i<e.length;i++){if(s<e[i])return this.starClasses[i];s-=e[i]}return this.starClasses[this.getRandomInt(0,this.starClasses.length-1)]}getRandomClassification(){return this.systemClassifications[this.getRandomInt(0,this.systemClassifications.length-1)]}getStarColorFromClass(e){return{O:10203391,B:11190271,A:13293567,F:16316415,G:16774378,K:16765601,M:16764015}[e]||16777215}getSkyboxColorFromClass(e){return{O:255,B:4474111,A:8947967,F:14540287,G:16777181,K:16768426,M:16746598}[e]||16777215}generateSystemName(e){const t=["Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Proxima","Nova","Sirius","Vega","Rigel","Antares","Arcturus"],s=["Prime","Major","Minor","A","B","I","II","III","IV","V"],i=t[this.getRandomInt(0,t.length-1)],o=this.getRandomInt(0,10)>7?` ${s[this.getRandomInt(0,s.length-1)]}`:"",n=this.getRandomInt(1,999);return`${i} ${e}${n}${o}`}generateSpecialFeatures(e){const t=[];switch(e){case"Resource-Rich":t.push("Dense Asteroid Fields","Rich Mineral Veins");break;case"Ancient":t.push("Abandoned Structures","Ancient Artifacts");break;case"Unstable":t.push("Solar Flares","Radiation Bursts");break;case"Barren":t.push("Minimal Resources","Few Planets");break;case"Hazardous":t.push("Asteroid Storms","Energy Anomalies");break;case"Peaceful":t.push("Stable Environment","Optimal Mining Conditions");break}return t}generateDescription(e,t){const s={O:"A rare, hot blue star system with intense radiation.",B:"A blue-white star system with high energy output.",A:"A white star system with moderate radiation levels.",F:"A yellow-white star system with mild conditions.",G:"A yellow star system similar to our Solar System.",K:"An orange star system with reduced energy output.",M:"A common red dwarf system with low energy output."},i={"Resource-Rich":"The system is known for its abundant resources and dense asteroid fields.",Ancient:"This ancient system contains remnants of long-lost civilizations.",Unstable:"Be cautious as unpredictable stellar activity occurs in this system.",Barren:"Resources are scarce in this mostly empty star system.",Hazardous:"Environmental hazards make mining operations difficult but rewarding.",Peaceful:"This system offers stable and optimal conditions for mining operations.","Home System":"Our home system, containing Earth and the origin of humanity."};return`${s[e]} ${i[t]}`}calculateResourceMultipliers(e,t){const s=this.resourceDistribution[e],i=this.classificationMultipliers[t];return{iron:s.iron*i.iron,gold:s.gold*i.gold,platinum:s.platinum*i.platinum}}generateMapPosition(){const e=150+Math.random()*100,t=Math.random()*Math.PI*2,s=Math.cos(t)*e,i=Math.sin(t)*e;return new f(s,i,0)}getRandomSystemsExcept(e,t){const s=Object.keys(this.systems).filter(o=>o!==e),i=[];for(let o=0;o<Math.min(t,s.length);o++){const n=this.getRandomInt(0,s.length-1);i.push(s[n]),s.splice(n,1)}return i}getRandomSystemExcept(e){const t=Object.keys(this.systems).filter(i=>i!==e),s=this.getRandomInt(0,t.length-1);return t[s]}getRandomInt(e,t){return Math.floor(Math.random()*(t-e+1))+e}getRandomFloat(e,t){return Math.random()*(t-e)+e}addCustomSystem(e){var i,o,n,a;if(!e||!e.id||!e.name)return console.error("Invalid system data",e),!1;this.systems[e.id]&&console.warn(`System with ID ${e.id} already exists, overwriting`),console.log(`Adding custom system: ${e.name} (${e.id})`);const t={id:e.id,name:e.name,starClass:e.starClass||this.getRandomStarClass(),classification:e.classification||"Custom",starColor:e.starColor||this.getStarColorFromClass(e.starClass||"G"),planetCount:e.planetData?e.planetData.length:0,asteroidDensity:e.asteroidDensity||1,specialFeatures:e.specialFeatures||["User Created"],description:e.description||"A custom star system created by the user",connections:[],position:e.position||this.generateMapPosition(),skyboxParams:{starDensity:((i=e.skyboxParams)==null?void 0:i.starDensity)||1,nebulaDensity:((o=e.skyboxParams)==null?void 0:o.nebulaDensity)||.8,color:((n=e.skyboxParams)==null?void 0:n.color)||this.getSkyboxColorFromClass(e.starClass||"G"),texturePath:e.skyboxUrl||this.getRandomSkyboxTexture(),brightness:((a=e.skyboxParams)==null?void 0:a.brightness)||.8,isCustomTexture:!!e.skyboxUrl},resourceMultipliers:e.resourceMultipliers||{iron:1,gold:1,platinum:1},isCustomSystem:!0};e.planetData&&Array.isArray(e.planetData)&&this.storePlanetData(e.id,e.planetData),this.systems[e.id]=t,this.createConnection("Solar System",e.id);const s=this.getRandomSystemExcept(e.id,"Solar System");return s&&this.createConnection(e.id,s),console.log(`Custom system ${e.name} added successfully with connections to Solar System and ${s||"no other system"}`),!0}storePlanetData(e,t){if(!Array.isArray(t)){console.error("Planet data must be an array");return}const s=[];for(let i=0;i<t.length;i++){const o=t[i];s.push({name:o.name||`Planet-${i+1}`,size:o.size||300+Math.random()*500,distance:o.distance||4800+i*8e3+Math.random()*2e3,speed:o.speed||.001+Math.random()*.001,color:o.color||this.getRandomColor(),rings:o.rings!==void 0?o.rings:Math.random()>.7,textureUrl:o.textureUrl||null,axialTilt:o.axialTilt||Math.random()*Math.PI*.5,orbitalTilt:o.orbitalTilt||Math.random()*Math.PI*.2})}this.customPlanetData||(this.customPlanetData={}),this.customPlanetData[e]=s,console.log(`Stored ${s.length} planets for system ${e}`)}getRandomColor(){return Math.floor(Math.random()*16777215)}returnFromTravel(){var t,s,i;if(console.log("StarSystemGenerator: Handling return from interstellar travel"),!window.game||!window.game.spaceship)return console.error("StarSystemGenerator: Cannot return from travel - game or spaceship not found"),!1;window.game.spaceship.isDocked||(console.log("StarSystemGenerator: Setting ship to docked state after travel"),window.game.spaceship.dock());const e=(t=window.game.controls)==null?void 0:t.dockingSystem;return e&&(console.log("StarSystemGenerator: Repositioning ship near stargate"),e.positionNearStargate(),typeof e.showStargateUI=="function")?(console.log("StarSystemGenerator: Showing stargate UI via docking system"),e.showStargateUI(),!0):(i=(s=window.game.ui)==null?void 0:s.stargateInterface)!=null&&i.showStargateUI?(console.log("StarSystemGenerator: Showing stargate UI via game.ui.stargateInterface"),window.game.ui.stargateInterface.showStargateUI(),!0):(console.warn("StarSystemGenerator: Could not fully complete return from travel"),!1)}}class Ht{constructor(e,t){this.scene=e,this.camera=t,this.isTransitioning=!1,this.transitionDuration=3e3,this.onTransitionComplete=null,this.setupTransitionElements()}setupTransitionElements(){this.warpTunnel=new Z(new q,new te({color:3198928,size:2,blending:z,transparent:!0,sizeAttenuation:!0})),this.createWarpParticles(),this.createOverlay()}createWarpParticles(){const t=new Float32Array(6e3);for(let s=0;s<2e3;s++){const i=s*3,o=50+Math.random()*50,n=Math.random()*Math.PI*2,a=-500-Math.random()*3e3;t[i]=o*Math.cos(n),t[i+1]=o*Math.sin(n),t[i+2]=a}this.warpTunnel.geometry.setAttribute("position",new _(t,3)),this.originalPositions=new Float32Array(t)}createOverlay(){this.overlay=document.createElement("div"),this.overlay.id="warp-overlay",this.overlay.style.position="fixed",this.overlay.style.top="0",this.overlay.style.left="0",this.overlay.style.width="100%",this.overlay.style.height="100%",this.overlay.style.backgroundColor="#30cfd0",this.overlay.style.opacity="0",this.overlay.style.transition="opacity 0.5s",this.overlay.style.pointerEvents="none",this.overlay.style.zIndex="9999",document.body.appendChild(this.overlay)}startTransition(e){this.isTransitioning||(console.log("Starting system transition..."),this.isTransitioning=!0,this.onTransitionComplete=e,this.scene.add(this.warpTunnel),this.initialCameraPosition=this.camera.position.clone(),this.initialCameraRotation=this.camera.rotation.clone(),this.startTime=Date.now(),this.showOverlay(),this.animate())}animate(){if(!this.isTransitioning)return;const t=Date.now()-this.startTime,s=Math.min(t/this.transitionDuration,1);if(this.updateWarpEffect(s),s>=1){this.completeTransition();return}requestAnimationFrame(this.animate.bind(this))}updateWarpEffect(e){const t=this.warpTunnel.geometry.attributes.position.array,s=3+e*20;for(let i=0;i<t.length;i+=3)t[i+2]+=s,t[i+2]>100&&(t[i]=this.originalPositions[i],t[i+1]=this.originalPositions[i+1],t[i+2]=this.originalPositions[i+2]-500);this.warpTunnel.geometry.attributes.position.needsUpdate=!0,this.camera&&(this.camera.rotation.z+=5e-4*Math.sin(e*Math.PI))}showOverlay(){this.overlay&&(this.overlay.style.opacity="0.2",setTimeout(()=>{this.overlay.style.opacity="1",setTimeout(()=>{this.overlay.style.opacity="0"},500)},this.transitionDuration-1e3))}completeTransition(){console.log("System transition complete"),this.isTransitioning=!1,this.scene.remove(this.warpTunnel),this.camera&&this.initialCameraPosition&&this.initialCameraRotation&&(this.camera.position.copy(this.initialCameraPosition),this.camera.rotation.copy(this.initialCameraRotation)),this.onTransitionComplete&&typeof this.onTransitionComplete=="function"&&setTimeout(()=>{console.log("Executing transition completion callback"),this.onTransitionComplete()},100)}}class Ot{constructor(){this.apiBaseUrl=this.getApiBaseUrl(),this.token=null,this.tokenExpiry=null,this.clientId="game_client",this.isRefreshing=!1,this.refreshCallbacks=[],console.log(`API Client initialized with base URL: ${this.apiBaseUrl}`)}getApiBaseUrl(){return window.location.hostname==="localhost"||window.location.hostname==="127.0.0.1"?"http://localhost:8001":"https://aminer-skybox-generator-833fe937a945.herokuapp.com"}hasValidToken(){if(!this.token||!this.tokenExpiry)return!1;const e=new Date(this.tokenExpiry).getTime(),t=new Date().getTime(),s=5*60*1e3;return e-t>s}clearToken(){this.token=null,this.tokenExpiry=null}async getToken(){if(this.isRefreshing)return new Promise(e=>{this.refreshCallbacks.push(t=>e(t))});this.isRefreshing=!0;try{const e=await fetch(`${this.apiBaseUrl}/token`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({client_id:this.clientId})});if(!e.ok){const o=(await e.json()).detail||"Failed to get token";throw console.error(`Token error (${e.status}): ${o}`),this.refreshCallbacks.forEach(n=>n(!1)),this.refreshCallbacks=[],this.isRefreshing=!1,new Error(o)}const t=await e.json();this.token=t.access_token;const s=new Date;return s.setHours(s.getHours()+1),this.tokenExpiry=s.toISOString(),this.refreshCallbacks.forEach(i=>i(!0)),this.refreshCallbacks=[],this.isRefreshing=!1,!0}catch(e){return console.error("Error getting token:",e),this.refreshCallbacks.forEach(t=>t(!1)),this.refreshCallbacks=[],this.isRefreshing=!1,!1}}async handleApiResponse(e){if(e.status===401){if(this.clearToken(),!await this.getToken())throw new Error("Authentication failed. Please reload the application.");return!1}if(e.status===429)throw new Error("Rate limit exceeded. Please try again later.");if(!e.ok){const t=await e.json();throw new Error(t.message||t.detail||`Error: ${e.status} ${e.statusText}`)}return!0}async generateSkybox(e,t){if(!this.hasValidToken()&&!await this.getToken())throw new Error("Failed to authenticate with the API");const s=await fetch(`${this.apiBaseUrl}/generate-skybox`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.token}`},body:JSON.stringify({system_name:e,skybox_description:t})});return await this.handleApiResponse(s)?await s.json():this.generateSkybox(e,t)}async generatePlanet(e,t){if(!this.hasValidToken()&&!await this.getToken())throw new Error("Failed to authenticate with the API");const s=await fetch(`${this.apiBaseUrl}/generate-planet`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.token}`},body:JSON.stringify({planet_name:e,planet_description:t})});return await this.handleApiResponse(s)?await s.json():this.generatePlanet(e,t)}getFullImageUrl(e){if(e.startsWith("http"))return e;const t=e.startsWith("/")?e.substring(1):e;return`${this.apiBaseUrl}/${t}`}}class Nt{constructor(e,t){this.starSystemGenerator=e,this.environment=t,this.apiClient=new Ot,this.isVisible=!1,this.isGenerating=!1,this.generatedSkyboxUrl=null,this.generatedPlanetUrls=[],this.systemData=null,this.isMobile=this.detectMobile(),this.createUI(),this.setupEventHandlers(),this.setupSliderListeners(1)}detectMobile(){return"ontouchstart"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0||window.innerWidth<900}createUI(){this.container=document.createElement("div"),this.container.id="custom-system-creator",this.container.className="modal-container",this.container.style.display="none",this.container.innerHTML=`
            <div class="modal-content" style="${this.isMobile?"width: 94%; max-height: 85vh; overflow-y: auto; -webkit-overflow-scrolling: touch; padding-bottom: 100px; overscroll-behavior: contain;":""}">
                <div class="modal-header">
                    <h2>Create New Star System</h2>
                    <button id="close-system-creator" class="close-btn" style="${this.isMobile?"font-size: 28px; padding: 12px; min-height: 48px; min-width: 48px;":""}">&times;</button>
                </div>
                <div class="modal-body" style="${this.isMobile?"padding-bottom: 150px;":""}">
                    <div id="system-creator-form">
                        <div class="form-group">
                            <label for="system-name">System Name:</label>
                            <input type="text" id="system-name" placeholder="Enter a name for your star system" style="${this.isMobile?"font-size: 16px; padding: 14px; height: 48px;":""}">
                        </div>
                        
                        <div class="form-group">
                            <label for="skybox-description">Skybox Description:</label>
                            <textarea id="skybox-description" rows="${this.isMobile?"3":"4"}" placeholder="Describe the skybox/space environment (e.g., 'A vibrant nebula with blue and purple clouds, dotted with bright stars')" style="${this.isMobile?"font-size: 16px; padding: 14px;":""}"></textarea>
                        </div>
                        
                        <div class="form-group">
                            <label for="star-class">Star Class:</label>
                            <select id="star-class" class="form-control" style="${this.isMobile?"font-size: 16px; padding: 14px; height: 48px;":""}">
                                <option value="O">O - Blue Giant (Hot, Blue)</option>
                                <option value="B">B - Blue-White</option>
                                <option value="A">A - White</option>
                                <option value="F">F - Yellow-White</option>
                                <option value="G" selected>G - Yellow (Sun-like)</option>
                                <option value="K">K - Orange</option>
                                <option value="M">M - Red Dwarf</option>
                            </select>
                            <p class="help-text">Different star classes affect the lighting and appearance of your system.</p>
                        </div>
                        
                        <div id="planet-descriptions">
                            <div class="form-group planet-input">
                                <h3>Planet 1</h3>
                                <label for="planet-name-1">Planet Name:</label>
                                <input type="text" id="planet-name-1" placeholder="Enter a name for this planet" style="${this.isMobile?"font-size: 16px; padding: 14px; height: 48px;":""}">
                                
                                <label for="planet-description-1">Planet Description:</label>
                                <textarea id="planet-description-1" rows="${this.isMobile?"2":"3"}" placeholder="Describe the planet (e.g., 'A rocky planet with large oceans and ice caps')" style="${this.isMobile?"font-size: 16px; padding: 14px;":""}"></textarea>
                                
                                <div class="planet-properties">
                                    <div class="property-row">
                                        <label for="planet-size-1">Size:</label>
                                        <input type="range" id="planet-size-1" min="300" max="1000" value="450" class="slider" style="${this.isMobile?"height: 30px; margin: 10px 0;":""}">
                                        <span class="slider-value" id="planet-size-value-1">450</span>
                                    </div>
                                    
                                    <div class="property-row">
                                        <label for="planet-distance-1">Distance from Star:</label>
                                        <input type="range" id="planet-distance-1" min="4000" max="60000" value="8000" class="slider" style="${this.isMobile?"height: 30px; margin: 10px 0;":""}">
                                        <span class="slider-value" id="planet-distance-value-1">8000</span>
                                    </div>
                                    
                                    <div class="property-row">
                                        <label for="planet-speed-1">Orbit Speed:</label>
                                        <input type="range" id="planet-speed-1" min="1" max="10" value="5" class="slider" style="${this.isMobile?"height: 30px; margin: 10px 0;":""}">
                                        <span class="slider-value" id="planet-speed-value-1">0.0015</span>
                                    </div>
                                    
                                    <div class="property-row" style="${this.isMobile?"margin-top: 15px;":""}">
                                        <label for="planet-rings-1">Has Rings:</label>
                                        <input type="checkbox" id="planet-rings-1" style="${this.isMobile?"transform: scale(1.7); margin: 0 15px; min-height: 24px; min-width: 24px;":""}">
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <button id="add-planet-btn" class="secondary-btn" style="${this.isMobile?"min-height: 50px; padding: 14px; font-size: 16px; width: 100%; margin: 15px 0;":""}">+ Add Another Planet</button>
                        
                        <div class="form-actions">
                            <button id="generate-system-btn" class="primary-btn" style="${this.isMobile?"min-height: 54px; padding: 16px; font-size: 18px; margin-top: 20px; width: 100%;":""}">Generate System</button>
                        </div>
                    </div>
                    
                    <div id="generation-progress" style="display: none;">
                        <h3>Generating your star system...</h3>
                        <div class="progress-bar">
                            <div class="progress-fill"></div>
                        </div>
                        <p id="generation-status">Initializing...</p>
                    </div>
                    
                    <div id="system-preview" style="display: none;">
                        <h3>Preview</h3>
                        <div class="preview-container" style="${this.isMobile?"flex-direction: column;":""}">
                            <div class="skybox-preview" style="${this.isMobile?"width: 100%; margin-bottom: 20px;":""}">
                                <h4>Skybox</h4>
                                <img id="skybox-preview-img" src="" alt="Skybox Preview">
                            </div>
                            <div class="planets-preview" id="planets-preview" style="${this.isMobile?"width: 100%;":""}">
                                <!-- Planet previews will be added here dynamically -->
                            </div>
                        </div>
                        <div class="form-actions" style="${this.isMobile?"padding-bottom: 30px;":""}">
                            <button id="travel-to-system-btn" class="primary-btn" style="${this.isMobile?"min-height: 54px; padding: 16px; font-size: 18px; width: 100%; margin-top: 20px;":""}">Travel to System</button>
                            <button id="regenerate-system-btn" class="secondary-btn" style="${this.isMobile?"min-height: 48px; padding: 14px; font-size: 16px; width: 100%; margin-top: 15px;":""}">Regenerate</button>
                        </div>
                    </div>
                </div>
            </div>
        `,document.body.appendChild(this.container),this.systemNameInput=document.getElementById("system-name"),this.skyboxDescription=document.getElementById("skybox-description"),this.planetDescriptions=document.getElementById("planet-descriptions"),this.addPlanetBtn=document.getElementById("add-planet-btn"),this.generateSystemBtn=document.getElementById("generate-system-btn"),this.generationProgress=document.getElementById("generation-progress"),this.generationStatus=document.getElementById("generation-status"),this.systemForm=document.getElementById("system-creator-form"),this.systemPreview=document.getElementById("system-preview"),this.skyboxPreviewImg=document.getElementById("skybox-preview-img"),this.planetsPreview=document.getElementById("planets-preview"),this.travelToSystemBtn=document.getElementById("travel-to-system-btn"),this.regenerateSystemBtn=document.getElementById("regenerate-system-btn"),this.isMobile&&this.addMobileStyles()}addMobileStyles(){if(!document.getElementById("custom-system-creator-mobile-styles")){const e=document.createElement("style");e.id="custom-system-creator-mobile-styles",e.innerHTML=`
                @media (max-width: 900px) {
                    /* Mobile-specific styles for CustomSystemCreator */
                    #custom-system-creator .modal-content {
                        border-radius: 10px;
                        padding-bottom: 120px;
                    }
                    
                    #custom-system-creator .form-group {
                        margin-bottom: 24px;
                    }
                    
                    #custom-system-creator label {
                        font-size: 16px;
                        margin-bottom: 10px;
                        display: block;
                    }
                    
                    #custom-system-creator .property-row {
                        flex-direction: column;
                        align-items: flex-start;
                        margin-bottom: 20px;
                    }
                    
                    #custom-system-creator .property-row label {
                        margin-bottom: 10px;
                        width: 100%;
                    }
                    
                    #custom-system-creator .slider {
                        width: 100%;
                        margin: 10px 0;
                    }
                    
                    #custom-system-creator .slider-value {
                        margin-top: 5px;
                        align-self: flex-end;
                    }
                    
                    #custom-system-creator .planet-input {
                        padding: 20px;
                        margin-bottom: 30px;
                    }
                    
                    #custom-system-creator input[type="text"],
                    #custom-system-creator textarea,
                    #custom-system-creator select {
                        font-size: 16px !important;
                        padding: 14px !important;
                    }
                    
                    #custom-system-creator .planet-preview {
                        flex: 0 0 100%;
                        margin-bottom: 15px;
                    }
                    
                    #custom-system-creator .form-actions {
                        text-align: center;
                    }
                    
                    /* Better slider for touch */
                    #custom-system-creator input[type="range"] {
                        -webkit-appearance: none;
                        height: 30px;
                        background: #0d1e2f;
                        border-radius: 15px;
                        padding: 0;
                        outline: none;
                    }
                    
                    #custom-system-creator input[type="range"]::-webkit-slider-thumb {
                        -webkit-appearance: none;
                        width: 30px;
                        height: 30px;
                        border-radius: 50%;
                        background: #4a9dff;
                        cursor: pointer;
                    }
                    
                    #custom-system-creator input[type="range"]::-moz-range-thumb {
                        width: 30px;
                        height: 30px;
                        border-radius: 50%;
                        background: #4a9dff;
                        cursor: pointer;
                        border: none;
                    }
                    
                    /* Touch ripple effect for buttons */
                    .ripple {
                        position: relative;
                        overflow: hidden;
                        transform: translate3d(0, 0, 0);
                    }
                    
                    .ripple:after {
                        content: "";
                        display: block;
                        position: absolute;
                        width: 100%;
                        height: 100%;
                        top: 0;
                        left: 0;
                        pointer-events: none;
                        background-image: radial-gradient(circle, #fff 10%, transparent 10.01%);
                        background-repeat: no-repeat;
                        background-position: 50%;
                        transform: scale(10, 10);
                        opacity: 0;
                        transition: transform .5s, opacity 1s;
                    }
                    
                    .ripple:active:after {
                        transform: scale(0, 0);
                        opacity: .3;
                        transition: 0s;
                    }
                    
                    /* Character counter for text areas */
                    .char-counter {
                        font-size: 12px;
                        color: #aaa;
                        text-align: right;
                        margin-top: 5px;
                    }
                    
                    .char-counter.warning {
                        color: #ff9900;
                    }
                    
                    .char-counter.error {
                        color: #ff3030;
                    }
                }
            `,document.head.appendChild(e)}this.addRippleEffect(),this.addCharacterCounters()}addRippleEffect(){if(!this.isMobile)return;this.container.querySelectorAll("button").forEach(t=>{t.classList.contains("ripple")||t.classList.add("ripple")})}addCharacterCounters(){if(!this.isMobile)return;this.addCharacterCounter(this.skyboxDescription,250);const e=document.getElementById("planet-description-1");e&&this.addCharacterCounter(e,150)}addCharacterCounter(e,t){if(!e)return;const s=document.createElement("div");s.className="char-counter";const i=()=>{const o=t-e.value.length;s.textContent=`${o} characters remaining`,s.className="char-counter",o<30&&s.classList.add("warning"),o<10&&s.classList.add("error"),o<0&&(e.value=e.value.substring(0,t),s.textContent="0 characters remaining")};e.addEventListener("input",i),e.addEventListener("keydown",o=>{e.value.length>=t&&o.key!=="Backspace"&&o.key!=="Delete"&&o.key!=="ArrowLeft"&&o.key!=="ArrowRight"&&!o.ctrlKey&&!o.metaKey&&o.preventDefault()}),i(),e.parentNode.insertBefore(s,e.nextSibling),e.setAttribute("maxlength",t.toString())}setupEventHandlers(){const e=document.getElementById("close-system-creator");if(e.addEventListener("click",()=>{this.hide(),this.playUISound()}),this.isMobile){e.addEventListener("touchend",s=>{s.preventDefault(),this.hide(),this.playUISound()}),this.container.addEventListener("touchmove",s=>{s.stopPropagation()},{passive:!0});const t=this.container.querySelector(".modal-content");t&&(t.addEventListener("touchstart",()=>{},{passive:!0}),t.addEventListener("touchmove",()=>{},{passive:!0}))}this.addPlanetBtn.addEventListener("click",()=>{this.addPlanetInput(),this.playUISound()}),this.isMobile&&this.addPlanetBtn.addEventListener("touchend",t=>{t.preventDefault(),this.addPlanetInput(),this.playUISound()}),this.generateSystemBtn.addEventListener("click",()=>{this.generateSystem(),this.playUISound()}),this.isMobile&&this.generateSystemBtn.addEventListener("touchend",t=>{t.preventDefault(),this.generateSystem(),this.playUISound()}),this.travelToSystemBtn.addEventListener("click",()=>{this.travelToSystem(),this.playUISound()}),this.isMobile&&this.travelToSystemBtn.addEventListener("touchend",t=>{t.preventDefault(),this.travelToSystem(),this.playUISound()}),this.regenerateSystemBtn.addEventListener("click",()=>{this.systemPreview.style.display="none",this.systemForm.style.display="block",this.playUISound()}),this.isMobile&&this.regenerateSystemBtn.addEventListener("touchend",t=>{t.preventDefault(),this.systemPreview.style.display="none",this.systemForm.style.display="block",this.playUISound()}),document.addEventListener("keydown",t=>{t.key==="Escape"&&this.isVisible&&this.hide()}),this.container.addEventListener("click",t=>{t.target===this.container&&this.hide()}),this.isMobile&&this.container.addEventListener("touchstart",t=>{t.target===this.container&&(t.preventDefault(),this.hide())},{passive:!1})}addPlanetInput(){const t=this.planetDescriptions.getElementsByClassName("planet-input").length+1,s=document.createElement("div");s.className="form-group planet-input",s.innerHTML=`
            <h3>Planet ${t}</h3>
            <label for="planet-name-${t}">Planet Name:</label>
            <input type="text" id="planet-name-${t}" placeholder="Enter a name for this planet" style="${this.isMobile?"font-size: 16px; padding: 14px; height: 48px;":""}">
            
            <label for="planet-description-${t}">Planet Description:</label>
            <textarea id="planet-description-${t}" rows="${this.isMobile?"2":"3"}" placeholder="Describe the planet (e.g., 'A rocky planet with large oceans and ice caps')" style="${this.isMobile?"font-size: 16px; padding: 14px;":""}" maxlength="150"></textarea>
            
            <div class="planet-properties">
                <div class="property-row">
                    <label for="planet-size-${t}">Size:</label>
                    <input type="range" id="planet-size-${t}" min="300" max="1000" value="450" class="slider" style="${this.isMobile?"height: 30px; margin: 10px 0;":""}">
                    <span class="slider-value" id="planet-size-value-${t}">450</span>
                </div>
                
                <div class="property-row">
                    <label for="planet-distance-${t}">Distance from Star:</label>
                    <input type="range" id="planet-distance-${t}" min="4000" max="60000" value="${4e3+t*6e3}" class="slider" style="${this.isMobile?"height: 30px; margin: 10px 0;":""}">
                    <span class="slider-value" id="planet-distance-value-${t}">${4e3+t*6e3}</span>
                </div>
                
                <div class="property-row">
                    <label for="planet-speed-${t}">Orbit Speed:</label>
                    <input type="range" id="planet-speed-${t}" min="1" max="10" value="5" class="slider" style="${this.isMobile?"height: 30px; margin: 10px 0;":""}">
                    <span class="slider-value" id="planet-speed-value-${t}">0.0015</span>
                </div>
                
                <div class="property-row" style="${this.isMobile?"margin-top: 15px;":""}">
                    <label for="planet-rings-${t}">Has Rings:</label>
                    <input type="checkbox" id="planet-rings-${t}" style="${this.isMobile?"transform: scale(1.7); margin: 0 15px; min-height: 24px; min-width: 24px;":""}">
                </div>
            </div>
            
            <button class="remove-planet-btn danger-btn ${this.isMobile?"ripple":""}" style="${this.isMobile?"min-height: 50px; padding: 14px; font-size: 16px; right: 15px; top: 15px;":""}">Remove</button>
        `,this.planetDescriptions.appendChild(s),this.setupSliderListeners(t);const i=s.querySelector(".remove-planet-btn");if(i.addEventListener("click",()=>{s.remove(),this.updatePlanetNumbers(),this.playUISound()}),this.isMobile){i.addEventListener("touchend",a=>{a.preventDefault(),s.remove(),this.updatePlanetNumbers(),this.playUISound()}),s.querySelectorAll('input[type="range"]').forEach(a=>{a.addEventListener("touchstart",()=>{a.classList.add("slider-active")}),a.addEventListener("touchend",()=>{a.classList.remove("slider-active")})});const n=s.querySelector('textarea[id^="planet-description-"]');n&&this.addCharacterCounter(n,150)}this.isMobile&&(this.scrollTimeout&&clearTimeout(this.scrollTimeout),this.scrollTimeout=setTimeout(()=>{try{const o=this.container.querySelector(".modal-content"),n=this.planetDescriptions.lastElementChild;if(o&&n){const r=n.offsetTop-o.clientHeight/4;o.scrollTo({top:r,behavior:"smooth"})}}catch(o){console.warn("Error during scroll:",o)}},100))}setupSliderListeners(e){const t=document.getElementById(`planet-size-${e}`),s=document.getElementById(`planet-size-value-${e}`);t.addEventListener("input",()=>{s.textContent=t.value});const i=document.getElementById(`planet-distance-${e}`),o=document.getElementById(`planet-distance-value-${e}`);i.addEventListener("input",()=>{o.textContent=i.value});const n=document.getElementById(`planet-speed-${e}`),a=document.getElementById(`planet-speed-value-${e}`);n.addEventListener("input",()=>{const r=.001+(n.value-1)*.00011111111111111112;a.textContent=r.toFixed(4)}),this.isMobile&&[t,i,n].forEach(l=>{l.addEventListener("touchstart",()=>{l.classList.add("slider-active")}),l.addEventListener("touchend",()=>{l.classList.remove("slider-active")})})}updatePlanetNumbers(){const e=this.planetDescriptions.getElementsByClassName("planet-input");for(let t=0;t<e.length;t++){const i=e[t].querySelector("h3");i.textContent=`Planet ${t+1}`}}async generateSystem(){const e=this.systemNameInput.value.trim(),t=this.skyboxDescription.value.trim(),s=document.getElementById("star-class").value;if(!e||!t){this.showMobileAlert("Please enter a system name and skybox description.");return}this.systemForm.style.display="none",this.generationProgress.style.display="block",this.isGenerating=!0;try{this.apiClient.hasValidToken()||(this.updateGenerationStatus("Authenticating..."),await this.apiClient.getToken()),this.updateGenerationStatus("Generating skybox...");const i=await this.apiClient.generateSkybox(e,t);if(!i.success)throw new Error(i.message||"Failed to generate skybox");if(!i.image_paths||i.image_paths.length===0)throw new Error("No skybox images were generated");this.generatedSkyboxUrl=i.image_paths[0];const o=[],n=this.planetDescriptions.getElementsByClassName("planet-input");for(let a=0;a<n.length;a++){const r=n[a],l=a+1,d=r.querySelector('input[id^="planet-name-"]'),c=r.querySelector('textarea[id^="planet-description-"]'),h=r.querySelector('input[id^="planet-size-"]'),u=r.querySelector('input[id^="planet-distance-"]'),p=r.querySelector('input[id^="planet-speed-"]'),y=r.querySelector('input[id^="planet-rings-"]'),m=d.value.trim(),v=c.value.trim();if(m&&v){const S=.001+(parseFloat(p.value)-1)*(.001/9);o.push({name:m,description:v,size:parseInt(h.value),distance:parseInt(u.value),speed:S,rings:y.checked})}}this.generatedPlanetUrls=[];for(let a=0;a<o.length;a++){const r=o[a];this.updateGenerationStatus(`Generating planet ${a+1} of ${o.length}: ${r.name}...`);const l=await this.apiClient.generatePlanet(r.name,r.description);l.success&&l.image_paths&&l.image_paths.length>0&&this.generatedPlanetUrls.push({name:r.name,url:l.image_paths[0]})}this.systemData={id:`Custom-${Date.now()}`,name:e,starClass:s,classification:"Custom",description:`Custom star system with ${o.length} planets`,skyboxUrl:this.generatedSkyboxUrl,lightIntensityMultiplier:.8,planetData:o.map((a,r)=>{var l;return{name:a.name,textureUrl:((l=this.generatedPlanetUrls[r])==null?void 0:l.url)||null,size:a.size,distance:a.distance,speed:a.speed,color:this.getStarColorForClass(s),rings:a.rings}})},this.showSystemPreview()}catch(i){console.error("Error generating system:",i),this.showMobileAlert(`Failed to generate system: ${i.message}`),this.generationProgress.style.display="none",this.systemForm.style.display="block"}this.isGenerating=!1}showSystemPreview(){this.generatedSkyboxUrl&&(this.skyboxPreviewImg.src=this.apiClient.getFullImageUrl(this.generatedSkyboxUrl)),this.planetsPreview.innerHTML="",this.generatedPlanetUrls.forEach(e=>{const t=document.createElement("div");t.className="planet-preview",t.innerHTML=`
                <h4>${e.name}</h4>
                <img src="${this.apiClient.getFullImageUrl(e.url)}" alt="${e.name}">
            `,this.planetsPreview.appendChild(t)}),this.generationProgress.style.display="none",this.systemPreview.style.display="block",this.isMobile&&setTimeout(()=>{this.systemPreview.scrollIntoView({behavior:"smooth",block:"start"})},50)}travelToSystem(){if(!this.systemData){this.showMobileAlert("No system data available. Please generate a system first.");return}try{if(!this.starSystemGenerator.addCustomSystem(this.systemData))throw new Error("Failed to add custom system");this.hide(),this.environment&&this.environment.travelToSystem?this.environment.travelToSystem(this.systemData.id):console.error("Environment or travelToSystem method not available")}catch(e){console.error("Error traveling to custom system:",e),this.showMobileAlert(`Failed to travel to custom system: ${e.message}`)}}updateGenerationStatus(e){this.generationStatus&&(this.generationStatus.textContent=e,console.log("Generation status:",e))}getStarColorForClass(e){return{O:10203391,B:11190271,A:13293567,F:16316415,G:16774378,K:16765601,M:16764015}[e]||16774378}showMobileAlert(e){if(this.isMobile){const t=document.createElement("div");t.style.position="fixed",t.style.top="0",t.style.left="0",t.style.width="100%",t.style.height="100%",t.style.backgroundColor="rgba(0, 0, 0, 0.7)",t.style.display="flex",t.style.justifyContent="center",t.style.alignItems="center",t.style.zIndex="10000";const s=document.createElement("div");s.style.backgroundColor="#0a1a2a",s.style.color="#c5d8f1",s.style.padding="20px",s.style.borderRadius="10px",s.style.maxWidth="80%",s.style.textAlign="center",s.style.border="2px solid #2c5a8c";const i=document.createElement("p");i.textContent=e,i.style.marginBottom="20px",i.style.fontSize="16px";const o=document.createElement("button");o.textContent="OK",o.style.padding="12px 30px",o.style.fontSize="16px",o.style.backgroundColor="#2c5a8c",o.style.color="white",o.style.border="none",o.style.borderRadius="5px",o.style.minHeight="48px",o.style.minWidth="120px",s.appendChild(i),s.appendChild(o),t.appendChild(s),document.body.appendChild(t),this.playUISound(),o.addEventListener("click",()=>{document.body.removeChild(t)}),o.addEventListener("touchend",n=>{n.preventDefault(),document.body.removeChild(t),this.playUISound()})}else alert(e)}playUISound(){window.game&&window.game.audio&&window.game.audio.playSound("boink")}show(){if(this.container){if(this.cleanupBeforeHiding(),this.container.style.display="flex",this.isVisible=!0,this.systemForm.style.display="block",this.generationProgress.style.display="none",this.systemPreview.style.display="none",this.playUISound(),this.isMobile){const e=this.container.querySelector(".modal-content");e&&(e.scrollTop=0,e.style.overflowY="auto",e.style.webkitOverflowScrolling="touch",e.style.overscrollBehavior="contain"),document.body.classList.add("modal-open"),this.scrollTimeout=setTimeout(()=>{this.systemNameInput&&this.systemNameInput.focus()},300)}else setTimeout(()=>{this.systemNameInput&&this.systemNameInput.focus()},300);if(!document.getElementById("modal-open-style")&&this.isMobile){const e=document.createElement("style");e.id="modal-open-style",e.textContent=`
                    .modal-open {
                        overflow: hidden;
                        position: fixed;
                        width: 100%;
                        height: 100%;
                    }
                `,document.head.appendChild(e)}if(!document.getElementById("custom-system-creator-styles")){const e=document.createElement("style");e.id="custom-system-creator-styles",e.textContent=`
                    .property-row {
                        display: flex;
                        align-items: center;
                        margin-bottom: 10px;
                    }
                    
                    .property-row label {
                        flex: 0 0 150px;
                        margin-right: 10px;
                    }
                    
                    .property-row .slider {
                        flex: 1;
                        height: 10px;
                        background: #2a2a2a;
                        outline: none;
                        border-radius: 5px;
                    }
                    
                    .property-row .slider-value {
                        flex: 0 0 60px;
                        margin-left: 10px;
                        text-align: right;
                    }
                    
                    .planet-properties {
                        background: rgba(0, 0, 0, 0.2);
                        padding: 15px;
                        border-radius: 5px;
                        margin-top: 10px;
                        margin-bottom: 15px;
                    }
                    
                    .help-text {
                        font-size: 12px;
                        color: #aaa;
                        margin-top: 5px;
                    }
                    
                    select.form-control {
                        width: 100%;
                        padding: 8px;
                        border-radius: 4px;
                        background: #25303e;
                        color: white;
                        border: 1px solid #3a5472;
                    }
                    
                    /* Active slider styles */
                    .slider-active {
                        background: #3a5472 !important;
                    }
                    
                    /* Add smooth transitions */
                    #custom-system-creator button {
                        transition: all 0.2s ease;
                    }
                    
                    #custom-system-creator button:active {
                        transform: scale(0.95);
                    }
                `,document.head.appendChild(e)}}}hide(){this.container&&!this.isGenerating&&(this.cleanupBeforeHiding(),this.container.style.display="none",this.isVisible=!1,this.playUISound(),setTimeout(()=>{if(window.game&&window.game.ui&&window.game.ui.stargateInterface)console.log("CustomSystemCreator: Returning to stargate UI"),window.game.ui.stargateInterface.showStargateUI();else{const e=document.getElementById("stargate-ui");e?(e.style.display="block",console.log("CustomSystemCreator: Showed stargate UI via direct DOM access")):console.warn("CustomSystemCreator: Could not find stargate UI to return to")}},100))}toggle(){this.isVisible?this.hide():this.show()}cleanupBeforeHiding(){this.isGenerating&&(this.isGenerating=!1,this.generationProgress.style.display="none",this.systemForm.style.display="block"),this.scrollTimeout&&(clearTimeout(this.scrollTimeout),this.scrollTimeout=null),document.body.style.pointerEvents="auto",this.isMobile&&(document.body.style.touchAction="auto",this.container.style.display="none",this.container.offsetHeight)}destroy(){this.cleanupBeforeHiding(),document.body.classList.remove("modal-open"),this.container&&this.container.parentNode&&this.container.parentNode.removeChild(this.container)}}class _t{constructor(e,t){this.scene=e,this.spaceship=t,this.startPortalGroup=null,this.exitPortalGroup=null,this.startPortalBox=null,this.exitPortalBox=null,this.startPortalParticleSystem=null,this.exitPortalParticleSystem=null,this.shouldCreateStartPortal=new URLSearchParams(window.location.search).has("portal"),this.refUrl=new URLSearchParams(window.location.search).get("ref")||"",this.init()}init(){this.shouldCreateStartPortal&&this.createStartPortal(),this.createExitPortal()}createStartPortal(){this.startPortalGroup=new G,this.startPortalGroup.name="startPortal";const e=new X(150,15,32,100),t=new I({color:16711680,emissive:16711680,emissiveIntensity:.5,roughness:.3,metalness:.7}),s=new w(e,t);this.startPortalGroup.add(s);const i=new Ae(135,32),o=new Y({color:16711680,transparent:!0,opacity:.3,side:Q}),n=new w(i,o);n.position.z=.1,this.startPortalGroup.add(n);const a=500,r=new q,l=new Float32Array(a*3);for(let c=0;c<a;c++){const h=c/a*Math.PI*2,u=135+(Math.random()*30-15);l[c*3]=Math.cos(h)*u,l[c*3+1]=Math.sin(h)*u,l[c*3+2]=(Math.random()-.5)*15}r.setAttribute("position",new _(l,3));const d=new te({color:16733525,size:3.5,blending:z,transparent:!0});this.startPortalParticleSystem=new Z(r,d),this.startPortalGroup.add(this.startPortalParticleSystem),this.startPortalGroup.position.set(0,15e3,0),this.startPortalGroup.rotation.x=Math.PI/2,this.scene.add(this.startPortalGroup),this.startPortalBox=new Ee().setFromObject(this.startPortalGroup),console.log("Start portal created at position:",this.startPortalGroup.position)}createExitPortal(){this.exitPortalGroup=new G,this.exitPortalGroup.name="exitPortal";const e=new X(150,15,32,100),t=new I({color:65280,emissive:65280,emissiveIntensity:.5,roughness:.3,metalness:.7}),s=new w(e,t);this.exitPortalGroup.add(s);const i=new Ae(135,32),o=new Y({color:65280,transparent:!0,opacity:.3,side:Q}),n=new w(i,o);n.position.z=.1,this.exitPortalGroup.add(n);const a=500,r=new q,l=new Float32Array(a*3);for(let v=0;v<a;v++){const k=v/a*Math.PI*2,S=135+(Math.random()*30-15);l[v*3]=Math.cos(k)*S,l[v*3+1]=Math.sin(k)*S,l[v*3+2]=(Math.random()-.5)*15}r.setAttribute("position",new _(l,3));const d=new te({color:5635925,size:3.5,blending:z,transparent:!0});this.exitPortalParticleSystem=new Z(r,d),this.exitPortalGroup.add(this.exitPortalParticleSystem);const c=document.createElement("canvas");c.width=1024,c.height=256;const h=c.getContext("2d");h.fillStyle="black",h.fillRect(0,0,c.width,c.height),h.font="72px Arial",h.fillStyle="#00ff00",h.textAlign="center",h.textBaseline="middle",h.fillText("VIBEVERSE PORTAL",c.width/2,c.height/2);const u=new ct(c),p=new dt(200,50),y=new Y({map:u,transparent:!0,side:Q}),m=new w(p,y);m.position.set(0,200,0),this.exitPortalGroup.add(m),this.exitPortalGroup.position.set(0,16e3,0),this.exitPortalGroup.rotation.x=Math.PI/2,this.scene.add(this.exitPortalGroup),this.exitPortalBox=new Ee().setFromObject(this.exitPortalGroup),console.log("Exit portal created at position:",this.exitPortalGroup.position)}animateStartPortal(e){!this.startPortalGroup||!this.startPortalParticleSystem||(this.startPortalParticleSystem.rotation.z+=e*.5,Math.random()<.05&&this.startPortalBox.setFromObject(this.startPortalGroup))}animateExitPortal(e){!this.exitPortalGroup||!this.exitPortalParticleSystem||(this.exitPortalParticleSystem.rotation.z+=e*.5,Math.random()<.05&&this.exitPortalBox.setFromObject(this.exitPortalGroup))}checkPortalInteractions(e){if(!this.spaceship||!this.spaceship.mesh)return;const t=new Ee().setFromObject(this.spaceship.mesh);this.startPortalGroup&&this.startPortalBox&&this.spaceship.mesh.position.distanceTo(this.startPortalGroup.position)<400&&t.intersectsBox(this.startPortalBox)&&this.handleStartPortalEntry(),this.exitPortalGroup&&this.exitPortalBox&&this.spaceship.mesh.position.distanceTo(this.exitPortalGroup.position)<400&&t.intersectsBox(this.exitPortalBox)&&this.handleExitPortalEntry()}handleStartPortalEntry(){if(this._isRedirecting)return;this._isRedirecting=!0,console.log("Player entered start portal");let e=this.refUrl;if(e&&!e.startsWith("http")&&(e="https://"+e),!e){console.error("No target URL specified for portal"),this._isRedirecting=!1;return}const t=new URLSearchParams(window.location.search);t.delete("ref"),t.delete("portal");let s;try{s=new URL(e);for(const[i,o]of t.entries())s.searchParams.append(i,o)}catch{console.error("Invalid target URL:",e),this._isRedirecting=!1;return}console.log("Redirecting to:",s.toString()),setTimeout(()=>{window.location.href=s.toString()},100)}handleExitPortalEntry(){if(this._isRedirecting)return;this._isRedirecting=!0,console.log("Player entered exit portal");let e="https://portal.pieter.com";const t=new URLSearchParams(window.location.search),s=new URL(e);s.searchParams.append("portal","true"),s.searchParams.append("username",this.getUsername()),s.searchParams.append("color","white"),s.searchParams.append("speed",this.getPlayerSpeed());for(const[i,o]of t.entries())["portal","username","color","speed"].includes(i)||s.searchParams.append(i,o);console.log("Redirecting to:",s.toString()),setTimeout(()=>{window.location.href=s.toString()},100)}getUsername(){return window.game&&window.game.selfUsername?window.game.selfUsername:`Miner${Math.floor(Math.random()*1e4)}`}getPlayerSpeed(){return window.game&&window.game.currentSpeed?window.game.currentSpeed.toString():this.spaceship&&this.spaceship.velocity?this.spaceship.velocity.length().toString():"10"}update(e){this.animateStartPortal(e),this.animateExitPortal(e),this.checkPortalInteractions(e)}dispose(){this.startPortalGroup&&this.scene.remove(this.startPortalGroup),this.exitPortalGroup&&this.scene.remove(this.exitPortalGroup),this.startPortalGroup=null,this.exitPortalGroup=null,this.startPortalBox=null,this.exitPortalBox=null,this.startPortalParticleSystem=null,this.exitPortalParticleSystem=null}}class Vt{constructor(e){this.scene=e,this.anomalies=[],this.minRadius=32e3,this.maxRadius=45e3,this.width=3e3,this.anomalyScale=4,this.orbScale=4,this.orbValues={common:100,uncommon:500,rare:1500,epic:5e3,legendary:15e3},this.spawnTimer=0,this.checkInterval=60,this.spawnChance=.5,this.despawnChance=.3,this.anomalyTypes=["vortex","crystalCluster","nebulaNexus","quantumFlux","darkMatter"],this.maxAnomalies=5,this.updateAnomalyCountDisplay()}checkAnomalySpawning(e){if(this.spawnTimer+=e,this.spawnTimer>=this.checkInterval){if(this.spawnTimer-=this.checkInterval,this.anomalies.length<this.maxAnomalies&&Math.random()<this.spawnChance){const s=this.anomalyTypes.filter(i=>!this.anomalies.some(o=>o.type===i));if(s.length>0){const i=s[Math.floor(Math.random()*s.length)];this.spawnAnomaly(i),this.updateAnomalyCountDisplay()}}const t=[];this.anomalies.forEach(s=>{Math.random()<this.despawnChance&&t.push(s)}),t.length>0&&(t.forEach(s=>{this.despawnAnomaly(s)}),this.updateAnomalyCountDisplay())}}spawnAnomaly(e){switch(console.log(`Spawning ${e} anomaly`),e){case"vortex":this.createVortexAnomaly();break;case"crystalCluster":this.createCrystalClusterAnomaly();break;case"nebulaNexus":this.createNebulaNexusAnomaly();break;case"quantumFlux":this.createQuantumFluxAnomaly();break;case"darkMatter":this.createDarkMatterAnomaly();break}}despawnAnomaly(e){switch(console.log(`Despawning ${e.type} anomaly`),this.scene.remove(e.mesh),e.type){case"vortex":e.rings&&e.rings.forEach(s=>{s.mesh&&s.mesh.geometry&&s.mesh.geometry.dispose(),s.mesh&&s.mesh.material&&(Array.isArray(s.mesh.material)?s.mesh.material.forEach(i=>i.dispose()):s.mesh.material.dispose())});break;case"crystalCluster":e.crystals&&e.crystals.forEach(s=>{s.mesh&&s.mesh.geometry&&s.mesh.geometry.dispose(),s.mesh&&s.mesh.material&&(Array.isArray(s.mesh.material)?s.mesh.material.forEach(i=>i.dispose()):s.mesh.material.dispose())});break;case"nebulaNexus":e.rings&&e.rings.forEach(s=>{s.mesh&&s.mesh.geometry&&s.mesh.geometry.dispose(),s.mesh&&s.mesh.material&&(Array.isArray(s.mesh.material)?s.mesh.material.forEach(i=>i.dispose()):s.mesh.material.dispose())}),e.core&&e.core.mesh&&(e.core.mesh.geometry&&e.core.mesh.geometry.dispose(),e.core.mesh.material&&(Array.isArray(e.core.mesh.material)?e.core.mesh.material.forEach(s=>s.dispose()):e.core.mesh.material.dispose())),e.arcs&&e.arcs.forEach(s=>{s.mesh&&s.mesh.geometry&&s.mesh.geometry.dispose(),s.mesh&&s.mesh.material&&(Array.isArray(s.mesh.material)?s.mesh.material.forEach(i=>i.dispose()):s.mesh.material.dispose())});break;case"quantumFlux":e.frames&&e.frames.forEach(s=>{s.mesh&&s.mesh.geometry&&s.mesh.geometry.dispose(),s.mesh&&s.mesh.material&&(Array.isArray(s.mesh.material)?s.mesh.material.forEach(i=>i.dispose()):s.mesh.material.dispose()),s.innerBox&&(s.innerBox.geometry&&s.innerBox.geometry.dispose(),s.innerBox.material&&(Array.isArray(s.innerBox.material)?s.innerBox.material.forEach(i=>i.dispose()):s.innerBox.material.dispose()))}),e.particles&&e.particles.mesh&&(e.particles.mesh.geometry&&e.particles.mesh.geometry.dispose(),e.particles.mesh.material&&(Array.isArray(e.particles.mesh.material)?e.particles.mesh.material.forEach(s=>s.dispose()):e.particles.mesh.material.dispose()));break;case"darkMatter":e.core&&e.core.mesh&&(e.core.mesh.geometry&&e.core.mesh.geometry.dispose(),e.core.mesh.material&&(Array.isArray(e.core.mesh.material)?e.core.mesh.material.forEach(s=>s.dispose()):e.core.mesh.material.dispose())),e.rings&&e.rings.forEach(s=>{s.mesh&&s.mesh.geometry&&s.mesh.geometry.dispose(),s.mesh&&s.mesh.material&&(Array.isArray(s.mesh.material)?s.mesh.material.forEach(i=>i.dispose()):s.mesh.material.dispose())}),e.particles&&e.particles.mesh&&(e.particles.mesh.geometry&&e.particles.mesh.geometry.dispose(),e.particles.mesh.material&&(Array.isArray(e.particles.mesh.material)?e.particles.mesh.material.forEach(s=>s.dispose()):e.particles.mesh.material.dispose()));break}e.orb&&e.orb.mesh&&(e.orb.mesh.geometry&&e.orb.mesh.geometry.dispose(),e.orb.mesh.material&&(Array.isArray(e.orb.mesh.material)?e.orb.mesh.material.forEach(s=>s.dispose()):e.orb.mesh.material.dispose()));const t=this.anomalies.indexOf(e);t!==-1&&this.anomalies.splice(t,1)}updateAnomalyCountDisplay(){const e=document.getElementById("anomaly-count");e&&(e.textContent=this.anomalies.length.toString())}getActiveAnomalyCount(){return this.anomalies.length}update(e){this.checkAnomalySpawning(e);let t=null;window.game&&window.game.spaceship&&window.game.spaceship.mesh&&(t=window.game.spaceship.mesh.position);for(let s=0;s<this.anomalies.length;s++){const i=this.anomalies[s];if(i.orbCollected){i.mesh&&i.rotationSpeed&&(i.mesh.rotation.x+=i.rotationSpeed.x*e,i.mesh.rotation.y+=i.rotationSpeed.y*e,i.mesh.rotation.z+=i.rotationSpeed.z*e);continue}let o=!1;switch(t&&(o=t.distanceTo(i.position)<i.orb.size*3*this.orbScale),i.mesh&&i.rotationSpeed&&(i.mesh.rotation.x+=i.rotationSpeed.x*e,i.mesh.rotation.y+=i.rotationSpeed.y*e,i.mesh.rotation.z+=i.rotationSpeed.z*e),i.type){case"vortex":this.updateVortexAnomaly(i,e);break;case"crystalCluster":this.updateCrystalClusterAnomaly(i,e);break;case"nebulaNexus":this.updateNebulaNexusAnomaly(i,e);break;case"quantumFlux":this.updateQuantumFluxAnomaly(i,e);break;case"darkMatter":this.updateDarkMatterAnomaly(i,e);break}this.updateOrbEffects(i,o)}}createVortexAnomaly(){const e=this.getRandomAnomalyPosition(),t=new G;t.position.copy(e),t.scale.set(this.anomalyScale,this.anomalyScale,this.anomalyScale);const s=6,i=[];for(let a=0;a<s;a++){const r=400-a*50,l=new X(r,15,16,100),d=.5+a*.05,c=new M().setHSL(d,.9,.6),h=new I({color:c,emissive:c.clone().multiplyScalar(.5),emissiveIntensity:1,metalness:.8,roughness:.2,transparent:!0,opacity:.95}),u=new w(l,h);u.rotation.x=Math.PI/2+a*.2,u.rotation.y=a*.3,t.add(u),i.push({mesh:u,rotationSpeed:{x:.005+a*.002,y:.003+a*.001,z:.001+a*5e-4}})}const o=this.getRandomOrbRarity(),n=this.createEnergyOrb(o);t.add(n.mesh),this.scene.add(t),this.anomalies.push({type:"vortex",mesh:t,position:e.clone(),rings:i,orb:n,collisionRadius:350,orbCollected:!1,rotationSpeed:new f(.001,.002,.0015)})}createCrystalClusterAnomaly(){const e=this.getRandomAnomalyPosition(),t=new G;t.position.copy(e),t.scale.set(this.anomalyScale,this.anomalyScale,this.anomalyScale);const s=[],i=20;for(let a=0;a<i;a++){const r=50+Math.random()*100;let l;const d=Math.floor(Math.random()*3);if(d===0)l=new Ie(r,0);else if(d===1)l=new ht(r,0);else{l=new He(r,0);const x=l.attributes.position;for(let E=0;E<x.count;E++){const P=new f;P.fromBufferAttribute(x,E),P.y*=2.5,x.setXYZ(E,P.x,P.y,P.z)}l.computeVertexNormals()}const c=.45+Math.random()*.1,h=.9+Math.random()*.1,u=.6+Math.random()*.2,p=new M().setHSL(c,h,u),y=new I({color:p,metalness:.9,roughness:.1,transparent:!0,opacity:.9,emissive:p.clone(),emissiveIntensity:.5}),m=new w(l,y),v=200+Math.random()*100,k=Math.random()*Math.PI*2,S=Math.random()*Math.PI;m.position.set(v*Math.sin(S)*Math.cos(k),v*Math.sin(S)*Math.sin(k),v*Math.cos(S)),m.rotation.set(Math.random()*Math.PI*2,Math.random()*Math.PI*2,Math.random()*Math.PI*2),t.add(m),s.push({mesh:m,initialPosition:m.position.clone(),floatPhase:Math.random()*Math.PI*2,floatSpeed:.3+Math.random()*.3,floatAmplitude:5+Math.random()*10,rotationSpeed:{x:(Math.random()-.5)*.01,y:(Math.random()-.5)*.01,z:(Math.random()-.5)*.01}})}const o=this.getRandomOrbRarity(),n=this.createEnergyOrb(o);t.add(n.mesh),this.scene.add(t),this.anomalies.push({type:"crystalCluster",mesh:t,position:e.clone(),crystals:s,orb:n,collisionRadius:300,orbCollected:!1,rotationSpeed:new f(5e-4,.001,5e-4)})}createNebulaNexusAnomaly(){const e=this.getRandomAnomalyPosition(),t=new G;t.position.copy(e),t.scale.set(this.anomalyScale,this.anomalyScale,this.anomalyScale);const s=3,i=[];for(let p=0;p<s;p++){const y=200+p*60,m=new X(y,8,16,50),v=.6+p*.1,k=new M().setHSL(v,1,.6),S=new I({color:k,emissive:k.clone().multiplyScalar(.5),emissiveIntensity:1,metalness:.9,roughness:.1,transparent:!1,opacity:1}),x=new w(m,S);x.rotation.x=Math.PI/2+p*Math.PI/3,x.rotation.y=p*Math.PI/4,t.add(x);const E=10+p*5,P=[];for(let A=0;A<E;A++){const D=A/E*Math.PI*2,F=15+Math.random()*10,B=new Ie(F,0),K=(v+.5)%1,J=new M().setHSL(K,1,.7),se=new I({color:J,emissive:J.clone(),emissiveIntensity:.8,metalness:.9,roughness:.1,transparent:!1,opacity:1}),R=new w(B,se);R.position.x=y*Math.cos(D),R.position.y=0,R.position.z=y*Math.sin(D),R.rotation.x=Math.random()*Math.PI,R.rotation.y=Math.random()*Math.PI,R.rotation.z=Math.random()*Math.PI,x.add(R),P.push({mesh:R,initialPosition:R.position.clone(),pulsePhase:Math.random()*Math.PI*2,pulseSpeed:.5+Math.random()*.5})}i.push({mesh:x,crystals:P,rotationSpeed:.1-p*.03,rotationAxis:new f(Math.random()-.5,Math.random()-.5,Math.random()-.5).normalize()})}const o=80,n=new N(o,32,32),a=new M().setHSL(.15,1,.6),r=new I({color:a,emissive:a,emissiveIntensity:1,metalness:1,roughness:.3,transparent:!0,opacity:.9}),l=new w(n,r);t.add(l);const d=8,c=[];for(let p=0;p<d;p++){const y=new ut(new f(0,0,0),new f((Math.random()-.5)*200,(Math.random()-.5)*200,(Math.random()-.5)*200),new f((Math.random()-.5)*300,(Math.random()-.5)*300,(Math.random()-.5)*300),new f((Math.random()-.5)*400,(Math.random()-.5)*400,(Math.random()-.5)*400)),m=y.getPoints(20),v=new q().setFromPoints(m),k=new M().setHSL(.15,1,.6),S=new Le({color:k,linewidth:3,transparent:!0,opacity:.8}),x=new pt(v,S);t.add(x),c.push({mesh:x,curve:y,updatePhase:Math.random()*Math.PI*2,updateSpeed:.2+Math.random()*.3})}const h=this.getRandomOrbRarity(),u=this.createEnergyOrb(h);t.add(u.mesh),this.scene.add(t),this.anomalies.push({type:"nebulaNexus",mesh:t,position:e.clone(),rings:i,core:{mesh:l,pulsePhase:0,pulseSpeed:.5},arcs:c,orb:u,collisionRadius:250,orbCollected:!1,rotationSpeed:new f(3e-4,4e-4,2e-4)})}createQuantumFluxAnomaly(){const e=this.getRandomAnomalyPosition(),t=new G;t.position.copy(e),t.scale.set(this.anomalyScale,this.anomalyScale,this.anomalyScale);const s=[],i=5;for(let u=0;u<i;u++){const p=250-u*40,y=new ne(p,p,p),m=new ne(p*.98,p*.98,p*.98),v=new mt(y),k=.3+u*.1,S=new M().setHSL(k,1,.6),x=new Le({color:S,linewidth:2,transparent:!1,opacity:1}),E=new Y({color:S,transparent:!0,opacity:.1,side:Q}),P=new gt(v,x),A=new w(m,E);t.add(P),t.add(A),s.push({mesh:P,innerBox:A,rotationAxis:new f(Math.random()-.5,Math.random()-.5,Math.random()-.5).normalize(),rotationSpeed:.01+u*.005,pulsePhase:Math.random()*Math.PI*2})}const o=200,n=new q,a=new Float32Array(o*3),r=new Float32Array(o);for(let u=0;u<o;u++){const p=u*3,y=100*Math.random(),m=Math.random()*Math.PI*2,v=Math.random()*Math.PI;a[p]=y*Math.sin(v)*Math.cos(m),a[p+1]=y*Math.sin(v)*Math.sin(m),a[p+2]=y*Math.cos(v),r[u]=2+Math.random()*3}n.setAttribute("position",new _(a,3)),n.setAttribute("size",new _(r,1));const l=new te({color:16711935,size:6,blending:z,transparent:!0,opacity:.9}),d=new Z(n,l);t.add(d);const c=this.getRandomOrbRarity(),h=this.createEnergyOrb(c);t.add(h.mesh),this.scene.add(t),this.anomalies.push({type:"quantumFlux",mesh:t,position:e.clone(),frames:s,particles:{mesh:d,positions:a,initialPositions:a.slice(),velocities:Array(o).fill().map(()=>new f((Math.random()-.5)*.5,(Math.random()-.5)*.5,(Math.random()-.5)*.5))},orb:h,collisionRadius:230,orbCollected:!1,rotationSpeed:new f(1e-4,2e-4,1e-4)})}createDarkMatterAnomaly(){const e=this.getRandomAnomalyPosition(),t=new G;t.position.copy(e),t.scale.set(this.anomalyScale,this.anomalyScale,this.anomalyScale);const s=100,i=new N(s,32,32),o=new I({color:3342387,emissive:8913032,emissiveIntensity:1.5,metalness:1,roughness:0,transparent:!0,opacity:.95}),n=new w(i,o),a=new N(s*1.2,32,32),r=new Y({color:10027263,transparent:!0,opacity:.3,side:ce}),l=new w(a,r);n.add(l),t.add(n);const d=[],c=4;for(let x=0;x<c;x++){const E=150+x*60,P=4+x*2,A=new X(E,P,16,100),D=new M().setHSL(.75,.9,.1+x*.15),F=new I({color:D,emissive:D.clone().multiplyScalar(.7),emissiveIntensity:.5+x*.2,metalness:.8,roughness:.2,transparent:!0,opacity:.85}),B=new w(A,F);B.rotation.x=Math.random()*Math.PI,B.rotation.y=Math.random()*Math.PI,B.rotation.z=Math.random()*Math.PI,t.add(B),d.push({mesh:B,rotationAxis:new f(Math.random()-.5,Math.random()-.5,Math.random()-.5).normalize(),rotationSpeed:.002+x*.001,warpPhase:Math.random()*Math.PI*2,warpSpeed:.5+Math.random()*.5})}const h=300,u=new q,p=new Float32Array(h*3),y=new Float32Array(h);for(let x=0;x<h;x++){const E=x*3,P=120+Math.random()*250,A=Math.random()*Math.PI*2,D=Math.random()*Math.PI;p[E]=P*Math.sin(D)*Math.cos(A),p[E+1]=P*Math.sin(D)*Math.sin(A),p[E+2]=P*Math.cos(D),y[x]=1+Math.random()*3}u.setAttribute("position",new _(p,3)),u.setAttribute("size",new _(y,1));const m=new te({color:8913151,size:5,blending:z,transparent:!0,opacity:.8}),v=new Z(u,m);t.add(v);const k=this.getRandomOrbRarity(),S=this.createEnergyOrb(k);t.add(S.mesh),this.scene.add(t),this.anomalies.push({type:"darkMatter",mesh:t,position:e.clone(),core:{mesh:n,pulsePhase:0},rings:d,particles:{mesh:v,positions:p,initialPositions:p.slice(),phases:Array(h).fill().map(()=>Math.random()*Math.PI*2)},orb:S,collisionRadius:200,orbCollected:!1,rotationSpeed:new f(2e-4,3e-4,1e-4)})}createEnergyOrb(e){let t,s,i,o;switch(e){case"legendary":t=new M(16711680),s=30*this.orbScale,i=.9,o=2;break;case"epic":t=new M(16737792),s=25*this.orbScale,i=.8,o=1.8;break;case"rare":t=new M(10027263),s=22*this.orbScale,i=.7,o=1.5;break;case"uncommon":t=new M(26367),s=20*this.orbScale,i=.6,o=1.2;break;default:t=new M(65382),s=18*this.orbScale,i=.5,o=1;break}const n=new N(s,32,32),a=new I({color:t,emissive:t,emissiveIntensity:i,metalness:.8,roughness:.2,transparent:!0,opacity:.9}),r=new w(n,a),l=s*1.5,d=new N(l,32,32),c=new Y({color:t,transparent:!0,opacity:.3,side:ce,blending:z}),h=new w(d,c);return r.add(h),{mesh:r,rarity:e,value:this.orbValues[e],size:s,color:t,pulsePhase:0,pulseSpeed:o,glow:h}}createParticleTexture(){const e=document.createElement("canvas");e.width=64,e.height=64;const t=e.getContext("2d"),s=t.createRadialGradient(32,32,0,32,32,32);s.addColorStop(0,"rgba(255,255,255,1)"),s.addColorStop(.3,"rgba(255,255,255,0.8)"),s.addColorStop(.7,"rgba(200,200,200,0.3)"),s.addColorStop(1,"rgba(100,100,100,0)"),t.fillStyle=s,t.fillRect(0,0,64,64);const i=new ft(e);return i.needsUpdate=!0,i}getRandomAnomalyPosition(){const e=Math.random()*Math.PI*2,t=this.minRadius+Math.random()*(this.maxRadius-this.minRadius),s=(Math.random()-.5)*this.width;return new f(Math.cos(e)*t,s,Math.sin(e)*t)}getRandomOrbRarity(){const e=Math.random();return e<.005?"legendary":e<.025?"epic":e<.1?"rare":e<.3?"uncommon":"common"}getRegionInfo(){return{center:new f(0,0,0),innerRadius:this.minRadius,outerRadius:this.maxRadius}}findClosestAnomaly(e,t=8e3){let s=null,i=t;return this.anomalies.forEach(o=>{const n=e.distanceTo(o.position);n<i&&(i=n,s=o)}),s}collectOrb(e){if(!e||e.orbCollected)return null;const t={rarity:e.orb.rarity,value:this.orbValues[e.orb.rarity]||100};return e.orbCollected=!0,e.orb&&e.orb.mesh&&(e.orb.mesh.visible=!1,e.orb.glow&&(e.orb.glow.visible=!1)),t}checkCollision(e,t){return!e||!t||!t.position?!1:e.distanceTo(t.position)<t.orb.size*2*this.orbScale}updateOrbEffects(e,t){if(!(!e||!e.orb||e.orbCollected))if(t){const s=1.5+Math.sin(performance.now()*.005)*.5;e.orb.mesh.scale.set(s,s,s),e.orb.mesh.material&&(e.orb.mesh.material.emissiveIntensity=2)}else{const s=1+Math.sin(performance.now()*.002)*.2;e.orb.mesh.scale.set(s,s,s),e.orb.mesh.material&&(e.orb.mesh.material.emissiveIntensity=.8)}}updateVortexAnomaly(e,t){e.rings.forEach(s=>{s.mesh.rotation.x+=s.rotationSpeed.x*t,s.mesh.rotation.y+=s.rotationSpeed.y*t,s.mesh.rotation.z+=s.rotationSpeed.z*t})}updateCrystalClusterAnomaly(e,t){e.crystals.forEach(s=>{s.floatPhase+=t*s.floatSpeed;const i=Math.sin(s.floatPhase)*s.floatAmplitude;s.mesh.position.y=s.initialPosition.y+i,s.mesh.rotation.x+=s.rotationSpeed.x,s.mesh.rotation.y+=s.rotationSpeed.y,s.mesh.rotation.z+=s.rotationSpeed.z})}updateNebulaNexusAnomaly(e,t){e.core.pulsePhase+=t*e.core.pulseSpeed;const s=1+.2*Math.sin(e.core.pulsePhase);e.core.mesh.scale.set(s,s,s),e.rings.forEach(i=>{const o=new fe().makeRotationAxis(i.rotationAxis,i.rotationSpeed*t);i.mesh.applyMatrix4(o),i.crystals.forEach(n=>{n.pulsePhase+=t*n.pulseSpeed;const a=1+.3*Math.sin(n.pulsePhase);n.mesh.scale.set(a,a,a)})}),e.arcs.forEach(i=>{i.updatePhase+=t*i.updateSpeed;const o=i.curve.v1,n=i.curve.v2;o.x=Math.sin(i.updatePhase)*200,o.y=Math.cos(i.updatePhase*.7)*200,o.z=Math.sin(i.updatePhase*1.3)*200,n.x=Math.sin(i.updatePhase*.8+1)*300,n.y=Math.cos(i.updatePhase*1.2+2)*300,n.z=Math.sin(i.updatePhase*.9+3)*300;const a=i.curve.getPoints(20);i.mesh.geometry.setFromPoints(a),i.mesh.geometry.attributes.position.needsUpdate=!0})}updateQuantumFluxAnomaly(e,t){e.frames.forEach(o=>{const n=new fe().makeRotationAxis(o.rotationAxis,o.rotationSpeed*t);o.mesh.applyMatrix4(n),o.innerBox&&o.innerBox.applyMatrix4(n),o.pulsePhase+=t;const a=1+.05*Math.sin(o.pulsePhase);o.mesh.scale.set(a,a,a),o.innerBox&&o.innerBox.scale.set(a,a,a)});const s=e.particles.positions,i=e.particles.velocities;for(let o=0;o<s.length/3;o++){const n=o*3;s[n]+=i[o].x,s[n+1]+=i[o].y,s[n+2]+=i[o].z;const a=120,r=new f(s[n],s[n+1],s[n+2]);r.length()>a&&(r.normalize().multiplyScalar(a),s[n]=r.x,s[n+1]=r.y,s[n+2]=r.z,i[o].reflect(r.normalize()))}e.particles.mesh.geometry.attributes.position.needsUpdate=!0}updateDarkMatterAnomaly(e,t){e.core.pulsePhase+=t*.5;const s=1+.1*Math.sin(e.core.pulsePhase);e.core.mesh.scale.set(s,s,s),e.rings.forEach(a=>{const r=new fe().makeRotationAxis(a.rotationAxis,a.rotationSpeed*t);a.mesh.applyMatrix4(r),a.warpPhase+=t*a.warpSpeed;const l=1+.1*Math.sin(a.warpPhase),d=1+.1*Math.sin(a.warpPhase+Math.PI/3),c=1+.1*Math.sin(a.warpPhase+Math.PI*2/3);a.mesh.scale.set(l,d,c)});const i=e.particles.positions,o=e.particles.initialPositions,n=e.particles.phases;for(let a=0;a<i.length/3;a++){const r=a*3;n[a]+=t;const d=.5+300/(Math.sqrt(o[r]*o[r]+o[r+1]*o[r+1]+o[r+2]*o[r+2])+10);n[a]+=t*d;const c=1+.2*Math.sin(n[a]*.5),h=new f(o[r],o[r+1],o[r+2]),u=n[a]*.2,p=n[a]*.1;h.applyAxisAngle(new f(0,1,0),u),h.applyAxisAngle(new f(0,0,1),p),h.multiplyScalar(c),i[r]=h.x,i[r+1]=h.y,i[r+2]=h.z}e.particles.mesh.geometry.attributes.position.needsUpdate=!0}updateForSystem(e){console.log("Updating space anomalies for new star system"),this.clearAllAnomalies(),this.spawnTimer=this.checkInterval,this.updateAnomalyCountDisplay()}clearAllAnomalies(){[...this.anomalies].forEach(t=>{this.despawnAnomaly(t)}),this.anomalies=[],this.updateAnomalyCountDisplay()}}class ds{constructor(e){this.scene=e,this.planetRegions={},this.currentSystemId="Solar System",this.componentsLoaded=!1,console.log("Initializing essential environment components..."),this.skybox=new Lt(e),this.sun=new $t(e),this.starSystemGenerator=new Gt(e),this.planets=new Ft(e,this.starSystemGenerator),this.stargate=new zt(e),this.asteroids=[],this.setupInitialRegions(),console.log("Essential environment components initialized"),setTimeout(()=>{this.loadRemainingComponents()},500)}loadRemainingComponents(){console.log("Loading remaining environment components..."),this.asteroidBelt=new Ut(this.scene),this.asteroids=this.asteroidBelt.getAsteroids(),this.spaceAnomalies=new Vt(this.scene),this.systemTransition=new Ht(this.scene,this.scene.camera),this.customSystemCreator=new Nt(this.starSystemGenerator,this),console.log("Custom system creator initialized:",this.customSystemCreator),this.setupRegions(),this.setupSystemTransitionHandlers(),this.componentsLoaded=!0,console.log("All environment components initialized")}setupInitialRegions(){if(console.log("Setting up essential environment regions"),this.planetRegions={},this.planets&&typeof this.planets.getPlanetRegions=="function")try{this.planetRegions=this.planets.getPlanetRegions()}catch(t){console.warn("Error getting planet regions:",t)}else console.warn("planets.getPlanetRegions is not available, using empty object instead");this.planetRegions.Sun={center:this.sun.getPosition(),radius:this.sun.getRadius()};const e=this.stargate.getRegionInfo();this.planetRegions.Stargate={center:e.center,radius:e.radius}}setSpaceship(e){this.spaceship=e,this.vibeVersePortals=new _t(this.scene,e),console.log("VibeVerse portals initialized")}setupSystemTransitionHandlers(){if(this.starSystemGenerator&&this.asteroidBelt){const e=this.starSystemGenerator.getCurrentSystemResources();this.asteroidBelt.setResourceMultipliers(e)}}travelToSystem(e){return!this.starSystemGenerator||!this.systemTransition?!1:this.starSystemGenerator.travelToSystem(e)?(console.log(`Starting transition to system: ${e}`),this.systemTransition.startTransition(()=>{console.log(`Transition complete, updating environment for: ${e}`),this.updateEnvironmentForSystem(e),this.showSystemWelcomeNotification(e),window.game&&window.game.spaceship&&window.game.spaceship.isDocked&&(console.log("Player is docked after arriving in new system, showing interface"),window.game.controls&&window.game.controls.dockingSystem&&setTimeout(()=>{window.game.controls.dockingSystem.dockWithStargate()},500))}),!0):(console.error(`Cannot travel to system ${e}`),!1)}updateEnvironmentForSystem(e){const t=this.starSystemGenerator.getAllSystems()[e];if(!t){console.error(`No system data found for ${e}`);return}if(console.log(`Updating environment for system: ${e}`,t),this.currentSystemId=e,this.skybox&&this.skybox.updateForSystem)if(e==="Solar System"){const s={starDensity:1,nebulaDensity:.5,color:16777215,isSolarSystem:!0,resetTime:!0};console.log("Updating skybox for Solar System with enforced white color"),this.skybox.updateForSystem(s)}else console.log(`Updating skybox for ${e} with params:`,t.skyboxParams),this.skybox.updateForSystem(t.skyboxParams);else console.warn("Skybox or updateForSystem method not available");if(this.sun){const s=t.lightIntensityMultiplier||1;this.sun.updateSunType&&t.starClass?(console.log(`Updating sun type for ${e} to ${t.starClass} with intensity multiplier: ${s}`),this.sun.updateSunType(t.starClass,s)):this.sun.updateColor?(console.log(`Updating sun color for ${e} to:`,t.starColor.toString(16)),this.sun.updateColor(t.starColor),this.sun.sunLight&&(this.sun.sunLight._intensityMultiplier=s)):console.warn("Sun update methods not available")}else console.warn("Sun not available");if(this.planets&&this.planets.updateForSystem)if(console.log(`Updating planets for ${e}`),this.planets.updateForSystem(e),typeof this.planets.getPlanetRegions=="function")try{this.planetRegions=this.planets.getPlanetRegions()}catch(s){console.warn(`Error getting planet regions for system ${e}:`,s)}else console.warn(`planets.getPlanetRegions is not available for system ${e}`);else console.warn("Planets or updateForSystem method not available");this.asteroidBelt&&this.asteroidBelt.setResourceMultipliers?(console.log(`Updating asteroid resources for ${e}:`,t.resourceMultipliers),this.asteroidBelt.setResourceMultipliers(t.resourceMultipliers),this.asteroidBelt.updateDensity&&(console.log(`Updating asteroid density for ${e}:`,t.asteroidDensity),this.asteroidBelt.updateDensity(t.asteroidDensity))):console.warn("AsteroidBelt or update methods not available"),this.spaceAnomalies&&this.spaceAnomalies.updateForSystem?(console.log(`Updating space anomalies for ${e}`),this.spaceAnomalies.updateForSystem(t)):console.warn("SpaceAnomalies or updateForSystem method not available"),console.log(`Environment updated for ${e}`)}showSystemWelcomeNotification(e){const t=this.starSystemGenerator.getAllSystems()[e];if(!t)return;const s=document.createElement("div");s.style.position="fixed",s.style.top="25%",s.style.left="50%",s.style.transform="translate(-50%, -50%)",s.style.backgroundColor="rgba(0, 0, 0, 0.8)",s.style.color="#fff",s.style.padding="20px 40px",s.style.borderRadius="10px",s.style.border=`2px solid #${t.starColor.toString(16).padStart(6,"0")}`,s.style.boxShadow=`0 0 30px #${t.starColor.toString(16).padStart(6,"0")}`,s.style.fontFamily="Courier New, monospace",s.style.fontSize="18px",s.style.zIndex="9999",s.style.textAlign="center",e==="Solar System"?s.innerHTML=`
                <h2 style="color: #30cfd0; margin-top: 0;">Welcome to the Solar System</h2>
                <p>Your home system, with Earth as your starting location.</p>
                <p style="font-size: 14px; margin-bottom: 0; color: #aaa;">Safe travels, commander.</p>
            `:s.innerHTML=`
                <h2 style="color: #${t.starColor.toString(16).padStart(6,"0")}; margin-top: 0;">Welcome to ${t.name}</h2>
                <p>${t.description}</p>
                <p style="font-size: 14px; margin-bottom: 0; color: #aaa;">Classification: ${t.classification} - Star Class: ${t.starClass}</p>
            `,document.body.appendChild(s),setTimeout(()=>{s.style.opacity="0",s.style.transition="opacity 1s",setTimeout(()=>{s.remove()},1e3)},5e3)}setupRegions(){if(console.log("Setting up environment regions"),this.planetRegions={},this.planets&&typeof this.planets.getPlanetRegions=="function")try{this.planetRegions=this.planets.getPlanetRegions()}catch(i){console.warn("Error getting planet regions in setupRegions:",i)}else console.warn("planets.getPlanetRegions is not available in setupRegions, using empty object");this.planetRegions.Sun={center:this.sun.getPosition(),radius:this.sun.getRadius()};const e=this.asteroidBelt.getRegionInfo();this.planetRegions["Asteroid Belt"]={center:e.center,minRadius:e.innerRadius,maxRadius:e.outerRadius};const t=this.stargate.getRegionInfo();this.planetRegions.Stargate={center:t.center,radius:t.radius};const s=this.spaceAnomalies.getRegionInfo();this.planetRegions["Space Anomalies"]={center:s.center,minRadius:s.innerRadius,maxRadius:s.outerRadius}}getPlayerLocation(e){if(!e)return"Unknown Location";const t=this.planetRegions.Stargate;if(t&&e.distanceTo(t.center)<=t.radius)return"Stargate";if(this.componentsLoaded&&this.spaceAnomalies){const i=this.spaceAnomalies.findClosestAnomaly(e,2e3);if(i&&e.distanceTo(i.position)<800){let n="";switch(i.type){case"vortex":n="Vortex";break;case"crystalCluster":n="Crystal Cluster";break;case"nebulaNexus":n="Nebula Nexus";break;case"quantumFlux":n="Quantum Flux";break;case"darkMatter":n="Dark Matter";break}const a=i.orbCollected?"Depleted":"Active";return`${n} Anomaly (${a})`}}for(const[i,o]of Object.entries(this.planetRegions))if(i==="Asteroid Belt"&&this.componentsLoaded&&this.asteroidBelt){const n=e.distanceTo(o.center);if(o.minRadius&&o.maxRadius&&n>=o.minRadius&&n<=o.maxRadius){const a=this.asteroids.filter(r=>e.distanceTo(r.mesh.position)<500);return a.length>0?`Asteroid Field (${a.length} nearby)`:"Asteroid Belt"}}else if(i==="Space Anomalies"&&this.componentsLoaded){const n=e.distanceTo(o.center);if(o.minRadius&&o.maxRadius&&n>=o.minRadius&&n<=o.maxRadius)return"Space Anomaly Field"}else if(i!=="Sun"&&i!=="Stargate"&&o.center&&o.radius&&e.distanceTo(o.center)<=o.radius)return`Near ${i}`;const s=this.planetRegions.Sun;return s&&e.distanceTo(s.center)<=s.radius?"Near Sun":"Deep Space"}findClosestAsteroid(e,t){return this.componentsLoaded&&this.asteroidBelt&&this.asteroidBelt.findClosestAsteroid?this.asteroidBelt.findClosestAsteroid(e,t):null}findClosestAnomaly(e,t){return this.componentsLoaded&&this.spaceAnomalies&&this.spaceAnomalies.findClosestAnomaly?this.spaceAnomalies.findClosestAnomaly(e,t):null}checkAnomalyCollision(e){if(!this.componentsLoaded||!this.spaceAnomalies)return null;const t=this.spaceAnomalies.findClosestAnomaly(e,8e3);return t&&this.spaceAnomalies.checkCollision(e,t)?t:null}collectAnomalyOrb(e){if(this.componentsLoaded&&this.spaceAnomalies&&this.spaceAnomalies.collectOrb)return this.spaceAnomalies.collectOrb(e)}update(e=.016,t){this.skybox&&typeof this.skybox.update=="function"&&this.skybox.update(e),this.sun&&typeof this.sun.update=="function"&&this.sun.update(e),this.planets&&typeof this.planets.update=="function"&&this.planets.update(e),this.systemTransition&&typeof this.systemTransition.update=="function"&&this.systemTransition.update(e),this.componentsLoaded&&(this.asteroidBelt&&typeof this.asteroidBelt.update=="function"&&this.asteroidBelt.update(e),this.stargate&&typeof this.stargate.update=="function"&&this.stargate.update(e),this.spaceAnomalies&&typeof this.spaceAnomalies.update=="function"&&this.spaceAnomalies.update(e,t),this.vibeVersePortals&&typeof this.vibeVersePortals.update=="function"&&this.vibeVersePortals.update(e))}dispose(){this.skybox&&this.skybox.dispose(),this.sun&&this.sun.dispose(),this.planets&&this.planets.dispose(),this.asteroidBelt&&this.asteroidBelt.dispose(),this.stargate&&this.stargate.dispose(),this.spaceAnomalies&&this.spaceAnomalies.clearAllAnomalies(),this.vibeVersePortals&&this.vibeVersePortals.dispose()}}class jt{constructor(e,t){this.spaceship=e,this.physics=t,this.isPointerLocked=!1,this.mouseSensitivity=.001,this.setupKeyboardControls(),this.setupPointerLock()}setupKeyboardControls(){document.addEventListener("keydown",e=>{if(!(this.spaceship.isDocked||window.game&&window.game.introSequenceActive))switch(e.key.toLowerCase()){case"w":this.spaceship.thrust.forward=!0;break;case"s":this.spaceship.thrust.backward=!0;break;case"a":this.spaceship.thrust.right=!0;break;case"d":this.spaceship.thrust.left=!0;break;case"shift":this.spaceship.thrust.boost=!0;break}}),document.addEventListener("keyup",e=>{if(window.game&&window.game.introSequenceActive){this.spaceship.thrust.forward=!1,this.spaceship.thrust.backward=!1,this.spaceship.thrust.right=!1,this.spaceship.thrust.left=!1,this.spaceship.thrust.boost=!1;return}switch(e.key.toLowerCase()){case"w":this.spaceship.thrust.forward=!1;break;case"s":this.spaceship.thrust.backward=!1;break;case"a":this.spaceship.thrust.right=!1;break;case"d":this.spaceship.thrust.left=!1;break;case"shift":this.spaceship.thrust.boost=!1;break}})}setupPointerLock(){const e=document.querySelector("canvas");e.addEventListener("pointerdown",s=>{s.preventDefault(),!this.isPointerLocked&&!this.spaceship.isDocked&&e.requestPointerLock()}),document.addEventListener("pointerlockchange",()=>{document.pointerLockElement===e?(this.isPointerLocked=!0,document.addEventListener("pointermove",this.handlePointerMove.bind(this))):(this.isPointerLocked=!1,document.removeEventListener("pointermove",this.handlePointerMove.bind(this)))});const t=document.createElement("div");t.id="pointer-lock-instructions",t.innerHTML=`
            Click on the game to enable mouse rotation
        `,t.style.position="absolute",t.style.top="60px",t.style.left="50%",t.style.transform="translateX(-50%)",t.style.backgroundColor="rgba(0, 0, 0, 0.5)",t.style.padding="10px 20px",t.style.borderRadius="20px",t.style.border="1px solid #30cfd0",t.style.boxShadow="0 0 10px #30cfd0",t.style.color="#fff",t.style.fontFamily="Courier New, monospace",t.style.zIndex="999",t.style.textAlign="center",document.body.appendChild(t),document.addEventListener("pointerlockchange",()=>{t.style.display=document.pointerLockElement?"none":"block"})}handlePointerMove(e){if(window.game&&window.game.introSequenceActive||!this.isPointerLocked)return;const t=e.movementX||0,s=e.movementY||0;this.physics.updateRotation(t*this.mouseSensitivity,s*this.mouseSensitivity)}isLocked(){return this.isPointerLocked}exitPointerLock(){document.exitPointerLock&&document.exitPointerLock()}}class Wt{constructor(e,t){this.spaceship=e,this.scene=t,this.isMining=!1,this.targetAsteroid=null,this.miningProgress=0,this.lastDestroyedAsteroid=null,this.miningSpeedByType={iron:.133,gold:.044,platinum:.022},this.miningSpeed=.133,this.miningDistance=6e3,this.miningCooldown=0,this.resources={iron:0,gold:0,platinum:0},this.setupMiningLaser()}getMiningEfficiency(){return this.spaceship&&this.spaceship.miningEfficiency?this.spaceship.miningEfficiency:1}setupMiningLaser(){const t=new q,s=new te({color:16733440,size:1.5,blending:z,transparent:!0,opacity:.8}),i=new Float32Array(100*3);for(let o=0;o<100;o++)i[o*3]=0,i[o*3+1]=0,i[o*3+2]=0;t.setAttribute("position",new _(i,3)),this.miningParticles=new Z(t,s),this.miningParticles.visible=!1,this.scene.add(this.miningParticles)}setTargetAsteroid(e){try{if(console.log("MiningSystem: setTargetAsteroid called",e),!e||!e.mesh||!e.mesh.position)return console.error("MiningSystem: Invalid asteroid provided to setTargetAsteroid"),!1;if(this.targetAsteroid=e,e&&e.resourceType){const t=e.resourceType.toLowerCase(),s=this.miningSpeedByType[t]||this.miningSpeedByType.iron,i=this.getMiningEfficiency();this.miningSpeed=s*i,console.log(`Mining ${t} asteroid with speed: ${this.miningSpeed} (efficiency: ${i}x)`);const o=document.getElementById("target-info");if(o){o.style.display="block",o.style.color="#30cfd0";const n=document.getElementById("target-name");n&&(n.textContent=`${t.toUpperCase()} Asteroid`);const a=Math.round(this.spaceship.mesh.position.distanceTo(e.mesh.position)),r=document.getElementById("target-distance");r&&(r.textContent=`Distance: ${a} units`)}}else this.miningSpeed=this.miningSpeedByType.iron*this.getMiningEfficiency();return!0}catch(t){return console.error("MiningSystem: Error in setTargetAsteroid:",t),!1}}startMining(){try{if(console.log("MiningSystem: startMining called"),!this.targetAsteroid){console.error("MiningSystem: Cannot start mining - no target asteroid set");return}if(!this.targetAsteroid.mesh||!this.targetAsteroid.mesh.position){console.error("MiningSystem: Target asteroid is missing mesh or position",this.targetAsteroid);return}if(!this.spaceship||!this.spaceship.mesh||!this.spaceship.mesh.position){console.error("MiningSystem: Spaceship is missing mesh or position");return}const e=this.spaceship.mesh.position.distanceTo(this.targetAsteroid.mesh.position);if(console.log(`MiningSystem: Distance to asteroid: ${e}, max range: ${this.miningDistance}`),e>this.miningDistance){const i=document.getElementById("target-info");i&&(i.textContent="TARGET OUT OF RANGE",i.style.color="#ff4400",i.style.display="block",setTimeout(()=>{i.style.display="none"},2e3)),console.log("MiningSystem: Target out of range");return}this.isMining=!0,this.miningProgress=0,console.log("MiningSystem: Mining state activated");let t=document.getElementById("laser-beam");if(t||(console.log("MiningSystem: Creating laser beam element"),t=document.createElement("div"),t.id="laser-beam",t.style.position="absolute",t.style.height="2px",t.style.backgroundColor="#ff3030",t.style.transformOrigin="0 0",t.style.zIndex="100",t.style.pointerEvents="none",document.body.appendChild(t)),t)if(t.style.display="block",this.targetAsteroid.resourceType){const i=this.targetAsteroid.resourceType.toLowerCase();let o="#ff3030",n="#ff0000";i==="gold"?(o="#ffcc00",n="#ffaa00"):i==="platinum"&&(o="#66ffff",n="#00ffff");const a=this.getMiningEfficiency();if(a>1){const r=Math.min(1+(a-1)*.5,3);t.style.boxShadow=`0 0 ${10*r}px ${n}, 0 0 ${20*r}px ${n}`}else t.style.boxShadow=`0 0 10px ${n}, 0 0 20px ${n}`;t.style.backgroundColor=o}else t.style.backgroundColor="#ff3030",t.style.boxShadow="0 0 10px #ff0000, 0 0 20px #ff0000";if(this.miningParticles&&(this.miningParticles.visible=!0,this.targetAsteroid.resourceType&&this.miningParticles.material)){const i=this.targetAsteroid.resourceType.toLowerCase();i==="iron"?this.miningParticles.material.color.set(16733440):i==="gold"?this.miningParticles.material.color.set(16763904):i==="platinum"&&this.miningParticles.material.color.set(6750207);const o=this.getMiningEfficiency();o>1&&(this.miningParticles.material.size=1.5*Math.sqrt(o))}let s=document.getElementById("mining-progress-container");if(s){s.style.display="block";const i=document.getElementById("mining-progress-bar");i&&(i.style.width="0%")}else{console.log("MiningSystem: Creating mining progress container"),s=document.createElement("div"),s.id="mining-progress-container",s.style.position="absolute",s.style.bottom="20px",s.style.left="50%",s.style.transform="translateX(-50%)",s.style.width="200px",s.style.height="10px",s.style.backgroundColor="rgba(0, 0, 0, 0.5)",s.style.border="1px solid #30cfd0",s.style.zIndex="1000",document.body.appendChild(s);const i=document.createElement("div");i.id="mining-progress-bar",i.style.width="0%",i.style.height="100%",i.style.backgroundColor="#30cfd0",s.appendChild(i)}this.spaceship&&typeof this.spaceship.activateMiningLaser=="function"&&this.spaceship.activateMiningLaser(),this.updateMiningStatusWithTime(),window.game&&window.game.audio?window.game.audio.playSound("mining-laser"):window.game&&window.game.audio&&window.game.audio.playSound("laser"),console.log("MiningSystem: Mining successfully started")}catch(e){console.error("MiningSystem: Error in startMining:",e),this.isMining=!1}}updateMiningStatusWithTime(){const e=document.getElementById("mining-status");if(!e||!this.targetAsteroid||!this.targetAsteroid.resourceType)return;const t=this.targetAsteroid.resourceType.toLowerCase(),s=Math.round(1/this.miningSpeed),i=this.getMiningEfficiency();let o="";i>1&&(o=` [${Math.round(i*100)}% efficiency]`),e.textContent=`MINING ${t.toUpperCase()} (${s}s)${o}`,e.style.color="#ff4400"}stopMining(){if(!this.isMining)return;this.isMining=!1,this.miningProgress=0;const e=document.getElementById("laser-beam");e&&(e.style.display="none"),this.miningParticles&&(this.miningParticles.visible=!1);const t=document.getElementById("mining-progress-container");t&&(t.style.display="none"),this.spaceship.deactivateMiningLaser();const s=document.getElementById("mining-status");s&&(s.textContent="INACTIVE",s.style.color="#30cfd0"),window.game&&window.game.audio&&window.game.audio.stopSound("mining-laser")}update(e=1/60){this.miningCooldown>0&&this.miningCooldown--,this.isMining&&this.updateMining(e),this.miningParticles&&this.miningParticles.visible&&this.updateMiningParticles(),this.targetAsteroid&&!this.isMining&&this.updateTargetInfo()}updateMining(e=1/60){if(!this.targetAsteroid||!this.isMining){this.stopMining();return}if(this.spaceship.mesh.position.distanceTo(this.targetAsteroid.mesh.position)>this.miningDistance){this.stopMining();return}this.miningProgress+=this.miningSpeed*e,this.updateLaserBeam(),this.miningParticles&&this.miningParticles.visible&&this.miningParticles.position.copy(this.targetAsteroid.mesh.position),this.miningProgress>=1&&(this.addAsteroidResources(),this.createAsteroidBreakEffect(this.targetAsteroid.mesh.position),this.lastDestroyedAsteroid=this.targetAsteroid,this.scene.remove(this.targetAsteroid.mesh),this.stopMining(),this.targetAsteroid=null);const s=document.getElementById("mining-progress-bar");s&&(s.style.width=`${this.miningProgress*100}%`)}updateLaserBeam(){const e=document.getElementById("laser-beam");if(!e||!this.targetAsteroid||!this.isMining)return;const t=this.spaceship.mesh.position.clone(),s=this.targetAsteroid.mesh.position.clone(),i=new f(0,0,-60);i.applyQuaternion(this.spaceship.mesh.quaternion),t.add(i);const o=new f,n=this.scene.camera;if(!n)return;o.copy(t),o.project(n);const a=(o.x*.5+.5)*window.innerWidth,r=(-(o.y*.5)+.5)*window.innerHeight;o.copy(s),o.project(n);const l=(o.x*.5+.5)*window.innerWidth,d=(-(o.y*.5)+.5)*window.innerHeight,c=l-a,h=d-r,u=Math.sqrt(c*c+h*h),p=Math.atan2(h,c);e.style.width=`${u}px`,e.style.left=`${a}px`,e.style.top=`${r}px`,e.style.transform=`rotate(${p}rad)`;const y=.8+Math.sin(Date.now()*.01)*.2;e.style.opacity=y.toString();const m=this.getMiningEfficiency(),v=Math.max(2,Math.ceil(2*Math.sqrt(m)));if(e.style.height=`${v}px`,!e.hasChildNodes())for(let k=0;k<2;k++){const S=document.createElement("div");S.style.position="absolute",S.style.left="0",S.style.top=`${k===0?-1:1}px`,S.style.width="100%",S.style.height="1px",S.style.backgroundColor="#ff6060",S.style.opacity="0.7",e.appendChild(S)}}updateMiningParticles(){const e=this.miningParticles.geometry.attributes.position.array,s=.3*this.getMiningEfficiency();for(let i=0;i<e.length;i+=3){const o=new f(e[i],e[i+1],e[i+2]);o.normalize().multiplyScalar(s),e[i]+=o.x,e[i+1]+=o.y,e[i+2]+=o.z,Math.sqrt(e[i]*e[i]+e[i+1]*e[i+1]+e[i+2]*e[i+2])>36&&(e[i]=(Math.random()-.5)*24,e[i+1]=(Math.random()-.5)*24,e[i+2]=(Math.random()-.5)*24)}this.miningParticles.geometry.attributes.position.needsUpdate=!0}addAsteroidResources(){if(!this.targetAsteroid)return;const e=this.targetAsteroid.resourceType||"iron",t=this.getMiningEfficiency(),s=(t-1)*.5;let i=0;switch(e.toLowerCase()){case"iron":i=Math.floor(Math.random()*5)+10;break;case"gold":i=Math.floor(Math.random()*3)+5;break;case"platinum":i=Math.floor(Math.random()*2)+2;break;default:i=10}switch(t>1&&Math.random()<s&&(i=Math.ceil(i*1.2)),e.toLowerCase()){case"iron":this.resources.iron+=i;break;case"gold":this.resources.gold+=i;break;case"platinum":this.resources.platinum+=i;break;default:this.resources.iron+=i}return console.log(`MiningSystem: Added ${i} ${e} from asteroid`),this.showResourceGainNotification(i,e),!0}showResourceGainNotification(e,t){let s="#a0a0a0";t==="gold"?s="#ffcc00":t==="platinum"&&(s="#66ffff");const i=document.createElement("div");i.textContent=`+${e} ${t.toUpperCase()}`,i.style.position="absolute",i.style.top="40%",i.style.left="50%",i.style.transform="translate(-50%, -50%)",i.style.color=s,i.style.fontSize="24px",i.style.fontWeight="bold",i.style.textShadow="0 0 8px black",i.style.zIndex="1000",i.style.opacity="1",i.style.transition="all 1.5s ease-out",document.body.appendChild(i),setTimeout(()=>{i.style.opacity="0",i.style.top="30%",setTimeout(()=>{document.body.contains(i)&&document.body.removeChild(i)},1500)},100)}createAsteroidBreakEffect(e){const s=new q,i=new te({color:11184810,size:12,blending:z,transparent:!0,opacity:.8}),o=new Float32Array(50*3),n=[];for(let d=0;d<50;d++)o[d*3]=e.x,o[d*3+1]=e.y,o[d*3+2]=e.z,n.push({x:(Math.random()-.5)*8,y:(Math.random()-.5)*8,z:(Math.random()-.5)*8});s.setAttribute("position",new _(o,3));const a=new Z(s,i);this.scene.add(a);let r=0;const l=()=>{r++;const d=a.geometry.attributes.position.array;for(let c=0;c<50;c++)d[c*3]+=n[c].x,d[c*3+1]+=n[c].y,d[c*3+2]+=n[c].z;a.geometry.attributes.position.needsUpdate=!0,a.material.opacity=Math.max(0,.8-r*.02),r<40?requestAnimationFrame(l):this.scene.remove(a)};l()}getLastDestroyedAsteroid(){const e=this.lastDestroyedAsteroid;return this.lastDestroyedAsteroid=null,e}updateTargetInfo(){if(!(!this.targetAsteroid||!this.targetAsteroid.mesh))try{const e=this.spaceship.mesh.position.distanceTo(this.targetAsteroid.mesh.position),t=document.getElementById("target-distance");t&&(t.textContent=`Distance: ${Math.round(e)} units`);const s=e<=this.miningDistance,i=document.getElementById("target-info");i&&(s?i.style.color="#30cfd0":i.style.color="#ff4400")}catch(e){console.error("MiningSystem: Error updating target info:",e)}}}class qt{constructor(e,t,s){this.spaceship=e,this.scene=t,this.environment=s,this.lockOnEnabled=!1,this.nearbyAsteroids=[],this.currentLockOnIndex=-1,this.targetAsteroid=null,this.scanRadius=this.getScanRadius(),this.createTargetReticle(),this.createOffScreenIndicators()}createTargetReticle(){const e=new Se(150,180,32),t=new Y({color:16724016,side:Q,transparent:!0,opacity:.7});this.targetReticle=new w(e,t),this.targetReticle.visible=!1,this.scene.add(this.targetReticle);const s=new Se(75,90,32),i=new Y({color:16736352,side:Q,transparent:!0,opacity:.5}),o=new w(s,i);this.targetReticle.add(o)}getScanRadius(){return this.spaceship&&this.spaceship.scanRange?this.spaceship.scanRange*5:5e3}toggleLockOn(){if(this.lockOnEnabled=!this.lockOnEnabled,this.lockOnEnabled){this.scanRadius=this.getScanRadius(),this.scanForAsteroids();const e=document.getElementById("target-info");e&&(e.textContent="Lock-On Targeting: ACTIVE",e.style.display="block",e.style.color="#30cfd0"),this.nearbyAsteroids.length>0&&this.findNearestTarget()}else{this.nearbyAsteroids=[],this.currentLockOnIndex=-1,this.targetAsteroid=null,this.targetReticle.visible=!1,this.hideOffScreenIndicators();const e=document.getElementById("target-info");e&&(e.style.display="none")}return this.lockOnEnabled}scanForAsteroids(){this.nearbyAsteroids=[];const e=this.spaceship.mesh.position;if(this.environment.asteroids.forEach(s=>{if(!s.minable||!s.mesh.visible)return;const i=e.distanceTo(s.mesh.position);i<=this.scanRadius&&this.nearbyAsteroids.push({asteroid:s,distance:i})}),this.nearbyAsteroids.sort((s,i)=>s.distance-i.distance),this.nearbyAsteroids=this.nearbyAsteroids.map(s=>s.asteroid),this.nearbyAsteroids.length>0){this.currentLockOnIndex=0,this.updateLockedOnTarget();const s=document.getElementById("target-name");return s&&(s.textContent=`Target 1/${this.nearbyAsteroids.length} (${Math.round(this.nearbyAsteroids[0].mesh.position.distanceTo(e))} units)`),!0}else{const s=document.getElementById("target-name");return s&&(s.textContent="No targets in range"),this.targetReticle.visible=!1,this.targetAsteroid=null,!1}}cycleLockOnTarget(){return!this.lockOnEnabled||this.nearbyAsteroids.length===0?null:(this.currentLockOnIndex=(this.currentLockOnIndex+1)%this.nearbyAsteroids.length,this.updateLockedOnTarget())}updateLockedOnTarget(){if(this.targetAsteroid=this.nearbyAsteroids[this.currentLockOnIndex],this.targetAsteroid){const e=document.getElementById("target-name");e&&(e.textContent=`Asteroid (${this.targetAsteroid.resourceType}) - ${this.currentLockOnIndex+1}/${this.nearbyAsteroids.length}`);const t=document.getElementById("target-resources");t&&(t.textContent=`Health: ${this.targetAsteroid.mesh.userData.health}`),this.targetReticle.position.copy(this.targetAsteroid.mesh.position),this.targetReticle.visible=!0;const s=new f().copy(this.scene.camera.position);this.targetReticle.lookAt(s),this.targetReticle.scale.set(1,1,1),this.targetReticle.material.opacity=.8,this.targetReticle.children.length>0&&(this.targetReticle.children[0].material.opacity=.8)}return this.targetAsteroid}getCurrentTarget(){try{return console.log("TargetingSystem: getCurrentTarget called"),this.targetAsteroid?!this.targetAsteroid.mesh||!this.targetAsteroid.mesh.position?(console.error("TargetingSystem: Current target is invalid, clearing target"),this.targetAsteroid=null,null):(console.log("TargetingSystem: Returning current target:",this.targetAsteroid),this.targetAsteroid):(console.log("TargetingSystem: No current target"),null)}catch(e){return console.error("TargetingSystem: Error in getCurrentTarget:",e),null}}isLockOnEnabled(){return this.lockOnEnabled===!0}findNearestTarget(){try{if(console.log("TargetingSystem: findNearestTarget called"),!this.spaceship||!this.spaceship.mesh||!this.spaceship.mesh.position)return console.error("TargetingSystem: Cannot find nearest target - spaceship missing or invalid"),null;let e=[];const t=window.gameInstance||window.game;if(t&&t.environment&&Array.isArray(t.environment.asteroids))console.log(`TargetingSystem: Found ${t.environment.asteroids.length} asteroids in environment`),e=t.environment.asteroids;else return console.error("TargetingSystem: Could not access asteroids from game environment"),null;if(e.length===0)return console.log("TargetingSystem: No asteroids found in environment"),null;let s=null,i=1/0;for(const o of e){if(!o||!o.mesh||!o.mesh.position||!o.mesh.visible){console.log("TargetingSystem: Skipping invalid or invisible asteroid",o);continue}const n=this.spaceship.mesh.position.distanceTo(o.mesh.position);n<i&&(i=n,s=o)}return s?(console.log("TargetingSystem: Found nearest target:",s),this.setTarget(s),s):(console.log("TargetingSystem: No valid asteroid found after checking all asteroids"),null)}catch(e){return console.error("TargetingSystem: Error in findNearestTarget:",e),null}}update(){if(this.scanRadius=this.getScanRadius(),this.lockOnEnabled&&this.targetAsteroid){this.targetReticle.position.copy(this.targetAsteroid.mesh.position);const e=new f().copy(this.scene.camera.position);this.targetReticle.lookAt(e),this.targetReticle.rotation.z+=.01,this.targetReticle.children.length>0&&(this.targetReticle.children[0].rotation.z-=.02);const t=Math.sin(Date.now()*.005),s=.6+.4*t,i=1+.1*t;this.targetReticle.material.opacity=s,this.targetReticle.scale.set(i,i,i);const o=document.getElementById("target-distance");if(o){const a=Math.round(this.spaceship.mesh.position.distanceTo(this.targetAsteroid.mesh.position));o.textContent=`Distance: ${a} units`}const n=this.isTargetOnScreen();if(this.targetReticle.visible=!0,n)this.hideOffScreenIndicators();else{const a=this.getScreenPosition(this.targetAsteroid.mesh.position),r=this.getTargetDirection();this.showOffScreenIndicator(a,r)}(!this.targetAsteroid.mesh.parent||this.spaceship.mesh.position.distanceTo(this.targetAsteroid.mesh.position)>this.scanRadius)&&this.scanForAsteroids()}this.lockOnEnabled&&Date.now()%50===0&&this.scanForAsteroids()}setTarget(e){try{if(console.log("TargetingSystem: setTarget called",e),!e){console.error("TargetingSystem: Cannot set null target");return}if(!e.mesh||!e.mesh.position){console.error("TargetingSystem: Target is missing mesh or position properties",e);return}if(this.targetAsteroid=e,this.targetDisplay&&(this.targetDisplay.style.display="block"),this.targetInfoElement){const t=this.calculateDistanceToTarget();let s=e.resourceType||"Unknown";s=s.charAt(0).toUpperCase()+s.slice(1),this.targetInfoElement.textContent=`${s} Asteroid - ${t.toFixed(0)}m`,this.targetInfoElement.style.color="#30cfd0",this.targetInfoElement.style.display="block"}return console.log("TargetingSystem: Target successfully set",this.targetAsteroid),this.lockOnEnabled=!0,!0}catch(t){return console.error("TargetingSystem: Error in setTarget:",t),!1}}calculateDistanceToTarget(){try{return!this.targetAsteroid||!this.targetAsteroid.mesh||!this.targetAsteroid.mesh.position?(console.error("TargetingSystem: Cannot calculate distance - invalid target asteroid"),1/0):!this.spaceship||!this.spaceship.mesh||!this.spaceship.mesh.position?(console.error("TargetingSystem: Cannot calculate distance - invalid spaceship"),1/0):this.spaceship.mesh.position.distanceTo(this.targetAsteroid.mesh.position)}catch(e){return console.error("TargetingSystem: Error calculating distance to target:",e),1/0}}createOffScreenIndicators(){this.offScreenContainer=document.createElement("div"),this.offScreenContainer.id="off-screen-indicators",this.offScreenContainer.style.position="absolute",this.offScreenContainer.style.top="0",this.offScreenContainer.style.left="0",this.offScreenContainer.style.width="100%",this.offScreenContainer.style.height="100%",this.offScreenContainer.style.pointerEvents="none",this.offScreenContainer.style.display="none",document.body.appendChild(this.offScreenContainer),this.offScreenIndicator=document.createElement("div"),this.offScreenIndicator.style.position="absolute",this.offScreenIndicator.style.width="30px",this.offScreenIndicator.style.height="30px",this.offScreenIndicator.innerHTML=`
            <svg width="30" height="30" viewBox="0 0 30 30">
                <polygon points="15,0 30,30 15,22 0,30" fill="#ff3030" />
            </svg>
        `,this.offScreenIndicator.style.transformOrigin="center center",this.offScreenIndicator.style.display="none",this.offScreenContainer.appendChild(this.offScreenIndicator)}hideOffScreenIndicators(){this.offScreenContainer&&(this.offScreenContainer.style.display="none"),this.offScreenIndicator&&(this.offScreenIndicator.style.display="none")}showOffScreenIndicator(e,t){if(!this.offScreenContainer||!this.offScreenIndicator)return;this.offScreenContainer.style.display="block",this.offScreenIndicator.style.display="block";const s=Math.atan2(t.y,t.x)*(180/Math.PI),i=50,o=window.innerWidth/2,n=window.innerHeight/2,a=new U(t.x,t.y).normalize();let r,l;const d=Math.abs(a.y/a.x),c=n/o;d>c?(l=a.y>0?n-i:-n+i,r=l/a.y*a.x):(r=a.x>0?o-i:-o+i,l=r/a.x*a.y),this.offScreenIndicator.style.left=o+r+"px",this.offScreenIndicator.style.top=n+l+"px",this.offScreenIndicator.style.transform=`rotate(${s}deg)`}isTargetOnScreen(){if(!this.targetAsteroid||!this.targetAsteroid.mesh)return!1;const e=this.getScreenPosition(this.targetAsteroid.mesh.position),t=.1;return e.x>=-1+t&&e.x<=1-t&&e.y>=-1+t&&e.y<=1-t}getScreenPosition(e){const t=new f().copy(e);return t.project(this.scene.camera),new U(t.x,t.y)}getTargetDirection(){const e=this.getScreenPosition(this.targetAsteroid.mesh.position);return new U(e.x,e.y)}}class Yt{constructor(e,t,s){this.spaceship=e,this.stargate=t,this.ui=s,this.nearStargate=!1,this.isDocked=this.spaceship.isDocked,this.spaceship&&this.spaceship.undockLocation&&this.stargate&&this.spaceship.undockLocation.set(0,1e4,0),console.log("Initializing docking system, ship is "+(this.isDocked?"docked":"undocked")),this.setupDockingControls(),this.isDocked&&this.spaceship.world&&this.spaceship.world.messageBus&&(this.spaceship.world.messageBus.publish("player.docked",{playerPosition:this.spaceship.mesh?this.spaceship.mesh.position.clone():null,stargate:this.stargate}),console.log("Published initial player.docked event"))}setupDockingControls(){document.addEventListener("keydown",e=>{e.key.toLowerCase()==="q"&&(this.nearStargate&&!this.spaceship.isDocked?(console.log("Q key pressed: Docking with stargate"),this.dockWithStargate()):this.spaceship.isDocked?console.log("Q key pressed while docked: No action (use Undock button)"):this.nearStargate||console.log("Q key pressed but not near stargate"))}),this.setupStargateUIControls()}setupStargateUIControls(){const e=document.getElementById("refuel-btn");e&&e.addEventListener("click",()=>{this.spaceship.credits>=100&&(this.spaceship.credits-=this.spaceship.refuel(),this.updateStargateUI())});const t=document.getElementById("repair-shield-btn");t&&t.addEventListener("click",()=>{this.spaceship.credits>=150&&(this.spaceship.credits-=this.spaceship.repairShield(),this.updateStargateUI())});const s=document.getElementById("repair-hull-btn");s&&s.addEventListener("click",()=>{this.spaceship.credits>=200&&(this.spaceship.credits-=this.spaceship.repairHull(),this.updateStargateUI())});const i=document.getElementById("undock-btn");if(i){const o=n=>{n.preventDefault(),n.stopPropagation(),console.log(`Undock button ${n.type} event triggered`),this.isMobileDevice()?(document.body.classList.remove("undocking","modal-open"),setTimeout(()=>{this.undockFromStargate()},50)):this.undockFromStargate()};i.addEventListener("click",o),i.addEventListener("touchend",o),i.addEventListener("touchstart",n=>{console.log("Touch started on undock button"),n.stopPropagation()},{passive:!1})}this.setupSellingButtons(),this.setupUpgradeButtons()}setupSellingButtons(){const e=document.getElementById("sell-iron");e&&e.addEventListener("click",()=>{this.resources.iron>0&&(this.spaceship.credits+=this.resources.iron*10,this.resources.iron=0,this.updateStargateUI())});const t=document.getElementById("sell-gold");t&&t.addEventListener("click",()=>{this.resources.gold>0&&(this.spaceship.credits+=this.resources.gold*50,this.resources.gold=0,this.updateStargateUI())});const s=document.getElementById("sell-platinum");s&&s.addEventListener("click",()=>{this.resources.platinum>0&&(this.spaceship.credits+=this.resources.platinum*200,this.resources.platinum=0,this.updateStargateUI())})}setupUpgradeButtons(){this.setupUpgradeButton("upgrade-fuel-tank",()=>this.spaceship.fuelUpgradeCost,()=>this.spaceship.upgradeFuelTank()),this.setupUpgradeButton("upgrade-engine",()=>this.spaceship.engineUpgradeCost,()=>this.spaceship.upgradeEngine()),this.setupUpgradeButton("upgrade-mining",()=>this.spaceship.miningUpgradeCost,()=>this.spaceship.upgradeMiningLaser()),this.setupUpgradeButton("upgrade-hull",()=>this.spaceship.hullUpgradeCost,()=>this.spaceship.upgradeHull()),this.setupUpgradeButton("upgrade-scanner",()=>this.spaceship.scannerUpgradeCost,()=>this.spaceship.upgradeScanner())}setupUpgradeButton(e,t,s){const i=document.getElementById(e);i&&i.addEventListener("click",()=>{const o=t();this.spaceship.credits>=o&&(this.spaceship.credits-=o,s(),e==="upgrade-mining"&&this.updateMiningSystem&&this.updateMiningSystem(),this.updateStargateUI())})}updateMiningSystem(){if(this.ui&&this.ui.controls&&this.ui.controls.miningSystem){const e=this.ui.controls.miningSystem;Object.keys(e.miningSpeedByType).forEach(t=>{const s=e.miningSpeedByType[t];e.miningSpeedByType[t]=s*this.spaceship.miningEfficiency}),console.log("Mining system updated with new efficiency:",this.spaceship.miningEfficiency)}}dockWithStargate(){console.log("Docking with stargate"),this.spaceship.isDocked?console.log("Ship is already docked, just showing UI"):(this.spaceship.dock(),this.isDocked=!0,this.spaceship.world&&this.spaceship.world.messageBus&&(this.spaceship.world.messageBus.publish("player.docked",{playerPosition:this.spaceship.mesh.position.clone(),stargate:this.stargate}),console.log("Published player.docked event"))),this.isMobileDevice()&&(console.log("Mobile device detected - preparing for stargate UI"),document.body.classList.remove("undocking","modal-open"),document.body.style.position="static",document.body.style.touchAction="auto",document.body.style.pointerEvents="auto",document.body.style.overflow="auto"),this.ui&&this.ui.stargateInterface&&(console.log("Showing stargate UI..."),this.ui.stargateInterface.showStargateUI(),this.isMobileDevice()&&setTimeout(()=>{const e=document.getElementById("stargate-ui");e&&e.style.display!=="block"&&(console.log("Forcing stargate UI display"),e.style.display="block")},100)),this.ui&&this.ui.hideUI(),document.pointerLockElement&&(document.exitPointerLock(),console.log("Exited pointer lock for UI interaction")),this.updateStargateUI()}async performStep(e,t){return new Promise(s=>{requestAnimationFrame(()=>{try{e(),console.log(`Completed step: ${t}`)}catch(i){console.error(`Error during step ${t}:`,i)}s()})})}async yieldToBrowser(){return new Promise(e=>requestAnimationFrame(e))}hideStargateUI(){this.ui&&this.ui.stargateInterface&&(document.body.classList.add("undocking"),this.ui.stargateInterface.hideStargateUI(),console.log("Hiding stargate interface"))}showGameUI(){this.ui&&(document.body.classList.remove("undocking"),this.ui.showUI(),console.log("Showing game UI"))}resetMobileStyles(){this.isMobileDevice()&&document.body.classList.remove("undocking","modal-open"),requestAnimationFrame(()=>{document.body.style.cssText="",document.body.style.overflow="auto",document.body.style.position="static",document.body.style.height="auto",document.body.style.width="auto",document.body.style.touchAction="auto",document.body.style.pointerEvents="auto",document.body.style.webkitOverflowScrolling="touch",document.body.classList.remove("modal-open","undocking"),document.querySelectorAll(".modal-content, #stargate-ui, #star-map").forEach(e=>{e&&e.style&&(e.style.cssText="overflow: auto; -webkit-overflow-scrolling: touch;",e.scrollTop=0)})})}async undockFromStargate(){var t;if(!this.spaceship.isDocked){console.log("Not docked, can't undock");return}this.isMobileDevice()&&(document.body.classList.remove("undocking"),this.resetMobileStyles());const e=document.createElement("div");e.className="undocking-indicator",e.textContent="Undocking...",document.body.appendChild(e);try{console.log("Starting undock sequence..."),this.preUndockShieldValue=this.spaceship.shield,console.log(`Storing pre-undock shield value: ${this.preUndockShieldValue}`),await this.performStep(()=>this.closeAllModals(),"Closing modals"),await this.yieldToBrowser(),this.isMobileDevice()&&(await this.performStep(()=>this.resetMobileStyles(),"Resetting mobile styles"),await this.yieldToBrowser()),await this.performStep(()=>this.hideStargateUI(),"Hiding stargate UI"),await this.yieldToBrowser(),await this.performStep(()=>this.showGameUI(),"Showing game UI"),await this.yieldToBrowser(),console.log("Performing core undock...");const s=this.spaceship.undock();console.log("Syncing health values..."),this.spaceship.shield===0&&this.preUndockShieldValue>0&&(console.log(`Fixing shield reset: Restoring to ${this.preUndockShieldValue}`),this.spaceship.shield=this.preUndockShieldValue),this.spaceship.syncValuesToHealthComponent();const i={shield:this.spaceship.shield,maxShield:this.spaceship.maxShield,hull:this.spaceship.hull,maxHull:this.spaceship.maxHull},o=((t=window.game)==null?void 0:t.messageBus)||window.mainMessageBus;o&&(o.publish("player.undocked",i),console.log("Published player.undocked event with health values:",i)),this.dockingAvailable=!1,this.autoPointerLockOnUndock&&!this.isMobileDevice()&&await this.performStep(()=>this.requestPointerLock(),"Requesting pointer lock"),console.log("Undock sequence complete")}catch(s){console.error("Error during undocking:",s)}finally{document.body.contains(e)&&document.body.removeChild(e),this.isMobileDevice()?(document.body.classList.remove("undocking","modal-open"),this.resetMobileStyles(),document.body.style.pointerEvents="",document.body.style.touchAction="",document.body.style.overflowY="",document.body.style.position=""):document.body.classList.remove("undocking")}}isMobileDevice(){return"ontouchstart"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0||window.innerWidth<900}closeAllModals(){try{const e=document.getElementById("custom-system-creator");if(e&&window.getComputedStyle(e).display!=="none"){console.log("Closing custom system creator before undocking");const i=e.querySelector("#close-system-creator");i?i.click():e.style.display="none",window.game&&window.game.ui&&(window.game.ui.starMap&&typeof window.game.ui.starMap.hide=="function"&&window.game.ui.starMap.hide(),window.game.ui.customSystemCreator&&typeof window.game.ui.customSystemCreator.hide=="function"&&window.game.ui.customSystemCreator.hide(),document.body.classList.remove("modal-open"))}const t=document.getElementById("star-map");if(t&&window.getComputedStyle(t).display!=="none"){console.log("Closing star map before undocking");const i=t.querySelector("#close-star-map");i?i.click():t.style.display="none"}document.querySelectorAll(".modal-container").forEach(i=>{window.getComputedStyle(i).display!=="none"&&(console.log("Closing modal before undocking:",i.id||"unnamed modal"),i.style.display="none")})}catch(e){console.warn("Error while closing modals:",e)}}requestPointerLock(){const e=document.querySelector("canvas");e&&!document.pointerLockElement&&setTimeout(()=>{e.requestPointerLock(),console.log("Requested pointer lock for ship control")},200)}updateStargateUI(){this.ui&&this.ui.stargateInterface&&this.ui.stargateInterface.updateStargateUI(this.spaceship,this.resources)}checkStargateProximity(){if(this.spaceship.isDocked||!this.stargate||!this.spaceship||!this.spaceship.mesh)return;const e=this.stargate.getPosition();if(!e)return;this.spaceship.mesh.position.distanceTo(e)<2e3?(this.nearStargate=!0,this.ui&&this.ui.stargateInterface&&this.ui.stargateInterface.showDockingPrompt(),this.ui&&this.ui.controls&&this.ui.controls.isMobile&&this.ui.controls.touchControls&&this.ui.controls.touchControls.showDockButton()):(this.nearStargate=!1,this.ui&&this.ui.stargateInterface&&this.ui.stargateInterface.hideDockingPrompt(),this.ui&&this.ui.controls&&this.ui.controls.isMobile&&this.ui.controls.touchControls&&this.ui.controls.touchControls.hideDockButton())}update(){this.checkStargateProximity()}setResources(e){this.resources=e}}class Qt{constructor(e,t){this.spaceship=e,this.physics=t,this.leftJoystick=null,this.rightJoystick=null,this.dockButton=null,this.mineButton=null,this.fireButton=null,this.targetButton=null,this.isInitialized=!1,this.miningSystem=null,this.targetingSystem=null,this.dockingSystem=null,this.weaponSystem=null,this.threshold=.1,this.createCrosshair(),this.loadNippleJS().then(()=>{this.setupTouchControls()}).catch(s=>{console.error("Failed to load nipple.js:",s)})}setControlSystems(e){if(console.log("TouchControls: Setting control systems"),!e){console.error("TouchControls: Controls object is null or undefined");return}this.miningSystem=e.miningSystem,this.targetingSystem=e.targetingSystem,this.dockingSystem=e.dockingSystem,this.weaponSystem=e.weaponSystem,this.weaponSystem&&!this.weaponSystem.setFiring&&this.weaponSystem.isFiring!==void 0&&console.log("TouchControls: weaponSystem is likely a Combat instance, adapting interface");const t={hasMiningSystem:!!this.miningSystem,miningSystemType:this.miningSystem?this.miningSystem.constructor.name:"Not set",hasTargetingSystem:!!this.targetingSystem,targetingSystemType:this.targetingSystem?this.targetingSystem.constructor.name:"Not set",hasDockingSystem:!!this.dockingSystem,dockingSystemType:this.dockingSystem?this.dockingSystem.constructor.name:"Not set",hasWeaponSystem:!!this.weaponSystem,weaponSystemType:this.weaponSystem?this.weaponSystem.constructor.name:"Not set"};return console.log("TouchControls: Systems connected",t),this.miningSystem||console.error("TouchControls: Mining system is not connected - mining won't work!"),this.targetingSystem||console.error("TouchControls: Targeting system is not connected - targeting won't work!"),!this.spaceship&&e.spaceship&&(this.spaceship=e.spaceship,console.log("TouchControls: Spaceship reference set from controls")),this}createCrosshair(){const e=document.createElement("div");e.id="mobile-crosshair",e.style.position="absolute",e.style.top="50%",e.style.left="50%",e.style.transform="translate(-50%, -50%)",e.style.width="10px",e.style.height="10px",e.style.pointerEvents="none",e.style.zIndex="999",e.innerHTML=`
            <div style="position: absolute; top: 50%; left: 0; width: 100%; height: 1px; background-color: rgba(120, 220, 232, 0.8);"></div>
            <div style="position: absolute; top: 0; left: 50%; width: 1px; height: 100%; background-color: rgba(120, 220, 232, 0.8);"></div>
            <div style="position: absolute; top: 50%; left: 50%; width: 3px; height: 3px; background-color: rgba(120, 220, 232, 0.8); border-radius: 50%; transform: translate(-50%, -50%);"></div>
        `,document.body.appendChild(e)}loadNippleJS(){return new Promise((e,t)=>{if(window.nipplejs){e();return}const s=document.createElement("script");s.src="https://cdnjs.cloudflare.com/ajax/libs/nipplejs/0.10.1/nipplejs.min.js",s.async=!0,s.onload=()=>e(),s.onerror=()=>t(new Error("Failed to load nipple.js")),document.head.appendChild(s)})}setupTouchControls(){this.createJoystickZones(),this.createActionButtons(),setTimeout(()=>{this.initializeJoysticks(),this.isInitialized=!0},100)}createJoystickZones(){const e=document.createElement("div");e.id="leftJoystickZone",e.style.position="absolute",e.style.bottom="50px",e.style.left="50px",e.style.width="100px",e.style.height="100px",e.style.zIndex="1000",e.addEventListener("touchstart",s=>s.preventDefault(),{passive:!1}),e.addEventListener("touchmove",s=>s.preventDefault(),{passive:!1}),e.addEventListener("touchend",s=>s.preventDefault(),{passive:!1}),document.body.appendChild(e);const t=document.createElement("div");t.id="rightJoystickZone",t.style.position="absolute",t.style.bottom="50px",t.style.right="50px",t.style.width="100px",t.style.height="100px",t.style.zIndex="1000",t.addEventListener("touchstart",s=>s.preventDefault(),{passive:!1}),t.addEventListener("touchmove",s=>s.preventDefault(),{passive:!1}),t.addEventListener("touchend",s=>s.preventDefault(),{passive:!1}),document.body.appendChild(t)}createActionButtons(){const e=document.createElement("div");e.id="mobile-action-buttons-left",e.style.position="absolute",e.style.bottom="170px",e.style.left="20px",e.style.display="flex",e.style.flexDirection="column",e.style.gap="15px",e.style.zIndex="1000",document.body.appendChild(e);const t=document.createElement("div");t.id="mobile-action-buttons-right",t.style.position="absolute",t.style.bottom="170px",t.style.right="20px",t.style.display="flex",t.style.flexDirection="column",t.style.gap="15px",t.style.zIndex="1000",document.body.appendChild(t),this.fireButton=this.createActionButton(e,"FIRE","rgba(255, 80, 80, 0.8)"),this.addButtonEvents(this.fireButton,this.handleFiringStart.bind(this),this.handleFiringEnd.bind(this)),this.mineButton=this.createActionButton(e,"MINE","rgba(120, 220, 232, 0.8)"),this.addButtonEvents(this.mineButton,this.handleMiningStart.bind(this),this.handleMiningEnd.bind(this)),this.targetButton=this.createActionButton(t,"TARGET","rgba(255, 215, 0, 0.8)"),this.addButtonEvents(this.targetButton,this.handleTargeting.bind(this)),this.dockButton=this.createActionButton(null,"DOCK","rgba(51, 153, 255, 0.8)"),this.dockButton.style.position="absolute",this.dockButton.style.top="50%",this.dockButton.style.left="50%",this.dockButton.style.transform="translate(-50%, -50%)",this.dockButton.style.width="100px",this.dockButton.style.height="100px",this.dockButton.style.fontSize="20px",this.dockButton.style.boxShadow="0 0 25px rgba(51, 153, 255, 0.8)",this.dockButton.style.zIndex="10000",this.dockButton.style.display="none",this.addButtonEvents(this.dockButton,this.handleDocking.bind(this)),document.body.appendChild(this.dockButton),this.deployLaserButton=this.createActionButton(t,"DEPLOY","rgba(255, 100, 100, 0.8)"),this.addButtonEvents(this.deployLaserButton,this.handleDeployLaser.bind(this))}createActionButton(e,t,s){const i=document.createElement("div");return i.className="mobile-action-button",i.textContent=t,i.style.width="60px",i.style.height="60px",i.style.borderRadius="50%",i.style.backgroundColor="rgba(10, 20, 30, 0.7)",i.style.border=`2px solid ${s}`,i.style.color=s,i.style.display="flex",i.style.justifyContent="center",i.style.alignItems="center",i.style.fontFamily='"Rajdhani", sans-serif',i.style.fontSize="16px",i.style.fontWeight="bold",i.style.boxShadow=`0 0 10px ${s}`,i.style.userSelect="none",i.style.touchAction="manipulation",i.style.cursor="pointer",i.style.transform="translateZ(0)",i.style.webkitTapHighlightColor="transparent",i.style.backfaceVisibility="hidden",e&&e.appendChild(i),i}initializeJoysticks(){if(!window.nipplejs){console.error("nipplejs is not loaded");return}this.leftJoystick=window.nipplejs.create({zone:document.getElementById("leftJoystickZone"),mode:"static",position:{left:"50%",top:"50%"},color:"rgba(120, 220, 232, 0.8)",size:100,threshold:this.threshold,dynamicPage:!0,fadeTime:100,lockX:!1,lockY:!1}),this.rightJoystick=window.nipplejs.create({zone:document.getElementById("rightJoystickZone"),mode:"static",position:{left:"50%",top:"50%"},color:"rgba(120, 220, 232, 0.8)",size:100,threshold:this.threshold,dynamicPage:!0,fadeTime:100,lockX:!1,lockY:!1}),this.setupJoystickEvents()}setupJoystickEvents(){this.leftJoystick.on("move",(e,t)=>{this.handleThrustJoystick(t)}).on("end",()=>{this.resetThrust()}),this.rightJoystick.on("move",(e,t)=>{this.handleRotationJoystick(t)}).on("end",()=>{})}handleThrustJoystick(e){if(this.spaceship.isDocked)return;this.resetThrust();const t=e.force>2?2:e.force,s=e.angle.radian;s>1&&s<2?this.spaceship.thrust.forward=!0:s>4&&s<5.5&&(this.spaceship.thrust.backward=!0),s>2.5&&s<4?this.spaceship.thrust.right=!0:(s>=0&&s<1||s>5.5)&&(this.spaceship.thrust.left=!0),this.spaceship.thrust.boost=t>1.5}handleRotationJoystick(e){if(this.spaceship.isDocked)return;const t=e.vector.x*e.force*.015,s=-e.vector.y*e.force*.015;this.physics.updateRotation(t,s)}resetThrust(){this.spaceship&&(this.spaceship.thrust.forward=!1,this.spaceship.thrust.backward=!1,this.spaceship.thrust.left=!1,this.spaceship.thrust.right=!1,this.spaceship.thrust.boost=!1)}handleMiningStart(){try{if(console.log("TouchControls: handleMiningStart called"),!this.targetingSystem){console.error("TouchControls: Targeting system not available");return}if(!this.miningSystem){console.error("TouchControls: Mining system not available");return}let e=this.targetingSystem.getCurrentTarget();if(console.log("TouchControls: Initial target:",e),!e&&(console.log("TouchControls: No target selected, enabling targeting and finding nearest target"),this.targetingSystem.isLockOnEnabled()||this.targetingSystem.toggleLockOn(),e=this.targetingSystem.findNearestTarget(),console.log("TouchControls: Found nearest target:",e),!e)){console.log("TouchControls: No targets in range after scan");return}if(!e||!e.mesh||!e.mesh.position){console.error("TouchControls: Target asteroid is missing required properties",e);const t=window.gameInstance||window.game;if(t&&t.environment&&t.environment.asteroids&&t.environment.asteroids.length>0){console.log("TouchControls: Attempting to get asteroid directly from environment");let s=1/0,i=null;for(const o of t.environment.asteroids)if(o&&o.mesh&&o.mesh.position&&this.spaceship&&this.spaceship.mesh){const n=o.mesh.position.distanceTo(this.spaceship.mesh.position);n<s&&(s=n,i=o)}if(i)console.log("TouchControls: Found closest asteroid from environment:",i),e=i;else{console.error("TouchControls: Could not find any valid asteroids in environment");return}}else{console.error("TouchControls: Could not access environment to find asteroids");return}}if(console.log("TouchControls: Target asteroid found:",e),!e||!e.mesh||!e.mesh.position){console.error("TouchControls: Target asteroid is still invalid after fallback attempts");return}this.miningSystem.setTargetAsteroid(e),console.log("TouchControls: Target set for mining:",{resourceType:e.resourceType||"unknown",position:e.mesh?e.mesh.position.toArray():"no mesh",distance:e.mesh&&this.spaceship&&this.spaceship.mesh?e.mesh.position.distanceTo(this.spaceship.mesh.position):"unknown"}),console.log("TouchControls: Starting mining operation"),this.miningSystem.startMining(),console.log("TouchControls: Mining started:",this.miningSystem.isMining)}catch(e){console.error("TouchControls: Error in handleMiningStart:",e)}}handleMiningEnd(){try{if(console.log("TouchControls: handleMiningEnd called"),!this.miningSystem){console.error("TouchControls: Mining system not available for stopping");return}this.miningSystem.stopMining(),console.log("TouchControls: Mining stopped")}catch(e){console.error("TouchControls: Error stopping mining:",e)}}handleFiringStart(){try{if(this.weaponSystem){typeof this.weaponSystem.setFiring=="function"?this.weaponSystem.setFiring(!0):this.weaponSystem.isWeaponActive=!0;const t=window.gameInstance||window.game;t&&t.audio&&t.audio.playSound("laser");return}const e=window.gameInstance||window.game;if(!e){console.error("No game reference found");return}if(e.combat){e.combat.setFiring(!0),e.audio&&e.audio.playSound("laser");return}if(e.weaponSystem){typeof e.weaponSystem.setFiring=="function"?e.weaponSystem.setFiring(!0):e.weaponSystem.isWeaponActive=!0,e.audio&&e.audio.playSound("laser");return}if(e.controls&&e.controls.weaponSystem){typeof e.controls.weaponSystem.setFiring=="function"?e.controls.weaponSystem.setFiring(!0):e.controls.weaponSystem.isWeaponActive=!0,e.audio&&e.audio.playSound("laser");return}console.error("No weapon system or combat system found")}catch(e){console.error("Error in handleFiringStart:",e)}}handleFiringEnd(){try{if(this.weaponSystem){typeof this.weaponSystem.setFiring=="function"?this.weaponSystem.setFiring(!1):this.weaponSystem.isWeaponActive=!1;const t=window.gameInstance||window.game;t&&t.audio&&t.audio.stopSound("laser");return}const e=window.gameInstance||window.game;if(!e){console.error("No game reference found");return}if(e.combat){e.combat.setFiring(!1),e.audio&&e.audio.stopSound("laser");return}if(e.weaponSystem){typeof e.weaponSystem.setFiring=="function"?e.weaponSystem.setFiring(!1):e.weaponSystem.isWeaponActive=!1,e.audio&&e.audio.stopSound("laser");return}if(e.controls&&e.controls.weaponSystem){typeof e.controls.weaponSystem.setFiring=="function"?e.controls.weaponSystem.setFiring(!1):e.controls.weaponSystem.isWeaponActive=!1,e.audio&&e.audio.stopSound("laser");return}console.error("No weapon system or combat system found")}catch(e){console.error("Error in handleFiringEnd:",e)}}handleDocking(){if(!this.dockingSystem){console.error("Docking system not available");return}console.log("TouchControls: Dock button pressed, attempting to dock with stargate"),this.dockingSystem.dockWithStargate(),this.hideDockButton()}handleTargeting(){if(!this.targetingSystem){console.error("Targeting system not available");return}this.targetingSystem.toggleLockOn()}showDockButton(){if(this.dockButton){if(this.dockButton.style.display="flex",this.dockButton.style.zIndex="10000",this.dockButton.style.position="absolute",this.dockButton.style.top="50%",this.dockButton.style.left="50%",console.log("Showing dock button - near stargate"),!this.dockButton.style.animation&&(this.dockButton.style.animation="pulse 1.5s infinite",!document.getElementById("mobile-pulse-animation"))){const e=document.createElement("style");e.id="mobile-pulse-animation",e.textContent=`
                        @keyframes pulse {
                            0% { transform: translate(-50%, -50%) scale(1); }
                            50% { transform: translate(-50%, -50%) scale(1.1); }
                            100% { transform: translate(-50%, -50%) scale(1); }
                        }
                    `,document.head.appendChild(e)}console.log("Dock button shown with styles:",{display:this.dockButton.style.display,zIndex:this.dockButton.style.zIndex,position:this.dockButton.style.position,width:this.dockButton.style.width,height:this.dockButton.style.height})}}hideDockButton(){this.dockButton&&(this.dockButton.style.display="none")}hide(){const e=document.getElementById("leftJoystickZone"),t=document.getElementById("rightJoystickZone");e&&(e.style.display="none"),t&&(t.style.display="none");const s=document.getElementById("mobile-action-buttons-left"),i=document.getElementById("mobile-action-buttons-right");s&&(s.style.display="none"),i&&(i.style.display="none"),this.hideDockButton()}show(){if(this.spaceship&&this.spaceship.isDocked||window.game&&window.game.introSequenceActive){console.log("TouchControls: Not showing controls during docked state or intro sequence");return}const e=document.getElementById("leftJoystickZone"),t=document.getElementById("rightJoystickZone");e&&(e.style.display="block"),t&&(t.style.display="block");const s=document.getElementById("mobile-action-buttons-left"),i=document.getElementById("mobile-action-buttons-right");s&&(s.style.display="flex"),i&&(i.style.display="flex")}update(){if(this.dockingSystem&&this.spaceship)this.dockingSystem.nearStargate&&!this.spaceship.isDocked?this.showDockButton():this.hideDockButton();else{const e=window.gameInstance||window.game;e&&e.controls&&e.controls.dockingSystem&&(e.controls.dockingSystem.nearStargate&&!this.spaceship.isDocked?this.showDockButton():this.hideDockButton())}}addButtonEvents(e,t,s=null){if(!e){console.error("TouchControls: Cannot add events to null button");return}s?(e.addEventListener("touchstart",i=>{i.preventDefault(),e.style.transform="scale(0.95) translateZ(0)",t()},{passive:!1}),e.addEventListener("touchend",i=>{i.preventDefault(),e.style.transform="scale(1) translateZ(0)",s()},{passive:!1}),e.addEventListener("pointerdown",i=>{i.preventDefault(),i.pointerType!=="touch"&&(e.style.transform="scale(0.95) translateZ(0)",t())}),e.addEventListener("pointerup",i=>{i.preventDefault(),i.pointerType!=="touch"&&(e.style.transform="scale(1) translateZ(0)",s())}),e.addEventListener("mousedown",i=>{e.style.transform="scale(0.95) translateZ(0)",t()}),e.addEventListener("mouseup",i=>{e.style.transform="scale(1) translateZ(0)",s()})):(e.addEventListener("touchstart",i=>{i.preventDefault(),e.style.transform="scale(0.95) translateZ(0)",e===this.dockButton&&console.log("Dock button touchstart event fired")},{passive:!1}),e.addEventListener("touchend",i=>{i.preventDefault(),e.style.transform="scale(1) translateZ(0)",e===this.dockButton&&console.log("Dock button touchend event fired, calling handler"),t()},{passive:!1}),e.addEventListener("pointerdown",i=>{i.preventDefault(),i.pointerType!=="touch"&&(e.style.transform="scale(0.95) translateZ(0)",e===this.dockButton&&console.log("Dock button pointerdown event fired"))}),e.addEventListener("pointerup",i=>{i.preventDefault(),i.pointerType!=="touch"&&(e.style.transform="scale(1) translateZ(0)",e===this.dockButton&&console.log("Dock button pointerup event fired, calling handler"),t())}),e.addEventListener("mousedown",i=>{e.style.transform="scale(0.95) translateZ(0)"}),e.addEventListener("mouseup",i=>{e.style.transform="scale(1) translateZ(0)",t()}))}handleDeployLaser(){console.log("TouchControls: Deploying laser turret"),window.mainMessageBus&&window.mainMessageBus.publish("input.deployLaser",{})}}class le{static isMobile(){if(this._isMobileCache!==void 0)return this._isMobileCache;const e=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|Tablet|Android|iP(ad|hone|od)/i.test(navigator.userAgent),t="ontouchstart"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0||window.DocumentTouch&&document instanceof DocumentTouch,s=window.innerWidth<900,i=(()=>{const r=document.querySelector("meta[name=viewport]");return r?r.content.includes("width=device-width"):!1})(),o="orientation"in window||"onorientationchange"in window,n="DeviceMotionEvent"in window||"DeviceOrientationEvent"in window,a=(()=>{const r=navigator.platform==="MacIntel"&&navigator.maxTouchPoints>1,l=/android/i.test(navigator.userAgent)&&!/mobile/i.test(navigator.userAgent);return r||l})();return this._isMobileCache=e||t&&(s||o||n||i||a),console.log(`MobileDetector: Device detected as ${this._isMobileCache?"mobile":"desktop"}`),console.log(`- UA: ${e}, touch: ${t}, screen: ${s}`),console.log(`- features: ${o}, motion: ${n}, tablet: ${a}`),this._isMobileCache}static resetCache(){this._isMobileCache=void 0}static hasTouch(){return"ontouchstart"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0||window.DocumentTouch&&document instanceof DocumentTouch}static getOrientation(){return window.innerHeight>window.innerWidth?"portrait":"landscape"}static addOrientationChangeHandler(e){let t=this.getOrientation();const s=()=>{const i=this.getOrientation();i!==t&&(t=i,this.resetCache(),e(i))};window.addEventListener("resize",s),"onorientationchange"in window&&window.addEventListener("orientationchange",s)}}class hs{constructor(e,t,s,i){console.log("Initializing controls systems..."),this.spaceship=e,this.physics=t,this.environment=s,this.ui=i,this.isMobile=le.isMobile(),this._wasDocked=e?e.isDocked:!1,this.weaponSystem=null,this.scene=t.scene,this.isMobile?(console.log("Initializing touch controls for mobile"),this.touchControls=new Qt(e,t),this.inputHandler={isLocked:()=>!1,exitPointerLock:()=>{}}):(console.log("Initializing keyboard/mouse controls"),this.inputHandler=new jt(e,t)),this.miningSystem=new Wt(e,this.scene),this.targetingSystem=new qt(e,this.scene,s),this.dockingSystem=new Yt(e,s.stargate,i),this.resources=this.miningSystem.resources,this.dockingSystem.setResources(this.resources),this.resources.orbs||(this.resources.orbs={common:0,uncommon:0,rare:0,epic:0,legendary:0}),this.isMobile&&this.touchControls&&this.touchControls.setControlSystems(this),this.connectUpgradeEffects(),this.setupEventHandlers(),this.lastAnomalyCheck=0,this.currentAnomaly=null,this.showingAnomalyNotification=!1,console.log("Control systems initialized")}connectUpgradeEffects(){this.dockingSystem.updateMiningSystem=()=>{if(this.miningSystem&&this.spaceship){const e=this.spaceship.miningEfficiency;Object.keys(this.miningSystem.miningSpeedByType).forEach(t=>{this.miningSystem._originalMiningSpeedByType||(this.miningSystem._originalMiningSpeedByType={...this.miningSystem.miningSpeedByType});const s=this.miningSystem._originalMiningSpeedByType[t];this.miningSystem.miningSpeedByType[t]=s*e}),console.log("Mining speeds updated with efficiency:",e),this.miningSystem.targetAsteroid&&this.miningSystem.setTargetAsteroid(this.miningSystem.targetAsteroid)}}}setupEventHandlers(){if(this.isMobile){console.log("Mobile device detected, touch handlers are set in TouchControls class");return}document.addEventListener("keydown",e=>{switch(e.key.toLowerCase()){case"e":this.targetingSystem.toggleLockOn();break;case"tab":if(this.targetingSystem.isLockOnEnabled()){const t=this.targetingSystem.cycleLockOnTarget();t&&this.miningSystem.setTargetAsteroid(t)}e.preventDefault();break;case"r":if(this.targetingSystem.isLockOnEnabled()){const t=this.targetingSystem.getCurrentTarget();t&&(this.miningSystem.setTargetAsteroid(t),this.miningSystem.isMining?this.miningSystem.stopMining():this.miningSystem.startMining())}break;case"t":console.log("Deploying laser turret"),window.mainMessageBus&&window.mainMessageBus.publish("input.deployLaser",{});break;case"g":console.log("Attempting to pick up an item"),window.mainMessageBus&&window.mainMessageBus.publish("input.pickupInteract",{});break}}),document.addEventListener("mousedown",e=>{e.button===0&&this.inputHandler.isLocked()&&window.game&&window.game.combat&&window.game.combat.setFiring(!0)}),document.addEventListener("mouseup",e=>{e.button===0&&window.game&&window.game.combat&&window.game.combat.setFiring(!1)})}setupStargateUIControls(){this.dockingSystem&&this.dockingSystem.setupStargateUIControls()}dockWithStargate(){this.dockingSystem?(this.dockingSystem.dockWithStargate(),this.isMobile&&this.touchControls&&this.touchControls.hide()):console.error("Docking system not initialized")}collectEnergyOrb(){if(!this.environment||!this.spaceship)return;const e=this.environment.checkAnomalyCollision(this.spaceship.mesh.position);if(!e)return;const t=this.environment.collectAnomalyOrb(e);if(!t)return;this.resources.orbs||(this.resources.orbs={common:0,uncommon:0,rare:0,epic:0,legendary:0}),this.resources.orbs[t.rarity]++;let s;switch(t.rarity){case"legendary":s="#ff0000";break;case"epic":s="#ff6600";break;case"rare":s="#9900ff";break;case"uncommon":s="#0066ff";break;default:s="#00ff66";break}const i=t.rarity.charAt(0).toUpperCase()+t.rarity.slice(1);if(this.showAnomalyMessage(`Collected ${i} Energy Orb (${t.value} CR)`,s),this.triggerOrbCollectionEffect(e),window.game&&window.game.audio)switch(t.rarity){case"legendary":window.game.audio.playSoundEffect("powerup_legendary",.8);break;case"epic":window.game.audio.playSoundEffect("powerup_epic",.7);break;case"rare":window.game.audio.playSoundEffect("powerup_rare",.6);break;case"uncommon":window.game.audio.playSoundEffect("powerup_uncommon",.5);break;default:window.game.audio.playSoundEffect("powerup_common",.4);break}}triggerOrbCollectionEffect(e){if(!(!this.scene||!e)&&window.game&&window.game.combat){const t=e.position.clone();window.game.combat.createExplosionEffect(t,2e3,!0),window.mainMessageBus&&window.mainMessageBus.publish("vfx.explosion",{position:t,color:e.orb.color,size:e.orb.size*2,duration:2e3})}}showAnomalyMessage(e,t){if(this.showingAnomalyNotification)return;this.showingAnomalyNotification=!0;const s=document.createElement("div");s.style.position="fixed",s.style.top="30%",s.style.left="50%",s.style.transform="translate(-50%, -50%)",s.style.backgroundColor="rgba(0, 0, 0, 0.8)",s.style.color=t||"#ffffff",s.style.padding="15px 30px",s.style.borderRadius="10px",s.style.border=`2px solid ${t||"#ffffff"}`,s.style.boxShadow=`0 0 15px ${t||"#ffffff"}`,s.style.fontFamily="Courier New, monospace",s.style.fontSize="18px",s.style.zIndex="1000",s.style.textAlign="center",s.style.pointerEvents="none",s.textContent=e,document.body.appendChild(s),setTimeout(()=>{s.style.opacity="0",s.style.transition="opacity 0.8s",setTimeout(()=>{s.remove(),this.showingAnomalyNotification=!1},800)},3e3)}update(e=1/60){if(!(window.game&&window.game.introSequenceActive)){if(this.spaceship){const t=this._wasDocked,s=this.spaceship.isDocked;this.isMobile&&this.touchControls&&t!==s&&(s?this.touchControls.hide():this.touchControls.show(),this._wasDocked=s)}if(this.spaceship&&this.spaceship.isDocked){this.dockingSystem&&this.dockingSystem.update();return}if(this.targetingSystem&&this.targetingSystem.update(),this.miningSystem){this.miningSystem.update(e);const t=this.miningSystem.getLastDestroyedAsteroid();t&&this.environment&&this.environment.asteroidBelt&&this.environment.asteroidBelt.removeAsteroid(t)}this.dockingSystem&&this.dockingSystem.update(),this.isMobile&&this.touchControls&&this.touchControls.update(),this.deploymentSystem&&this.deploymentSystem.update(),this.checkForAnomalyOrbs()}}checkForAnomalyOrbs(){if(!this.environment||!this.spaceship)return;const e=performance.now();if(e-this.lastAnomalyCheck<500)return;this.lastAnomalyCheck=e;const t=this.environment.checkAnomalyCollision(this.spaceship.mesh.position);t&&!t.orbCollected?(this.collectEnergyOrb(),this.currentAnomaly=null):t&&t!==this.currentAnomaly&&t.orbCollected?(this.currentAnomaly=t,this.showAnomalyMessage("Energy orb already collected","#ff3333")):t||(this.currentAnomaly=null)}get isMining(){return this.miningSystem?this.miningSystem.isMining:!1}get miningProgress(){return this.miningSystem?this.miningSystem.miningProgress:0}}class Jt{constructor(e){this.spaceship=e,this.controls=null,this.setupMobileHUD()}setupMobileHUD(){const e=document.createElement("style");e.textContent=`
            @keyframes pulse-horde-mobile {
                0% { box-shadow: 0 0 5px rgba(255, 30, 30, 0.5); }
                50% { box-shadow: 0 0 10px rgba(255, 30, 30, 0.8); }
                100% { box-shadow: 0 0 5px rgba(255, 30, 30, 0.5); }
            }
        `,document.head.appendChild(e);const t=document.createElement("div");t.id="mobile-hud-container",t.style.position="absolute",t.style.top="10px",t.style.right="10px",t.style.width="min(140px, 25vw)",t.style.backgroundColor="rgba(6, 22, 31, 0.8)",t.style.backdropFilter="blur(5px)",t.style.webkitBackdropFilter="blur(5px)",t.style.borderRadius="8px",t.style.border="1px solid rgba(120, 220, 232, 0.3)",t.style.padding="10px",t.style.color="rgba(120, 220, 232, 0.9)",t.style.fontFamily='"Rajdhani", "Electrolize", sans-serif',t.style.fontSize="14px",t.style.boxShadow="0 0 10px rgba(120, 220, 232, 0.2)",t.style.zIndex="1000",t.style.transform="translateZ(0)",t.style.backfaceVisibility="hidden",document.body.appendChild(t),this.createStatusBar(t,"S","shield-bar-mobile","rgba(51, 153, 255, 0.8)"),this.createStatusBar(t,"H","hull-bar-mobile","rgba(120, 220, 232, 0.8)"),this.createStatusBar(t,"F","fuel-bar-mobile","rgba(120, 220, 232, 0.8)"),this.createAnomalyDisplay(t);const s=document.createElement("div");s.style.display="flex",s.style.justifyContent="space-between",s.style.alignItems="center",s.style.marginTop="10px";const i=document.createElement("div");i.textContent="C",i.style.marginRight="10px",i.style.fontSize="14px";const o=document.createElement("div");o.id="cargo-value-mobile",o.textContent="0 / 1000",o.style.textAlign="right",o.style.flexGrow="1",o.style.fontSize="14px",s.appendChild(i),s.appendChild(o),t.appendChild(s);const n=document.createElement("div");n.id="mobile-horde-indicator",n.style.display="none",n.style.marginTop="10px",n.style.padding="5px",n.style.backgroundColor="rgba(255, 30, 30, 0.2)",n.style.borderRadius="4px",n.style.border="1px solid #ff3030",n.style.animation="pulse-horde-mobile 2s infinite",n.style.fontSize="12px";const a=document.createElement("div");a.id="mobile-horde-timer",a.textContent="00:00",a.style.textAlign="center",a.style.fontWeight="bold",a.style.color="#ff3030",n.appendChild(a),t.appendChild(n),this.addCornerElements(t)}createStatusBar(e,t,s,i){const o=document.createElement("div");o.style.display="flex",o.style.alignItems="center",o.style.marginBottom="8px";const n=document.createElement("div");n.textContent=t,n.style.marginRight="8px",n.style.width="16px",n.style.textAlign="center",n.style.fontSize="14px";const a=document.createElement("div");if(a.style.flexGrow="1",a.style.height="8px",a.style.backgroundColor="rgba(10, 30, 40, 0.5)",a.style.borderRadius="4px",a.style.overflow="hidden",a.style.position="relative",s==="fuel-bar-mobile"){const l=document.createElement("div");l.id="fuel-value-mobile",l.style.position="absolute",l.style.right="0",l.style.top="-14px",l.style.fontSize="10px",l.style.color="rgba(120, 220, 232, 0.9)",l.textContent="100 / 100",a.appendChild(l)}const r=document.createElement("div");r.id=s,r.style.width="100%",r.style.height="100%",r.style.backgroundColor=i,r.style.transition="width 0.2s ease",a.appendChild(r),o.appendChild(n),o.appendChild(a),e.appendChild(o)}createAnomalyDisplay(e){const t=document.createElement("div");t.style.display="flex",t.style.justifyContent="space-between",t.style.alignItems="center",t.style.marginBottom="8px";const s=document.createElement("div");s.textContent="A",s.style.marginRight="8px",s.style.width="16px",s.style.textAlign="center",s.style.fontSize="14px";const i=document.createElement("div");i.id="anomaly-count-mobile",i.textContent="0",i.style.textAlign="right",i.style.flexGrow="1",i.style.fontSize="14px",i.style.fontWeight="bold",i.style.color="rgba(120, 220, 232, 0.9)",t.appendChild(s),t.appendChild(i),e.appendChild(t)}addCornerElements(e){const t=document.createElement("div");t.style.position="absolute",t.style.top="0",t.style.left="0",t.style.width="6px",t.style.height="6px",t.style.borderTop="1px solid rgba(120, 220, 232, 0.8)",t.style.borderLeft="1px solid rgba(120, 220, 232, 0.8)",e.appendChild(t);const s=document.createElement("div");s.style.position="absolute",s.style.top="0",s.style.right="0",s.style.width="6px",s.style.height="6px",s.style.borderTop="1px solid rgba(120, 220, 232, 0.8)",s.style.borderRight="1px solid rgba(120, 220, 232, 0.8)",e.appendChild(s);const i=document.createElement("div");i.style.position="absolute",i.style.bottom="0",i.style.left="0",i.style.width="6px",i.style.height="6px",i.style.borderBottom="1px solid rgba(120, 220, 232, 0.8)",i.style.borderLeft="1px solid rgba(120, 220, 232, 0.8)",e.appendChild(i);const o=document.createElement("div");o.style.position="absolute",o.style.bottom="0",o.style.right="0",o.style.width="6px",o.style.height="6px",o.style.borderBottom="1px solid rgba(120, 220, 232, 0.8)",o.style.borderRight="1px solid rgba(120, 220, 232, 0.8)",e.appendChild(o)}update(){this.updateShieldDisplay(),this.updateHullDisplay(),this.updateFuelDisplay(),this.updateCargoDisplay(),this.updateAnomalyCount(),this.updateHordeModeDisplay()}updateShieldDisplay(){const e=document.getElementById("shield-bar-mobile");if(!e)return;let t=100;this.spaceship&&typeof this.spaceship.shield<"u"&&(t=this.spaceship.shield/this.spaceship.maxShield*100),e.style.width=`${t}%`,t<25?e.style.backgroundColor="rgba(255, 80, 80, 0.8)":t<50?e.style.backgroundColor="rgba(255, 204, 0, 0.8)":e.style.backgroundColor="rgba(51, 153, 255, 0.8)"}updateHullDisplay(){const e=document.getElementById("hull-bar-mobile");if(!e)return;let t=100;this.spaceship&&typeof this.spaceship.hull<"u"&&(t=this.spaceship.hull/this.spaceship.maxHull*100),e.style.width=`${t}%`,t<30?e.style.backgroundColor="rgba(255, 80, 80, 0.8)":t<60?e.style.backgroundColor="rgba(255, 204, 0, 0.8)":e.style.backgroundColor="rgba(120, 220, 232, 0.8)"}updateFuelDisplay(){const e=document.getElementById("fuel-bar-mobile"),t=document.getElementById("fuel-value-mobile");if(!e||!this.spaceship)return;const s=this.spaceship.maxFuel>0?this.spaceship.fuel/this.spaceship.maxFuel*100:0;e.style.width=`${s}%`,s<20?e.style.backgroundColor="rgba(255, 80, 80, 0.8)":s<40?e.style.backgroundColor="rgba(255, 204, 0, 0.8)":e.style.backgroundColor="rgba(120, 220, 232, 0.8)",t&&(t.textContent=`${Math.round(this.spaceship.fuel)} / ${Math.round(this.spaceship.maxFuel)}`)}updateCargoDisplay(){const e=document.getElementById("cargo-value-mobile");if(!e)return;let t=null,s=1e3;if(this.controls&&this.controls.resources?(t=this.controls.resources,this.spaceship&&typeof this.spaceship.maxCargoCapacity<"u"&&(s=this.spaceship.maxCargoCapacity)):this.spaceship&&this.spaceship.cargoComponent&&this.spaceship.cargoComponent.resources?(t=this.spaceship.cargoComponent.resources,s=this.spaceship.cargoComponent.maxCapacity):this.spaceship&&this.spaceship.resources&&(t=this.spaceship.resources),!t)return;let i=0;for(const o in t)if(t.hasOwnProperty(o)){const n=parseFloat(t[o])||0;i+=n}i=Math.round(i),e.textContent=`${i} / ${s}`,i>=s*.9?e.style.color="rgba(255, 80, 80, 0.9)":i>=s*.7?e.style.color="rgba(255, 204, 0, 0.9)":e.style.color="rgba(120, 220, 232, 0.9)"}updateAnomalyCount(){const e=document.getElementById("anomaly-count-mobile");if(!e)return;let t=0;window.game&&window.game.environment&&window.game.environment.anomalyCount&&(t=window.game.environment.anomalyCount),e.textContent=t.toString(),t>0?(e.style.color="rgba(255, 204, 0, 0.9)",e.style.textShadow="0 0 5px rgba(255, 204, 0, 0.5)"):(e.style.color="rgba(120, 220, 232, 0.9)",e.style.textShadow="none")}updateHordeModeDisplay(){const e=document.getElementById("mobile-horde-indicator"),t=document.getElementById("mobile-horde-timer");if(!(!e||!t))if(window.game&&window.game.isHordeActive){if(e.style.display==="none"&&(e.style.display="block",e.innerHTML='<div style="text-align:center; color:#ff3030; font-weight:bold; margin-bottom:2px;">HORDE MODE</div>',e.appendChild(t)),window.game.getFormattedHordeSurvivalTime)t.textContent=window.game.getFormattedHordeSurvivalTime();else{const s=Math.floor(window.game.hordeSurvivalTime/1e3),i=Math.floor(s/60),o=s%60;t.textContent=`${i.toString().padStart(2,"0")}:${o.toString().padStart(2,"0")}`}if(window.game.hordeSurvivalTime>3*60*1e3){const s=document.createElement("style");s.textContent=`
                    @keyframes pulse-horde-mobile {
                        0% { box-shadow: 0 0 5px rgba(255, 30, 30, 0.7); }
                        50% { box-shadow: 0 0 10px rgba(255, 30, 30, 1); }
                        100% { box-shadow: 0 0 5px rgba(255, 30, 30, 0.7); }
                    }
                `,document.head.appendChild(s),e.style.animation="pulse-horde-mobile 0.8s infinite",e.style.backgroundColor="rgba(255, 30, 30, 0.3)"}}else e.style.display="none"}hide(){const e=document.getElementById("mobile-hud-container");e&&(e.style.display="none")}show(){if(window.game&&window.game.introSequenceActive){console.log("MobileHUD: Not showing HUD during intro sequence");return}const e=document.getElementById("mobile-hud-container");e&&(e.style.display="block")}setControls(e){console.log("MobileHUD: Setting controls reference"),this.controls=e}updateLocation(e,t="Unknown System"){this.updateAnomalyCount()}}class Xt{constructor(){this.controls=null,this.setupMiningDisplay()}setControls(e){this.controls=e}setupMiningDisplay(){const e=document.createElement("div");e.id="target-info",e.style.position="absolute",e.style.bottom="120px",e.style.left="50%",e.style.transform="translateX(-50%)",e.style.backgroundColor="rgba(0, 0, 0, 0.5)",e.style.padding="10px 20px",e.style.borderRadius="20px",e.style.border="1px solid #30cfd0",e.style.boxShadow="0 0 10px #30cfd0",e.style.display="none",e.style.textAlign="center",document.body.appendChild(e);const t=document.createElement("div");t.id="target-name",t.textContent="Asteroid",e.appendChild(t);const s=document.createElement("div");s.id="target-distance",s.textContent="Distance: 0 units",e.appendChild(s);const i=document.createElement("div");i.id="mining-time",i.textContent="Mining time: calculating...",i.style.color="#ffcc00",e.appendChild(i)}update(){if(this.controls&&this.controls.resources){const e=document.getElementById("iron-amount"),t=document.getElementById("gold-amount"),s=document.getElementById("platinum-amount"),i=document.getElementById("cargo-capacity"),o=document.getElementById("capacity-bar");if(e&&(e.textContent=this.controls.resources.iron||0),t&&(t.textContent=this.controls.resources.gold||0),s&&(s.textContent=this.controls.resources.platinum||0),i&&o&&this.controls.spaceship){const n=(this.controls.resources.iron||0)+(this.controls.resources.gold||0)+(this.controls.resources.platinum||0),a=this.controls.spaceship.maxCargoCapacity||1e3,r=n/a*100;i.textContent=`${n} / ${a}`,o.style.width=`${r}%`,r>90?o.style.backgroundColor="rgba(255, 80, 80, 0.8)":r>75?o.style.backgroundColor="rgba(255, 204, 0, 0.8)":o.style.backgroundColor="rgba(120, 220, 232, 0.8)"}this.updateMiningTimeEstimate()}}updateMiningTimeEstimate(){const e=document.getElementById("mining-time");if(!e||!this.controls||!this.controls.miningSystem)return;const t=this.controls.miningSystem;if(t.targetAsteroid&&t.targetAsteroid.resourceType){const s=t.targetAsteroid.resourceType.toLowerCase(),i=t.getMiningEfficiency(),o=Math.round(1/(t.miningSpeedByType[s]*i));e.textContent=`Mining time: ${o} seconds`,e.style.display="block",s==="platinum"?e.style.color="#66ffff":s==="gold"?e.style.color="#ffcc00":e.style.color="#a0a0a0"}else e.style.display="none"}hide(){const e=document.getElementById("target-info");e&&(e.style.display="none")}show(){}}class Zt{constructor(){this.setupTargetingUI()}setupTargetingUI(){const e=document.createElement("div");e.id="lock-on-display",e.style.position="absolute",e.style.top="50%",e.style.left="50%",e.style.width="150px",e.style.height="150px",e.style.transform="translate(-50%, -50%)",e.style.border="2px dashed #ff0000",e.style.borderRadius="50%",e.style.boxSizing="border-box",e.style.display="none",e.style.zIndex="997",e.style.pointerEvents="none",document.body.appendChild(e);const t=document.createElement("div");t.style.position="absolute",t.style.width="100%",t.style.height="100%",t.style.top="0",t.style.left="0",t.innerHTML=`
            <div style="position: absolute; width: 2px; height: 30px; background-color: #ff0000; top: 0; left: 50%; transform: translateX(-50%);"></div>
            <div style="position: absolute; width: 2px; height: 30px; background-color: #ff0000; bottom: 0; left: 50%; transform: translateX(-50%);"></div>
            <div style="position: absolute; width: 30px; height: 2px; background-color: #ff0000; left: 0; top: 50%; transform: translateY(-50%);"></div>
            <div style="position: absolute; width: 30px; height: 2px; background-color: #ff0000; right: 0; top: 50%; transform: translateY(-50%);"></div>
        `,e.appendChild(t);const s=document.createElement("div");s.id="target-indicator",s.style.position="absolute",s.style.bottom="120px",s.style.left="50%",s.style.transform="translateX(-50%)",s.style.width="200px",s.style.textAlign="center",s.style.backgroundColor="rgba(255, 50, 50, 0.4)",s.style.border="1px solid #ff3030",s.style.borderRadius="10px",s.style.padding="8px",s.style.color="#ffffff",s.style.fontFamily="monospace",s.style.zIndex="100",s.style.display="none",s.style.boxShadow="0 0 10px #ff3030",s.innerHTML=`
            <div style="font-weight: bold; margin-bottom: 5px;">◎ TARGET LOCKED ◎</div>
            <div id="target-type">Asteroid</div>
            <div id="target-distance">Distance: 0 units</div>
            <div id="target-resource" style="color: #ffcc00;">Resource: Unknown</div>
        `,document.body.appendChild(s)}showLockOn(){const e=document.getElementById("lock-on-display");e&&(e.style.display="block")}hideLockOn(){const e=document.getElementById("lock-on-display");e&&(e.style.display="none")}updateTargetInfo(e,t,s){const i=document.getElementById("target-indicator"),o=document.getElementById("target-type"),n=document.getElementById("target-distance"),a=document.getElementById("target-resource");if(i&&o&&n){if(i.style.display="block",o.textContent=`${e}`,n.textContent=`Distance: ${Math.round(t)} units`,a&&s){let r="#cccccc";s.toLowerCase()==="iron"?r="#cccccc":s.toLowerCase()==="gold"?r="#ffcc00":s.toLowerCase()==="platinum"&&(r="#66ffff"),a.textContent=`Resource: ${s}`,a.style.color=r}this.addPulseEffect(i)}}addPulseEffect(e){if(e.style.animation="none",e.offsetWidth,e.style.animation="targetPulse 2s infinite",!document.getElementById("targeting-keyframes")){const t=document.createElement("style");t.id="targeting-keyframes",t.textContent=`
                @keyframes targetPulse {
                    0% { box-shadow: 0 0 10px #ff3030; }
                    50% { box-shadow: 0 0 20px #ff3030; }
                    100% { box-shadow: 0 0 10px #ff3030; }
                }
            `,document.head.appendChild(t)}}hideTargetInfo(){const e=document.getElementById("target-indicator");e&&(e.style.display="none")}}function Ne(g){if(console.log(`Original path: ${g}`),window.location.hostname!=="localhost"&&window.location.hostname!=="127.0.0.1"){const e=window.location.pathname.split("/").slice(0,-1).join("/"),t=g.startsWith("/")?g.substring(1):g,s=`${e}/${t}`;return console.log(`Adjusted path for hosted environment: ${s}`),s}return console.log(`Using original path for local environment: ${g}`),g}class Kt{constructor(){this.isVisible=!1,this.setupGameOverScreen()}getPath(e){return Ne(e)}setupGameOverScreen(){const e=document.createElement("div");e.id="game-over-container",e.style.position="absolute",e.style.top="0",e.style.left="0",e.style.width="100%",e.style.height="100%",e.style.backgroundColor="rgba(0, 0, 0, 0.8)",e.style.display="flex",e.style.flexDirection="column",e.style.alignItems="center",e.style.justifyContent="center",e.style.color="#fff",e.style.fontFamily="Courier New, monospace",e.style.zIndex="1000",e.style.display="none",document.body.appendChild(e);const t=document.createElement("h1");t.textContent="GAME OVER",t.style.fontSize="50px",t.style.color="#ff0000",t.style.textShadow="0 0 10px #ff0000",t.style.marginBottom="20px",e.appendChild(t);const s=document.createElement("p");s.id="game-over-message",s.textContent="Your ship was destroyed by asteroid collision",s.style.fontSize="18px",s.style.marginBottom="40px",e.appendChild(s),this.setupRestartButton(e);const i=document.createElement("div");i.id="resources-summary",i.style.marginTop="30px",i.style.fontSize="16px",i.style.textAlign="center",e.appendChild(i)}setupRestartButton(e){const t=document.createElement("button");t.id="restart-game-button",t.textContent="RESTART MISSION",t.style.backgroundColor="rgba(120, 220, 232, 0.2)",t.style.color="#fff",t.style.border="1px solid rgba(120, 220, 232, 0.5)",t.style.borderRadius="5px",t.style.padding="15px 30px",t.style.fontSize="20px",t.style.fontFamily='"Rajdhani", sans-serif',t.style.cursor="pointer",t.style.marginTop="30px",t.style.transition="all 0.2s ease",t.addEventListener("mouseover",()=>{t.style.backgroundColor="rgba(120, 220, 232, 0.4)",t.style.boxShadow="0 0 15px rgba(120, 220, 232, 0.5)"}),t.addEventListener("mouseout",()=>{t.style.backgroundColor="rgba(120, 220, 232, 0.2)",t.style.boxShadow="none"}),t.addEventListener("click",()=>{this.audio&&this.audio.playSound("uiClick");const s=document.createElement("div");s.textContent="Restarting mission...",s.style.color="rgba(120, 220, 232, 0.9)",s.style.marginTop="10px",e.appendChild(s),t.disabled=!0,t.style.opacity="0.5",t.style.cursor="default",window.game&&(window.game.difficultyManager&&(window.game.difficultyManager.gameTime=0,window.game.difficultyManager.currentLevel=1,console.log("Reset difficulty level to 1")),window.game.gameTime=0),setTimeout(()=>{location.reload()},500)}),e.appendChild(t)}show(e,t){console.log("GameOverScreen: Showing game over screen");const s=document.getElementById("game-over-container");s.style.display="flex";const i=document.getElementById("game-over-message");if(i){let u="Your journey has ended.";if(typeof t=="object"&&t.data&&t.data.type)switch(t.data.type){case"FUEL_DEPLETED":u="Your ship drifted into the void after running out of fuel.";break;case"COLLISION_ASTEROID":u="Your ship was destroyed by an asteroid collision.";break;case"COLLISION_PLANET":u="Your ship crashed into a planet!";break;case"COMBAT_DEATH":u="Your ship was destroyed in combat.";break;case"SUN_DEATH":u="Your ship was incinerated by the sun's heat!";break;default:t.data.reason&&(u=t.data.reason)}else t&&(t.includes("fuel")?u="Your ship drifted into the void after running out of fuel.":t.includes("asteroid")?u="Your ship was destroyed by an asteroid collision.":t.includes("combat")?u="Your ship was destroyed in combat.":t.includes("sun")?u="Your ship was incinerated by the sun's heat!":t.includes("planet")?u="Your ship crashed into a planet!":u=t);i.textContent=u}let o=!1,n="00:00",a=0;e&&e.hordeMode&&(o=e.hordeMode.active,n=e.hordeMode.survivalTime||"00:00",a=e.hordeMode.rawSurvivalTime||0);let r=e;e&&e.resources&&(console.log("GameOverScreen: Using nested resources data structure"),r=e.resources);const l=r&&r.iron?r.iron:0,d=r&&r.gold?r.gold:0,c=r&&r.platinum?r.platinum:0,h=document.getElementById("resources-summary");if(h)if(o){const u=Math.floor(a/1e3/60);let p="You fought valiantly against overwhelming odds.";u>=10?p="LEGENDARY! Few have survived the horde this long!":u>=5?p="IMPRESSIVE! You showed exceptional combat skills!":u>=3&&(p="Well done! You held back the horde longer than most!"),h.innerHTML=`
                    <div style="margin-bottom:20px; padding:15px; background-color:rgba(255,48,48,0.2); border:1px solid #ff3030; border-radius:5px;">
                        <h3 style="color:#ff3030; margin-top:0; text-shadow:0 0 5px rgba(255,48,48,0.5);">HORDE MODE</h3>
                        <p style="font-size:18px; font-weight:bold;">SURVIVED: <span style="color:#ff9999; text-shadow:0 0 5px rgba(255,48,48,0.3);">${n}</span></p>
                        <p>${p}</p>
                    </div>
                    <p>Resources collected:</p>
                    <p>IRON: ${l} | GOLD: ${d} | PLATINUM: ${c}</p>
                `}else h.innerHTML=`
                    <p>Resources collected:</p>
                    <p>IRON: ${l} | GOLD: ${d} | PLATINUM: ${c}</p>
                `;try{console.log("GameOverScreen: Attempting simple audio playback");const u=new Audio(this.getPath("sounds/effects/boink.wav"));u.volume=.8,setTimeout(()=>{u.play().catch(p=>{console.warn("GameOverScreen: Simple sound failed:",p)})},100)}catch(u){console.error("GameOverScreen: Error with simple sound approach:",u)}document.exitPointerLock&&document.exitPointerLock()}}class es{constructor(){this.setupControlsMenu()}setupControlsMenu(){const e=document.createElement("div");e.id="controls-menu",e.style.position="absolute",e.style.top="50%",e.style.left="50%",e.style.transform="translate(-50%, -50%)",e.style.backgroundColor="rgba(0, 0, 0, 0.8)",e.style.padding="15px",e.style.borderRadius="10px",e.style.border="1px solid #30cfd0",e.style.boxShadow="0 0 10px #30cfd0",e.style.zIndex="1000",e.style.display="none",document.body.appendChild(e);const t=document.createElement("div");t.className="help-title",t.innerHTML='CONTROLS <span id="close-controls" style="float: right; cursor: pointer; font-weight: bold;">X</span>',e.appendChild(t);const s=(i,o)=>{const n=document.createElement("div");n.className="control-row",n.style.display="flex",n.style.justifyContent="space-between",n.style.marginBottom="5px";const a=document.createElement("span");i!=="Mouse"&&(a.className="key",a.style.backgroundColor="rgba(48, 207, 208, 0.2)",a.style.border="1px solid #30cfd0",a.style.borderRadius="4px",a.style.padding="0 5px",a.style.minWidth="20px",a.style.textAlign="center"),a.textContent=i,n.appendChild(a);const r=document.createElement("span");return r.textContent=o,n.appendChild(r),n};e.appendChild(s("W","Forward Thrust")),e.appendChild(s("S","Backward Thrust")),e.appendChild(s("A","Left Thrust")),e.appendChild(s("D","Right Thrust")),e.appendChild(s("SHIFT","Boost")),e.appendChild(s("Mouse","Ship Rotation")),e.appendChild(s("Click","Fire Particle Cannon")),e.appendChild(s("E","Target Lock-On")),e.appendChild(s("TAB","Cycle Targets")),e.appendChild(s("R","Toggle Mining")),e.appendChild(s("T","Deploy Laser Turret")),e.appendChild(s("Q","Dock with Stargate")),document.getElementById("close-controls").addEventListener("click",()=>{this.hide()}),document.addEventListener("click",i=>{const o=document.getElementById("controls-menu"),n=document.getElementById("show-controls");o.style.display==="block"&&!o.contains(i.target)&&i.target!==n&&this.hide()})}show(){const e=document.getElementById("controls-menu");e&&(e.style.display="block")}hide(){const e=document.getElementById("controls-menu");e&&(e.style.display="none")}setupButtonHandler(){const e=document.getElementById("show-controls");e&&e.addEventListener("click",t=>{this.show(),t.stopPropagation()})}}class ts{constructor(e,t,s){this.starSystemGenerator=e,this.dockingSystem=t,this.stargateInterface=s,this.isVisible=!1,this.selectedSystem=null,this.isTraveling=!1,this.isMobile=le.isMobile(),console.log("StarMap constructor - isMobile:",this.isMobile),this.setupStarMapUI(),this.setupEventHandlers()}setupStarMapUI(){const e=document.createElement("div");e.id="star-map",e.style.position="absolute",e.style.top="50%",e.style.left="50%",e.style.transform="translate(-50%, -50%)",this.isMobile?(e.style.width="95%",e.style.height="85vh",e.style.maxHeight="700px"):(e.style.width="900px",e.style.height="700px"),e.style.backgroundColor="rgba(10, 15, 30, 0.95)",e.style.color="#fff",e.style.padding=this.isMobile?"15px":"30px",e.style.borderRadius="10px",e.style.border="2px solid #30cfd0",e.style.boxShadow="0 0 30px #30cfd0",e.style.fontFamily="Courier New, monospace",e.style.zIndex="1500",e.style.display="none",e.style.overflow="hidden";const t=document.createElement("h2");t.textContent="STAR MAP",t.style.textAlign="center",t.style.color="#30cfd0",t.style.margin="0 0 20px 0",t.style.fontSize=this.isMobile?"24px":"28px",e.appendChild(t);const s=document.createElement("div");s.style.display="flex",s.style.flexDirection=this.isMobile?"column":"row",s.style.height=this.isMobile?"calc(100% - 120px)":"calc(100% - 100px)",s.style.gap=this.isMobile?"15px":"0";const i=document.createElement("div");i.id="star-map-visual",i.style.flex="1",i.style.background="rgba(0, 0, 0, 0.7)",i.style.borderRadius="10px",i.style.border="1px solid #30cfd0",i.style.position="relative",i.style.overflow="hidden",i.style.height=this.isMobile?"40%":"100%",i.style.minHeight=this.isMobile?"250px":"auto";const o=document.createElement("canvas");o.id="star-map-canvas",o.width=500,o.height=500,o.style.width="100%",o.style.height="100%",i.appendChild(o);const n=document.createElement("div");n.id="system-info-panel",n.style.width=this.isMobile?"100%":"350px",n.style.marginLeft=this.isMobile?"0":"20px",n.style.overflowY="auto",n.style.height=this.isMobile?"60%":"100%",n.style.webkitOverflowScrolling="touch";const a=document.createElement("div");a.id="current-system-info",a.innerHTML=`
            <h3 style="color: #30cfd0; margin-top: 0; font-size: ${this.isMobile?"16px":"18px"};">CURRENT SYSTEM</h3>
            <div class="system-card" style="background: rgba(0, 0, 0, 0.7); padding: 15px; border-radius: 5px; border: 1px solid #30cfd0; margin-bottom: 20px;">
                <div id="current-system-name" style="font-size: ${this.isMobile?"16px":"18px"}; font-weight: bold; color: #fff; margin-bottom: 5px;">Solar System</div>
                <div id="current-system-class" style="font-size: ${this.isMobile?"12px":"14px"}; color: #aaa; margin-bottom: 10px;">Class G - Home System</div>
                <div id="current-system-resources" style="margin-bottom: 10px;">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                        <span>Iron:</span>
                        <div class="resource-indicator" style="width: 100px; height: 8px; background: #333; border-radius: 4px; overflow: hidden;">
                            <div id="current-iron-indicator" style="height: 100%; width: 50%; background: #aaa;"></div>
                        </div>
                    </div>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                        <span>Gold:</span>
                        <div class="resource-indicator" style="width: 100px; height: 8px; background: #333; border-radius: 4px; overflow: hidden;">
                            <div id="current-gold-indicator" style="height: 100%; width: 50%; background: #FFD700;"></div>
                        </div>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                        <span>Platinum:</span>
                        <div class="resource-indicator" style="width: 100px; height: 8px; background: #333; border-radius: 4px; overflow: hidden;">
                            <div id="current-platinum-indicator" style="height: 100%; width: 50%; background: #E5E4E2;"></div>
                        </div>
                    </div>
                </div>
                <div id="current-system-description" style="font-size: ${this.isMobile?"11px":"12px"}; color: #ccc; margin-bottom: 10px;">
                    Our home system, with Earth as the starting location.
                </div>
                <div id="current-system-features" style="font-size: ${this.isMobile?"11px":"12px"}; color: #30cfd0;">
                    Special Features: Earth
                </div>
            </div>
        `,n.appendChild(a);const r=document.createElement("div");r.id="selected-system-info",r.innerHTML=`
            <h3 style="color: #30cfd0; font-size: ${this.isMobile?"16px":"18px"};">SELECTED SYSTEM</h3>
            <div id="selected-system-card" class="system-card" style="background: rgba(0, 0, 0, 0.7); padding: 15px; border-radius: 5px; border: 1px solid #555; margin-bottom: 20px;">
                <div class="empty-selection" style="color: #777; text-align: center; padding: 20px;">
                    No system selected.<br>
                    ${this.isMobile?"Tap":"Click"} on a star system in the map to select it.
                </div>
            </div>
            <button id="travel-button" disabled style="width: 100%; padding: ${this.isMobile?"15px":"12px"}; background-color: #30cfd0; color: #000; border: none; border-radius: 5px; cursor: not-allowed; font-family: 'Courier New', monospace; font-weight: bold; font-size: ${this.isMobile?"18px":"16px"}; opacity: 0.5;">
                TRAVEL TO SYSTEM
            </button>
        `,n.appendChild(r),s.appendChild(i),s.appendChild(n),e.appendChild(s);const l=document.createElement("button");l.id="close-star-map",l.textContent="RETURN TO STARGATE",l.style.width="100%",l.style.padding=this.isMobile?"15px":"12px",l.style.marginTop="20px",l.style.backgroundColor="#555",l.style.color="#fff",l.style.border="none",l.style.borderRadius="5px",l.style.cursor="pointer",l.style.fontFamily="Courier New, monospace",l.style.fontWeight="bold",l.style.fontSize=this.isMobile?"18px":"16px",this.isMobile&&(l.style.backgroundColor="#30cfd0",l.style.color="#000",l.style.boxShadow="0 0 15px rgba(48, 207, 208, 0.7)"),e.appendChild(l),document.body.appendChild(e)}setupEventHandlers(){const e=document.getElementById("close-star-map");e&&(e.addEventListener("click",()=>{window.game&&window.game.audio&&window.game.audio.playSound("boink"),this.hide()}),this.isMobile&&e.addEventListener("touchend",i=>{i.preventDefault(),window.game&&window.game.audio?(console.log("Mobile: Playing sound on star map close button"),window.game.audio.playSound("boink"),setTimeout(()=>this.hide(),50)):this.hide()}));const t=document.getElementById("star-map-canvas");t&&(t.addEventListener("click",i=>{this.handleMapInteraction(i)}),this.isMobile&&t.addEventListener("touchend",i=>{i.preventDefault(),this.handleMapInteraction(i.changedTouches[0])}));const s=document.getElementById("travel-button");if(s){const i=()=>{if(this.selectedSystem&&this.selectedSystem!==this.starSystemGenerator.currentSystem){console.log(`Initiating travel to system: ${this.selectedSystem}`),this.isTraveling=!0,this.hide();const o=window.game.environment;if(o&&o.travelToSystem){const n=o.travelToSystem(this.selectedSystem);console.log(`Travel to ${this.selectedSystem} initiated: ${n}`),setTimeout(()=>{this.isTraveling=!1},5e3)}else this.starSystemGenerator.travelToSystem(this.selectedSystem)&&(this.updateCurrentSystemInfo(),this.updateCanvas(),this.selectSystem(null),this.showTravelNotification(this.starSystemGenerator.getCurrentSystemData().name),this.isTraveling=!1)}};s.addEventListener("click",i),this.isMobile&&s.addEventListener("touchend",o=>{o.preventDefault(),i()})}}handleMapInteraction(e){const t=document.getElementById("star-map-canvas"),s=t.getBoundingClientRect(),i=(e.clientX-s.left)*(t.width/s.width),o=(e.clientY-s.top)*(t.height/s.height),n=this.findSystemAtPosition(i,o);n&&(this.selectSystem(n),this.updateCanvas())}findSystemAtPosition(e,t){const s=this.starSystemGenerator.getAllSystems(),i=this.starSystemGenerator.currentSystem,o=250,n=250;for(const[a,r]of Object.entries(s)){const l=o+r.position.x,d=n+r.position.y,c=e-l,h=t-d,u=Math.sqrt(c*c+h*h),p=a===i?this.isMobile?20:15:this.isMobile?15:10;if(u<=p)return a}return null}selectSystem(e){if(console.log(`Selecting system: ${e}`),this.selectedSystem=e,!e){const n=document.getElementById("selected-system-card");n&&(n.innerHTML=`
                    <div class="empty-selection" style="color: #777; text-align: center; padding: 20px;">
                        No system selected.<br>${this.isMobile?"Tap":"Click"} on a star system in the map to select it.
                    </div>
                `);const a=document.getElementById("travel-button");a&&(a.disabled=!0,a.style.cursor="not-allowed",a.style.opacity="0.5");return}const t=this.starSystemGenerator.getAllSystems()[e],s=this.starSystemGenerator.currentSystem,i=document.getElementById("selected-system-card");if(i&&t&&(i.innerHTML=`
                <div id="selected-system-name" style="font-size: ${this.isMobile?"16px":"18px"}; font-weight: bold; color: #fff; margin-bottom: 5px;">${t.name}</div>
                <div id="selected-system-class" style="font-size: ${this.isMobile?"12px":"14px"}; color: #aaa; margin-bottom: 10px;">Class ${t.starClass} - ${t.classification}</div>
                <div id="selected-system-resources" style="margin-bottom: 10px;">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                        <span>Iron:</span>
                        <div class="resource-indicator" style="width: 100px; height: 8px; background: #333; border-radius: 4px; overflow: hidden;">
                            <div style="height: 100%; width: ${t.resourceMultipliers.iron*50}%; background: #aaa;"></div>
                        </div>
                    </div>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                        <span>Gold:</span>
                        <div class="resource-indicator" style="width: 100px; height: 8px; background: #333; border-radius: 4px; overflow: hidden;">
                            <div style="height: 100%; width: ${t.resourceMultipliers.gold*50}%; background: #FFD700;"></div>
                        </div>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                        <span>Platinum:</span>
                        <div class="resource-indicator" style="width: 100px; height: 8px; background: #333; border-radius: 4px; overflow: hidden;">
                            <div style="height: 100%; width: ${t.resourceMultipliers.platinum*50}%; background: #E5E4E2;"></div>
                        </div>
                    </div>
                </div>
                <div style="font-size: ${this.isMobile?"11px":"12px"}; color: #ccc; margin-bottom: 10px;">
                    ${t.description}
                </div>
                <div style="font-size: ${this.isMobile?"11px":"12px"}; color: #30cfd0;">
                    Special Features: ${t.specialFeatures.join(", ")}
                </div>
            `,this.isMobile)){const n=document.getElementById("system-info-panel");n&&(n.scrollTop=i.offsetTop-n.offsetTop)}const o=document.getElementById("travel-button");if(o){const n=this.starSystemGenerator.getCurrentSystemConnections().includes(e),a=e===s;o.disabled=a||!n,o.style.cursor=a||!n?"not-allowed":"pointer",o.style.opacity=a||!n?"0.5":"1",o.textContent=a?"CURRENT LOCATION":n?"TRAVEL TO SYSTEM":"NO DIRECT ROUTE"}}updateCanvas(){const e=document.getElementById("star-map-canvas");if(!e)return;const t=e.getContext("2d");t.clearRect(0,0,e.width,e.height);const s=e.width/2,i=e.height/2,o=this.starSystemGenerator.getAllSystems(),n=this.starSystemGenerator.currentSystem,a=this.starSystemGenerator.warpGates;t.lineWidth=1,t.strokeStyle="rgba(48, 207, 208, 0.4)";for(const[r,l]of Object.entries(a)){const d=o[r];if(!d)continue;const c=s+d.position.x,h=i+d.position.y;for(const u of l){const p=o[u];if(!p)continue;const y=s+p.position.x,m=i+p.position.y;t.beginPath(),t.moveTo(c,h),t.lineTo(y,m),t.stroke()}}if(n&&o[n]){const r=o[n],l=s+r.position.x,d=i+r.position.y;t.lineWidth=this.isMobile?3:2,t.strokeStyle="rgba(48, 207, 208, 0.8)";for(const c of r.connections){const h=o[c];if(!h)continue;const u=s+h.position.x,p=i+h.position.y;t.beginPath(),t.moveTo(l,d),t.lineTo(u,p),t.stroke()}}for(const[r,l]of Object.entries(o)){const d=s+l.position.x,c=i+l.position.y,h=r===n,u=r===this.selectedSystem,p=n&&o[n]&&o[n].connections.includes(r);t.beginPath();let y;this.isMobile?y=h?18:u?15:10:y=h?15:u?12:8,t.fillStyle=l.starColor?`#${l.starColor.toString(16).padStart(6,"0")}`:"#ffffff",h||u?(t.shadowBlur=this.isMobile?20:15,t.shadowColor=h?"#30cfd0":"#ffffff"):t.shadowBlur=0,t.arc(d,c,y,0,Math.PI*2),t.fill(),t.shadowBlur=0,p&&!h&&(t.strokeStyle="#30cfd0",t.lineWidth=this.isMobile?3:2,t.beginPath(),t.arc(d,c,y+3,0,Math.PI*2),t.stroke()),t.fillStyle=h?"#30cfd0":u?"#ffffff":"#aaaaaa",t.font=h?this.isMobile?"bold 14px Courier New":"bold 12px Courier New":this.isMobile?"12px Courier New":"10px Courier New",t.textAlign="center",t.fillText(l.name,d,c+y+(this.isMobile?18:15))}}showTravelNotification(e){const t=document.createElement("div");t.style.position="fixed",t.style.top=this.isMobile?"30%":"20%",t.style.left="50%",t.style.transform="translate(-50%, -50%)",t.style.backgroundColor="rgba(0, 0, 0, 0.8)",t.style.color="#30cfd0",t.style.padding=this.isMobile?"15px 30px":"20px 40px",t.style.borderRadius="10px",t.style.border="2px solid #30cfd0",t.style.boxShadow="0 0 30px #30cfd0",t.style.fontFamily="Courier New, monospace",t.style.fontSize=this.isMobile?"18px":"20px",t.style.fontWeight="bold",t.style.zIndex="9999",t.style.textAlign="center",t.textContent=`ARRIVED AT ${e}`,document.body.appendChild(t),setTimeout(()=>{t.style.opacity="0",t.style.transition="opacity 1s",setTimeout(()=>{t.remove()},1e3)},3e3)}updateCurrentSystemInfo(){const e=this.starSystemGenerator.getCurrentSystemData();e&&(document.getElementById("current-system-name").textContent=e.name,document.getElementById("current-system-class").textContent=`Class ${e.starClass} - ${e.classification}`,document.getElementById("current-iron-indicator").style.width=`${e.resourceMultipliers.iron*50}%`,document.getElementById("current-gold-indicator").style.width=`${e.resourceMultipliers.gold*50}%`,document.getElementById("current-platinum-indicator").style.width=`${e.resourceMultipliers.platinum*50}%`,document.getElementById("current-system-description").textContent=e.description,document.getElementById("current-system-features").textContent=`Special Features: ${e.specialFeatures.join(", ")}`)}show(){this.updateCurrentSystemInfo(),this.updateCanvas(),this.selectSystem(null),this.isMobile&&window.game&&window.game.audio&&setTimeout(()=>{console.log("Mobile: Attempting to play initial sound in StarMap"),window.game.audio.playSound("boink")},100);const e=document.getElementById("star-map");e&&(e.style.display="block",this.isVisible=!0)}hide(){const e=document.getElementById("star-map");if(e)if(e.style.display="none",this.isVisible=!1,this.stargateInterface)this.stargateInterface.showStargateUI();else if(window.game&&window.game.ui&&window.game.ui.stargateInterface)window.game.ui.stargateInterface.showStargateUI();else{const t=document.getElementById("stargate-ui");t&&(t.style.display="block")}}toggle(){this.isVisible?this.hide():this.show()}}class ss{constructor(e,t,s){this.scene=e,this.spaceship=t,this.audio=s,this.isMobile=le.isMobile(),console.log("BlackjackGame constructor - spaceship:",this.spaceship),console.log("BlackjackGame constructor - cargo:",this.spaceship?this.spaceship.cargo:null),console.log("BlackjackGame constructor - isMobile:",this.isMobile),this.gameActive=!1,this.currentBet={resource:null,amount:0},this.playerHand=[],this.dealerHand=[],this.deck=[],this.gameResult=null,this.cardSymbols={spades:"♠",hearts:"♥",clubs:"♣",diamonds:"♦"},this.dealerPhrases={win:["Yarr! The cosmos favors ye today!","By the stars! Ye've bested me!","Void take me! Ye've got luck in yer tanks!","Stellar victory, spacer!","Blast me thrusters! Ye win this round!"],lose:["The black hole claims another victim!","Better luck in the next galaxy, rookie!","Space is cold, and so is defeat!","Yarr! The dealer always wins, spacer!","Back to the asteroid mines with ye!"],blackjack:["SUPERNOVA! A cosmic blackjack!","By the void! A perfect 21!","The stars aligned for ye today!","Quantum perfection! A blackjack!"],push:["A cosmic stalemate, eh?","The universe remains in balance.","Neither winner nor loser in the void.","We split the cosmic dust this time."]},this.gameUI=null}init(){this.gameUI||this.createGameUI()}createGameUI(){this.gameUI=document.createElement("div"),this.gameUI.id="blackjack-game",this.gameUI.style.position="absolute",this.gameUI.style.top="50%",this.gameUI.style.left="50%",this.gameUI.style.transform="translate(-50%, -50%)",this.isMobile?(this.gameUI.style.width="95%",this.gameUI.style.maxWidth="600px",this.gameUI.style.height="auto",this.gameUI.style.maxHeight="85vh"):(this.gameUI.style.width="900px",this.gameUI.style.height="650px"),this.gameUI.style.backgroundColor="rgba(6, 22, 31, 0.85)",this.gameUI.style.backdropFilter="blur(10px)",this.gameUI.style.border="2px solid #33aaff",this.gameUI.style.borderRadius="15px",this.gameUI.style.boxShadow="0 0 30px rgba(51, 170, 255, 0.5)",this.gameUI.style.padding=this.isMobile?"15px":"25px",this.gameUI.style.zIndex="1000",this.gameUI.style.display="none",this.gameUI.style.fontFamily="Courier New, monospace",this.gameUI.style.color="#fff",this.gameUI.style.userSelect="none",this.gameUI.style.overflowY=this.isMobile?"auto":"hidden",this.isMobile&&(this.gameUI.style.webkitOverflowScrolling="touch",this.gameUI.style.touchAction="pan-y",this.gameUI.style.overscrollBehavior="contain");const e=document.createElement("div");e.style.position="absolute",e.style.top="0",e.style.left="0",e.style.width="100%",e.style.height="100%",e.style.backgroundImage="linear-gradient(transparent 50%, rgba(0, 0, 0, 0.1) 50%)",e.style.backgroundSize="100% 4px",e.style.pointerEvents="none",e.style.zIndex="1001",e.style.opacity="0.15",this.gameUI.appendChild(e);const t=document.createElement("div");t.style.textAlign="center",t.style.marginBottom="20px",t.style.position="relative";const s=document.createElement("h2");s.textContent="STELLAR BLACKJACK",s.style.color="#30cfd0",s.style.textShadow="0 0 10px rgba(48, 207, 208, 0.7)",s.style.margin="0 0 5px 0",s.style.fontSize=this.isMobile?"24px":"32px",t.appendChild(s);const i=document.createElement("div");i.textContent="WAGER RESOURCES • WIN BIG • BEAT THE DEALER",i.style.color="rgba(255, 255, 255, 0.6)",i.style.fontSize=this.isMobile?"12px":"14px",i.style.letterSpacing="2px",t.appendChild(i);const o=document.createElement("button");o.textContent="×",o.style.position="absolute",o.style.top="0",o.style.right="0",o.style.backgroundColor="transparent",o.style.border="none",o.style.color="#33aaff",o.style.fontSize="32px",o.style.cursor="pointer",o.style.outline="none",o.style.padding="0 10px",o.style.lineHeight="1",o.onclick=()=>this.hide(),this.isMobile&&(o.style.fontSize="42px",o.style.padding="5px 15px",o.style.backgroundColor="rgba(0, 0, 0, 0.3)",o.style.borderRadius="50%",o.style.width="50px",o.style.height="50px",o.style.display="flex",o.style.justifyContent="center",o.style.alignItems="center",o.style.boxShadow="0 0 10px rgba(51, 170, 255, 0.5)",o.style.right="5px",o.style.top="5px"),t.appendChild(o),this.gameUI.appendChild(t);const n=document.createElement("div");n.style.display="flex",n.style.flexDirection="column",n.style.height=this.isMobile?"auto":"calc(100% - 80px)";const a=document.createElement("div");a.style.flex="1",a.style.border="1px solid rgba(51, 170, 255, 0.3)",a.style.borderRadius="8px",a.style.padding="15px",a.style.marginBottom="15px",a.style.position="relative",a.style.background="linear-gradient(to bottom, rgba(9, 30, 42, 0.6), rgba(9, 30, 42, 0.4))";const r=document.createElement("div");r.className="dealer-header",r.style.display="flex",r.style.justifyContent="space-between",r.style.marginBottom="10px";const l=document.createElement("div");l.textContent="DEALER",l.style.color="#33aaff",l.style.fontWeight="bold",r.appendChild(l);const d=document.createElement("div");d.id="dealer-score",d.textContent="0",d.style.color="#fff",d.style.fontWeight="bold",d.style.backgroundColor="rgba(51, 170, 255, 0.2)",d.style.padding="0 10px",d.style.borderRadius="4px",r.appendChild(d),a.appendChild(r);const c=document.createElement("div");c.id="dealer-cards",c.style.display="flex",c.style.gap="15px",c.style.flexWrap="wrap",c.style.height=this.isMobile?"auto":"130px",c.style.minHeight=this.isMobile?"120px":"130px",a.appendChild(c);const h=document.createElement("div");h.id="dealer-speech",h.style.position=this.isMobile?"relative":"absolute",h.style.bottom=this.isMobile?"auto":"15px",h.style.right=this.isMobile?"auto":"15px",h.style.marginTop=this.isMobile?"10px":"0",h.style.backgroundColor="rgba(15, 40, 55, 0.9)",h.style.border="1px solid #33aaff",h.style.borderRadius="8px",h.style.padding="10px 15px",h.style.maxWidth=this.isMobile?"100%":"300px",h.style.fontStyle="italic",h.style.color="#fff",h.style.boxShadow="0 0 10px rgba(51, 170, 255, 0.3)",h.style.display="none",a.appendChild(h),n.appendChild(a);const u=document.createElement("div");u.style.height="60px",u.style.display="flex",u.style.justifyContent="center",u.style.alignItems="center",u.style.marginBottom="15px";const p=document.createElement("div");p.id="game-status",p.style.padding="8px 20px",p.style.borderRadius="20px",p.style.backgroundColor="rgba(51, 170, 255, 0.2)",p.style.border="1px solid rgba(51, 170, 255, 0.4)",p.style.color="#fff",p.style.textAlign="center",p.style.fontWeight="bold",p.style.letterSpacing="1px",p.style.fontSize=this.isMobile?"12px":"14px",p.style.width=this.isMobile?"100%":"auto",p.textContent="PLACE YOUR BET TO BEGIN",u.appendChild(p),n.appendChild(u);const y=document.createElement("div");y.style.flex="1",y.style.border="1px solid rgba(51, 170, 255, 0.3)",y.style.borderRadius="8px",y.style.padding="15px",y.style.marginBottom="15px",y.style.background="linear-gradient(to bottom, rgba(9, 30, 42, 0.4), rgba(9, 30, 42, 0.6))";const m=document.createElement("div");m.className="player-header",m.style.display="flex",m.style.justifyContent="space-between",m.style.marginBottom="10px";const v=document.createElement("div");v.textContent="YOUR HAND",v.style.color="#30cfd0",v.style.fontWeight="bold",m.appendChild(v);const k=document.createElement("div");k.id="player-score",k.textContent="0",k.style.color="#fff",k.style.fontWeight="bold",k.style.backgroundColor="rgba(48, 207, 208, 0.2)",k.style.padding="0 10px",k.style.borderRadius="4px",m.appendChild(k),y.appendChild(m);const S=document.createElement("div");S.id="player-cards",S.style.display="flex",S.style.gap="15px",S.style.flexWrap="wrap",S.style.height=this.isMobile?"auto":"130px",S.style.minHeight=this.isMobile?"120px":"130px",y.appendChild(S),n.appendChild(y);const x=document.createElement("div");x.style.display="flex",x.style.justifyContent="space-between",x.style.alignItems="center",x.style.height="auto",x.style.flexDirection=this.isMobile?"column":"row",x.style.gap=this.isMobile?"15px":"0";const E=document.createElement("div");E.id="betting-controls",E.style.display="flex",E.style.flexDirection="column",E.style.width=this.isMobile?"100%":"250px";const P=document.createElement("div");P.textContent="PLACE YOUR BET",P.style.marginBottom="10px",P.style.color="rgba(255, 255, 255, 0.8)",P.style.fontWeight="bold",E.appendChild(P);const A=document.createElement("div");A.style.display="flex",A.style.gap="10px";const D=(L,C)=>{const b=document.createElement("button");b.className="resource-btn",b.dataset.resource=L,b.style.flex="1",b.style.padding=this.isMobile?"10px 5px":"8px 5px",b.style.backgroundColor="rgba(15, 40, 55, 0.8)",b.style.border=`1px solid ${C}`,b.style.borderRadius="5px",b.style.color="#fff",b.style.boxShadow=`0 0 10px rgba(${C.split("(")[1].split(")")[0]}, 0.3)`,b.style.cursor="pointer",b.style.display="flex",b.style.flexDirection="column",b.style.alignItems="center",b.style.transition="background-color 0.2s, box-shadow 0.2s";const H=document.createElement("span");H.textContent=L.toUpperCase(),H.style.fontWeight="bold",H.style.fontSize="12px",b.appendChild(H);const W=document.createElement("span");W.className=`${L}-amount`,W.textContent="0 UNITS",W.style.fontSize="10px",W.style.marginTop="3px",W.style.opacity="0.7",b.appendChild(W);const ue=()=>{b.style.backgroundColor="rgba(25, 60, 80, 0.8)",b.style.boxShadow=`0 0 15px ${C}`},Be=()=>{b.style.backgroundColor="rgba(15, 40, 55, 0.8)",b.style.boxShadow=`0 0 10px rgba(${C.split("(")[1].split(")")[0]}, 0.3)`};b.addEventListener("mouseover",ue),b.addEventListener("mouseout",Be),b.addEventListener("touchstart",ue,{passive:!0}),b.addEventListener("touchend",Be,{passive:!0});const Re=()=>{this.gameActive||(this.selectBetResource(L),this.audio.playSound("boink"),document.querySelectorAll(".resource-btn").forEach(pe=>{pe.style.borderWidth="1px",pe.style.transform="scale(1)"}),b.style.borderWidth="2px",b.style.transform="scale(1.05)")};return b.addEventListener("click",Re),b.addEventListener("touchend",pe=>{pe.preventDefault(),Re()}),b};A.appendChild(D("iron","rgba(150, 150, 150, 1)")),A.appendChild(D("gold","rgba(255, 215, 0, 1)")),A.appendChild(D("platinum","rgba(229, 228, 226, 1)")),E.appendChild(A);const F=document.createElement("div");F.style.display="flex",F.style.marginTop="10px",F.style.gap="10px";const B=document.createElement("div");B.id="bet-amount",B.textContent="0",B.style.flex="1",B.style.backgroundColor="rgba(15, 40, 55, 0.8)",B.style.border="1px solid rgba(51, 170, 255, 0.5)",B.style.borderRadius="5px",B.style.padding="8px 10px",B.style.textAlign="center",B.style.fontWeight="bold",F.appendChild(B);const K=(L,C)=>{const b=document.createElement("button");b.textContent=L,b.style.width=this.isMobile?"50px":"40px",b.style.height=this.isMobile?"40px":"auto",b.style.backgroundColor="rgba(15, 40, 55, 0.8)",b.style.border="1px solid rgba(51, 170, 255, 0.5)",b.style.borderRadius="5px",b.style.color="#fff",b.style.cursor="pointer",b.style.fontSize=this.isMobile?"20px":"16px";const H=()=>{b.style.backgroundColor="rgba(25, 60, 80, 0.8)",b.style.boxShadow="0 0 10px rgba(51, 170, 255, 0.3)"},W=()=>{b.style.backgroundColor="rgba(15, 40, 55, 0.8)",b.style.boxShadow="none"};return b.addEventListener("mouseover",H),b.addEventListener("mouseout",W),b.addEventListener("touchstart",H,{passive:!0}),b.addEventListener("touchend",W,{passive:!0}),b.addEventListener("click",C),b.addEventListener("touchend",ue=>{ue.preventDefault(),C()}),b},J=K("-",()=>{!this.gameActive&&this.currentBet.resource&&(this.decreaseBet(),this.audio.playSound("boink"))});F.appendChild(J);const se=K("+",()=>{!this.gameActive&&this.currentBet.resource&&(this.increaseBet(),this.audio.playSound("boink"))});F.appendChild(se),E.appendChild(F),x.appendChild(E);const R=document.createElement("div");R.style.display="flex",R.style.gap="15px",R.style.flexWrap=this.isMobile?"wrap":"nowrap",R.style.justifyContent=this.isMobile?"center":"flex-end",R.style.width=this.isMobile?"100%":"auto",[{id:"deal-btn",text:"DEAL",color:"#30cfd0",handler:()=>this.startGame()},{id:"hit-btn",text:"HIT",color:"#ff9e3d",handler:()=>this.hit()},{id:"stand-btn",text:"STAND",color:"#e55c8a",handler:()=>this.stand()},{id:"double-btn",text:"DOUBLE",color:"#a281ff",handler:()=>this.doubleDown()}].forEach(L=>{const C=document.createElement("button");C.id=L.id,C.textContent=L.text,C.style.padding=this.isMobile?"15px 20px":"12px 18px",C.style.backgroundColor="rgba(15, 40, 55, 0.8)",C.style.border=`2px solid ${L.color}`,C.style.borderRadius="5px",C.style.color="#fff",C.style.fontWeight="bold",C.style.cursor="pointer",C.style.boxShadow=`0 0 10px ${L.color}`,C.style.transition="all 0.2s",C.style.minWidth=this.isMobile?"80px":"auto",C.style.flex=this.isMobile?"1":"none",C.disabled=!0,C.style.opacity="0.5";const b=()=>{C.disabled||(C.style.backgroundColor="rgba(25, 60, 80, 0.8)",C.style.boxShadow=`0 0 15px ${L.color}`)},H=()=>{C.disabled||(C.style.backgroundColor="rgba(15, 40, 55, 0.8)",C.style.boxShadow=`0 0 10px ${L.color}`)};C.addEventListener("mouseover",b),C.addEventListener("mouseout",H),C.addEventListener("touchstart",b,{passive:!0}),C.addEventListener("touchend",H,{passive:!0}),C.addEventListener("click",()=>{C.disabled||(L.handler(),this.audio.playSound("boink"))}),C.addEventListener("touchend",W=>{C.disabled||(W.preventDefault(),L.handler(),this.audio.playSound("boink"))}),R.appendChild(C)}),x.appendChild(R),n.appendChild(x),this.gameUI.appendChild(n),document.body.appendChild(this.gameUI),this.updateControls()}show(){if(window.game&&window.game.introSequenceActive){console.log("BlackjackGame: Not showing game UI during intro sequence");return}if(this.gameUI){if(this.gameUI.style.display="block",this.reset(),this.audio&&this.isMobile&&setTimeout(()=>{console.log("Mobile: Attempting to play initial sound in BlackjackGame"),this.audio.playSound("boink")},100),window.game&&window.game.controls&&window.game.controls.resources){console.log("Syncing blackjack with game resources");const e=window.game.controls.resources;this.spaceship.cargo||(this.spaceship.cargo={}),this.spaceship.cargo.iron=e.iron||0,this.spaceship.cargo.gold=e.gold||0,this.spaceship.cargo.platinum=e.platinum||0,console.log("Synced resources:",this.spaceship.cargo)}else console.log("Game resources not available, using stored values");this.updateResourceDisplay(),this.audio.playSound("boink")}else this.init(),this.show()}hide(){if(this.gameUI){this.gameUI.style.display="none",this.audio.playSound("boink");const e=document.getElementById("stargate-ui");e&&(e.style.display="block")}}reset(){this.gameActive=!1,this.playerHand=[],this.dealerHand=[],this.currentBet={resource:null,amount:0},this.gameResult=null,document.getElementById("player-cards").innerHTML="",document.getElementById("dealer-cards").innerHTML="",document.getElementById("player-score").textContent="0",document.getElementById("dealer-score").textContent="0",document.getElementById("game-status").textContent="PLACE YOUR BET TO BEGIN",document.getElementById("dealer-speech").style.display="none",document.getElementById("bet-amount").textContent="0",document.querySelectorAll(".resource-btn").forEach(e=>{e.style.borderWidth="1px",e.style.transform="scale(1)"}),this.updateControls()}createDeck(){const e=["hearts","diamonds","clubs","spades"],t=["A","2","3","4","5","6","7","8","9","10","J","Q","K"];this.deck=[];for(let s of e)for(let i of t)this.deck.push({suit:s,value:i});for(let s=this.deck.length-1;s>0;s--){const i=Math.floor(Math.random()*(s+1));[this.deck[s],this.deck[i]]=[this.deck[i],this.deck[s]]}}getCardValue(e){return e.value==="A"?11:["J","Q","K"].includes(e.value)?10:parseInt(e.value)}calculateScore(e){let t=0,s=0;for(let i of e)i.value==="A"?(s++,t+=11):["J","Q","K"].includes(i.value)?t+=10:t+=parseInt(i.value);for(;t>21&&s>0;)t-=10,s--;return t}drawCard(){return this.deck.length===0&&this.createDeck(),this.deck.pop()}createCardElement(e,t=!1){const s=document.createElement("div");if(s.className="card",this.isMobile?(s.style.width="70px",s.style.height="105px",s.style.fontSize="80%"):(s.style.width="100px",s.style.height="150px"),s.style.backgroundColor=t?"rgba(9, 30, 42, 0.8)":"rgba(15, 35, 50, 0.9)",s.style.border=t?"2px solid rgba(51, 170, 255, 0.3)":"2px solid rgba(51, 170, 255, 0.7)",s.style.borderRadius="10px",s.style.boxShadow=t?"0 0 5px rgba(51, 170, 255, 0.3)":"0 0 10px rgba(51, 170, 255, 0.5)",s.style.position="relative",s.style.display="flex",s.style.justifyContent="center",s.style.alignItems="center",s.style.overflow="hidden",s.style.transition="transform 0.3s ease",t){const i=document.createElement("div");i.style.width="80%",i.style.height="80%",i.style.border="2px solid rgba(51, 170, 255, 0.4)",i.style.borderRadius="5px",i.style.backgroundImage="radial-gradient(circle, rgba(51, 170, 255, 0.2) 10%, transparent 10%)",i.style.backgroundSize="10px 10px",s.appendChild(i);const o=document.createElement("div");o.style.position="absolute",o.style.fontWeight="bold",o.style.fontSize=this.isMobile?"12px":"14px",o.style.color="rgba(51, 170, 255, 0.7)",o.textContent="BJ",s.appendChild(o)}else{const i=document.createElement("div");i.style.position="absolute",i.style.top="8px",i.style.left="8px",i.style.fontSize=this.isMobile?"14px":"20px",i.style.fontWeight="bold",i.textContent=e.value,i.style.color=["hearts","diamonds"].includes(e.suit)?"#e55c8a":"#30cfd0",s.appendChild(i);const o=document.createElement("div");o.style.position="absolute",o.style.top="8px",o.style.right="8px",o.style.fontSize=this.isMobile?"12px":"16px",o.textContent=this.cardSymbols[e.suit],o.style.color=["hearts","diamonds"].includes(e.suit)?"#e55c8a":"#30cfd0",s.appendChild(o);const n=document.createElement("div");n.style.fontSize=this.isMobile?"28px":"40px",n.style.lineHeight="1",n.style.opacity="0.9",n.textContent=this.cardSymbols[e.suit],n.style.color=["hearts","diamonds"].includes(e.suit)?"#e55c8a":"#30cfd0",s.appendChild(n);const a=document.createElement("div");a.style.position="absolute",a.style.bottom="8px",a.style.right="8px",a.style.fontSize=this.isMobile?"14px":"20px",a.style.fontWeight="bold",a.style.transform="rotate(180deg)",a.textContent=e.value,a.style.color=["hearts","diamonds"].includes(e.suit)?"#e55c8a":"#30cfd0",s.appendChild(a);const r=document.createElement("div");r.style.position="absolute",r.style.bottom="8px",r.style.left="8px",r.style.fontSize=this.isMobile?"12px":"16px",r.style.transform="rotate(180deg)",r.textContent=this.cardSymbols[e.suit],r.style.color=["hearts","diamonds"].includes(e.suit)?"#e55c8a":"#30cfd0",s.appendChild(r);const l=document.createElement("div");l.style.position="absolute",l.style.inset="0",l.style.opacity="0.05",l.style.backgroundImage="radial-gradient(circle, #fff 1px, transparent 1px)",l.style.backgroundSize="10px 10px",l.style.pointerEvents="none",s.appendChild(l);const d=document.createElement("div");d.style.position="absolute",d.style.inset="0",d.style.background="linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 50%, rgba(255,255,255,0.1) 100%)",d.style.pointerEvents="none",s.appendChild(d)}return s}selectBetResource(e){this.currentBet.resource=e,this.currentBet.amount=1,document.getElementById("bet-amount").textContent=this.currentBet.amount,this.updateControls()}increaseBet(){const e=this.getMaxBet();this.currentBet.amount<e&&(this.currentBet.amount++,document.getElementById("bet-amount").textContent=this.currentBet.amount)}decreaseBet(){this.currentBet.amount>1&&(this.currentBet.amount--,document.getElementById("bet-amount").textContent=this.currentBet.amount)}getMaxBet(){return!this.currentBet.resource||!this.spaceship.cargo?0:this.spaceship.cargo[this.currentBet.resource]||0}updateControls(){const e=document.getElementById("deal-btn"),t=document.getElementById("hit-btn"),s=document.getElementById("stand-btn"),i=document.getElementById("double-btn");if([e,t,s,i].forEach(o=>{o.disabled=!0,o.style.opacity="0.5",o.style.cursor="default"}),this.gameActive){t.disabled=!1,t.style.opacity="1",t.style.cursor="pointer",s.disabled=!1,s.style.opacity="1",s.style.cursor="pointer";const o=this.playerHand.length===2&&this.currentBet.amount*2<=this.getMaxBet();i.disabled=!o,i.style.opacity=o?"1":"0.5",i.style.cursor=o?"pointer":"default"}else{const o=this.currentBet.resource&&this.currentBet.amount>0;e.disabled=!o,e.style.opacity=o?"1":"0.5",e.style.cursor=o?"pointer":"default"}}updateResourceDisplay(){if(console.log("Updating resource display, spaceship:",this.spaceship),console.log("Cargo:",this.spaceship?this.spaceship.cargo:null),this.spaceship&&this.spaceship.cargo){this.spaceship.cargo.iron===void 0&&(this.spaceship.cargo.iron=0),this.spaceship.cargo.gold===void 0&&(this.spaceship.cargo.gold=0),this.spaceship.cargo.platinum===void 0&&(this.spaceship.cargo.platinum=0);const e=document.querySelector(".iron-amount");e&&(e.textContent=`${this.spaceship.cargo.iron} UNITS`);const t=document.querySelector(".gold-amount");t&&(t.textContent=`${this.spaceship.cargo.gold} UNITS`);const s=document.querySelector(".platinum-amount");s&&(s.textContent=`${this.spaceship.cargo.platinum} UNITS`)}else console.error("Cannot update resource display: spaceship or cargo is undefined")}startGame(){if(console.log("Starting game with bet:",this.currentBet),console.log("Spaceship:",this.spaceship),console.log("Cargo:",this.spaceship?this.spaceship.cargo:null),!this.currentBet.resource||this.currentBet.amount<=0){console.log("No bet resource or amount selected");return}if(!this.spaceship){console.error("No spaceship object available"),document.getElementById("game-status").textContent="ERROR: GAME DATA MISSING";return}if(this.spaceship.cargo||(console.warn("Creating cargo object for spaceship"),this.spaceship.cargo={iron:0,gold:0,platinum:0}),this.spaceship.cargo[this.currentBet.resource]===void 0&&(this.spaceship.cargo[this.currentBet.resource]=0),this.spaceship.cargo[this.currentBet.resource]<this.currentBet.amount){document.getElementById("game-status").textContent="NOT ENOUGH RESOURCES";return}this.spaceship.cargo[this.currentBet.resource]-=this.currentBet.amount,this.updateResourceDisplay(),window.game&&window.game.controls&&window.game.controls.resources&&(window.game.controls.resources[this.currentBet.resource]=this.spaceship.cargo[this.currentBet.resource],console.log("Updated game resources after bet:",window.game.controls.resources)),this.createDeck(),this.playerHand=[],this.dealerHand=[],document.getElementById("player-cards").innerHTML="",document.getElementById("dealer-cards").innerHTML="",this.gameActive=!0,this.dealCardToPlayer(),this.dealCardToPlayer(),this.dealCardToDealer(),this.dealCardToDealer(!0),this.checkForNaturalBlackjack(),document.getElementById("game-status").textContent="YOUR MOVE",this.updateControls(),this.playCardSound("deal")}dealCardToPlayer(){const e=this.drawCard();this.playerHand.push(e);const t=this.createCardElement(e);document.getElementById("player-cards").appendChild(t),setTimeout(()=>{t.style.transform="translateY(-5px)"},50);const s=this.calculateScore(this.playerHand);document.getElementById("player-score").textContent=s,s>21&&this.playerBust()}dealCardToDealer(e=!1){const t=this.drawCard();this.dealerHand.push(t);const s=this.createCardElement(t,e);if(s.id=e?"face-down-card":"",document.getElementById("dealer-cards").appendChild(s),setTimeout(()=>{s.style.transform="translateY(-5px)"},50),!e){const i=this.calculateVisibleDealerScore();document.getElementById("dealer-score").textContent=i}}calculateVisibleDealerScore(){return this.dealerHand.length<=1?this.dealerHand.length?this.getCardValue(this.dealerHand[0]):0:this.calculateScore(this.dealerHand.slice(0,-1))}checkForNaturalBlackjack(){const e=this.calculateScore(this.playerHand),t=this.calculateScore(this.dealerHand);(e===21||t===21)&&(this.revealDealerCard(),e===21&&t===21?this.push():e===21?this.blackjackWin():this.playerLose())}hit(){this.gameActive&&(this.dealCardToPlayer(),this.playCardSound("hit"),this.updateControls())}stand(){this.gameActive&&(this.playCardSound("stand"),this.dealerPlay())}doubleDown(){if(this.gameActive&&this.playerHand.length===2){if(this.spaceship.cargo[this.currentBet.resource]<this.currentBet.amount){document.getElementById("game-status").textContent="NOT ENOUGH RESOURCES FOR DOUBLE DOWN";return}this.spaceship.cargo[this.currentBet.resource]-=this.currentBet.amount,this.currentBet.amount*=2,this.updateResourceDisplay(),window.game&&window.game.controls&&window.game.controls.resources&&(window.game.controls.resources[this.currentBet.resource]=this.spaceship.cargo[this.currentBet.resource],console.log("Updated game resources after double down:",window.game.controls.resources)),this.dealCardToPlayer(),this.calculateScore(this.playerHand)<=21&&this.dealerPlay(),this.playCardSound("double")}}dealerPlay(){this.revealDealerCard();let e=this.calculateScore(this.dealerHand);const t=()=>{e<17?(this.dealCardToDealer(),e=this.calculateScore(this.dealerHand),this.playCardSound("hit"),setTimeout(()=>{t()},800)):this.determineOutcome()};setTimeout(t,800)}revealDealerCard(){const e=document.getElementById("face-down-card");if(e){e.remove();const t=this.dealerHand[this.dealerHand.length-1],s=this.createCardElement(t);document.getElementById("dealer-cards").appendChild(s),setTimeout(()=>{s.style.transform="translateY(-5px)"},50);const i=this.calculateScore(this.dealerHand);document.getElementById("dealer-score").textContent=i,this.playCardSound("flip")}}determineOutcome(){const e=this.calculateScore(this.playerHand),t=this.calculateScore(this.dealerHand);t>21?this.playerWin():e>t?this.playerWin():t>e?this.playerLose():this.push()}playerBust(){this.gameActive=!1,this.gameResult="bust",document.getElementById("game-status").textContent="BUST! YOU LOSE",this.showDealerSpeech("lose"),this.playCardSound("bust"),this.updateControls()}playerWin(){this.gameActive=!1,this.gameResult="win",document.getElementById("game-status").textContent="YOU WIN!",this.showDealerSpeech("win");const e=this.currentBet.amount*2;this.spaceship.cargo[this.currentBet.resource]+=e,this.updateResourceDisplay(),window.game&&window.game.controls&&window.game.controls.resources&&(window.game.controls.resources[this.currentBet.resource]=this.spaceship.cargo[this.currentBet.resource],console.log("Updated game resources after win:",window.game.controls.resources)),this.playCardSound("win"),this.updateControls()}blackjackWin(){this.gameActive=!1,this.gameResult="blackjack",document.getElementById("game-status").textContent="BLACKJACK! TRIPLE PAYOUT!",this.showDealerSpeech("blackjack");const e=this.currentBet.amount*3;this.spaceship.cargo[this.currentBet.resource]+=e,this.updateResourceDisplay(),window.game&&window.game.controls&&window.game.controls.resources&&(window.game.controls.resources[this.currentBet.resource]=this.spaceship.cargo[this.currentBet.resource],console.log("Updated game resources after blackjack:",window.game.controls.resources)),this.playCardSound("blackjack"),this.updateControls()}playerLose(){this.gameActive=!1,this.gameResult="lose",document.getElementById("game-status").textContent="DEALER WINS",this.showDealerSpeech("lose"),this.playCardSound("lose"),this.updateControls()}push(){this.gameActive=!1,this.gameResult="push",document.getElementById("game-status").textContent="PUSH - BETS RETURNED",this.showDealerSpeech("push"),this.spaceship.cargo[this.currentBet.resource]+=this.currentBet.amount,this.updateResourceDisplay(),window.game&&window.game.controls&&window.game.controls.resources&&(window.game.controls.resources[this.currentBet.resource]=this.spaceship.cargo[this.currentBet.resource],console.log("Updated game resources after push:",window.game.controls.resources)),this.playCardSound("push"),this.updateControls()}showDealerSpeech(e){const t=document.getElementById("dealer-speech"),s=this.dealerPhrases[e];if(s&&s.length>0){const i=s[Math.floor(Math.random()*s.length)];t.textContent=i,t.style.display="block",setTimeout(()=>{t.style.display="none"},4e3)}}playCardSound(e){if(this.audio)switch(e){case"deal":this.audio.playSound("boink");break;case"hit":this.audio.playSound("boink");break;case"stand":this.audio.playSound("boink");break;case"double":this.audio.playSound("boink"),setTimeout(()=>this.audio.playSound("boink"),150);break;case"flip":this.audio.playSound("boink");break;case"win":this.audio.playSound("phaserUp");break;case"blackjack":this.audio.playSound("phaserUp"),setTimeout(()=>this.audio.playSound("phaserUp"),300);break;case"lose":this.audio.playSound("phaserDown");break;case"bust":this.audio.playSound("phaserDown");break;case"push":this.audio.playSound("boink");break}}}class is{constructor(e){this.game=e,this.stargateInterface=null,this.isVisible=!1,this.isMobile=le.isMobile(),console.log("Settings constructor - isMobile:",this.isMobile),this.detectMonitorRefreshRate(),this.settings={graphicalQuality:"medium",postProcessing:!0,asteroidDetail:"medium",lightingQuality:"medium",particleEffects:"medium",resolutionScale:"medium",frameRateCap:"auto",showFPS:!1,spatialAudio:!0,autoQuality:!0,godRaysEnabled:!1,godRaysType:"standard"},this.loadSettings(),this.setupSettingsUI(),this.applyAllSettings(),setTimeout(()=>this.applyUISettings(),100)}setStargateInterface(e){this.stargateInterface=e}loadSettings(){try{const e=localStorage.getItem("asteroidMinerSettings");if(e){const t=JSON.parse(e);this.settings={...this.settings,...t},console.log("Settings loaded from localStorage:",this.settings)}}catch(e){console.error("Error loading settings:",e)}}saveSettings(){try{localStorage.setItem("asteroidMinerSettings",JSON.stringify(this.settings)),console.log("Settings saved to localStorage")}catch(e){console.error("Error saving settings:",e)}}setupSettingsUI(){const e=document.createElement("div");e.id="settings-container",e.style.position="absolute",e.style.top="50%",e.style.left="50%",e.style.transform="translate(-50%, -50%)",this.isMobile?(e.style.width="95%",e.style.maxWidth="600px",e.style.height="90vh"):(e.style.width="700px",e.style.maxHeight="90vh"),e.style.overflowY="auto",e.style.backgroundColor="rgba(20, 30, 50, 0.9)",e.style.color="#fff",e.style.padding=this.isMobile?"20px":"30px",e.style.borderRadius="15px",e.style.border="2px solid #33aaff",e.style.boxShadow="0 0 30px #33aaff",e.style.fontFamily="Courier New, monospace",e.style.zIndex="1000",e.style.display="none",this.isMobile&&(e.style.webkitOverflowScrolling="touch",e.style.touchAction="pan-y",e.style.overscrollBehavior="contain"),e.innerHTML=`
            <h2 style="text-align: center; color: #33aaff; margin-top: 0; font-size: ${this.isMobile?"24px":"28px"};">GAME SETTINGS</h2>
            
            <div style="margin-bottom: 20px;">
                <h3 style="color: #33aaff; border-bottom: 1px solid #33aaff; padding-bottom: 10px; font-size: ${this.isMobile?"18px":"20px"};">GRAPHICS SETTINGS</h3>
                
                <!-- Graphical Quality Setting -->
                <div class="settings-row" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; flex-direction: ${this.isMobile?"column":"row"}; align-items: ${this.isMobile?"flex-start":"center"};">
                    <div style="margin-bottom: ${this.isMobile?"8px":"0"}; ${this.isMobile?"width: 100%":""}">
                        <label style="font-weight: bold; font-size: ${this.isMobile?"15px":"inherit"};">Graphical Quality</label>
                        <p style="margin: 5px 0 0 0; font-size: ${this.isMobile?"11px":"12px"}; color: #aaa;">Affects overall visual fidelity and performance</p>
                    </div>
                    <div style="${this.isMobile?"width: 100%":""}">
                        <select id="graphical-quality" style="background-color: #2a3a5a; color: white; border: 1px solid #33aaff; padding: ${this.isMobile?"10px":"8px"}; border-radius: 5px; width: ${this.isMobile?"100%":"auto"}; font-size: ${this.isMobile?"16px":"inherit"};">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>
                </div>
                
                <!-- Post-processing Effects Setting -->
                <div class="settings-row" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; flex-direction: ${this.isMobile?"column":"row"}; align-items: ${this.isMobile?"flex-start":"center"};">
                    <div style="margin-bottom: ${this.isMobile?"8px":"0"}; ${this.isMobile?"width: 100%":""}">
                        <label style="font-weight: bold; font-size: ${this.isMobile?"15px":"inherit"};">Post-processing Effects</label>
                        <p style="margin: 5px 0 0 0; font-size: ${this.isMobile?"11px":"12px"}; color: #aaa;">Bloom, anti-aliasing, and visual effects</p>
                    </div>
                    <div style="${this.isMobile?"width: 100%; display: flex; justify-content: flex-end;":""}">
                        <label class="toggle" style="display: inline-block; position: relative; width: ${this.isMobile?"70px":"60px"}; height: ${this.isMobile?"34px":"30px"};">
                            <input type="checkbox" id="post-processing" style="opacity: 0; width: 0; height: 0;">
                            <span class="slider" style="position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: #555; border-radius: ${this.isMobile?"17px":"15px"}; transition: .4s;"></span>
                        </label>
                    </div>
                </div>
                
                <!-- Volumetric Light Rays (God Rays) Setting -->
                <div class="settings-row" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; flex-direction: ${this.isMobile?"column":"row"}; align-items: ${this.isMobile?"flex-start":"center"};">
                    <div style="margin-bottom: ${this.isMobile?"8px":"0"}; ${this.isMobile?"width: 100%":""}">
                        <label style="font-weight: bold; font-size: ${this.isMobile?"15px":"inherit"};">Volumetric Light Rays</label>
                        <p style="margin: 5px 0 0 0; font-size: ${this.isMobile?"11px":"12px"}; color: #aaa;">Enable sunlight rays effect</p>
                    </div>
                    <div style="${this.isMobile?"width: 100%; display: flex; justify-content: flex-end;":""}">
                        <label class="toggle" style="display: inline-block; position: relative; width: ${this.isMobile?"70px":"60px"}; height: ${this.isMobile?"34px":"30px"};">
                            <input type="checkbox" id="god-rays-enabled" style="opacity: 0; width: 0; height: 0;">
                            <span class="slider" style="position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: #555; border-radius: ${this.isMobile?"17px":"15px"}; transition: .4s;"></span>
                        </label>
                    </div>
                </div>
                
                <!-- God Ray Type Setting -->
                <div class="settings-row" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; flex-direction: ${this.isMobile?"column":"row"}; align-items: ${this.isMobile?"flex-start":"center"};">
                    <div style="margin-bottom: ${this.isMobile?"8px":"0"}; ${this.isMobile?"width: 100%":""}">
                        <label style="font-weight: bold; font-size: ${this.isMobile?"15px":"inherit"};">Light Ray Type</label>
                        <p style="margin: 5px 0 0 0; font-size: ${this.isMobile?"11px":"12px"}; color: #aaa;">Choose light ray effect style</p>
                    </div>
                    <div style="${this.isMobile?"width: 100%":""}">
                        <select id="god-rays-type" style="background-color: #2a3a5a; color: white; border: 1px solid #33aaff; padding: ${this.isMobile?"10px":"8px"}; border-radius: 5px; width: ${this.isMobile?"100%":"auto"}; font-size: ${this.isMobile?"16px":"inherit"};">
                            <option value="standard">Standard God Rays</option>
                            <option value="claude">Claude Rays</option>
                        </select>
                    </div>
                </div>
                
                <!-- Asteroid Detail Setting -->
                <div class="settings-row" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; flex-direction: ${this.isMobile?"column":"row"}; align-items: ${this.isMobile?"flex-start":"center"};">
                    <div style="margin-bottom: ${this.isMobile?"8px":"0"}; ${this.isMobile?"width: 100%":""}">
                        <label style="font-weight: bold; font-size: ${this.isMobile?"15px":"inherit"};">Asteroid Detail</label>
                        <p style="margin: 5px 0 0 0; font-size: ${this.isMobile?"11px":"12px"}; color: #aaa;">Affects asteroid count and model complexity</p>
                    </div>
                    <div style="${this.isMobile?"width: 100%":""}">
                        <select id="asteroid-detail" style="background-color: #2a3a5a; color: white; border: 1px solid #33aaff; padding: ${this.isMobile?"10px":"8px"}; border-radius: 5px; width: ${this.isMobile?"100%":"auto"}; font-size: ${this.isMobile?"16px":"inherit"};">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>
                </div>
                
                <!-- Lighting Quality Setting -->
                <div class="settings-row" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; flex-direction: ${this.isMobile?"column":"row"}; align-items: ${this.isMobile?"flex-start":"center"};">
                    <div style="margin-bottom: ${this.isMobile?"8px":"0"}; ${this.isMobile?"width: 100%":""}">
                        <label style="font-weight: bold; font-size: ${this.isMobile?"15px":"inherit"};">Lighting Quality</label>
                        <p style="margin: 5px 0 0 0; font-size: ${this.isMobile?"11px":"12px"}; color: #aaa;">Affects light sources and shadows</p>
                    </div>
                    <div style="${this.isMobile?"width: 100%":""}">
                        <select id="lighting-quality" style="background-color: #2a3a5a; color: white; border: 1px solid #33aaff; padding: ${this.isMobile?"10px":"8px"}; border-radius: 5px; width: ${this.isMobile?"100%":"auto"}; font-size: ${this.isMobile?"16px":"inherit"};">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>
                </div>
                
                <!-- Particle Effects Setting -->
                <div class="settings-row" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; flex-direction: ${this.isMobile?"column":"row"}; align-items: ${this.isMobile?"flex-start":"center"};">
                    <div style="margin-bottom: ${this.isMobile?"8px":"0"}; ${this.isMobile?"width: 100%":""}">
                        <label style="font-weight: bold; font-size: ${this.isMobile?"15px":"inherit"};">Particle Effects</label>
                        <p style="margin: 5px 0 0 0; font-size: ${this.isMobile?"11px":"12px"}; color: #aaa;">Affects thruster, explosion, and other particle effects</p>
                    </div>
                    <div style="${this.isMobile?"width: 100%":""}">
                        <select id="particle-effects" style="background-color: #2a3a5a; color: white; border: 1px solid #33aaff; padding: ${this.isMobile?"10px":"8px"}; border-radius: 5px; width: ${this.isMobile?"100%":"auto"}; font-size: ${this.isMobile?"16px":"inherit"};">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>
                </div>
                
                <!-- Resolution Scale Setting -->
                <div class="settings-row" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; flex-direction: ${this.isMobile?"column":"row"}; align-items: ${this.isMobile?"flex-start":"center"};">
                    <div style="margin-bottom: ${this.isMobile?"8px":"0"}; ${this.isMobile?"width: 100%":""}">
                        <label style="font-weight: bold; font-size: ${this.isMobile?"15px":"inherit"};">Resolution Scale</label>
                        <p style="margin: 5px 0 0 0; font-size: ${this.isMobile?"11px":"12px"}; color: #aaa;">Adjusts rendering resolution</p>
                    </div>
                    <div style="${this.isMobile?"width: 100%":""}">
                        <select id="resolution-scale" style="background-color: #2a3a5a; color: white; border: 1px solid #33aaff; padding: ${this.isMobile?"10px":"8px"}; border-radius: 5px; width: ${this.isMobile?"100%":"auto"}; font-size: ${this.isMobile?"16px":"inherit"};">
                            <option value="low">Low (75%)</option>
                            <option value="medium">Medium (100%)</option>
                            <option value="high">High (125%)</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <div style="margin-bottom: 20px;">
                <h3 style="color: #33aaff; border-bottom: 1px solid #33aaff; padding-bottom: 10px; font-size: ${this.isMobile?"18px":"20px"};">PERFORMANCE SETTINGS</h3>
                
                <!-- Frame Rate Cap Setting -->
                <div class="settings-row" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; flex-direction: ${this.isMobile?"column":"row"}; align-items: ${this.isMobile?"flex-start":"center"};">
                    <div style="margin-bottom: ${this.isMobile?"8px":"0"}; ${this.isMobile?"width: 100%":""}">
                        <label style="font-weight: bold; font-size: ${this.isMobile?"15px":"inherit"};">Frame Rate Cap</label>
                        <p style="margin: 5px 0 0 0; font-size: ${this.isMobile?"11px":"12px"}; color: #aaa;">Limits maximum frame rate</p>
                    </div>
                    <div style="${this.isMobile?"width: 100%":""}">
                        <select id="frame-rate-cap" style="background-color: #2a3a5a; color: white; border: 1px solid #33aaff; padding: ${this.isMobile?"10px":"8px"}; border-radius: 5px; width: ${this.isMobile?"100%":"auto"}; font-size: ${this.isMobile?"16px":"inherit"};">
                            <option value="30">30 FPS</option>
                            <option value="60">60 FPS</option>
                            <option value="auto">Monitor Refresh Rate (${this.monitorRefreshRate}Hz)</option>
                            <option value="0">Unlimited</option>
                        </select>
                    </div>
                </div>
                
                <!-- Show FPS Setting -->
                <div class="settings-row" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; flex-direction: ${this.isMobile?"column":"row"}; align-items: ${this.isMobile?"flex-start":"center"};">
                    <div style="margin-bottom: ${this.isMobile?"8px":"0"}; ${this.isMobile?"width: 100%":""}">
                        <label style="font-weight: bold; font-size: ${this.isMobile?"15px":"inherit"};">Show FPS Counter</label>
                        <p style="margin: 5px 0 0 0; font-size: ${this.isMobile?"11px":"12px"}; color: #aaa;">Display current frame rate</p>
                    </div>
                    <div style="${this.isMobile?"width: 100%; display: flex; justify-content: flex-end;":""}">
                        <label class="toggle" style="display: inline-block; position: relative; width: ${this.isMobile?"70px":"60px"}; height: ${this.isMobile?"34px":"30px"};">
                            <input type="checkbox" id="show-fps" style="opacity: 0; width: 0; height: 0;">
                            <span class="slider" style="position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: #555; border-radius: ${this.isMobile?"17px":"15px"}; transition: .4s;"></span>
                        </label>
                    </div>
                </div>
                
                <!-- Auto Quality Setting -->
                <div class="settings-row" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; flex-direction: ${this.isMobile?"column":"row"}; align-items: ${this.isMobile?"flex-start":"center"};">
                    <div style="margin-bottom: ${this.isMobile?"8px":"0"}; ${this.isMobile?"width: 100%":""}">
                        <label style="font-weight: bold; font-size: ${this.isMobile?"15px":"inherit"};">Auto-Adjust Quality</label>
                        <p style="margin: 5px 0 0 0; font-size: ${this.isMobile?"11px":"12px"}; color: #aaa;">Automatically adjusts settings based on performance</p>
                    </div>
                    <div style="${this.isMobile?"width: 100%; display: flex; justify-content: flex-end;":""}">
                        <label class="toggle" style="display: inline-block; position: relative; width: ${this.isMobile?"70px":"60px"}; height: ${this.isMobile?"34px":"30px"};">
                            <input type="checkbox" id="auto-quality" style="opacity: 0; width: 0; height: 0;">
                            <span class="slider" style="position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: #555; border-radius: ${this.isMobile?"17px":"15px"}; transition: .4s;"></span>
                        </label>
                    </div>
                </div>
            </div>
            
            <div style="margin-bottom: 20px;">
                <h3 style="color: #33aaff; border-bottom: 1px solid #33aaff; padding-bottom: 10px; font-size: ${this.isMobile?"18px":"20px"};">AUDIO SETTINGS</h3>
                
                <!-- Spatial Audio Setting -->
                <div class="settings-row" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; flex-direction: ${this.isMobile?"column":"row"}; align-items: ${this.isMobile?"flex-start":"center"};">
                    <div style="margin-bottom: ${this.isMobile?"8px":"0"}; ${this.isMobile?"width: 100%":""}">
                        <label style="font-weight: bold; font-size: ${this.isMobile?"15px":"inherit"};">Spatial Audio</label>
                        <p style="margin: 5px 0 0 0; font-size: ${this.isMobile?"11px":"12px"}; color: #aaa;">3D positional sound effects</p>
                    </div>
                    <div style="${this.isMobile?"width: 100%; display: flex; justify-content: flex-end;":""}">
                        <label class="toggle" style="display: inline-block; position: relative; width: ${this.isMobile?"70px":"60px"}; height: ${this.isMobile?"34px":"30px"};">
                            <input type="checkbox" id="spatial-audio" style="opacity: 0; width: 0; height: 0;">
                            <span class="slider" style="position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: #555; border-radius: ${this.isMobile?"17px":"15px"}; transition: .4s;"></span>
                        </label>
                    </div>
                </div>
            </div>
            
            <div style="margin-bottom: 20px;">
                <h3 style="color: #33aaff; border-bottom: 1px solid #33aaff; padding-bottom: 10px; font-size: ${this.isMobile?"18px":"20px"};">PRESETS</h3>
                
                <div style="display: flex; justify-content: space-between; margin-bottom: 20px; flex-direction: ${this.isMobile?"column":"row"}; gap: ${this.isMobile?"10px":"0"};">
                    <button id="preset-performance" style="flex: 1; margin-right: ${this.isMobile?"0":"10px"}; padding: ${this.isMobile?"15px":"10px"}; background-color: #2a3a5a; color: white; border: 1px solid #33aaff; border-radius: 5px; cursor: pointer; font-size: ${this.isMobile?"16px":"inherit"};">
                        PERFORMANCE
                    </button>
                    <button id="preset-balanced" style="flex: 1; margin-right: ${this.isMobile?"0":"10px"}; padding: ${this.isMobile?"15px":"10px"}; background-color: #2a3a5a; color: white; border: 1px solid #33aaff; border-radius: 5px; cursor: pointer; font-size: ${this.isMobile?"16px":"inherit"};">
                        BALANCED
                    </button>
                    <button id="preset-quality" style="flex: 1; padding: ${this.isMobile?"15px":"10px"}; background-color: #2a3a5a; color: white; border: 1px solid #33aaff; border-radius: 5px; cursor: pointer; font-size: ${this.isMobile?"16px":"inherit"};">
                        QUALITY
                    </button>
                </div>
            </div>
            
            <div style="display: flex; justify-content: space-between; flex-direction: ${this.isMobile?"column":"row"}; gap: ${this.isMobile?"15px":"0"};">
                <button id="apply-settings" style="flex: 1; margin-right: ${this.isMobile?"0":"10px"}; padding: ${this.isMobile?"20px":"15px"}; background-color: #33aaff; color: black; border: none; border-radius: 5px; cursor: pointer; font-family: 'Courier New', monospace; font-weight: bold; font-size: ${this.isMobile?"18px":"16px"};">
                    APPLY
                </button>
                <button id="settings-back" style="flex: 1; padding: ${this.isMobile?"20px":"15px"}; background-color: #555; color: white; border: none; border-radius: 5px; cursor: pointer; font-family: 'Courier New', monospace; font-weight: bold; font-size: ${this.isMobile?"18px":"16px"};">
                    BACK
                </button>
            </div>
        `;const t=document.createElement("style");t.textContent=`
            .slider:before {
                position: absolute;
                content: "";
                height: ${this.isMobile?"26px":"22px"};
                width: ${this.isMobile?"26px":"22px"};
                left: 4px;
                bottom: 4px;
                background-color: white;
                border-radius: 50%;
                transition: .4s;
            }
            
            input:checked + .slider {
                background-color: #33aaff;
            }
            
            input:checked + .slider:before {
                transform: translateX(${this.isMobile?"36px":"30px"});
            }
        `,document.head.appendChild(t),document.body.appendChild(e),this.setupEventListeners()}setupEventListeners(){const e=document.getElementById("settings-back");e&&(e.addEventListener("click",()=>{this.hide()}),this.isMobile&&e.addEventListener("touchend",s=>{s.preventDefault(),this.hide()}));const t=document.getElementById("apply-settings");if(t){const s=()=>{this.updateSettings(),this.saveSettings(),this.applyAllSettings(),this.showSettingsApplied()};t.addEventListener("click",s),this.isMobile&&t.addEventListener("touchend",i=>{i.preventDefault(),s()})}this.setupPresetButton("preset-performance","performance"),this.setupPresetButton("preset-balanced","balanced"),this.setupPresetButton("preset-quality","quality")}setupPresetButton(e,t){const s=document.getElementById(e);if(!s)return;const i=()=>{this.applyPreset(t)};s.addEventListener("click",i),this.isMobile&&s.addEventListener("touchend",o=>{o.preventDefault(),i()}),this.isMobile?(s.addEventListener("touchstart",()=>{s.style.backgroundColor="#3a4b6a",s.style.boxShadow="0 0 10px #33aaff"},{passive:!0}),s.addEventListener("touchend",()=>{s.style.backgroundColor="#2a3a5a",s.style.boxShadow="none"},{passive:!0})):(s.addEventListener("mouseover",()=>{s.style.backgroundColor="#3a4b6a",s.style.boxShadow="0 0 10px #33aaff"}),s.addEventListener("mouseout",()=>{s.style.backgroundColor="#2a3a5a",s.style.boxShadow="none"}))}updateSettings(){this.settings.graphicalQuality=document.getElementById("graphical-quality").value,this.settings.postProcessing=document.getElementById("post-processing").checked,this.settings.asteroidDetail=document.getElementById("asteroid-detail").value,this.settings.lightingQuality=document.getElementById("lighting-quality").value,this.settings.particleEffects=document.getElementById("particle-effects").value,this.settings.resolutionScale=document.getElementById("resolution-scale").value,this.settings.frameRateCap=document.getElementById("frame-rate-cap").value,this.settings.showFPS=document.getElementById("show-fps").checked,this.settings.spatialAudio=document.getElementById("spatial-audio").checked,this.settings.autoQuality=document.getElementById("auto-quality").checked,this.settings.godRaysEnabled=document.getElementById("god-rays-enabled").checked,this.settings.godRaysType=document.getElementById("god-rays-type").value}updateUI(){document.getElementById("graphical-quality").value=this.settings.graphicalQuality,document.getElementById("post-processing").checked=this.settings.postProcessing,document.getElementById("asteroid-detail").value=this.settings.asteroidDetail,document.getElementById("lighting-quality").value=this.settings.lightingQuality,document.getElementById("particle-effects").value=this.settings.particleEffects,document.getElementById("resolution-scale").value=this.settings.resolutionScale,document.getElementById("frame-rate-cap").value=this.settings.frameRateCap,document.getElementById("show-fps").checked=this.settings.showFPS,document.getElementById("spatial-audio").checked=this.settings.spatialAudio,document.getElementById("auto-quality").checked=this.settings.autoQuality,document.getElementById("god-rays-enabled").checked=this.settings.godRaysEnabled,document.getElementById("god-rays-type").value=this.settings.godRaysType}applyPreset(e){switch(console.log(`Applying ${e} preset`),e){case"performance":this.settings.graphicalQuality="low",this.settings.postProcessing=!1,this.settings.asteroidDetail="low",this.settings.lightingQuality="low",this.settings.particleEffects="low",this.settings.resolutionScale="low",this.settings.frameRateCap=60,this.settings.spatialAudio=!1,this.settings.godRaysEnabled=!1;break;case"balanced":this.settings.graphicalQuality="medium",this.settings.postProcessing=!0,this.settings.asteroidDetail="medium",this.settings.lightingQuality="medium",this.settings.particleEffects="medium",this.settings.resolutionScale="medium",this.settings.frameRateCap="auto",this.settings.spatialAudio=!0,this.settings.godRaysEnabled=!0,this.settings.godRaysType="standard";break;case"quality":this.settings.graphicalQuality="high",this.settings.postProcessing=!0,this.settings.asteroidDetail="high",this.settings.lightingQuality="high",this.settings.particleEffects="high",this.settings.resolutionScale="high",this.settings.frameRateCap=0,this.settings.spatialAudio=!0,this.settings.godRaysEnabled=!0,this.settings.godRaysType="claude";break;default:console.error(`Unknown preset: ${e}`);return}this.updateUI(),this.showSettingsApplied()}applyAllSettings(){this.game&&(this.applyRendererSettings(),this.applyPhysicsSettings(),this.applyEnvironmentSettings(),this.applyAudioSettings(),this.applyUISettings(),console.log("All settings applied successfully"))}applyRendererSettings(){if(!this.game.renderer)return;const e=this.game.renderer;switch(this.settings.graphicalQuality){case"low":e.renderer&&(e.renderer.antialias=!1),e.renderer&&e.renderer.shadowMap&&(e.renderer.shadowMap.enabled=!1);break;case"medium":e.renderer&&(e.renderer.antialias=!0),e.renderer&&e.renderer.shadowMap&&(e.renderer.shadowMap.enabled=!0,e.renderer.shadowMap.type=yt);break;case"high":e.renderer&&(e.renderer.antialias=!0),e.renderer&&e.renderer.shadowMap&&(e.renderer.shadowMap.enabled=!0,e.renderer.shadowMap.type=ve);break}if(e.composer&&(e.useBasicRendering=!this.settings.postProcessing),e.setRayType){const t=this.settings.godRaysType==="claude";e.setRayType(t)}if(e.setVolumetricLightEnabled&&(e.setVolumetricLightEnabled(this.settings.godRaysEnabled),e.adjustLightingForRayType&&e.adjustLightingForRayType()),e.setVolumetricLightIntensity){let t;switch(this.settings.graphicalQuality){case"low":t=.4;break;case"medium":t=.65;break;case"high":t=.85;break;default:t=.65}e.setVolumetricLightIntensity(t)}if(e.bloomPass)switch(this.settings.graphicalQuality){case"low":e.adjustBloom(.4,.3,.9);break;case"medium":e.adjustBloom(.6,.4,.85);break;case"high":e.adjustBloom(.8,.5,.8);break}if(e.renderer){let t=window.devicePixelRatio||1;switch(this.settings.resolutionScale){case"low":t*=.75;break;case"medium":break;case"high":t*=1.25;break}e.renderer.setPixelRatio(t),e.handleResize()}}applyPhysicsSettings(){if(this.game.physics){const e=this.game.physics;switch(this.settings.asteroidDetail){case"low":e.collisionDistance=10;break;case"medium":e.collisionDistance=15;break;case"high":e.collisionDistance=20;break}}}applyEnvironmentSettings(){if(!this.game.environment)return;const e=this.game.environment;if(e.asteroidBelt&&e.asteroidBelt.updateDensity)switch(this.settings.asteroidDetail){case"low":e.asteroidBelt.updateDensity(.5);break;case"medium":e.asteroidBelt.updateDensity(1);break;case"high":e.asteroidBelt.updateDensity(1.5);break}}applyAudioSettings(){if(!this.game.audio)return;const e=this.game.audio;e.spatialAudio!==void 0&&(e.spatialAudio=this.settings.spatialAudio)}applyUISettings(){const e=document.getElementById("fps-display");if(e?this.settings.showFPS?(e.style.display="block",this.game&&this.game.currentFPS&&(e.textContent=`FPS: ${Math.round(this.game.currentFPS)}`)):e.style.display="none":console.warn("FPS display element not found in HUD. It should have ID 'fps-display'"),this.game){const t=this.game.frameRateCap;this.settings.frameRateCap==="auto"?this.monitorRefreshRate>65?(this.game.frameRateCap=0,console.log(`Using unlimited frame rate (refresh rate ${this.monitorRefreshRate}Hz > 65Hz)`)):(this.game.frameRateCap=this.monitorRefreshRate,console.log(`Setting frame rate cap to monitor refresh rate: ${this.monitorRefreshRate}Hz`)):this.game.frameRateCap=parseInt(this.settings.frameRateCap)||0,(t===0&&this.game.frameRateCap>0||t>0&&this.game.frameRateCap===0)&&(this.game.lastFrameTime=0),console.log(`Frame rate cap changed from ${t} to ${this.game.frameRateCap}`)}}showSettingsApplied(){const e=document.createElement("div");e.style.position="fixed",e.style.top=this.isMobile?"25%":"20%",e.style.left="50%",e.style.transform="translate(-50%, -50%)",e.style.backgroundColor="rgba(0, 0, 0, 0.8)",e.style.color="#33aaff",e.style.padding=this.isMobile?"20px 40px":"15px 30px",e.style.borderRadius="10px",e.style.fontFamily="Courier New, monospace",e.style.fontSize=this.isMobile?"18px":"16px",e.style.zIndex="9999",e.style.textAlign="center",e.textContent="Settings applied and saved",document.body.appendChild(e),setTimeout(()=>{e.style.opacity="0",e.style.transition="opacity 0.5s",setTimeout(()=>{e.remove()},500)},1500)}show(){const e=document.getElementById("settings-container");e&&(this.updateUI(),e.style.display="block",this.isVisible=!0)}hide(){const e=document.getElementById("settings-container");e&&(e.style.display="none",this.isVisible=!1,this.stargateInterface&&this.stargateInterface.showStargateUI())}toggle(){this.isVisible?this.hide():this.show()}detectSystemCapabilities(){const e={};e.highDPI=window.devicePixelRatio>1;const s=document.createElement("canvas").getContext("webgl2");if(e.webgl2=!!s,s){const i=s.getExtension("WEBGL_debug_renderer_info");i&&(e.gpu=s.getParameter(i.UNMASKED_RENDERER_WEBGL))}return e.modernBrowser="IntersectionObserver"in window&&"requestAnimationFrame"in window&&"localStorage"in window,e.webgl2&&e.highDPI&&e.modernBrowser?"high":e.webgl2&&e.modernBrowser?"medium":"low"}detectMonitorRefreshRate(){this.monitorRefreshRate=60;try{let e=0,t=performance.now(),s=0;const i=[],o=n=>{if(s){const a=n-s;a>0&&i.push(1e3/a)}if(s=n,e++,n-t<500&&e<60)requestAnimationFrame(o);else{if(i.length>0){i.sort((l,d)=>l-d);const a=i[Math.floor(i.length/2)],r=i.filter(l=>l>=a*.8&&l<=a*1.2);if(r.length>0){const l=r.reduce((c,h)=>c+h,0),d=Math.round(l/r.length);this.monitorRefreshRate=d,console.log(`Detected monitor refresh rate: ${this.monitorRefreshRate}Hz`)}}if(window.screen&&"refresh"in window.screen)try{this.monitorRefreshRate=window.screen.refresh,console.log(`Using screen.refresh value: ${this.monitorRefreshRate}Hz`)}catch(a){console.warn("Error accessing screen.refresh:",a)}}};requestAnimationFrame(o)}catch(e){console.warn("Error detecting refresh rate:",e)}}}class os{constructor(e,t){this.game=e,this.ui=t,this.isVisible=!1,this.setupStartScreen()}setupStartScreen(){const e=document.createElement("div");e.id="start-screen",e.className="start-screen",e.style.display="none",e.innerHTML=`
            <div class="start-screen-inner">
                <h1 class="game-title">Solar System Asteroid Miner</h1>
                <div class="button-container">
                    <button id="play-button" class="start-button">Play</button>
                    <button id="how-to-play-button" class="start-button">How to Play</button>
                </div>
                <div class="version">v0.5.8</div>
            </div>
            
            <div id="how-to-play-modal" class="modal">
                <div class="modal-content">
                    <h2>How to Play</h2>
                    
                    <div class="gameplay-section">
                        <h3>Game Overview</h3>
                        <p>Welcome to Solar System Asteroid Miner! Your mission is to mine asteroids, collect resources, and upgrade your ship.</p>
                        
                        <h4>Core Objectives:</h4>
                        <ul>
                            <li><strong>Mining:</strong> Target asteroids (E key), then use your mining laser (R key) to extract resources.</li>
                            <li><strong>Trading:</strong> Dock at stargates (Q key) to sell resources and purchase ship upgrades.</li>
                            <li><strong>Combat:</strong> Defend yourself against enemy ships using your weapons.</li>
                            <li><strong>Exploration:</strong> Travel between star systems through stargates to discover new resources.</li>
                            <li><strong>Anomalies:</strong> Find and collect energy orbs from space anomalies for credits.</li>
                            <li><strong>Defense:</strong> Deploy autonomous laser turrets (T key) to protect mining operations.</li>
                        </ul>
                        
                        <h4>Horde Mode:</h4>
                        <p>Work toward activating the ultimate challenge - Horde Mode:</p>
                        <ul>
                            <li><strong>Endless Survival:</strong> Face waves of increasingly difficult enemies that never stop coming.</li>
                            <li><strong>Escalating Difficulty:</strong> Enemy health, damage, speed, and spawn rates increase over time.</li>
                            <li><strong>Preparation:</strong> Upgrade your ship's weapons, shields, and hull before activating.</li>
                            <li><strong>Strategy:</strong> Deploy multiple laser turrets (T key) around your position to create defensive perimeters.</li>
                            <li><strong>High Score:</strong> How long can you survive as difficulty scales to infinity?</li>
                        </ul>
                    </div>
                    
                    <div class="control-section">
                        <h3>Movement</h3>
                        <div class="control-row"><span class="key">W</span> <span>Forward</span></div>
                        <div class="control-row"><span class="key">S</span> <span>Backward</span></div>
                        <div class="control-row"><span class="key">A</span> <span>Left</span></div>
                        <div class="control-row"><span class="key">D</span> <span>Right</span></div>
                        <div class="control-row"><span class="key">SHIFT</span> <span>Boost</span></div>
                        <div class="control-row"><span class="key">Mouse</span> <span>Ship Rotation</span></div>
                    </div>
                    
                    <div class="control-section">
                        <h3>Combat & Mining</h3>
                        <div class="control-row"><span class="key">LMB</span> <span>Fire Weapons</span></div>
                        <div class="control-row"><span class="key">E</span> <span>Toggle Target Lock-On</span></div>
                        <div class="control-row"><span class="key">R</span> <span>Toggle Mining Laser</span></div>
                        <div class="control-row"><span class="key">TAB</span> <span>Cycle Targets</span></div>
                    </div>
                    
                    <div class="control-section">
                        <h3>Special</h3>
                        <div class="control-row"><span class="key">T</span> <span>Deploy Laser Turret</span></div>
                        <div class="control-row"><span class="key">Q</span> <span>Dock/Undock at Stargate</span></div>
                        <div class="control-row"><span class="key">ESC</span> <span>Pause Game</span></div>
                    </div>
                    
                    <button id="close-how-to-play" class="modal-close-button">Close</button>
                </div>
            </div>
        `,document.body.appendChild(e),this.setupEventListeners()}setupEventListeners(){const e=document.getElementById("play-button");e&&e.addEventListener("click",()=>{this.hide(),localStorage.getItem("introPlayed")==="true"?this.game.startDocked?this.game.startDocked():console.error("Game.startDocked not found"):this.game.startIntroSequence?this.game.startIntroSequence():console.error("Game.startIntroSequence not found")});const t=document.getElementById("how-to-play-button"),s=document.getElementById("how-to-play-modal"),i=document.getElementById("close-how-to-play");t&&s&&t.addEventListener("click",()=>{s.style.display="flex"}),i&&s&&(i.addEventListener("click",()=>{s.style.display="none"}),s.addEventListener("click",o=>{o.target===s&&(s.style.display="none")}))}show(){const e=document.getElementById("start-screen");if(e&&(e.style.display="flex",this.isVisible=!0,window.initialTimestamp)){const t=performance.now()-window.initialTimestamp;console.log(`Time to start screen visible: ${t.toFixed(2)}ms`),console.timeEnd("init")}}hide(){const e=document.getElementById("start-screen");e&&(e.style.display="none",this.isVisible=!1);const t=document.getElementById("how-to-play-modal");t&&(t.style.display="none")}}const Ge={float32:[],int32:[],uint32:[],uint16:[],uint8:[]};class us{constructor(e){this.data=new Array(e),this.length=0,this.capacity=e}push(e){return this.length<this.capacity?(this.data[this.length++]=e,!0):!1}pop(){if(this.length===0)return;const e=this.data[--this.length];return this.data[this.length]=void 0,e}get(e){if(!(e<0||e>=this.length))return this.data[e]}set(e,t){e<0||e>=this.capacity||(e>=this.length&&(this.length=e+1),this.data[e]=t)}removeAt(e){if(e<0||e>=this.length)return!1;for(let t=e;t<this.length-1;t++)this.data[t]=this.data[t+1];return this.data[--this.length]=void 0,!0}clear(){for(let e=0;e<this.length;e++)this.data[e]=void 0;this.length=0}forEach(e){for(let t=0;t<this.length;t++)e(this.data[t],t,this)}map(e){const t=new Array(this.length);for(let s=0;s<this.length;s++)t[s]=e(this.data[s],s,this);return t}filter(e){const t=[];for(let s=0;s<this.length;s++)e(this.data[s],s,this)&&t.push(this.data[s]);return t}}const _e={vectorPoolSize:0,objectPoolSizes:{},typedArrayPoolSizes:{},update(){if(window.vectorPool&&(this.vectorPoolSize=window.vectorPool.pool.length),window.objectPool)for(const g in window.objectPool.pools)this.objectPoolSizes[g]=window.objectPool.pools[g].objects.length;for(const g in Ge)this.typedArrayPoolSizes[g]=Ge[g].length},getReport(){this.update();let g=`Memory Pool Stats:
`;g+=`Vector Pool: ${this.vectorPoolSize} vectors
`,g+=`Object Pools:
`;for(const e in this.objectPoolSizes)g+=`  ${e}: ${this.objectPoolSizes[e]} objects
`;g+=`Typed Array Pools:
`;for(const e in this.typedArrayPoolSizes)g+=`  ${e}: ${this.typedArrayPoolSizes[e]} arrays
`;return g},logReport(){console.log(this.getReport())}};window.MemoryStats=_e;class ps{constructor(e,t){this.spaceship=e,this.environment=t,this.controls=null,this.audio=null,this.isMobile=le.isMobile(),console.log(`Initializing UI components for ${this.isMobile?"mobile":"desktop"} device...`),this.isMobile&&this.loadMobileCSS(),this.isMobile?this.hud=new Jt(e):this.hud=new bt(e),this.miningDisplay=new Xt,this.targetingUI=new Zt,this.stargateInterface=new xt,this.gameOverScreen=new Kt,this.controlsMenu=new es,this.starMap=new ts(this.environment.starSystemGenerator,null,this.stargateInterface),this.blackjackGame=null,this.settings=null,this.stargateInterface.setStarMap(this.starMap),this.startScreen=null,window.DEBUG_MODE&&this.initializePerformanceMonitor(),console.log("UI components initialized")}loadMobileCSS(){const e=document.createElement("link");e.rel="stylesheet",e.href="css/mobile.css",e.type="text/css",document.head.appendChild(e),console.log("Mobile CSS loaded")}setAudio(e){console.log("Setting audio reference in UI"),this.audio=e,this.audio&&(this.spaceship&&!this.spaceship.cargo&&(this.spaceship.cargo={iron:0,gold:0,platinum:0},console.warn("UI: Created empty cargo object for spaceship")),this.blackjackGame=new ss(null,this.spaceship,this.audio),console.log("UI: Created BlackjackGame with spaceship:",this.spaceship),this.stargateInterface.setBlackjackGame(this.blackjackGame))}setControls(e){console.log("Setting controls reference in UI"),this.controls=e,this.miningDisplay.setControls&&this.miningDisplay.setControls(this.controls),this.isMobile&&this.hud&&this.hud.setControls&&this.hud.setControls(this.controls),this.starMap&&this.controls.dockingSystem&&(this.starMap.dockingSystem=this.controls.dockingSystem),this.setupEventHandlers()}initializeSettings(e){if(!e){console.error("Cannot initialize settings without game instance");return}this.settings=new is(e),this.stargateInterface.setSettings(this.settings),this.startScreen=new os(e,this),console.log("Settings and StartScreen initialized with game instance")}setupEventHandlers(){console.log("Setting up UI event handlers"),this.controlsMenu&&this.controlsMenu.setupButtonHandler&&this.controlsMenu.setupButtonHandler(),this.controls&&this.controls.setupStargateUIControls&&this.controls.setupStargateUIControls(),window.mainMessageBus.subscribe("ui.notification",this.handleNotification.bind(this)),window.addEventListener("resize",()=>{const e=this.isMobile;this.isMobile=le.isMobile(),e!==this.isMobile&&(console.log(`Device type changed from ${e?"mobile":"desktop"} to ${this.isMobile?"mobile":"desktop"}`),location.reload())})}handleNotification(e){if(e&&e.data){const t=e.data.message||"System notification",s=e.data.duration||3e3;this.showNotification(t,s)}}handleGameOver(e){}update(){this.hud&&this.hud.update&&this.hud.update(),this.miningDisplay&&this.miningDisplay.update&&this.miningDisplay.update(),this.isMobile&&this.controls&&this.controls.touchControls&&this.controls.touchControls.update()}updateLocation(e){let t="Unknown System";if(this.environment&&this.environment.starSystemGenerator){const s=this.environment.starSystemGenerator.getCurrentSystemData();t=s?s.name:"Unknown System"}this.hud&&this.hud.updateLocation&&this.hud.updateLocation(null,t)}updateCoordinates(e,t,s){this.hud&&this.hud.updateCoordinates&&this.hud.updateCoordinates(e,t,s)}updateFPS(e,t){if(this.hud&&this.hud.updateFPS&&(this.hud.updateFPS(e,t),this.settings&&this.settings.settings)){const s=document.getElementById("fps-display");s&&(s.style.display=this.settings.settings.showFPS?"block":"none")}}showNotification(e,t=3e3){const s=document.getElementById("notifications-area");if(!s)return;const i=document.createElement("div");i.className="notification",i.textContent=e,i.style.backgroundColor="rgba(6, 22, 31, 0.7)",i.style.backdropFilter="blur(5px)",i.style.color="rgba(120, 220, 232, 0.9)",i.style.padding="8px 15px",i.style.borderRadius="5px",i.style.marginBottom="10px",i.style.border="1px solid rgba(120, 220, 232, 0.3)",i.style.boxShadow="0 0 10px rgba(120, 220, 232, 0.2)",i.style.textAlign="center",i.style.opacity="0",i.style.transition="opacity 0.3s",s.appendChild(i),setTimeout(()=>{i.style.opacity="1"},10),setTimeout(()=>{i.style.opacity="0",setTimeout(()=>{i.parentNode&&i.parentNode.removeChild(i)},300)},t)}showGameOver(e,t){if(console.log("Showing game over screen"),console.log("Resources data:",e),this.gameOverScreen&&this.gameOverScreen.show)document.getElementById("game-over-container")||(console.warn("Game over container not found in DOM, recreating"),this.gameOverScreen.setupGameOverScreen()),this.audio&&(this.gameOverScreen.audio=this.audio),this.gameOverScreen.show(e,t);else{console.error("Game over screen not properly initialized");const s=document.createElement("div");s.id="fallback-overlay",s.style.position="fixed",s.style.top="0",s.style.left="0",s.style.width="100%",s.style.height="100%",s.style.backgroundColor="rgba(0, 0, 0, 0.8)",s.style.display="flex",s.style.justifyContent="center",s.style.alignItems="center",s.style.zIndex="9999";const i=typeof t=="string"?t:t&&t.data&&t.data.reason?t.data.reason:"Your ship was destroyed!",o=document.createElement("div");o.innerHTML=`
                <h1 style="color: #ff3030; font-size: 48px; margin-bottom: 20px;">GAME OVER</h1>
                <p style="color: #fff; font-size: 24px; margin-bottom: 30px;">${i}</p>
                <button id="restart-btn" style="padding: 15px 30px; background-color: #ff3030; color: #fff; border: none; 
                    font-size: 24px; cursor: pointer; border-radius: 5px;">RESTART GAME</button>
            `,s.appendChild(o),document.body.appendChild(s),document.getElementById("restart-btn").addEventListener("click",()=>{location.reload()})}this.hideUI()}hideUI(){if(console.log("Hiding UI elements"),window.game&&window.game.introSequenceActive){console.log("Intro sequence active - forcing ALL UI elements to be hidden"),[document.getElementById("hud-container"),document.getElementById("mobile-hud-container"),document.getElementById("pointer-lock-instructions"),document.getElementById("notifications-area")].forEach(s=>{s&&(s.style.display="none")}),document.querySelectorAll(".ui-panel, .panel, .hud-panel, .status-panel").forEach(s=>{s.style.display="none"});return}this.hud&&this.hud.hide&&this.hud.hide(),this.miningDisplay&&this.miningDisplay.hide&&this.miningDisplay.hide(),this.targetingUI&&this.targetingUI.hideLockOn&&this.targetingUI.hideLockOn(),this.targetingUI&&this.targetingUI.hideTargetInfo&&this.targetingUI.hideTargetInfo(),this.stargateInterface&&this.stargateInterface.hideDockingPrompt&&this.stargateInterface.hideDockingPrompt(),this.isMobile&&this.controls&&this.controls.touchControls&&this.controls.touchControls.hide()}showUI(){if(console.log("Showing UI elements"),window.game&&window.game.introSequenceActive){console.warn("showUI called while intro is still active - not showing UI elements");return}if(this.startScreen&&this.startScreen.isVisible){console.warn("showUI called while start screen is visible - not showing UI elements");return}if(this.hud&&this.hud.show&&(console.log("Calling hud.show()"),this.hud.show()),this.miningDisplay&&this.miningDisplay.show&&this.miningDisplay.show(),this.isMobile&&this.controls&&this.controls.touchControls&&this.controls.touchControls.show(),window.game&&window.game.introSequenceActive)return;console.log("Forcing all UI elements to be displayed");const e=document.getElementById("hud-container");e?(console.log("Setting hudContainer to display:block"),e.style.display="block",e.style.visibility="visible"):console.warn("HUD container not found - could not make visible");const t=document.getElementById("mobile-hud-container");t&&(t.style.display="block",t.style.visibility="visible");const s=document.getElementById("pointer-lock-instructions");s&&!document.pointerLockElement&&(s.style.display="block",s.style.visibility="visible");const i=document.getElementById("notifications-area");i&&(i.style.display="block",i.style.visibility="visible"),document.querySelectorAll(".ui-panel, .panel, .hud-panel, .status-panel").forEach(n=>{n.style.display="block",n.style.visibility="visible"})}initializePerformanceMonitor(){const e=document.createElement("div");e.id="performance-stats",e.style.position="fixed",e.style.bottom="10px",e.style.right="10px",e.style.backgroundColor="rgba(0, 0, 0, 0.7)",e.style.color="#0ff",e.style.padding="10px",e.style.fontFamily="monospace",e.style.fontSize="12px",e.style.borderRadius="4px",e.style.zIndex="1000",e.style.maxWidth="300px",e.style.maxHeight="200px",e.style.overflow="auto";const t=document.createElement("div");t.id="memory-stats",e.appendChild(t);const s=document.createElement("div");s.id="fps-counter",e.appendChild(s),document.body.appendChild(e),this.statsInterval=setInterval(()=>{t.innerHTML=_e.getReport().replace(/\n/g,"<br>"),window.game&&window.game.currentFPS&&(s.innerHTML=`FPS: ${Math.round(window.game.currentFPS)}`)},1e3)}onDisabled(){this.statsInterval&&(clearInterval(this.statsInterval),this.statsInterval=null)}}class ms{constructor(){this.audioContext=null;try{this.audioContext=new(window.AudioContext||window.webkitAudioContext),console.log("Web Audio API context created successfully")}catch(e){console.error("Failed to create Web Audio API context:",e)}this.sounds={},this.soundSources={},this.backgroundMusic=[],this.currentMusicIndex=0,this.currentMusic=null,this.isMuted=!1,this.thrustSound=null,this.music=[],this.musicVolume=.21,this.sfxVolume=.5,this.activeNodes=new Set,this.activeSounds={laser:null,thrust:null,"mining-laser":null},this.userHasInteracted=!1,console.log("Initializing audio manager with Web Audio API..."),this.initializeToneCompatibility(),this.setupUserInteractionListener(),this.setupGarbageCollection()}setupGarbageCollection(){this.gcInterval=setInterval(()=>this.cleanupInactiveNodes(),3e4),console.log("Audio garbage collection scheduled")}cleanupInactiveNodes(){let e=0;this.activeNodes.forEach(t=>{(t._inactive||t.disposed===!0)&&(this.activeNodes.delete(t),e++)}),e>0&&console.log(`Audio manager: cleaned up ${e} inactive audio objects`)}trackNode(e){return e&&this.activeNodes.add(e),e}initializeToneCompatibility(){this.masterEQ={connect:function(e){return e}},console.log("Audio compatibility layer initialized for intro sequence")}async initialize(){try{return console.log("Loading audio files..."),this.audioContext&&this.audioContext.state==="suspended"&&this.resumeAudioContext(),await this.checkSoundDirectories(),await this.preDecodeEssentialSounds(),this.loadBackgroundMusic().catch(e=>{console.error("Error loading background music:",e)}),console.log("Essential audio initialization complete"),this.userHasInteracted?this.playBackgroundMusic():console.log("Music playback waiting for user interaction."),!0}catch(e){return console.error("Error initializing audio:",e),!1}}async preDecodeEssentialSounds(){try{console.log("Pre-decoding essential UI sounds...");const t=[{name:"boink",path:"sounds/effects/boink.wav"},{name:"phaserUp",path:"sounds/effects/phaserUp.wav"},{name:"phaserDown",path:"sounds/effects/phaserDown.wav"}].map(s=>this.loadAndDecodeSound(s.name,this.getPath(s.path)));await Promise.all(t),console.log("Essential UI sounds pre-decoded successfully"),setTimeout(()=>{this.loadGameplaySounds()},1e3)}catch(e){console.error("Error pre-decoding essential sounds:",e),this.createDummySounds()}}async loadGameplaySounds(){try{console.log("Loading gameplay sounds in background...");const e=[{name:"thrust",path:"sounds/effects/thrust.wav"},{name:"laser",path:"sounds/effects/laser.wav"},{name:"mining-laser",path:"sounds/effects/mining-laser.wav"},{name:"explosion",path:"sounds/effects/explosion.wav"}];for(const t of e)try{await this.loadAndDecodeSound(t.name,this.getPath(t.path))}catch(s){console.warn(`Could not load gameplay sound ${t.name}:`,s)}this.sounds.laser&&!this.sounds.projectile&&(console.log("Setting up projectile sound using laser sound buffer"),this.sounds.projectile=this.sounds.laser),console.log("All gameplay sounds loaded successfully")}catch(e){console.error("Error loading gameplay sounds:",e)}}async preDecodeAllSoundEffects(){try{console.log("Using optimized sound loading path instead of preDecodeAllSoundEffects"),await this.preDecodeEssentialSounds(),await this.loadGameplaySounds()}catch(e){console.error("Error pre-decoding sound effects:",e),this.createDummySounds()}}async loadAndDecodeSound(e,t){try{console.log(`Loading and decoding sound: ${e} from ${t}`);const s=await fetch(t);if(!s.ok)throw new Error(`Failed to fetch sound ${e}: ${s.status} ${s.statusText}`);const i=await s.arrayBuffer(),o=await this.audioContext.decodeAudioData(i);return this.sounds[e]=o,console.log(`Sound ${e} loaded and decoded successfully`),o}catch(s){throw console.error(`Error loading and decoding sound ${e}:`,s),this.sounds[e]=null,s}}resumeAudioContext(){this.audioContext&&this.audioContext.state==="suspended"&&this.audioContext.resume().then(()=>{console.log("AudioContext resumed successfully")}).catch(e=>{console.error("Failed to resume AudioContext:",e)})}async checkSoundDirectories(){return(await this.checkFileExists(this.getPath("sounds"))).exists||console.warn("Sounds directory not found, but will attempt to load files directly anyway."),(await this.checkFileExists(this.getPath("sounds/soundtrack"))).exists||console.warn("Soundtrack directory not found, but will attempt to load files directly anyway."),(await this.checkFileExists(this.getPath("sounds/effects"))).exists||console.warn("Sound effects directory not found. Some sounds may not play correctly."),!0}showDirectoryMissingNotification(e){console.warn(`Directory not found: ${e}`);const t=document.createElement("div");t.style.position="fixed",t.style.top="20px",t.style.left="50%",t.style.transform="translateX(-50%)",t.style.backgroundColor="rgba(0, 0, 0, 0.7)",t.style.color="#ff4400",t.style.padding="10px 15px",t.style.borderRadius="5px",t.style.zIndex="9999",t.style.fontSize="14px",t.style.maxWidth="80%",t.style.textAlign="center",t.innerHTML=`
            <div style="margin-bottom: 5px;">
                <strong>Note:</strong> ${e} directory not found.
            </div>
            <div style="font-size: 12px; color: #aaa;">
                Game will continue with limited audio. This is normal when running on GitHub Pages.
            </div>
        `;const s=document.createElement("div");s.style.position="absolute",s.style.top="5px",s.style.right="10px",s.style.cursor="pointer",s.style.color="#aaa",s.textContent="✕",s.addEventListener("click",()=>t.remove()),t.appendChild(s),document.body.appendChild(t),setTimeout(()=>{document.body.contains(t)&&(t.style.opacity="0",t.style.transition="opacity 0.5s ease",setTimeout(()=>{document.body.contains(t)&&t.remove()},500))},5e3)}setupUserInteractionListener(){const e=()=>{this.userHasInteracted||(this.userHasInteracted=!0,console.log("User interaction detected, enabling audio playback"),this.resumeAudioContext(),this.playBackgroundMusic(),document.removeEventListener("click",e),document.removeEventListener("keydown",e),document.removeEventListener("touchstart",e))};if(document.addEventListener("click",e),document.addEventListener("keydown",e),document.addEventListener("touchstart",e),"ontouchstart"in window||navigator.maxTouchPoints>0){console.log("Mobile device detected - adding additional audio handlers");const t=()=>{this.userHasInteracted=!0,this.resumeAudioContext(),this.music.length>0&&!this.muted&&this.music[0].paused&&(console.log("Mobile: Forcing background music playback"),this.playBackgroundMusic())};document.addEventListener("touchend",t,{passive:!0});const s=()=>{let i=0;const o=setInterval(()=>{i++;const n=document.querySelectorAll("button");n.length>0&&(console.log(`Mobile: Found ${n.length} buttons to attach audio handlers`),n.forEach(a=>{a.hasAudioHandler||(a.addEventListener("touchend",t,{passive:!0}),a.hasAudioHandler=!0)})),i>=10&&clearInterval(o)},500)};s(),document.readyState==="complete"?s():window.addEventListener("load",s)}}async loadBackgroundMusic(){try{console.log("Loading soundtrack files...");const e=[this.getPath("sounds/soundtrack/The Sound of Lightyears.wav"),this.getPath("sounds/soundtrack/Aurora Drifts.wav"),this.getPath("sounds/soundtrack/Tidal Lock.wav"),this.getPath("sounds/soundtrack/Solar Drift.wav"),this.getPath("sounds/soundtrack/Orbital Resonance.wav"),this.getPath("sounds/soundtrack/Starlight Trails.wav"),this.getPath("sounds/soundtrack/Orbit Bloom.wav")];console.log(`Loading ${e.length} soundtrack files...`),await this.loadMusicFiles(e)}catch(e){console.error("Error loading background music:",e),console.warn("Falling back to a dummy silent track");const t=new Audio;t.loop=!0,this.music.push(t)}}async checkFileExists(e){console.log(`Checking if file/directory exists: ${e}`);try{const t=await fetch(e,{method:"HEAD",cache:"no-cache"});return console.log(`Fetch response for ${e}: status=${t.status}, ok=${t.ok}`),{path:e,exists:t.ok}}catch(t){return console.error(`Error checking if file exists (${e}):`,t),{path:e,exists:!1}}}getPath(e){return Ne(e)}shuffleArray(e){let t=e.length,s;for(;t>0;)s=Math.floor(Math.random()*t),t--,[e[t],e[s]]=[e[s],e[t]];return e}async loadMusicFiles(e){console.log(`Found ${e.length} music files:`,e);const t=[...e];this.shuffleArray(t),console.log("Randomized playlist order:",t.map(i=>i.split("/").pop()));let s=!1;for(const i of t)if((await this.checkFileExists(i)).exists){s=!0;break}if(!s){console.warn("None of the music files could be found. Using fallback audio."),this.createDummySounds();return}for(const i of t)try{console.log(`Attempting to load audio file: ${i}`);const o=new Audio(i);o.loop=!1,o.volume=this.musicVolume,o.addEventListener("ended",()=>this.playNextTrack()),o.addEventListener("error",n=>{console.error(`Error loading music file ${i}:`,n)}),o.addEventListener("canplaythrough",()=>{console.log(`Successfully loaded music file: ${i}`)}),this.music.push(o),console.log(`Added music track to playlist: ${i}`)}catch(o){console.error(`Failed to load music file ${i}:`,o)}if(console.log(`Loaded ${this.music.length} music tracks in randomized order`),this.music.length===0){console.warn("No music files could be loaded, creating a dummy track");const i=new Audio;i.loop=!0,this.music.push(i)}}createDummySounds(){console.warn("Creating dummy silent AudioBuffers as fallback");const e=["laser","thrust","explosion","boink","phaserUp","phaserDown","mining-laser","projectile"];for(const t of e)if(this.audioContext)try{const s=this.audioContext.createBuffer(2,this.audioContext.sampleRate*.1,this.audioContext.sampleRate);this.sounds[t]=s}catch(s){console.error(`Failed to create dummy buffer for ${t}:`,s),this.sounds[t]=null}else this.sounds[t]=null}playNextTrack(){if(this.music.length===0)return;const e=this.music.shift();this.music.push(e),this.playBackgroundMusic()}playBackgroundMusic(){if(this.music.length===0||this.muted)return;if(!this.userHasInteracted){console.log("Deferring music playback until user interaction");return}const e=this.music[0];console.log(`Starting to play track: ${e.src.split("/").pop()}`),e.currentTime=0;const t=e.play();t!==void 0&&t.then(()=>{console.log("Started playing background music")}).catch(s=>{s.name==="NotAllowedError"?console.log("Autoplay prevented by browser. Music will play after user interaction."):console.error("Error playing background music:",s)})}playSound(e){if(console.log(`Attempting to play sound: ${e}`),this.muted){console.log(`Sound ${e} not played: audio is muted`);return}if(!this.userHasInteracted){console.log(`Sound ${e} not played: waiting for user interaction`);return}if(this.audioContext&&this.audioContext.state==="suspended"&&this.resumeAudioContext(),(e==="weapon"||e==="fire"||e==="shoot")&&(console.log(`Mapping ${e} sound to projectile sound`),e="projectile",!this.sounds.projectile&&this.sounds.laser&&(console.log("Using laser sound for projectile"),this.sounds.projectile=this.sounds.laser)),!this.sounds[e]){console.warn(`Sound "${e}" not found in loaded sounds`);return}try{if(e==="laser"||e==="thrust"||e==="mining-laser"){if(!this.activeSounds[e]){const t=this.audioContext.createBufferSource();t.buffer=this.sounds[e],t.loop=!0;const s=this.audioContext.createGain();s.gain.value=this.sfxVolume*(e==="thrust"?1.5:1),t.connect(s),s.connect(this.audioContext.destination),t.start(0),this.activeSounds[e]={source:t,gain:s},this.trackNode(t),this.trackNode(s)}}else{const t=this.audioContext.createBufferSource();t.buffer=this.sounds[e];const s=this.audioContext.createGain(),i=e==="projectile"?.7:.5;s.gain.value=this.sfxVolume*i,t.connect(s),s.connect(this.audioContext.destination),t.start(0),t.onended=()=>{t._inactive=!0,s._inactive=!0},this.trackNode(t),this.trackNode(s),console.log(`Started playback of one-shot sound: ${e}`)}}catch(t){console.error(`Error playing sound ${e}:`,t)}}stopSound(e){if(this.activeSounds[e])try{if((e==="laser"||e==="thrust"||e==="mining-laser")&&this.activeSounds[e]){const t=this.activeSounds[e];if(t.source){try{t.source.stop()}catch{}t.source._inactive=!0}t.gain&&(t.gain._inactive=!0),this.activeSounds[e]=null}}catch(t){console.error(`Error stopping sound ${e}:`,t)}}setThrustVolume(e){if(!this.activeSounds.thrust||!this.activeSounds.thrust.gain)return;const t=Math.min(1,Math.max(.1,e))*this.sfxVolume*1.5;try{this.activeSounds.thrust.gain.gain.value=t}catch(s){console.error("Error setting thrust volume:",s)}}toggleMute(){this.muted=!this.muted;for(const e of this.music)e.volume=this.muted?0:this.musicVolume;return this.muted&&(this.stopSound("laser"),this.stopSound("thrust"),this.stopSound("mining-laser")),console.log(`Audio ${this.muted?"muted":"unmuted"}`),this.muted}cleanup(){console.log("Cleaning up AudioManager resources..."),this.stopSound("laser"),this.stopSound("thrust"),this.stopSound("mining-laser");for(const e of this.music)e.pause();this.gcInterval&&(clearInterval(this.gcInterval),this.gcInterval=null),this.audioContext&&this.audioContext.close().then(()=>{console.log("AudioContext closed successfully")}).catch(e=>{console.error("Error closing AudioContext:",e)}),document.removeEventListener("click",this.handleInteraction),document.removeEventListener("keydown",this.handleInteraction),document.removeEventListener("touchstart",this.handleInteraction),console.log("AudioManager cleanup complete")}playWeaponSound(){if(console.log("Playing weapon firing sound"),!(this.muted||!this.userHasInteracted)){if(this.audioContext&&this.audioContext.state==="suspended"&&this.resumeAudioContext(),!this.sounds.projectile&&this.sounds.laser&&(console.log("Using laser sound for projectile in playWeaponSound"),this.sounds.projectile=this.sounds.laser),!this.sounds.projectile){console.warn("Projectile sound not found");return}try{const e=this.audioContext.createBufferSource();e.buffer=this.sounds.projectile;const t=this.audioContext.createGain();t.gain.value=this.sfxVolume*.8,e.connect(t),t.connect(this.audioContext.destination),e.start(0),e.onended=()=>{e._inactive=!0,t._inactive=!0},this.trackNode(e),this.trackNode(t),console.log("Weapon sound started playing")}catch(e){console.error("Error playing weapon sound:",e)}}}}export{ms as A,Bt as C,Pt as E,us as F,le as M,ze as P,Tt as R,oe as S,re as U,Dt as V,Ue as W,St as _,At as a,Rt as b,ls as c,ds as d,cs as e,ps as f,Ne as g,hs as h};
//# sourceMappingURL=game-modules-DrL_oOTa.js.map
