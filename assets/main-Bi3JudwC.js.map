{"version":3,"file":"main-Bi3JudwC.js","sources":["../../js/modules/environment/starDreadnought.js","../../js/modules/introSequence.js","../../js/modules/debug/perfOverlay.js","../../js/main.js"],"sourcesContent":["// starDreadnought.js - Creates and manages the massive Star Dreadnought ship\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport class StarDreadnought {\r\n    constructor(scene) {\r\n        this.scene = scene;\r\n        this.ship = null;\r\n        this.engineGlows = [];\r\n        this.teleportBeam = null;\r\n        this.teleportBeamParticles = null;\r\n        this.teleportBeamActive = false;\r\n        \r\n        // Create ship model programmatically\r\n        this.createShipModel();\r\n        \r\n        // Add to scene\r\n        this.scene.add(this.ship);\r\n        \r\n        console.log(\"Star Dreadnought created\");\r\n    }\r\n    \r\n    createShipModel() {\r\n        // Create a group for the entire ship\r\n        this.ship = new THREE.Group();\r\n        this.ship.name = 'starDreadnought';\r\n        \r\n        // Set scale - this is a massive ship\r\n        const shipScale = 1200; // Overall scale factor\r\n        \r\n        // Main hull - elongated wedge shape\r\n        this.createMainHull(shipScale);\r\n        \r\n        // Command bridge superstructure\r\n        this.createCommandBridge(shipScale);\r\n        \r\n        // Engine array\r\n        this.createEngineArray(shipScale);\r\n        \r\n        // Surface details\r\n        this.createSurfaceDetails(shipScale);\r\n        \r\n        // Teleport beam (initially inactive)\r\n        this.createTeleportBeam(shipScale);\r\n    }\r\n    \r\n    createMainHull(scale) {\r\n        // Create main hull using custom geometry for the distinctive arrow/dagger shape\r\n        const hullLength = scale;\r\n        const hullWidth = scale * 0.22;\r\n        const hullHeight = scale * 0.06;\r\n        const taperFactor = 0.15; // How much the front tapers\r\n        \r\n        // Create geometry for the main hull shape\r\n        const hullGeometry = new THREE.BufferGeometry();\r\n        \r\n        // Define vertices for the hull shape (triangulated)\r\n        const vertices = new Float32Array([\r\n            // Bottom face\r\n            -hullWidth/2, -hullHeight/2, hullLength/2,  // bottom left back\r\n            hullWidth/2, -hullHeight/2, hullLength/2,   // bottom right back\r\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\r\n            \r\n            hullWidth/2, -hullHeight/2, hullLength/2,   // bottom right back\r\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2,  // bottom right front\r\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\r\n            \r\n            // Top face\r\n            -hullWidth/2, hullHeight/2, hullLength/2,  // top left back\r\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2, // top left front\r\n            hullWidth/2, hullHeight/2, hullLength/2,   // top right back\r\n            \r\n            hullWidth/2, hullHeight/2, hullLength/2,   // top right back\r\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2, // top left front\r\n            hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top right front\r\n            \r\n            // Left face\r\n            -hullWidth/2, -hullHeight/2, hullLength/2,  // bottom left back\r\n            -hullWidth/2, hullHeight/2, hullLength/2,   // top left back\r\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\r\n            \r\n            -hullWidth/2, hullHeight/2, hullLength/2,   // top left back\r\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top left front\r\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\r\n            \r\n            // Right face\r\n            hullWidth/2, -hullHeight/2, hullLength/2,  // bottom right back\r\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom right front\r\n            hullWidth/2, hullHeight/2, hullLength/2,   // top right back\r\n            \r\n            hullWidth/2, hullHeight/2, hullLength/2,   // top right back\r\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom right front\r\n            hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top right front\r\n            \r\n            // Back face\r\n            -hullWidth/2, -hullHeight/2, hullLength/2,  // bottom left back\r\n            -hullWidth/2, hullHeight/2, hullLength/2,   // top left back\r\n            hullWidth/2, -hullHeight/2, hullLength/2,   // bottom right back\r\n            \r\n            hullWidth/2, -hullHeight/2, hullLength/2,   // bottom right back\r\n            -hullWidth/2, hullHeight/2, hullLength/2,   // top left back\r\n            hullWidth/2, hullHeight/2, hullLength/2,    // top right back\r\n            \r\n            // Front face (pointed)\r\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\r\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top left front\r\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2,  // bottom right front\r\n            \r\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2,  // bottom right front\r\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top left front\r\n            hullWidth*taperFactor, hullHeight/2, -hullLength/2    // top right front\r\n        ]);\r\n        \r\n        // Calculate normals for lighting\r\n        const normals = new Float32Array(vertices.length);\r\n        \r\n        // Add attributes to the geometry\r\n        hullGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n        \r\n        // Material for the main hull - metallic dark gray\r\n        const hullMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x333344,\r\n            metalness: 0.8,\r\n            roughness: 0.3,\r\n            emissive: 0x111111,\r\n            emissiveIntensity: 0.2\r\n        });\r\n        \r\n        // Create the hull mesh\r\n        const hull = new THREE.Mesh(hullGeometry, hullMaterial);\r\n        hull.geometry.computeVertexNormals(); // Auto-generate normals\r\n        \r\n        // Cast shadows\r\n        hull.castShadow = true;\r\n        hull.receiveShadow = true;\r\n        \r\n        // Add to ship group\r\n        this.ship.add(hull);\r\n        \r\n        // Add additional hull plates for more detail\r\n        this.addHullPlates(scale, hull);\r\n    }\r\n    \r\n    addHullPlates(scale, parentHull) {\r\n        // Add additional hull plates for more detail and segmentation\r\n        const plateLength = scale * 0.2;\r\n        const plateWidth = scale * 0.18;\r\n        const plateHeight = scale * 0.01;\r\n        const plateY = scale * 0.035; // Just above the hull\r\n        \r\n        // Create 5 plates down the center of the ship\r\n        for (let i = 0; i < 5; i++) {\r\n            const plateZ = scale * 0.4 - (i * plateLength);\r\n            \r\n            const plateGeometry = new THREE.BoxGeometry(plateWidth, plateHeight, plateLength);\r\n            const plateMaterial = new THREE.MeshStandardMaterial({\r\n                color: 0x444455,\r\n                metalness: 0.7,\r\n                roughness: 0.4,\r\n                emissive: 0x222222\r\n            });\r\n            \r\n            const plate = new THREE.Mesh(plateGeometry, plateMaterial);\r\n            plate.position.set(0, plateY, plateZ);\r\n            \r\n            plate.castShadow = true;\r\n            plate.receiveShadow = true;\r\n            \r\n            this.ship.add(plate);\r\n        }\r\n    }\r\n    \r\n    createCommandBridge(scale) {\r\n        // Command bridge superstructure - distinctive two-tower design\r\n        const bridgeHeight = scale * 0.12;\r\n        const bridgeWidth = scale * 0.06;\r\n        const bridgeDepth = scale * 0.08;\r\n        const bridgeY = scale * 0.085; // Position on top of hull\r\n        const bridgeZ = scale * 0.28; // Position toward the back\r\n        \r\n        // Bridge material - slightly lighter than hull\r\n        const bridgeMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x555566,\r\n            metalness: 0.7,\r\n            roughness: 0.3,\r\n            emissive: 0x222222,\r\n            emissiveIntensity: 0.2\r\n        });\r\n        \r\n        // Main command tower (larger)\r\n        const mainTowerGeometry = new THREE.BoxGeometry(bridgeWidth, bridgeHeight, bridgeDepth);\r\n        const mainTower = new THREE.Mesh(mainTowerGeometry, bridgeMaterial);\r\n        mainTower.position.set(0, bridgeY, bridgeZ);\r\n        mainTower.castShadow = true;\r\n        mainTower.receiveShadow = true;\r\n        this.ship.add(mainTower);\r\n        \r\n        // Add windows to the bridge\r\n        this.addBridgeWindows(scale, mainTower, bridgeY);\r\n        \r\n        // Secondary command towers (smaller)\r\n        const secondaryTowerScale = 0.7; // 70% the size of main tower\r\n        const secondaryTowerGeometry = new THREE.BoxGeometry(\r\n            bridgeWidth * secondaryTowerScale, \r\n            bridgeHeight * secondaryTowerScale, \r\n            bridgeDepth * secondaryTowerScale\r\n        );\r\n        \r\n        // Left tower\r\n        const leftTower = new THREE.Mesh(secondaryTowerGeometry, bridgeMaterial);\r\n        leftTower.position.set(-bridgeWidth * 1.2, bridgeY, bridgeZ + bridgeDepth * 0.6);\r\n        leftTower.castShadow = true;\r\n        leftTower.receiveShadow = true;\r\n        this.ship.add(leftTower);\r\n        \r\n        // Right tower\r\n        const rightTower = new THREE.Mesh(secondaryTowerGeometry, bridgeMaterial);\r\n        rightTower.position.set(bridgeWidth * 1.2, bridgeY, bridgeZ + bridgeDepth * 0.6);\r\n        rightTower.castShadow = true;\r\n        rightTower.receiveShadow = true;\r\n        this.ship.add(rightTower);\r\n    }\r\n    \r\n    addBridgeWindows(scale, bridgeTower, bridgeY) {\r\n        // Add illuminated windows to the bridge\r\n        const windowSize = scale * 0.003;\r\n        const windowSpacing = scale * 0.006;\r\n        const windowRows = 6;\r\n        const windowCols = 10;\r\n        const windowsStartY = bridgeY - scale * 0.02;\r\n        const windowDepth = scale * 0.001;\r\n        \r\n        // Window material - emissive for glow\r\n        const windowMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0xaabbcc,\r\n            emissive: 0xaabbcc,\r\n            emissiveIntensity: 1.0,\r\n            transparent: true,\r\n            opacity: 0.9\r\n        });\r\n        \r\n        // Create window instances\r\n        for (let row = 0; row < windowRows; row++) {\r\n            for (let col = 0; col < windowCols; col++) {\r\n                // Random chance to skip a window (for variety)\r\n                if (Math.random() > 0.85) continue;\r\n                \r\n                const windowGeometry = new THREE.BoxGeometry(windowSize, windowSize, windowDepth);\r\n                const window = new THREE.Mesh(windowGeometry, windowMaterial);\r\n                \r\n                // Position window on the front face of the bridge\r\n                window.position.set(\r\n                    (col - windowCols/2) * windowSpacing,\r\n                    windowsStartY + row * windowSpacing,\r\n                    bridgeTower.position.z + scale * 0.04 + windowDepth\r\n                );\r\n                \r\n                this.ship.add(window);\r\n            }\r\n        }\r\n    }\r\n    \r\n    createEngineArray(scale) {\r\n        // Create engine array at the back of the ship\r\n        const engineRadius = scale * 0.018;\r\n        const engineLength = scale * 0.04;\r\n        const engineZ = scale * 0.48; // Position at the back\r\n        const engineY = scale * 0.01; // Slightly above center line\r\n        \r\n        // Engine housing\r\n        const engineHousingWidth = scale * 0.2;\r\n        const engineHousingHeight = scale * 0.05;\r\n        const engineHousingLength = scale * 0.06;\r\n        \r\n        const housingGeometry = new THREE.BoxGeometry(engineHousingWidth, engineHousingHeight, engineHousingLength);\r\n        const housingMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x333344,\r\n            metalness: 0.8,\r\n            roughness: 0.4\r\n        });\r\n        \r\n        const engineHousing = new THREE.Mesh(housingGeometry, housingMaterial);\r\n        engineHousing.position.set(0, engineY, engineZ);\r\n        engineHousing.castShadow = true;\r\n        engineHousing.receiveShadow = true;\r\n        this.ship.add(engineHousing);\r\n        \r\n        // Engine exhaust material - blue glow for Star Wars style\r\n        const engineMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x3366ff,\r\n            emissive: 0x3366ff,\r\n            emissiveIntensity: 0.7,\r\n            transparent: true,\r\n            opacity: 0.7\r\n        });\r\n        \r\n        // Glow material (fully emissive)\r\n        const glowMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x3366ff,\r\n            emissive: 0x3366ff,\r\n            emissiveIntensity: 1.5,\r\n            transparent: true,\r\n            opacity: 0.8\r\n        });\r\n        \r\n        // Create engine exhausts - two rows of engines for Star Destroyer style\r\n        const engineRows = 2;\r\n        const enginesPerRow = 5;\r\n        const verticalSpacing = engineHousingHeight * 0.5;\r\n        \r\n        for (let row = 0; row < engineRows; row++) {\r\n            const rowY = engineY - verticalSpacing * (row - 0.5);\r\n            \r\n            for (let i = 0; i < enginesPerRow; i++) {\r\n                // Distribute engines across the width\r\n                const posX = (i - (enginesPerRow - 1) / 2) * (engineHousingWidth / (enginesPerRow - 1) * 0.8);\r\n                \r\n                // Engine exhaust\r\n                const engineGeometry = new THREE.CylinderGeometry(engineRadius, engineRadius * 1.5, engineLength, 16);\r\n                const engine = new THREE.Mesh(engineGeometry, engineMaterial);\r\n                \r\n                // Position and orient the engine\r\n                engine.position.set(posX, rowY, engineZ + engineHousingLength * 0.5);\r\n                engine.rotation.x = Math.PI / 2; // Orient horizontally\r\n                \r\n                this.ship.add(engine);\r\n                \r\n                // Add engine glow with additional outer glow\r\n                const glowGeometry = new THREE.SphereGeometry(engineRadius * 1.6, 16, 16);\r\n                const glow = new THREE.Mesh(glowGeometry, glowMaterial.clone());\r\n                glow.position.set(posX, rowY, engineZ + engineHousingLength * 0.5 + engineLength * 1.1);\r\n                \r\n                this.ship.add(glow);\r\n                this.engineGlows.push(glow);\r\n                \r\n                // Add additional outer glow for more dramatic effect\r\n                const outerGlowGeometry = new THREE.SphereGeometry(engineRadius * 2.5, 16, 16);\r\n                const outerGlowMaterial = glowMaterial.clone();\r\n                outerGlowMaterial.opacity = 0.4;\r\n                const outerGlow = new THREE.Mesh(outerGlowGeometry, outerGlowMaterial);\r\n                outerGlow.position.copy(glow.position);\r\n                \r\n                this.ship.add(outerGlow);\r\n                this.engineGlows.push(outerGlow);\r\n            }\r\n        }\r\n        \r\n        // Add engine trail particles\r\n        this.createEngineTrailParticles(scale, engineZ, engineHousingWidth);\r\n    }\r\n    \r\n    createSurfaceDetails(scale) {\r\n        // Add surface details for more visual interest\r\n        \r\n        // Turrets along the sides\r\n        this.createTurrets(scale);\r\n        \r\n        // Trenches and surface details\r\n        this.createSurfaceTrenches(scale);\r\n        \r\n        // Shield generator domes\r\n        this.createShieldGenerators(scale);\r\n    }\r\n    \r\n    createTurrets(scale) {\r\n        // Create turret batteries along the sides\r\n        const turretRadius = scale * 0.008;\r\n        const turretHeight = scale * 0.01;\r\n        const baseRadius = scale * 0.01;\r\n        const baseHeight = scale * 0.005;\r\n        \r\n        // Turret material\r\n        const turretMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x666677,\r\n            metalness: 0.7,\r\n            roughness: 0.3\r\n        });\r\n        \r\n        // Positions for turrets (port side)\r\n        const portPositions = [];\r\n        for (let i = 0; i < 12; i++) {\r\n            const z = scale * 0.2 - (i * scale * 0.07);\r\n            portPositions.push([-scale * 0.1, scale * 0.035, z]);\r\n        }\r\n        \r\n        // Create port side turrets\r\n        portPositions.forEach(pos => {\r\n            // Turret base\r\n            const baseGeometry = new THREE.CylinderGeometry(baseRadius, baseRadius, baseHeight, 8);\r\n            const base = new THREE.Mesh(baseGeometry, turretMaterial);\r\n            base.position.set(pos[0], pos[1], pos[2]);\r\n            this.ship.add(base);\r\n            \r\n            // Turret gun\r\n            const turretGeometry = new THREE.CylinderGeometry(turretRadius, turretRadius, turretHeight, 8);\r\n            const turret = new THREE.Mesh(turretGeometry, turretMaterial);\r\n            turret.position.set(pos[0], pos[1] + baseHeight * 0.5 + turretHeight * 0.5, pos[2]);\r\n            turret.rotation.x = Math.PI / 2; // Orient horizontally\r\n            turret.rotation.z = -Math.PI / 6; // Angle outward\r\n            this.ship.add(turret);\r\n        });\r\n        \r\n        // Positions for turrets (starboard side)\r\n        const starboardPositions = [];\r\n        for (let i = 0; i < 12; i++) {\r\n            const z = scale * 0.2 - (i * scale * 0.07);\r\n            starboardPositions.push([scale * 0.1, scale * 0.035, z]);\r\n        }\r\n        \r\n        // Create starboard side turrets\r\n        starboardPositions.forEach(pos => {\r\n            // Turret base\r\n            const baseGeometry = new THREE.CylinderGeometry(baseRadius, baseRadius, baseHeight, 8);\r\n            const base = new THREE.Mesh(baseGeometry, turretMaterial);\r\n            base.position.set(pos[0], pos[1], pos[2]);\r\n            this.ship.add(base);\r\n            \r\n            // Turret gun\r\n            const turretGeometry = new THREE.CylinderGeometry(turretRadius, turretRadius, turretHeight, 8);\r\n            const turret = new THREE.Mesh(turretGeometry, turretMaterial);\r\n            turret.position.set(pos[0], pos[1] + baseHeight * 0.5 + turretHeight * 0.5, pos[2]);\r\n            turret.rotation.x = Math.PI / 2; // Orient horizontally\r\n            turret.rotation.z = Math.PI / 6; // Angle outward\r\n            this.ship.add(turret);\r\n        });\r\n    }\r\n    \r\n    createSurfaceTrenches(scale) {\r\n        // Create surface trenches and details\r\n        const trenchWidth = scale * 0.01;\r\n        const trenchDepth = scale * 0.01;\r\n        const trenchLength = scale * 0.3;\r\n        \r\n        // Trench material - darker than hull\r\n        const trenchMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x222233,\r\n            metalness: 0.7,\r\n            roughness: 0.8,\r\n            emissive: 0x111122,\r\n            emissiveIntensity: 0.3\r\n        });\r\n        \r\n        // Center trench (inspired by Death Star trench)\r\n        const centerTrenchGeometry = new THREE.BoxGeometry(trenchWidth, trenchDepth, trenchLength);\r\n        const centerTrench = new THREE.Mesh(centerTrenchGeometry, trenchMaterial);\r\n        centerTrench.position.set(0, scale * 0.035, scale * 0.1);\r\n        this.ship.add(centerTrench);\r\n        \r\n        // Side trenches\r\n        const sideTrenchGeometry = new THREE.BoxGeometry(trenchWidth, trenchDepth, trenchLength * 0.7);\r\n        \r\n        // Port side trench\r\n        const portTrench = new THREE.Mesh(sideTrenchGeometry, trenchMaterial);\r\n        portTrench.position.set(-scale * 0.07, scale * 0.035, scale * 0.05);\r\n        this.ship.add(portTrench);\r\n        \r\n        // Starboard side trench\r\n        const starboardTrench = new THREE.Mesh(sideTrenchGeometry, trenchMaterial);\r\n        starboardTrench.position.set(scale * 0.07, scale * 0.035, scale * 0.05);\r\n        this.ship.add(starboardTrench);\r\n    }\r\n    \r\n    createShieldGenerators(scale) {\r\n        // Create shield generator domes\r\n        const domeRadius = scale * 0.02;\r\n        const domeY = scale * 0.05;\r\n        const domeZ = scale * 0.35;\r\n        \r\n        // Dome material - slightly transparent blue\r\n        const domeMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x3366aa,\r\n            metalness: 0.2,\r\n            roughness: 0.3,\r\n            transparent: true,\r\n            opacity: 0.6,\r\n            emissive: 0x112244,\r\n            emissiveIntensity: 0.3\r\n        });\r\n        \r\n        // Port side shield generator\r\n        const portDomeGeometry = new THREE.SphereGeometry(domeRadius, 16, 16, 0, Math.PI * 2, 0, Math.PI / 2);\r\n        const portDome = new THREE.Mesh(portDomeGeometry, domeMaterial);\r\n        portDome.position.set(-scale * 0.08, domeY, domeZ);\r\n        portDome.rotation.x = Math.PI; // Orient half-sphere\r\n        this.ship.add(portDome);\r\n        \r\n        // Starboard side shield generator\r\n        const starboardDomeGeometry = new THREE.SphereGeometry(domeRadius, 16, 16, 0, Math.PI * 2, 0, Math.PI / 2);\r\n        const starboardDome = new THREE.Mesh(starboardDomeGeometry, domeMaterial);\r\n        starboardDome.position.set(scale * 0.08, domeY, domeZ);\r\n        starboardDome.rotation.x = Math.PI; // Orient half-sphere\r\n        this.ship.add(starboardDome);\r\n    }\r\n    \r\n    createTeleportBeam(scale) {\r\n        // Create teleport beam (initially inactive)\r\n        const beamTopRadius = scale * 0.03;\r\n        const beamBottomRadius = scale * 0.2; // Much wider at bottom for dramatic beam\r\n        const beamHeight = scale * 0.8; // Longer beam to reach further\r\n        \r\n        // Custom shader material for energy beam effect with more dynamic patterns\r\n        const beamMaterial = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                time: { value: 0.0 },\r\n                color: { value: new THREE.Color(0x33ccff) },\r\n                pulseFrequency: { value: 12.0 },\r\n                pulseAmplitude: { value: 0.3 }\r\n            },\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                \r\n                void main() {\r\n                    vUv = uv;\r\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                uniform float time;\r\n                uniform vec3 color;\r\n                uniform float pulseFrequency;\r\n                uniform float pulseAmplitude;\r\n                varying vec2 vUv;\r\n                \r\n                // Improved pattern with scrolling and pulsing\r\n                void main() {\r\n                    // Create primary energy pattern - vertical striations\r\n                    float verticalPattern = sin(vUv.y * 50.0 - time * 3.0) * 0.5 + 0.5;\r\n                    \r\n                    // Create horizontal pulse bands\r\n                    float horizontalPulse = sin(vUv.y * pulseFrequency - time * 2.0) * pulseAmplitude + (1.0 - pulseAmplitude);\r\n                    \r\n                    // Edge glow effect with distortion\r\n                    float edgeEffect = smoothstep(0.0, 0.4, vUv.x) * smoothstep(1.0, 0.6, vUv.x);\r\n                    \r\n                    // Swirling energy effect\r\n                    float swirl = sin(vUv.y * 30.0 + vUv.x * 5.0 + time * 4.0) * 0.5 + 0.5;\r\n                    \r\n                    // Combine effects\r\n                    float pattern = mix(verticalPattern, swirl, 0.5) * horizontalPulse * edgeEffect;\r\n                    \r\n                    // Add vertical fade for more realistic beam\r\n                    float opacity = (1.0 - vUv.y * 0.8) * 0.9;\r\n                    \r\n                    // Pulsing brightness based on time\r\n                    float pulse = sin(time * 3.0) * 0.1 + 0.9;\r\n                    \r\n                    // Combine final color \r\n                    vec3 finalColor = color * pulse;\r\n                    \r\n                    // Output final color with combined opacity\r\n                    gl_FragColor = vec4(finalColor, opacity * pattern);\r\n                }\r\n            `,\r\n            transparent: true,\r\n            side: THREE.DoubleSide,\r\n            blending: THREE.AdditiveBlending // Use additive blending for glowing effect\r\n        });\r\n        \r\n        // Create beam cone\r\n        const beamGeometry = new THREE.CylinderGeometry(beamBottomRadius, beamTopRadius, beamHeight, 32, 16, true);\r\n        this.teleportBeam = new THREE.Mesh(beamGeometry, beamMaterial);\r\n        \r\n        // Position beam below the ship facing down\r\n        this.teleportBeam.position.set(0, -beamHeight/2, -scale * 0.1);\r\n        this.teleportBeam.rotation.x = Math.PI; // Point downward\r\n        \r\n        // Hide beam initially\r\n        this.teleportBeam.visible = false;\r\n        \r\n        // Add to ship\r\n        this.ship.add(this.teleportBeam);\r\n        \r\n        // Create teleport beam particles\r\n        this.createTeleportParticles(scale);\r\n        \r\n        // Create beam impact ring effect\r\n        this.createBeamImpactRing(scale);\r\n    }\r\n    \r\n    createBeamImpactRing(scale) {\r\n        // Create a flat ring at the beam impact point\r\n        const ringGeometry = new THREE.RingGeometry(scale * 0.1, scale * 0.22, 32);\r\n        const ringMaterial = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                time: { value: 0.0 },\r\n                color: { value: new THREE.Color(0x33ccff) }\r\n            },\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                void main() {\r\n                    vUv = uv;\r\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                uniform float time;\r\n                uniform vec3 color;\r\n                varying vec2 vUv;\r\n                \r\n                void main() {\r\n                    // Animated ripple effect\r\n                    float ripple = sin(distance(vUv, vec2(0.5)) * 20.0 - time * 5.0) * 0.5 + 0.5;\r\n                    \r\n                    // Rotating element\r\n                    float angle = atan(vUv.y - 0.5, vUv.x - 0.5);\r\n                    float rotatingPattern = sin(angle * 8.0 + time * 3.0) * 0.5 + 0.5;\r\n                    \r\n                    // Pulsing opacity\r\n                    float pulse = sin(time * 2.0) * 0.3 + 0.7;\r\n                    \r\n                    // Combine patterns\r\n                    float pattern = mix(ripple, rotatingPattern, 0.5) * pulse;\r\n                    \r\n                    gl_FragColor = vec4(color, pattern * 0.7);\r\n                }\r\n            `,\r\n            transparent: true,\r\n            side: THREE.DoubleSide,\r\n            blending: THREE.AdditiveBlending,\r\n            depthWrite: false\r\n        });\r\n        \r\n        this.impactRing = new THREE.Mesh(ringGeometry, ringMaterial);\r\n        \r\n        // Position the ring below the beam's end\r\n        this.impactRing.position.set(0, -scale * 1.0, -scale * 0.1);\r\n        this.impactRing.rotation.x = -Math.PI/2; // Face downward\r\n        \r\n        // Hide initially\r\n        this.impactRing.visible = false;\r\n        \r\n        // Add to ship\r\n        this.ship.add(this.impactRing);\r\n    }\r\n    \r\n    createTeleportParticles(scale) {\r\n        // Create particle system for teleport beam\r\n        const particleCount = 800; // More particles\r\n        const particleGeometry = new THREE.BufferGeometry();\r\n        \r\n        // Create arrays for particle properties\r\n        const positions = new Float32Array(particleCount * 3);\r\n        const colors = new Float32Array(particleCount * 3);\r\n        const sizes = new Float32Array(particleCount);\r\n        \r\n        // Initialize particle positions in a cone shape with more variation\r\n        for (let i = 0; i < particleCount; i++) {\r\n            const i3 = i * 3;\r\n            \r\n            // Determine if this should be an inner or outer particle\r\n            const isInnerBeam = Math.random() > 0.3;\r\n            \r\n            // Random position within the cone or surrounding area\r\n            const radius = isInnerBeam ? \r\n                Math.random() * scale * 0.03 : // Inner beam\r\n                scale * 0.03 + Math.random() * scale * 0.17; // Outer beam area\r\n            \r\n            const theta = Math.random() * Math.PI * 2;\r\n            const height = -(Math.random() * scale * 0.8); // Full beam height\r\n            \r\n            // Convert to Cartesian\r\n            positions[i3] = radius * Math.cos(theta);     // x\r\n            positions[i3 + 1] = height;                   // y (negative for downward direction)\r\n            positions[i3 + 2] = radius * Math.sin(theta); // z\r\n            \r\n            // Gradient colors from cyan to blue with variation\r\n            if (isInnerBeam) {\r\n                // Brighter inner beam\r\n                colors[i3] = 0.3 + Math.random() * 0.2;       // r\r\n                colors[i3 + 1] = 0.9 + Math.random() * 0.1;   // g\r\n                colors[i3 + 2] = 1.0;                         // b\r\n            } else {\r\n                // Cooler outer particles\r\n                colors[i3] = 0.1 + Math.random() * 0.1;       // r \r\n                colors[i3 + 1] = 0.7 + Math.random() * 0.3;   // g\r\n                colors[i3 + 2] = 0.9 + Math.random() * 0.1;   // b\r\n            }\r\n            \r\n            // Varied particle sizes\r\n            sizes[i] = isInnerBeam ? \r\n                scale * 0.002 + Math.random() * scale * 0.002 : // Small inner particles\r\n                scale * 0.004 + Math.random() * scale * 0.006;  // Larger outer particles\r\n        }\r\n        \r\n        // Add attributes to geometry\r\n        particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n        particleGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n        particleGeometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\r\n        \r\n        // Particle material with custom shader for better glow\r\n        const particleMaterial = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                time: { value: 0 },\r\n                pointTexture: { value: this.createParticleTexture() }\r\n            },\r\n            vertexShader: `\r\n                attribute float size;\r\n                attribute vec3 color;\r\n                varying vec3 vColor;\r\n                uniform float time;\r\n                \r\n                void main() {\r\n                    vColor = color;\r\n                    \r\n                    // Animate size with time\r\n                    float pulseFactor = sin(time * 2.0 + position.z * 0.1) * 0.3 + 0.7;\r\n                    \r\n                    // Calculate position\r\n                    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n                    \r\n                    // Size attenuation\r\n                    gl_PointSize = size * pulseFactor * (300.0 / -mvPosition.z);\r\n                    gl_Position = projectionMatrix * mvPosition;\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                uniform sampler2D pointTexture;\r\n                varying vec3 vColor;\r\n                \r\n                void main() {\r\n                    // Sample soft particle texture\r\n                    vec4 texColor = texture2D(pointTexture, gl_PointCoord);\r\n                    \r\n                    // Apply color\r\n                    gl_FragColor = vec4(vColor, texColor.r);\r\n                }\r\n            `,\r\n            transparent: true,\r\n            depthWrite: false,\r\n            blending: THREE.AdditiveBlending,\r\n            vertexColors: true\r\n        });\r\n        \r\n        // Create particle system\r\n        this.teleportParticles = new THREE.Points(particleGeometry, particleMaterial);\r\n        this.teleportParticles.visible = false;\r\n        \r\n        // Position particle system\r\n        this.teleportParticles.position.set(0, 0, -scale * 0.1);\r\n        \r\n        // Add to ship\r\n        this.ship.add(this.teleportParticles);\r\n    }\r\n    \r\n    createParticleTexture() {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = 64;\r\n        canvas.height = 64;\r\n        \r\n        const context = canvas.getContext('2d');\r\n        const gradient = context.createRadialGradient(\r\n            32, 32, 0, 32, 32, 32\r\n        );\r\n        \r\n        gradient.addColorStop(0, 'rgba(255,255,255,1)');\r\n        gradient.addColorStop(0.3, 'rgba(255,255,255,0.8)');\r\n        gradient.addColorStop(0.5, 'rgba(255,255,255,0.4)');\r\n        gradient.addColorStop(1, 'rgba(255,255,255,0)');\r\n        \r\n        context.fillStyle = gradient;\r\n        context.fillRect(0, 0, 64, 64);\r\n        \r\n        const texture = new THREE.Texture(canvas);\r\n        texture.needsUpdate = true;\r\n        return texture;\r\n    }\r\n    \r\n    createEngineTrailParticles(scale, engineZ, width) {\r\n        const particleCount = 200;\r\n        const particleGeometry = new THREE.BufferGeometry();\r\n        \r\n        // Create arrays for particle properties\r\n        const positions = new Float32Array(particleCount * 3);\r\n        const colors = new Float32Array(particleCount * 3);\r\n        const sizes = new Float32Array(particleCount);\r\n        \r\n        // Engine positions to emit particles from\r\n        const enginePositions = [];\r\n        const enginesPerRow = 5;\r\n        \r\n        for (let i = 0; i < enginesPerRow; i++) {\r\n            const posX = (i - (enginesPerRow - 1) / 2) * (width / (enginesPerRow - 1) * 0.8);\r\n            enginePositions.push(posX);\r\n        }\r\n        \r\n        // Initialize particles\r\n        for (let i = 0; i < particleCount; i++) {\r\n            const i3 = i * 3;\r\n            \r\n            // Choose an engine position to emit from\r\n            const engineIndex = Math.floor(Math.random() * enginePositions.length);\r\n            const engineX = enginePositions[engineIndex];\r\n            \r\n            // Random offset from engine\r\n            const offsetX = (Math.random() - 0.5) * scale * 0.01;\r\n            const offsetY = (Math.random() - 0.5) * scale * 0.01;\r\n            \r\n            // Position behind the engine\r\n            const trailLength = Math.random() * scale * 0.5;\r\n            \r\n            positions[i3] = engineX + offsetX;     // x\r\n            positions[i3 + 1] = offsetY;           // y\r\n            positions[i3 + 2] = engineZ + engineX * 0.05 + trailLength; // z with slight angle\r\n            \r\n            // Blue-white colors for engine glow\r\n            colors[i3] = 0.5 + Math.random() * 0.5;     // r\r\n            colors[i3 + 1] = 0.7 + Math.random() * 0.3; // g\r\n            colors[i3 + 2] = 1.0;                       // b\r\n            \r\n            // Different sizes for depth\r\n            sizes[i] = (Math.random() * 0.5 + 0.5) * scale * 0.004;\r\n        }\r\n        \r\n        // Add attributes to geometry\r\n        particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n        particleGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n        particleGeometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\r\n        \r\n        // Particle material with custom shader\r\n        const particleMaterial = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                time: { value: 0 },\r\n                pointTexture: { value: this.createParticleTexture() }\r\n            },\r\n            vertexShader: `\r\n                attribute float size;\r\n                attribute vec3 color;\r\n                varying vec3 vColor;\r\n                uniform float time;\r\n                \r\n                void main() {\r\n                    vColor = color;\r\n                    \r\n                    // Animate size with time\r\n                    float pulseFactor = sin(time * 2.0 + position.z * 0.1) * 0.3 + 0.7;\r\n                    \r\n                    // Calculate position\r\n                    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n                    \r\n                    // Size attenuation\r\n                    gl_PointSize = size * pulseFactor * (300.0 / -mvPosition.z);\r\n                    gl_Position = projectionMatrix * mvPosition;\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                uniform sampler2D pointTexture;\r\n                varying vec3 vColor;\r\n                \r\n                void main() {\r\n                    // Sample soft particle texture\r\n                    vec4 texColor = texture2D(pointTexture, gl_PointCoord);\r\n                    \r\n                    // Apply color\r\n                    gl_FragColor = vec4(vColor, texColor.r);\r\n                }\r\n            `,\r\n            transparent: true,\r\n            depthWrite: false,\r\n            blending: THREE.AdditiveBlending,\r\n            vertexColors: true\r\n        });\r\n        \r\n        // Create particle system\r\n        this.engineTrailParticles = new THREE.Points(particleGeometry, particleMaterial);\r\n        this.ship.add(this.engineTrailParticles);\r\n    }\r\n    \r\n    // Set engines power level (0-1)\r\n    setEnginesPower(power) {\r\n        // Adjust engine glow intensity based on power level\r\n        this.engineGlows.forEach((glow, index) => {\r\n            // Alternate between main glow and outer glow\r\n            const isMainGlow = index % 2 === 0;\r\n            \r\n            if (isMainGlow) {\r\n                // Main engine glow - brighter\r\n                glow.material.emissiveIntensity = 0.8 + power * 1.2;\r\n                glow.material.opacity = 0.5 + power * 0.5;\r\n            } else {\r\n                // Outer engine glow - softer\r\n                glow.material.emissiveIntensity = 0.5 + power * 0.8;\r\n                glow.material.opacity = 0.2 + power * 0.3;\r\n            }\r\n            \r\n            // Scale the glow with power\r\n            const scale = 1 + power * 0.8;\r\n            glow.scale.set(scale, scale, scale * 1.2); // Stretch slightly on z-axis\r\n        });\r\n        \r\n        // Update engine trail particles\r\n        if (this.engineTrailParticles) {\r\n            this.engineTrailParticles.visible = power > 0.2;\r\n            \r\n            // Scale particle sizes based on power\r\n            if (this.engineTrailParticles.geometry.attributes.size) {\r\n                const sizes = this.engineTrailParticles.geometry.attributes.size.array;\r\n                const baseSizes = this.engineTrailParticles.userData.baseSizes || \r\n                                  Array.from(sizes); // Store original sizes if not saved\r\n                                  \r\n                // Save original sizes\r\n                if (!this.engineTrailParticles.userData.baseSizes) {\r\n                    this.engineTrailParticles.userData.baseSizes = baseSizes;\r\n                }\r\n                \r\n                // Scale sizes\r\n                for (let i = 0; i < sizes.length; i++) {\r\n                    sizes[i] = baseSizes[i] * (1 + power * 2);\r\n                }\r\n                \r\n                this.engineTrailParticles.geometry.attributes.size.needsUpdate = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Activate teleport beam\r\n    activateTeleportBeam() {\r\n        if (this.teleportBeam) {\r\n            this.teleportBeam.visible = true;\r\n            this.teleportParticles.visible = true;\r\n            this.impactRing.visible = true;\r\n            this.teleportBeamActive = true;\r\n            \r\n            // Reset animation time\r\n            this.teleportBeam.material.uniforms.time.value = 0;\r\n            this.impactRing.material.uniforms.time.value = 0;\r\n            if (this.teleportParticles.material.uniforms) {\r\n                this.teleportParticles.material.uniforms.time.value = 0;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Deactivate teleport beam\r\n    deactivateTeleportBeam() {\r\n        if (this.teleportBeam) {\r\n            this.teleportBeam.visible = false;\r\n            this.teleportParticles.visible = false;\r\n            this.impactRing.visible = false;\r\n            this.teleportBeamActive = false;\r\n        }\r\n    }\r\n    \r\n    // Update teleport beam effect\r\n    updateTeleportBeam(progress) {\r\n        if (!this.teleportBeamActive) return;\r\n        \r\n        // Update shader time uniforms for animation\r\n        const timeIncrement = 0.02;\r\n        \r\n        if (this.teleportBeam && this.teleportBeam.material.uniforms) {\r\n            this.teleportBeam.material.uniforms.time.value += timeIncrement;\r\n            \r\n            // Pulse the beam based on progress\r\n            const intensity = 0.3 + Math.sin(progress * Math.PI * 6) * 0.1;\r\n            this.teleportBeam.material.uniforms.pulseAmplitude.value = intensity;\r\n        }\r\n        \r\n        // Update impact ring\r\n        if (this.impactRing && this.impactRing.material.uniforms) {\r\n            this.impactRing.material.uniforms.time.value += timeIncrement;\r\n            \r\n            // Scale the impact ring with progress\r\n            const ringScale = 1.0 + Math.sin(progress * Math.PI * 3) * 0.2;\r\n            this.impactRing.scale.set(ringScale, ringScale, 1);\r\n        }\r\n        \r\n        // Animate particles\r\n        if (this.teleportParticles && this.teleportParticles.material.uniforms) {\r\n            this.teleportParticles.material.uniforms.time.value += timeIncrement;\r\n            \r\n            // Moving particles\r\n            const positions = this.teleportParticles.geometry.attributes.position.array;\r\n            \r\n            // Move particles downward and reset when they reach bottom\r\n            for (let i = 0; i < positions.length; i += 3) {\r\n                // Move particle down faster\r\n                positions[i + 1] -= 5;\r\n                \r\n                // Add slight horizontal movement for realism\r\n                positions[i] += (Math.random() - 0.5) * 2;\r\n                positions[i + 2] += (Math.random() - 0.5) * 2;\r\n                \r\n                // Reset particle when it gets too far\r\n                if (positions[i + 1] < -1000) {\r\n                    // Get a reference position to place particle within beam\r\n                    const isInnerBeam = Math.random() > 0.3;\r\n                    const radius = isInnerBeam ? \r\n                        Math.random() * 40 : // Inner beam\r\n                        40 + Math.random() * 180; // Outer area\r\n                    const theta = Math.random() * Math.PI * 2;\r\n                    \r\n                    positions[i] = radius * Math.cos(theta);     // x\r\n                    positions[i + 1] = -(Math.random() * 400);   // y (reset to top of beam)\r\n                    positions[i + 2] = radius * Math.sin(theta); // z\r\n                }\r\n            }\r\n            \r\n            // Update buffer geometry\r\n            this.teleportParticles.geometry.attributes.position.needsUpdate = true;\r\n        }\r\n        \r\n        // Update engine trails if they exist\r\n        if (this.engineTrailParticles && this.engineTrailParticles.material.uniforms) {\r\n            this.engineTrailParticles.material.uniforms.time.value += timeIncrement;\r\n        }\r\n    }\r\n} ","// introSequence.js - Manages the cinematic Star Dreadnought intro sequence\r\n\r\nimport * as THREE from 'three';\r\nimport { StarDreadnought } from './environment/starDreadnought.js';\r\nimport { getAbsolutePath } from '../utils/pathUtils.js';\r\n\r\nexport class IntroSequence {\r\n    constructor(scene, camera, spaceship, audioManager) {\r\n        this.scene = scene;\r\n        this.camera = camera;\r\n        this.spaceship = spaceship;\r\n        this.audio = audioManager;\r\n        this.isPlaying = false;\r\n        this.sequenceTime = 0;\r\n        this.onComplete = null;\r\n        this.skipEnabled = false; // Only enable skip after first playthrough\r\n        \r\n        // Save initial camera position\r\n        this.initialCameraPosition = null;\r\n        this.initialCameraRotation = null;\r\n        \r\n        // Create StarDreadnought instance\r\n        this.starDreadnought = new StarDreadnought(scene);\r\n        \r\n        // Setup portal effect\r\n        this.setupPortalEffect();\r\n        \r\n        // Overlay for flash effects\r\n        this.setupOverlay();\r\n        \r\n        // Dialogue elements\r\n        this.dialogueBox = null;\r\n        this.dialogueText = null;\r\n        this.currentDialogueIndex = 0;\r\n        this.isTyping = false;\r\n        this.typeInterval = null;\r\n        \r\n        // Custom sound effects\r\n        this.introSounds = {};\r\n        \r\n        // Dialogue WAV files\r\n        this.dialogueWavs = [];\r\n        \r\n        // Dialogue lines\r\n        this.dialogueLines = [\r\n            \"CORP CONTROLLER: [static] Belter #337, status check. Your cryostasis cycle is now complete.\",\r\n            \"CORP CONTROLLER: Welcome to your deployment in the Sol System, circa 2077. As you can see, Earth is... well... let's just say \\\"available for unrestricted mining operations\\\" now.\",\r\n            \"CORP CONTROLLER: CorpEx Resource Acquisition reminds you that all planetary bodies in this system are now classified as \\\"unclaimed assets\\\" following the... unfortunate global circumstances.\",\r\n            \"CORP CONTROLLER: Your primary objective is resource extraction from the asteroid belt. Initial scans show promising mineral concentrations untouched since the evacuation.\",\r\n            \"CORP CONTROLLER: The Stargate remains your lifeline. Return for fuel, upgrades, trading, and your allocated 15 minutes of daily entertainment. Remember, a happy belter is a productive belter!\",\r\n            \"CORP CONTROLLER: Resource extraction targets are non-negotiable. Failure to meet quotas will result in extension of your 42-year contract.\",\r\n            \"CORP CONTROLLER: Oh, and our long-range scans have detected spectral drone activity in adjacent sectors. Remnants of old defense systems, probably. Nothing a resourceful belter like you can't handle.\",\r\n            \"CORP CONTROLLER: Connection terminating in 3...2...1... Don't die out there, #337. Replacement clones are expensive.\",\r\n            \"[TRANSMISSION TERMINATED]\",\r\n            \"[BELTER #337 DEPLOYMENT ACTIVE]\"\r\n        ];\r\n        \r\n        console.log(\"Intro sequence initialized\");\r\n        \r\n        // Load dialogue WAV files\r\n        this.loadDialogueWavs();\r\n        \r\n        // Create custom Tone.js sound effects\r\n        this.createIntroSoundEffects();\r\n    }\r\n    \r\n    // Load dialogue WAV files (1.wav through 8.wav)\r\n    loadDialogueWavs() {\r\n        console.log(\"Loading dialogue WAV files...\");\r\n        \r\n        try {\r\n            // Load 8 dialogue WAV files\r\n            for (let i = 1; i <= 8; i++) {\r\n                const audioPath = getAbsolutePath(`sounds/dialogue/${i}.wav`);\r\n                console.log(`Attempting to load dialogue file: ${audioPath}`);\r\n                \r\n                // Create audio element\r\n                const audio = new Audio();\r\n                \r\n                // Setup event handlers before setting src to avoid race conditions\r\n                audio.addEventListener('canplaythrough', () => {\r\n                    console.log(`Dialogue WAV ${i} loaded successfully`);\r\n                });\r\n                \r\n                audio.addEventListener('error', (e) => {\r\n                    console.warn(`Dialogue WAV ${i} not found or couldn't be loaded - this is normal if you haven't added the files yet`);\r\n                    // Don't log the full error object as it's noisy\r\n                });\r\n                \r\n                // Set source after adding event listeners\r\n                audio.src = audioPath;\r\n                \r\n                // Store reference even if loading fails - the game will just skip playing it\r\n                this.dialogueWavs.push(audio);\r\n            }\r\n            \r\n            console.log(\"Dialogue WAV files setup complete - they'll be used if available\");\r\n        } catch (error) {\r\n            console.error(\"Error in dialogue WAV files setup:\", error);\r\n        }\r\n    }\r\n    \r\n    // Create custom Tone.js sound effects for the intro sequence\r\n    createIntroSoundEffects() {\r\n        if (typeof Tone === 'undefined') {\r\n            console.error(\"Tone.js not available for intro sound effects\");\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            console.log(\"Creating intro sequence sound effects...\");\r\n            \r\n            // Create warp portal sound\r\n            this.createWarpSound();\r\n            \r\n            // Create ship arrival sound\r\n            this.createShipArrivalSound();\r\n            \r\n            // Create teleport beam sound\r\n            this.createTeleportSound();\r\n            \r\n            console.log(\"Intro sequence sound effects created\");\r\n        } catch (error) {\r\n            console.error(\"Error creating intro sound effects:\", error);\r\n        }\r\n    }\r\n    \r\n    // Create warp portal sound effect\r\n    createWarpSound() {\r\n        try {\r\n            // Connect to master effects chain if available\r\n            const destination = this.audio && this.audio.masterEQ ? \r\n                this.audio.masterEQ : Tone.Destination;\r\n            \r\n            // Filter for warp sound\r\n            const warpFilter = new Tone.Filter({\r\n                type: \"lowpass\",\r\n                frequency: 2000,\r\n                Q: 2\r\n            }).connect(destination);\r\n            \r\n            // Add reverb for spaciousness\r\n            const warpReverb = new Tone.Reverb({\r\n                decay: 2,\r\n                wet: 0.5\r\n            }).connect(warpFilter);\r\n            \r\n            // Create synth for warp sound\r\n            const warpSynth = new Tone.FMSynth({\r\n                harmonicity: 3,\r\n                modulationIndex: 10,\r\n                oscillator: {\r\n                    type: \"sine\"\r\n                },\r\n                envelope: {\r\n                    attack: 0.1,\r\n                    decay: 0.2,\r\n                    sustain: 0.8,\r\n                    release: 1.5\r\n                },\r\n                modulation: {\r\n                    type: \"square\"\r\n                },\r\n                modulationEnvelope: {\r\n                    attack: 0.5,\r\n                    decay: 0.1,\r\n                    sustain: 0.2,\r\n                    release: 0.5\r\n                }\r\n            }).connect(warpReverb);\r\n            \r\n            // Create noise component for texture\r\n            const noiseFilter = new Tone.Filter({\r\n                type: \"bandpass\",\r\n                frequency: 700,\r\n                Q: 0.6\r\n            }).connect(destination);\r\n            \r\n            const noiseGain = new Tone.Gain(0.3).connect(noiseFilter);\r\n            const noise = new Tone.Noise(\"pink\").connect(noiseGain);\r\n            \r\n            // Store the sound\r\n            this.introSounds.warp = {\r\n                lastPlayTime: 0, // Track when we last played this sound\r\n                play: () => {\r\n                    if (this.audio && this.audio.muted) return;\r\n                    \r\n                    const now = Tone.now();\r\n                    \r\n                    // Prevent playing if it was played too recently (within 0.1 seconds)\r\n                    if (now - this.introSounds.warp.lastPlayTime < 0.1) {\r\n                        console.log(\"Preventing too rapid warp sound playback\");\r\n                        return;\r\n                    }\r\n                    \r\n                    // Update last play time\r\n                    this.introSounds.warp.lastPlayTime = now;\r\n                    \r\n                    // Set volume - reduced by 40%\r\n                    const volumeLevel = this.audio ? this.audio.sfxVolume * 0.36 : 0.18;\r\n                    warpSynth.volume.value = Tone.gainToDb(volumeLevel);\r\n                    \r\n                    // Start noise component with reduced volume\r\n                    noise.start();\r\n                    \r\n                    // Play descending sequence for portal forming\r\n                    warpSynth.triggerAttack(\"C5\", now);\r\n                    warpSynth.frequency.exponentialRampTo(\"C2\", 2, now);\r\n                    \r\n                    // Fade out noise after 3 seconds - start with lower gain\r\n                    noiseGain.gain.setValueAtTime(0.18, now);\r\n                    noiseGain.gain.exponentialRampTo(0.01, 3, now + 1);\r\n                    \r\n                    // Stop synth and noise after 3 seconds\r\n                    setTimeout(() => {\r\n                        warpSynth.triggerRelease();\r\n                        setTimeout(() => {\r\n                            noise.stop();\r\n                        }, 500);\r\n                    }, 3000);\r\n                }\r\n            };\r\n        } catch (error) {\r\n            console.error(\"Error creating warp sound:\", error);\r\n        }\r\n    }\r\n    \r\n    // Create ship arrival sound effect\r\n    createShipArrivalSound() {\r\n        try {\r\n            // Connect to master effects chain if available\r\n            const destination = this.audio && this.audio.masterEQ ? \r\n                this.audio.masterEQ : Tone.Destination;\r\n            \r\n            // Filter for arrival sound\r\n            const arrivalFilter = new Tone.Filter({\r\n                type: \"lowpass\",\r\n                frequency: 1200,\r\n                Q: 1\r\n            }).connect(destination);\r\n            \r\n            // Create synth for ship arrival sound\r\n            const arrivalSynth = new Tone.PolySynth(Tone.Synth, {\r\n                oscillator: {\r\n                    type: \"triangle\"\r\n                },\r\n                envelope: {\r\n                    attack: 0.02,\r\n                    decay: 0.3,\r\n                    sustain: 0.1,\r\n                    release: 0.8\r\n                }\r\n            }).connect(arrivalFilter);\r\n            \r\n            // Create deep bass for engine rumble\r\n            const rumbleFilter = new Tone.Filter({\r\n                type: \"lowpass\",\r\n                frequency: 200,\r\n                Q: 0.5\r\n            }).connect(destination);\r\n            \r\n            const rumbleSynth = new Tone.Synth({\r\n                oscillator: {\r\n                    type: \"sine\"\r\n                },\r\n                envelope: {\r\n                    attack: 0.1,\r\n                    decay: 0.3,\r\n                    sustain: 0.6,\r\n                    release: 1\r\n                }\r\n            }).connect(rumbleFilter);\r\n            \r\n            // Store the sound\r\n            this.introSounds.shipArrival = {\r\n                play: () => {\r\n                    if (this.audio && this.audio.muted) return;\r\n                    \r\n                    const now = Tone.now();\r\n                    \r\n                    // Set volume - reduced by 40%\r\n                    const volumeLevel = this.audio ? this.audio.sfxVolume * 0.42 : 0.24;\r\n                    arrivalSynth.volume.value = Tone.gainToDb(volumeLevel);\r\n                    rumbleSynth.volume.value = Tone.gainToDb(volumeLevel * 0.8); // Further reduced rumble\r\n                    \r\n                    // Play dramatic chord for ship appearance\r\n                    arrivalSynth.triggerAttackRelease([\"G3\", \"D4\", \"A4\"], 1.5, now);\r\n                    \r\n                    // Add engine rumble\r\n                    rumbleSynth.triggerAttack(\"G1\", now);\r\n                    rumbleSynth.frequency.exponentialRampTo(\"C2\", 2, now + 0.5);\r\n                    \r\n                    // Stop rumble after 2 seconds\r\n                    setTimeout(() => {\r\n                        rumbleSynth.triggerRelease();\r\n                    }, 2000);\r\n                }\r\n            };\r\n        } catch (error) {\r\n            console.error(\"Error creating ship arrival sound:\", error);\r\n        }\r\n    }\r\n    \r\n    // Create teleport beam sound effect\r\n    createTeleportSound() {\r\n        try {\r\n            // Connect to master effects chain if available\r\n            const destination = this.audio && this.audio.masterEQ ? \r\n                this.audio.masterEQ : Tone.Destination;\r\n            \r\n            // Filter for teleport sound\r\n            const teleportFilter = new Tone.Filter({\r\n                type: \"bandpass\",\r\n                frequency: 800,\r\n                Q: 2\r\n            }).connect(destination);\r\n            \r\n            // Add chorus for otherworldly effect\r\n            const teleportChorus = new Tone.Chorus({\r\n                frequency: 1.5,\r\n                delayTime: 3.5,\r\n                depth: 0.7,\r\n                wet: 0.5\r\n            }).connect(teleportFilter).start();\r\n            \r\n            // Create synth for teleport beam\r\n            const teleportSynth = new Tone.Synth({\r\n                oscillator: {\r\n                    type: \"sine\"\r\n                },\r\n                envelope: {\r\n                    attack: 0.05,\r\n                    decay: 0.2,\r\n                    sustain: 0.8,\r\n                    release: 1\r\n                }\r\n            }).connect(teleportChorus);\r\n            \r\n            // Create high-pitched accent for the beam\r\n            const beamFilter = new Tone.Filter({\r\n                type: \"highpass\",\r\n                frequency: 2000,\r\n                Q: 1\r\n            }).connect(destination);\r\n            \r\n            const beamSynth = new Tone.Synth({\r\n                oscillator: {\r\n                    type: \"square\"\r\n                },\r\n                envelope: {\r\n                    attack: 0.01,\r\n                    decay: 0.1,\r\n                    sustain: 0.6,\r\n                    release: 0.5\r\n                }\r\n            }).connect(beamFilter);\r\n            \r\n            // Store the sound\r\n            this.introSounds.teleport = {\r\n                play: () => {\r\n                    if (this.audio && this.audio.muted) return;\r\n                    \r\n                    const now = Tone.now();\r\n                    \r\n                    // Set volume - reduced by 40%\r\n                    const volumeLevel = this.audio ? this.audio.sfxVolume * 0.3 : 0.18;\r\n                    teleportSynth.volume.value = Tone.gainToDb(volumeLevel);\r\n                    beamSynth.volume.value = Tone.gainToDb(volumeLevel * 0.4); // Further reduced high pitch\r\n                    \r\n                    // Play upward sweep for teleport activation\r\n                    teleportSynth.triggerAttack(\"C4\", now);\r\n                    teleportSynth.frequency.exponentialRampTo(\"C6\", 1.5, now);\r\n                    \r\n                    // Add high-pitched beam activation sound\r\n                    beamSynth.triggerAttackRelease(\"E7\", 0.1, now + 0.3);\r\n                    setTimeout(() => {\r\n                        beamSynth.triggerAttackRelease(\"G7\", 0.1, now + 0.5);\r\n                    }, 200);\r\n                    \r\n                    // Release after 2 seconds\r\n                    setTimeout(() => {\r\n                        teleportSynth.triggerRelease();\r\n                    }, 2000);\r\n                }\r\n            };\r\n        } catch (error) {\r\n            console.error(\"Error creating teleport sound:\", error);\r\n        }\r\n    }\r\n    \r\n    setupDialogueUI() {\r\n        // Create dialogue box\r\n        this.dialogueBox = document.createElement('div');\r\n        this.dialogueBox.id = 'intro-dialogue';\r\n        this.dialogueBox.style.position = 'fixed';\r\n        this.dialogueBox.style.bottom = '50px';\r\n        this.dialogueBox.style.left = '50%';\r\n        this.dialogueBox.style.transform = 'translateX(-50%)';\r\n        this.dialogueBox.style.width = '80%';\r\n        this.dialogueBox.style.maxWidth = '800px';\r\n        this.dialogueBox.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\r\n        this.dialogueBox.style.color = '#30f0c0';\r\n        this.dialogueBox.style.border = '1px solid #30f0c0';\r\n        this.dialogueBox.style.borderRadius = '5px';\r\n        this.dialogueBox.style.padding = '15px';\r\n        this.dialogueBox.style.fontFamily = 'Courier New, monospace';\r\n        this.dialogueBox.style.fontSize = '16px';\r\n        this.dialogueBox.style.zIndex = '10000';\r\n        this.dialogueBox.style.textShadow = '0 0 5px #30f0c0';\r\n        this.dialogueBox.style.boxShadow = '0 0 10px rgba(48, 240, 192, 0.3)';\r\n        this.dialogueBox.style.opacity = '0';\r\n        this.dialogueBox.style.transition = 'opacity 0.5s';\r\n        \r\n        // Add dialogue text element\r\n        this.dialogueText = document.createElement('div');\r\n        this.dialogueText.style.lineHeight = '1.5';\r\n        \r\n        this.dialogueBox.appendChild(this.dialogueText);\r\n        document.body.appendChild(this.dialogueBox);\r\n        \r\n        // Fade in dialogue box\r\n        setTimeout(() => {\r\n            this.dialogueBox.style.opacity = '1';\r\n        }, 200);\r\n    }\r\n    \r\n    typeNextDialogue() {\r\n        if (this.currentDialogueIndex >= this.dialogueLines.length) {\r\n            return;\r\n        }\r\n        \r\n        const line = this.dialogueLines[this.currentDialogueIndex];\r\n        \r\n        // Play the appropriate dialogue WAV file\r\n        // Only play WAVs for the first 8 dialogues (the ones with voice acting)\r\n        if (this.currentDialogueIndex < 8 && this.dialogueWavs[this.currentDialogueIndex]) {\r\n            try {\r\n                const dialogueAudio = this.dialogueWavs[this.currentDialogueIndex];\r\n                \r\n                // Only attempt to play if the file has actually loaded successfully\r\n                // We can check this by examining the networkState or readyState\r\n                if (dialogueAudio.readyState > 0 && dialogueAudio.error === null) {\r\n                    dialogueAudio.volume = this.audio ? this.audio.sfxVolume * 0.8 : 0.5;\r\n                    dialogueAudio.currentTime = 0;\r\n                    \r\n                    // Try to play and catch any potential errors\r\n                    const playPromise = dialogueAudio.play();\r\n                    if (playPromise !== undefined) {\r\n                        playPromise.catch(err => {\r\n                            console.warn(`Couldn't play dialogue WAV ${this.currentDialogueIndex}: ${err.message}`);\r\n                        });\r\n                    }\r\n                } else {\r\n                    console.log(`Skipping dialogue WAV ${this.currentDialogueIndex + 1} (not loaded)`);\r\n                }\r\n            } catch (error) {\r\n                console.warn(`Error playing dialogue WAV ${this.currentDialogueIndex + 1}, continuing without audio`, error.message);\r\n            }\r\n        }\r\n        \r\n        this.currentDialogueIndex++;\r\n        \r\n        // Clear previous text\r\n        this.dialogueText.textContent = '';\r\n        \r\n        // Show dialogue box if not visible\r\n        if (this.dialogueBox.style.opacity === '0') {\r\n            this.dialogueBox.style.opacity = '1';\r\n        }\r\n        \r\n        // Type out text\r\n        let charIndex = 0;\r\n        this.isTyping = true;\r\n        \r\n        // Clear previous interval if exists\r\n        if (this.typeInterval) {\r\n            clearInterval(this.typeInterval);\r\n        }\r\n        \r\n        // Special effects for transmission terminated line\r\n        if (line.includes(\"TRANSMISSION TERMINATED\") || line.includes(\"DEPLOYMENT ACTIVE\")) {\r\n            this.dialogueText.style.color = '#ff3030';\r\n        } else {\r\n            this.dialogueText.style.color = '#30f0c0';\r\n        }\r\n        \r\n        // Type each character with random speed for effect\r\n        this.typeInterval = setInterval(() => {\r\n            if (charIndex < line.length) {\r\n                this.dialogueText.textContent += line.charAt(charIndex);\r\n                charIndex++;\r\n                \r\n                // Play typing sound\r\n                if (this.audio && this.audio.playSound && charIndex % 3 === 0) {\r\n                    // Try to play a typing sound if available\r\n                    if (typeof this.audio.playSound === 'function') {\r\n                        try {\r\n                            this.audio.playSound('uiClick', 0.1); // Low volume typing sound\r\n                        } catch (e) {\r\n                            // Ignore if sound not available\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                clearInterval(this.typeInterval);\r\n                this.typeInterval = null;\r\n                this.isTyping = false;\r\n                \r\n                // Automatically advance to next dialogue after a delay\r\n                // but only for certain progress points in the sequence\r\n                if (this.sequenceTime < 22) { // Don't auto advance during the very end\r\n                    const waitTime = Math.max(line.length * 50, 3000); // Longer lines stay longer\r\n                    setTimeout(() => {\r\n                        if (!this.isTyping && this.isPlaying) {\r\n                            this.typeNextDialogue();\r\n                        }\r\n                    }, waitTime);\r\n                }\r\n            }\r\n        }, 30); // Base typing speed\r\n    }\r\n    \r\n    setupPortalEffect() {\r\n        // Create a circular portal instead of a particle tower\r\n        const portalGeometry = new THREE.RingGeometry(0, 400, 64);\r\n        const portalMaterial = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                time: { value: 0 },\r\n                color: { value: new THREE.Color(0x6633aa) }\r\n            },\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                void main() {\r\n                    vUv = uv;\r\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                uniform float time;\r\n                uniform vec3 color;\r\n                varying vec2 vUv;\r\n                \r\n                void main() {\r\n                    float distFromCenter = length(vUv - vec2(0.5, 0.5)) * 2.0;\r\n                    float ripple = sin(distFromCenter * 20.0 - time * 3.0) * 0.5 + 0.5;\r\n                    float alpha = (1.0 - distFromCenter) * ripple;\r\n                    \r\n                    vec3 finalColor = color * (0.8 + ripple * 0.4);\r\n                    gl_FragColor = vec4(finalColor, alpha);\r\n                }\r\n            `,\r\n            transparent: true,\r\n            side: THREE.DoubleSide\r\n        });\r\n        \r\n        this.warpPortal = new THREE.Mesh(portalGeometry, portalMaterial);\r\n        \r\n        // Create a subtle particle system around the portal for effect\r\n        const particleCount = 500;\r\n        const particles = new THREE.BufferGeometry();\r\n        const positions = new Float32Array(particleCount * 3);\r\n        \r\n        for (let i = 0; i < particleCount; i++) {\r\n            const angle = Math.random() * Math.PI * 2;\r\n            const radius = 350 + Math.random() * 150;\r\n            positions[i * 3] = Math.cos(angle) * radius;\r\n            positions[i * 3 + 1] = Math.sin(angle) * radius;\r\n            positions[i * 3 + 2] = (Math.random() - 0.5) * 50;\r\n        }\r\n        \r\n        particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n        \r\n        const particleMaterial = new THREE.PointsMaterial({\r\n            color: 0xaa33ff,\r\n            size: 3,\r\n            transparent: true,\r\n            blending: THREE.AdditiveBlending\r\n        });\r\n        \r\n        this.portalParticles = new THREE.Points(particles, particleMaterial);\r\n        \r\n        // Group the portal elements\r\n        this.warpTunnel = new THREE.Group();\r\n        this.warpTunnel.add(this.warpPortal);\r\n        this.warpTunnel.add(this.portalParticles);\r\n    }\r\n    \r\n    setupOverlay() {\r\n        // Create a DOM overlay for the flash effect\r\n        this.overlay = document.createElement('div');\r\n        this.overlay.id = 'intro-overlay';\r\n        this.overlay.style.position = 'fixed';\r\n        this.overlay.style.top = '0';\r\n        this.overlay.style.left = '0';\r\n        this.overlay.style.width = '100%';\r\n        this.overlay.style.height = '100%';\r\n        this.overlay.style.backgroundColor = '#aa33ff'; // Match portal color\r\n        this.overlay.style.opacity = '0';\r\n        this.overlay.style.transition = 'opacity 0.5s';\r\n        this.overlay.style.pointerEvents = 'none';\r\n        this.overlay.style.zIndex = '9999';\r\n        \r\n        // Add to DOM but hide initially\r\n        document.body.appendChild(this.overlay);\r\n    }\r\n    \r\n    startSequence(onComplete) {\r\n        if (this.isPlaying) return;\r\n        \r\n        console.log(\"Starting intro sequence...\");\r\n        this.isPlaying = true;\r\n        this.sequenceTime = 0;\r\n        this.onComplete = onComplete;\r\n        \r\n        // Store initial camera state to restore player camera after sequence\r\n        this.initialCameraPosition = this.camera.position.clone();\r\n        this.initialCameraRotation = this.camera.rotation.clone();\r\n        \r\n        // Position camera for initial view of portal forming\r\n        this.camera.position.set(0, 6000, 12000);\r\n        this.camera.lookAt(30000, 5000, 0); // Look at where portal will appear\r\n        \r\n        // Hide player ship during sequence\r\n        if (this.spaceship && this.spaceship.mesh) {\r\n            this.spaceship.mesh.visible = false;\r\n            \r\n            // Disable ship thrusters to prevent any movement\r\n            if (this.spaceship.thrust) {\r\n                this.spaceship.thrust.forward = false;\r\n                this.spaceship.thrust.backward = false;\r\n                this.spaceship.thrust.left = false;\r\n                this.spaceship.thrust.right = false;\r\n                this.spaceship.thrust.boost = false;\r\n            }\r\n            \r\n            // Make sure velocity is zero\r\n            if (this.spaceship.velocity) {\r\n                this.spaceship.velocity.set(0, 0, 0);\r\n            }\r\n        }\r\n        \r\n        // Add portal to scene\r\n        this.scene.add(this.warpTunnel);\r\n        \r\n        // Position the star dreadnought initially outside the scene\r\n        this.starDreadnought.ship.position.set(35000, 5000, 0); // Off-screen\r\n        this.starDreadnought.ship.rotation.y = Math.PI/2; // Face toward center\r\n        this.starDreadnought.ship.visible = false;\r\n        \r\n        // Start sequence animation\r\n        this.animate = this.animate.bind(this);\r\n        this.lastTime = performance.now();\r\n        requestAnimationFrame(this.animate);\r\n        \r\n        // Setup skip functionality\r\n        this.setupSkipHandler();\r\n        \r\n        // Setup dialogue UI\r\n        this.setupDialogueUI();\r\n        \r\n        // Start first dialogue line\r\n        setTimeout(() => {\r\n            this.typeNextDialogue();\r\n        }, 2000);\r\n        \r\n        // Play warp sound\r\n        if (this.introSounds.warp) {\r\n            // Initialize lastPlayTime for the first play\r\n            this.introSounds.warp.lastPlayTime = Tone.now() - 1; // Ensure it's been at least 1 second\r\n            this.introSounds.warp.play();\r\n        }\r\n    }\r\n    \r\n    animate(currentTime) {\r\n        if (!this.isPlaying) return;\r\n        \r\n        // Slower pace for more sublime experience\r\n        const deltaTime = Math.min((currentTime - this.lastTime) / 1000, 0.1) * 0.4; // 60% slower\r\n        this.lastTime = currentTime;\r\n        \r\n        // Update sequence timer\r\n        this.sequenceTime += deltaTime;\r\n        \r\n        // Just TWO phases - arrival and departure\r\n        if (this.sequenceTime < 14.0) {\r\n            // Phase 1: Portal, ship arrival and player deployment (0-14s)\r\n            this.updateArrivalPhase(this.sequenceTime / 14.0);\r\n        } else if (this.sequenceTime < 24.0) {\r\n            // Phase 2: Ship departure (14-24s)\r\n            this.updateDeparturePhase((this.sequenceTime - 14.0) / 10.0);\r\n        } else {\r\n            // Sequence complete\r\n            this.completeSequence();\r\n            return;\r\n        }\r\n        \r\n        requestAnimationFrame(this.animate);\r\n    }\r\n    \r\n    updateArrivalPhase(progress) {\r\n        // Portal animation\r\n        if (this.warpPortal && this.warpPortal.material.uniforms) {\r\n            this.warpPortal.material.uniforms.time.value += 0.016;\r\n        }\r\n        \r\n        // Position portal outside the asteroid belt\r\n        this.warpTunnel.position.set(30000, 5000, 0);\r\n        this.warpTunnel.rotation.z = Math.PI/2;\r\n        \r\n        // PORTAL GROWTH phase (0-0.2)\r\n        if (progress < 0.2) {\r\n            // Grow portal\r\n            const portalProgress = progress / 0.2;\r\n            const portalScale = portalProgress * 3.5;\r\n            this.warpTunnel.scale.set(portalScale, portalScale, 1);\r\n            \r\n            // Medium-distance side view of portal formation\r\n            this.camera.position.set(0, 6000, 12000);\r\n            this.camera.lookAt(30000, 5000, 0); // Look at portal\r\n        }\r\n        \r\n        // SHIP EMERGENCE and JOURNEY phase (0.2-0.7)\r\n        if (progress >= 0.2 && progress < 0.7) {\r\n            // Make ship visible when it first emerges\r\n            if (progress >= 0.2 && !this.starDreadnought.ship.visible) {\r\n                this.starDreadnought.ship.visible = true;\r\n                this.flashOverlay(0.3);\r\n                \r\n                // Play arrival sound using Tone.js\r\n                if (this.introSounds.shipArrival) {\r\n                    this.introSounds.shipArrival.play();\r\n                }\r\n            }\r\n            \r\n            // Smooth continuous movement along Bezier curve\r\n            const t = (progress - 0.2) / 0.5; // Normalized time for this phase\r\n            const easeInOut = t < 0.5 \r\n                ? 2 * t * t \r\n                : 1 - Math.pow(-2 * t + 2, 2) / 2;\r\n            \r\n            // Bezier curve control points for ship path\r\n            const start = new THREE.Vector3(30000, 5000, 0);        // Portal position\r\n            const control = new THREE.Vector3(26000, 5300, -2000);  // Control point for curve\r\n            const end = new THREE.Vector3(22000, 5000, 0);          // Final position above belt\r\n            \r\n            // Calculate position along quadratic Bezier curve\r\n            const p0 = new THREE.Vector3();\r\n            const p1 = new THREE.Vector3();\r\n            const p2 = new THREE.Vector3();\r\n            \r\n            p0.copy(start).multiplyScalar(Math.pow(1-easeInOut, 2));\r\n            p1.copy(control).multiplyScalar(2 * (1-easeInOut) * easeInOut);\r\n            p2.copy(end).multiplyScalar(easeInOut * easeInOut);\r\n            \r\n            const position = new THREE.Vector3()\r\n                .add(p0)\r\n                .add(p1)\r\n                .add(p2);\r\n            \r\n            // Add subtle vertical oscillation like a naval vessel\r\n            position.y += Math.sin(progress * Math.PI * 3) * 80;\r\n            \r\n            // Update ship position\r\n            this.starDreadnought.ship.position.copy(position);\r\n            \r\n            // Engine power during journey\r\n            const enginePower = 0.4 + easeInOut * 0.6;\r\n            this.starDreadnought.setEnginesPower(enginePower);\r\n            \r\n            // Fade out portal as ship moves away\r\n            if (progress > 0.3) {\r\n                const portalFade = Math.min((progress - 0.3) / 0.3, 1.0);\r\n                if (this.portalParticles.material) {\r\n                    this.portalParticles.material.opacity = 1 - portalFade;\r\n                }\r\n                if (this.warpPortal.material) {\r\n                    this.warpPortal.material.opacity = 1 - portalFade;\r\n                }\r\n            }\r\n            \r\n            // Tracking shot alongside ship journey\r\n            const shipPos = this.starDreadnought.ship.position.clone();\r\n            this.camera.position.set(\r\n                shipPos.x - 3000, \r\n                shipPos.y + 1000, \r\n                8000\r\n            );\r\n            this.camera.lookAt(shipPos);\r\n        }\r\n        \r\n        // PLAYER DEPLOYMENT phase (0.7-1.0)\r\n        if (progress >= 0.7) {\r\n            // Ensure portal is fully invisible\r\n            if (this.portalParticles.material) {\r\n                this.portalParticles.material.opacity = 0;\r\n            }\r\n            if (this.warpPortal.material) {\r\n                this.warpPortal.material.opacity = 0;\r\n            }\r\n            \r\n            // Activate teleport beam if not already active\r\n            if (progress < 0.75 && !this.starDreadnought.teleportBeamActive) {\r\n                this.starDreadnought.activateTeleportBeam();\r\n                \r\n                // Play teleport sound using Tone.js\r\n                if (this.introSounds.teleport) {\r\n                    this.introSounds.teleport.play();\r\n                }\r\n            }\r\n            \r\n            // Update teleport beam\r\n            this.starDreadnought.updateTeleportBeam(progress);\r\n            \r\n            // Deploy player ship\r\n            if (progress > 0.8 && this.spaceship && !this.spaceship.mesh.visible) {\r\n                // Position player ship BELOW dreadnought but ABOVE the asteroid belt\r\n                const dreadPos = this.starDreadnought.ship.position;\r\n                this.spaceship.mesh.position.set(\r\n                    dreadPos.x, \r\n                    dreadPos.y - 2000, // 2000 units below dreadnought\r\n                    dreadPos.z\r\n                );\r\n                \r\n                // Properly undock the ship - this is critical to update game state\r\n                if (this.spaceship.isDocked) {\r\n                    console.log(\"Undocking player ship during intro sequence\");\r\n                    this.spaceship.isDocked = false; // Force undock directly to avoid position reset\r\n                    this.spaceship.mesh.visible = true;\r\n                } else {\r\n                    this.spaceship.mesh.visible = true;\r\n                }\r\n                \r\n                // Store final player position\r\n                this.finalPlayerPosition = this.spaceship.mesh.position.clone();\r\n                \r\n                // Add shield effect to player ship\r\n                this.createPlayerShieldEffect();\r\n                \r\n                // Flash effect for ship appearance\r\n                this.flashOverlay(0.3);\r\n            }\r\n            \r\n            // Teleport beam view camera\r\n            const shipPos = this.starDreadnought.ship.position.clone();\r\n            const t = (progress - 0.7) / 0.3;\r\n            this.camera.position.set(\r\n                shipPos.x - 2000 + t * 2000,\r\n                shipPos.y + 2000,\r\n                5000 - t * 3000\r\n            );\r\n            \r\n            // Look at midpoint between ship and deployed player\r\n            const lookY = shipPos.y - 1000;\r\n            this.camera.lookAt(shipPos.x, lookY, shipPos.z);\r\n        }\r\n    }\r\n    \r\n    updateDeparturePhase(progress) {\r\n        // Simple departure sequence: rotate ship 180 degrees and go back through original portal\r\n        \r\n        // Original portal location\r\n        const portalPos = new THREE.Vector3(30000, 5000, 0);\r\n        \r\n        // FIRST HALF: Ship rotates and portal reappears (0-0.5)\r\n        if (progress < 0.5) {\r\n            // Turn off teleport beam at start\r\n            if (progress < 0.1 && this.starDreadnought.teleportBeamActive) {\r\n                this.starDreadnought.deactivateTeleportBeam();\r\n            }\r\n            \r\n            // Make portal visible again at original position\r\n            if (progress > 0.1) {\r\n                // Position portal back at original entry point\r\n                this.warpTunnel.position.copy(portalPos);\r\n                this.warpTunnel.visible = true;\r\n                this.warpTunnel.rotation.z = Math.PI/2; // Original orientation\r\n                \r\n                // Portal should be at full size immediately\r\n                this.warpTunnel.scale.set(3.5, 3.5, 1);\r\n                \r\n                // Fade in portal\r\n                const portalProgress = Math.min((progress - 0.1) / 0.3, 1.0);\r\n                if (this.portalParticles.material) {\r\n                    this.portalParticles.material.opacity = portalProgress;\r\n                }\r\n                if (this.warpPortal.material) {\r\n                    this.warpPortal.material.opacity = portalProgress;\r\n                }\r\n            }\r\n            \r\n            // Simple 180 degree rotation\r\n            if (progress > 0.2) {\r\n                const rotateProgress = Math.min((progress - 0.2) / 0.3, 1.0);\r\n                const startRot = Math.PI/2;  // Currently facing center\r\n                const endRot = 3 * Math.PI/2; // 180 degree rotation (facing back toward original portal)\r\n                this.starDreadnought.ship.rotation.y = startRot + (endRot - startRot) * rotateProgress;\r\n            }\r\n            \r\n            // Fixed camera position from the side to view the rotation\r\n            const shipPos = this.starDreadnought.ship.position.clone();\r\n            this.camera.position.set(\r\n                shipPos.x,\r\n                shipPos.y + 3000, // High-ish angle\r\n                shipPos.z + 8000  // Side view\r\n            );\r\n            this.camera.lookAt(shipPos);\r\n        }\r\n        \r\n        // SECOND HALF: Ship accelerates through original portal and disappears (0.5-1.0)\r\n        else {\r\n            // Calculate movement progress for this phase\r\n            const moveProgress = (progress - 0.5) / 0.5;\r\n            \r\n            // Ship position calculation - go back toward original portal\r\n            const startPos = new THREE.Vector3(22000, 5000, 0); // Ship's current position\r\n            const beyondPos = new THREE.Vector3(35000, 5000, 0); // Beyond portal\r\n            \r\n            // Simple acceleration curve\r\n            const easeIn = moveProgress * moveProgress; // Accelerating movement\r\n            \r\n            // Ship position calculation\r\n            let position;\r\n            if (moveProgress < 0.7) {\r\n                // Move to portal\r\n                const t = easeIn / 0.5; // Normalized and accelerated\r\n                position = new THREE.Vector3().lerpVectors(startPos, portalPos, t);\r\n            } else {\r\n                // Continue beyond portal\r\n                const t = (moveProgress - 0.7) / 0.3;\r\n                position = new THREE.Vector3().lerpVectors(portalPos, beyondPos, t);\r\n            }\r\n            \r\n            // Update ship position\r\n            this.starDreadnought.ship.position.copy(position);\r\n            \r\n            // Increase engine power for dramatic exit\r\n            this.starDreadnought.setEnginesPower(0.7 + moveProgress * 0.8);\r\n            \r\n            // Flash when ship enters portal\r\n            if (moveProgress > 0.6 && moveProgress < 0.63) {\r\n                this.flashOverlay(0.4);\r\n                \r\n                // Play warp sound for re-entry but only exactly once at 0.61\r\n                if (this.introSounds.warp && Math.abs(moveProgress - 0.61) < 0.01) {\r\n                    this.introSounds.warp.play();\r\n                }\r\n            }\r\n            \r\n            // Hide ship after it enters portal\r\n            if (moveProgress > 0.65) {\r\n                this.starDreadnought.ship.visible = false;\r\n            }\r\n            \r\n            // Collapse portal at the very end\r\n            if (moveProgress > 0.9) {\r\n                const collapseProgress = (moveProgress - 0.9) / 0.1;\r\n                const collapseScale = (1 - collapseProgress) * 3.5;\r\n                this.warpTunnel.scale.set(collapseScale, collapseScale, 1);\r\n            }\r\n            \r\n            // Static camera position showing ship's departure path\r\n            const shipPos = startPos.clone(); // Use initial position as reference\r\n            this.camera.position.set(\r\n                shipPos.x - 2000,\r\n                shipPos.y + 3000,\r\n                10000 // Side view\r\n            );\r\n            // Look at the midpoint of the departure path\r\n            const lookPos = new THREE.Vector3().lerpVectors(startPos, portalPos, 0.5);\r\n            this.camera.lookAt(lookPos);\r\n        }\r\n    }\r\n    \r\n    createPlayerShieldEffect() {\r\n        // Create a sphere slightly larger than the player ship\r\n        const geometry = new THREE.SphereGeometry(30, 32, 32);\r\n        const material = new THREE.MeshBasicMaterial({\r\n            color: 0x88ccff,\r\n            transparent: true, \r\n            opacity: 0.6,\r\n            side: THREE.DoubleSide\r\n        });\r\n        \r\n        this.playerShieldEffect = new THREE.Mesh(geometry, material);\r\n        this.playerShieldEffect.scale.set(1.2, 1.2, 1.2);\r\n        this.spaceship.mesh.add(this.playerShieldEffect);\r\n        \r\n        // Add pulsing animation\r\n        this.shieldPulseTime = 0;\r\n    }\r\n    \r\n    // Update portal shader uniforms\r\n    updatePortalEffect() {\r\n        if (this.warpPortal && this.warpPortal.material.uniforms) {\r\n            this.warpPortal.material.uniforms.time.value += 0.016;\r\n        }\r\n    }\r\n    \r\n    flashOverlay(maxOpacity = 0.6) {\r\n        if (!this.overlay) return;\r\n        \r\n        // Flash overlay effect\r\n        this.overlay.style.opacity = maxOpacity.toString();\r\n        \r\n        // Fade out after flash\r\n        setTimeout(() => {\r\n            this.overlay.style.opacity = '0';\r\n        }, 300);\r\n    }\r\n    \r\n    setupSkipHandler() {\r\n        // Add skip button\r\n        const skipButton = document.createElement('div');\r\n        skipButton.id = 'skip-intro-button';\r\n        skipButton.textContent = 'SKIP INTRO';\r\n        skipButton.style.position = 'fixed';\r\n        skipButton.style.bottom = '10px';\r\n        skipButton.style.left = '50%';\r\n        skipButton.style.transform = 'translateX(-50%)';\r\n        skipButton.style.padding = '10px 15px';\r\n        skipButton.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\r\n        skipButton.style.color = '#30f0c0';\r\n        skipButton.style.border = '1px solid #30f0c0';\r\n        skipButton.style.borderRadius = '5px';\r\n        skipButton.style.cursor = 'pointer';\r\n        skipButton.style.zIndex = '10000';\r\n        skipButton.style.fontFamily = 'Courier New, monospace';\r\n        skipButton.style.boxShadow = '0 0 10px rgba(48, 240, 192, 0.3)';\r\n        \r\n        skipButton.addEventListener('click', () => {\r\n            this.skipSequence();\r\n        });\r\n        \r\n        document.body.appendChild(skipButton);\r\n        this.skipButton = skipButton;\r\n    }\r\n    \r\n    skipSequence() {\r\n        console.log(\"Skipping intro sequence\");\r\n        \r\n        // End the sequence immediately\r\n        this.completeSequence();\r\n        \r\n        // Make sure the ship is properly docked\r\n        if (this.spaceship) {\r\n            // Ensure the ship is docked\r\n            this.spaceship.isDocked = true;\r\n            \r\n            // Set ship to proper docking position if necessary\r\n            if (this.spaceship.mesh) {\r\n                // Position near stargate (these values should match your stargate position)\r\n                this.spaceship.mesh.position.set(22000, 5000, 0);\r\n            }\r\n        }\r\n        \r\n        // Show the stargate UI terminal\r\n        // Access the game instance to use its docking functionality\r\n        if (window.gameInstance && \r\n            window.gameInstance.controls && \r\n            window.gameInstance.controls.dockingSystem) {\r\n            \r\n            // Explicitly show stargate UI\r\n            setTimeout(() => {\r\n                window.gameInstance.controls.dockingSystem.dockWithStargate();\r\n                console.log(\"Stargate UI shown after skip\");\r\n            }, 100);\r\n        }\r\n    }\r\n    \r\n    completeSequence() {\r\n        console.log(\"Intro sequence complete\");\r\n        this.isPlaying = false;\r\n        \r\n        // Remove warp tunnel from scene\r\n        this.scene.remove(this.warpTunnel);\r\n        \r\n        // Hide dreadnought\r\n        this.starDreadnought.ship.visible = false;\r\n        \r\n        // Enable skip button for next time\r\n        this.skipEnabled = true;\r\n        \r\n        // Remove shield effect from player\r\n        if (this.playerShieldEffect) {\r\n            this.spaceship.mesh.remove(this.playerShieldEffect);\r\n            this.playerShieldEffect = null;\r\n        }\r\n        \r\n        // Remove skip button if it exists\r\n        if (this.skipButton) {\r\n            document.body.removeChild(this.skipButton);\r\n            this.skipButton = null;\r\n        }\r\n        \r\n        // Remove overlay from DOM completely\r\n        if (this.overlay) {\r\n            document.body.removeChild(this.overlay);\r\n            this.overlay = null;\r\n        }\r\n        \r\n        // Remove dialogue box if it exists\r\n        if (this.dialogueBox) {\r\n            document.body.removeChild(this.dialogueBox);\r\n            this.dialogueBox = null;\r\n        }\r\n        \r\n        // Clear typing interval if running\r\n        if (this.typeInterval) {\r\n            clearInterval(this.typeInterval);\r\n            this.typeInterval = null;\r\n        }\r\n        \r\n        // Make sure player ship is visible but DO NOT reset position\r\n        if (this.spaceship && this.spaceship.mesh) {\r\n            this.spaceship.mesh.visible = true;\r\n            \r\n            // IMPORTANT: Make sure ship is properly undocked\r\n            if (this.spaceship.isDocked) {\r\n                console.log(\"Forcing ship to undocked state after intro sequence\");\r\n                this.spaceship.isDocked = false;\r\n            }\r\n            \r\n            // Log the final player position for debugging\r\n            console.log(\"Player final position:\", \r\n                this.spaceship.mesh.position.x, \r\n                this.spaceship.mesh.position.y, \r\n                this.spaceship.mesh.position.z\r\n            );\r\n        }\r\n        \r\n        // Call completion callback if provided\r\n        if (this.onComplete && typeof this.onComplete === 'function') {\r\n            // Use setTimeout to make sure this executes after the animation frame\r\n            setTimeout(() => {\r\n                console.log(\"Executing intro sequence completion callback\");\r\n                this.onComplete();\r\n            }, 100);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clean up resources when intro sequence is no longer needed\r\n     */\r\n    destroy() {\r\n        // Cancel animation frame if running\r\n        if (this.animationFrameId) {\r\n            cancelAnimationFrame(this.animationFrameId);\r\n            this.animationFrameId = null;\r\n        }\r\n        \r\n        // Clean up dialogue interval\r\n        if (this.typeInterval) {\r\n            clearInterval(this.typeInterval);\r\n            this.typeInterval = null;\r\n        }\r\n        \r\n        // Clean up DOM elements\r\n        if (this.dialogueBox && this.dialogueBox.parentNode) {\r\n            this.dialogueBox.parentNode.removeChild(this.dialogueBox);\r\n        }\r\n        \r\n        if (this.overlay && this.overlay.parentNode) {\r\n            this.overlay.parentNode.removeChild(this.overlay);\r\n        }\r\n        \r\n        // Remove skip handler\r\n        document.removeEventListener('keydown', this.skipHandler);\r\n        \r\n        // Remove portal effect from scene\r\n        if (this.portalMesh && this.portalMesh.parent) {\r\n            this.portalMesh.parent.remove(this.portalMesh);\r\n        }\r\n        if (this.portalFlare && this.portalFlare.parent) {\r\n            this.portalFlare.parent.remove(this.portalFlare);\r\n        }\r\n        \r\n        // Dispose of THREE.js objects\r\n        if (this.portalMesh) {\r\n            if (this.portalMesh.geometry) this.portalMesh.geometry.dispose();\r\n            if (this.portalMesh.material) this.portalMesh.material.dispose();\r\n        }\r\n        if (this.portalFlare) {\r\n            if (this.portalFlare.geometry) this.portalFlare.geometry.dispose();\r\n            if (this.portalFlare.material) this.portalFlare.material.dispose();\r\n        }\r\n        \r\n        // Dispose of star dreadnought resources\r\n        if (this.starDreadnought && typeof this.starDreadnought.destroy === 'function') {\r\n            this.starDreadnought.destroy();\r\n        }\r\n        \r\n        // Dispose of Tone.js sound effects\r\n        if (this.introSounds) {\r\n            Object.values(this.introSounds).forEach(sound => {\r\n                if (sound.dispose && typeof sound.dispose === 'function') {\r\n                    sound.dispose();\r\n                }\r\n            });\r\n            this.introSounds = {};\r\n        }\r\n        \r\n        // Clear references to help GC\r\n        this.scene = null;\r\n        this.camera = null;\r\n        this.spaceship = null;\r\n        this.audio = null;\r\n        this.starDreadnought = null;\r\n        this.portalMesh = null;\r\n        this.portalFlare = null;\r\n        this.portalGeometry = null;\r\n        this.portalMaterial = null;\r\n        this.dialogueWavs = [];\r\n    }\r\n} ","// perfOverlay.js - Minimal scaffold for performance overlay toggle (F3)\r\n// Feature flag default ON per V07_TIGHTENING\r\n\r\nconst FEATURE_FLAG = true; // V07_TIGHTENING default ON\r\n\r\nexport class PerfOverlay {\r\n  constructor() {\r\n    // Global perf sink\r\n    if (!window.__perf) {\r\n      window.__perf = {\r\n        enabled: false,\r\n        fps: 0,\r\n        simMs: 0,\r\n        renderMs: 0,\r\n        drawCalls: 0,\r\n        visibleInstances: 0,\r\n        pools: { hits: 0, misses: 0 },\r\n        gc: 0,\r\n        systems: {},\r\n      };\r\n    }\r\n\r\n    this.panel = null;\r\n    this.lastUpdate = 0;\r\n    this.updateHzMs = 500; // ~2Hz\r\n\r\n    // optional GC observer (best-effort)\r\n    try {\r\n      if ('PerformanceObserver' in window && performance && performance.observe) {\r\n        // no-op, older API; fallback below\r\n      }\r\n      if ('PerformanceObserver' in window) {\r\n        const obs = new PerformanceObserver((list) => {\r\n          for (const entry of list.getEntries()) {\r\n            if (entry.entryType === 'gc') {\r\n              if (!window.__perf.gc) window.__perf.gc = 0;\r\n              window.__perf.gc += 1;\r\n            }\r\n          }\r\n        });\r\n        obs.observe({ entryTypes: ['gc'] });\r\n        this._gcObserver = obs;\r\n      }\r\n    } catch {}\r\n\r\n    if (FEATURE_FLAG) {\r\n      // Hook F3 toggle\r\n      document.addEventListener('keydown', (e) => {\r\n        if (e.key === 'F3') {\r\n          this.toggle();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  toggle() {\r\n    window.__perf.enabled = !window.__perf.enabled;\r\n    if (window.__perf.enabled) {\r\n      this.ensurePanel();\r\n      this.renderOnce();\r\n    } else {\r\n      this.destroy();\r\n    }\r\n  }\r\n\r\n  ensurePanel() {\r\n    if (this.panel) return;\r\n    const el = document.createElement('div');\r\n    el.id = 'perf-overlay';\r\n    el.style.position = 'fixed';\r\n    el.style.top = '8px';\r\n    el.style.right = '8px';\r\n    el.style.minWidth = '220px';\r\n    el.style.maxWidth = '320px';\r\n    el.style.background = 'rgba(0,0,0,0.6)';\r\n    el.style.color = '#9ef7ff';\r\n    el.style.fontFamily = 'monospace';\r\n    el.style.fontSize = '12px';\r\n    el.style.lineHeight = '1.4';\r\n    el.style.padding = '8px 10px';\r\n    el.style.border = '1px solid rgba(158,247,255,0.3)';\r\n    el.style.borderRadius = '6px';\r\n    el.style.zIndex = '99999';\r\n    el.style.pointerEvents = 'none';\r\n    el.innerHTML = this.renderContent();\r\n    document.body.appendChild(el);\r\n    this.panel = el;\r\n\r\n    // Start a lightweight interval to update ~2Hz\r\n    this.interval = setInterval(() => this.renderOnce(), this.updateHzMs);\r\n  }\r\n\r\n  renderOnce() {\r\n    if (!this.panel) return;\r\n    this.panel.innerHTML = this.renderContent();\r\n  }\r\n\r\n  renderContent() {\r\n    const p = window.__perf;\r\n    const systems = p.systems ? Object.entries(p.systems).slice(0, 8) : [];\r\n    const sysHtml = systems.map(([k,v]) => `<div>${k}: ${Number(v).toFixed(2)} ms</div>`).join('');\r\n    return (\r\n      `<div style=\\\"opacity:.85\\\">` +\r\n      `<div><b>Perf Overlay</b> (F3)</div>` +\r\n      `<div>FPS: ${Math.round(p.fps || 0)}</div>` +\r\n      `<div>Sim: ${Number(p.simMs || 0).toFixed(2)} ms</div>` +\r\n      `<div>Render: ${Number(p.renderMs || 0).toFixed(2)} ms</div>` +\r\n      `<div>DrawCalls: ${p.drawCalls || 0}</div>` +\r\n      `<div>Instances: ${p.visibleInstances || 0}</div>` +\r\n      `<div>Pool hits/misses: ${(p.pools?.hits||0)} / ${(p.pools?.misses||0)}</div>` +\r\n      `<div>GC: ${p.gc || 0}</div>` +\r\n      `<div style=\\\"margin-top:6px; border-top:1px solid rgba(158,247,255,.2)\\\">` +\r\n      `<div><b>Systems</b></div>` + sysHtml +\r\n      `</div>` +\r\n      `</div>`\r\n    );\r\n  }\r\n\r\n  destroy() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval);\r\n      this.interval = null;\r\n    }\r\n    if (this._gcObserver && this._gcObserver.disconnect) {\r\n      this._gcObserver.disconnect();\r\n      this._gcObserver = null;\r\n    }\r\n    if (this.panel && this.panel.parentNode) {\r\n      this.panel.parentNode.removeChild(this.panel);\r\n    }\r\n    this.panel = null;\r\n  }\r\n}\r\n\r\nexport function initPerfOverlay() {\r\n  // Create once, attach to window for future hooks\r\n  if (!window.__perfOverlay) {\r\n    window.__perfOverlay = new PerfOverlay();\r\n  }\r\n  return window.__perfOverlay;\r\n}\r\n\r\n\r\n","// main.js - Main entry point for the game\r\n\r\n// Global debug flag - set to true for development\r\nwindow.DEBUG_MODE = false;\r\n\r\nimport * as THREE from 'three';\r\nimport { Renderer } from './modules/renderer.js';\r\nimport { Spaceship } from './modules/spaceship.js';\r\nimport { Physics } from './modules/physics.js';\r\nimport { Environment } from './modules/environment.js';\r\nimport { Controls } from './modules/controls.js';\r\nimport { UI } from './modules/ui.js';\r\nimport { AudioManager } from './modules/audio.js';\r\nimport { Combat } from './modules/combat.js';\r\nimport { MessageBus } from './core/messageBus.js';\r\nimport { IntroSequence } from './modules/introSequence.js';\r\nimport { DifficultyManager } from './core/difficultyManager.js';\r\nimport { getGlobalPoolRegistry } from './modules/pooling/PoolRegistry.js';\r\nimport { initPerfOverlay } from './modules/debug/perfOverlay.js';\r\n\r\n// Global vector pool for reusing vector objects\r\nwindow.vectorPool = {\r\n    pool: [],\r\n    maxSize: 100,\r\n    \r\n    get: function(x = 0, y = 0, z = 0) {\r\n        if (this.pool.length > 0) {\r\n            return this.pool.pop().set(x, y, z);\r\n        }\r\n        return new THREE.Vector3(x, y, z);\r\n    },\r\n    \r\n    release: function(vector) {\r\n        if (this.pool.length < this.maxSize) {\r\n            this.pool.push(vector);\r\n        }\r\n    }\r\n};\r\n\r\nclass Game {\r\n    constructor() {\r\n        console.log(\"Initializing game...\");\r\n        \r\n        // Make game instance globally accessible for emergency access\r\n        window.game = this;\r\n        \r\n        // Set up global message bus for cross-system communication\r\n        window.mainMessageBus = new MessageBus();\r\n        window.mainMessageBus.subscribe('game.over', this.gameOver.bind(this));\r\n        \r\n        try {\r\n            // Create audio manager first but don't initialize yet\r\n            console.log(\"Creating audio manager...\");\r\n            this.audio = new AudioManager();\r\n            \r\n            // Initialize renderer first\r\n            console.log(\"Creating renderer...\");\r\n            this.renderer = new Renderer();\r\n            console.log(\"Renderer created, getting scene...\");\r\n            \r\n            // Access scene and camera directly rather than through getters\r\n            this.scene = this.renderer.scene;\r\n            this.camera = this.renderer.camera;\r\n            \r\n            console.log(\"Scene and camera references obtained\");\r\n            \r\n            // Share camera reference with scene for easy access by other components\r\n            this.scene.camera = this.camera;\r\n            \r\n            // Initialize essential components needed for the start screen\r\n            console.log(\"Initializing essential components...\");\r\n            \r\n            // Initialize physics\r\n            this.physics = new Physics(this.scene);\r\n            \r\n            // Set camera reference in physics\r\n            this.physics.setCamera(this.camera);\r\n            \r\n            // Initialize environment (essential components only)\r\n            this.environment = new Environment(this.scene);\r\n            \r\n            // Initialize spaceship\r\n            console.log(\"Creating spaceship...\");\r\n            this.spaceship = new Spaceship(this.scene);\r\n            \r\n            // Set spaceship reference in physics\r\n            this.physics.setSpaceship(this.spaceship);\r\n            \r\n            // Set spaceship reference in environment (for VibeVerse portals)\r\n            this.environment.setSpaceship(this.spaceship);\r\n            \r\n            // Initialize UI\r\n            this.ui = new UI(this.spaceship, this.environment);\r\n            \r\n            // Share audio reference with UI for sound-based components\r\n            this.ui.setAudio(this.audio);\r\n            \r\n            // Initialize controls last, as it depends on other components\r\n            this.controls = new Controls(this.spaceship, this.physics, this.environment, this.ui);\r\n            \r\n            // Share controls reference with UI for bidirectional communication\r\n            this.ui.setControls(this.controls);\r\n            \r\n            // Initialize settings\r\n            console.log(\"Initializing settings...\");\r\n            this.ui.initializeSettings(this);\r\n            \r\n            // Game state\r\n            this.isGameOver = false;\r\n            this.lastUpdateTime = performance.now();\r\n            this.frameCount = 0;\r\n            this.currentFPS = 0;\r\n            this.introSequenceActive = false; // Flag to prevent player control during intro\r\n            this.gameTime = 0; // Track total game time in seconds\r\n\r\n            // Perf overlay & sink\r\n            initPerfOverlay();\r\n            if (!window.__perf) window.__perf = {};\r\n            window.__perf.enabled = false;\r\n            \r\n            // Detect mobile device\r\n            this.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||\r\n                           (window.matchMedia && window.matchMedia('(max-width: 768px)').matches);\r\n            \r\n            // Frame rate cap (defaults to auto/monitor refresh rate)\r\n            this.frameRateCap = 0; // Will be updated by settings or refresh rate detection\r\n            this.warmupFrames = 10; // Number of frames to skip for timing stabilization\r\n            this.currentWarmupFrame = 0;\r\n            this.performanceStable = false;\r\n            \r\n            // Apply settings if available (restored block)\r\n            if (this.ui && this.ui.settings) {\r\n                this.applyFrameRateSettings();\r\n            }\r\n            \r\n            // Time tracking for frame rate cap and FPS calculation\r\n            this.lastFrameTime = 0;\r\n            this.actualFrameTime = 0;\r\n            this.frameStartTime = 0;\r\n            this.accumulator = 0;\r\n            this.fixedDeltaTime = 1/60; // Fixed 60 Hz update rate\r\n            \r\n            // FPS averaging for smoother display\r\n            this.fpsBuffer = [];\r\n            this.fpsBufferSize = 15; // Smaller buffer for more responsive updates\r\n            \r\n            // Initialize difficulty manager \r\n            console.log(\"Initializing difficulty manager...\");\r\n            this.initializeDifficultyManager();\r\n            \r\n            // Register event handlers\r\n            this.setupEventHandlers();\r\n            \r\n            // Pre-bind animate method to avoid creating a new function every frame\r\n            this.boundAnimate = this.animate.bind(this);\r\n            \r\n            // Reusable deltaTime variable to avoid creating new variables in hot path\r\n            this.deltaTime = 0;\r\n            \r\n            // Start the initialization sequence\r\n            this.initializeGameSequence();\r\n            \r\n        } catch (error) {\r\n            console.error(\"Error in game initialization:\", error);\r\n            throw error; // Re-throw to show in the UI\r\n        }\r\n    }\r\n    \r\n    // Initialize game in sequence, showing start screen first and loading non-essentials after\r\n    async initializeGameSequence() {\r\n        try {\r\n            console.log(\"Starting game initialization sequence...\");\r\n            \r\n            // Add a small delay to let browser stabilize after page load\r\n            await new Promise(resolve => setTimeout(resolve, 100));\r\n            \r\n            // Resume audio context if needed (browser autoplay policy)\r\n            if (this.audio && this.audio.audioContext && this.audio.audioContext.state === 'suspended') {\r\n                try {\r\n                    this.audio.resumeAudioContext();\r\n                } catch (e) {\r\n                    console.log(\"Audio context couldn't be resumed yet, will try again after user interaction\");\r\n                }\r\n            }\r\n            \r\n            // Show the start screen immediately\r\n            if (this.ui && this.ui.startScreen) {\r\n                console.log(\"Showing start screen\");\r\n                this.ui.startScreen.show();\r\n            } else {\r\n                console.error(\"Start screen not found, falling back to default behavior\");\r\n                this.fallbackToDefaultBehavior();\r\n            }\r\n            \r\n            // Start game loop with warm-up frames\r\n            console.log(\"Starting game loop with warm-up frames\");\r\n            requestAnimationFrame(this.boundAnimate);\r\n            \r\n            // Initialize remaining systems in the background after start screen is shown\r\n            this.initializeRemainingSystemsAsync();\r\n            \r\n            console.log(\"Game initialization sequence completed successfully\");\r\n        } catch (error) {\r\n            console.error(\"Error during game initialization sequence:\", error);\r\n            \r\n            // Show error in UI if possible\r\n            if (this.ui && this.ui.showError) {\r\n                this.ui.showError(\"Failed to initialize game: \" + error.message);\r\n            } else {\r\n                alert(\"Failed to initialize game: \" + error.message);\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Initialize remaining systems asynchronously after showing the start screen\r\n    async initializeRemainingSystemsAsync() {\r\n        try {\r\n            // Start loading audio in the background\r\n            this.loadAudioAsync();\r\n            \r\n            // Initialize combat systems asynchronously\r\n            console.log(\"Initializing combat module asynchronously...\");\r\n            if (!this.combat) {\r\n                this.combat = new Combat(this.scene, this.spaceship);\r\n                \r\n                // Ensure the ECS world in combat is properly initialized\r\n                if (this.combat.world) {\r\n                    console.log(\"Combat ECS world successfully created\");\r\n                } else {\r\n                    console.log(\"Waiting for combat ECS world to initialize...\");\r\n                    // Add a check to ensure the player entity exists\r\n                    setTimeout(() => {\r\n                        if (this.combat.world && this.combat.playerEntity) {\r\n                            console.log(\"Combat ECS world and player entity initialized after delay\");\r\n                        } else {\r\n                            console.warn(\"Combat ECS world or player entity not available after delay, recreating...\");\r\n                            if (this.combat.createPlayerReferenceEntity) {\r\n                                this.combat.createPlayerReferenceEntity();\r\n                            }\r\n                        }\r\n                    }, 1000);\r\n                }\r\n            }\r\n            \r\n            // Initialize common object pools after start screen is shown\r\n            setTimeout(() => {\r\n                this.initializeObjectPools();\r\n                \r\n                // Pre-warm essential shaders and projectile assets after start screen is shown\r\n                this.preWarmBasicShaders();\r\n            }, 100);\r\n        } catch (error) {\r\n            console.error(\"Error initializing remaining systems:\", error);\r\n        }\r\n    }\r\n    \r\n    // Load audio asynchronously after showing the start screen\r\n    async loadAudioAsync() {\r\n        try {\r\n            if (this.audio) {\r\n                // Initialize audio in the background\r\n                console.log(\"Initializing audio system asynchronously...\");\r\n                this.audio.initialize().then(() => {\r\n                    console.log(\"Audio system initialization complete\");\r\n                }).catch(error => {\r\n                    console.error(\"Error initializing audio:\", error);\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error loading audio:\", error);\r\n        }\r\n    }\r\n    \r\n    // Pre-warm only the most essential shaders needed for immediate gameplay\r\n    preWarmBasicShaders() {\r\n        console.log(\"Pre-warming essential shaders...\");\r\n        \r\n        // Create template projectile geometry and materials\r\n        this.projectileGeometry = new THREE.SphereGeometry(1.8, 12, 12);\r\n        this.projectileMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x00ffff,\r\n            emissive: 0x00ffff,\r\n            emissiveIntensity: 5,\r\n            metalness: 0.7,\r\n            roughness: 0.3\r\n        });\r\n        \r\n        // Create simple dummy objects to warm up the renderer\r\n        const dummyProjectile = new THREE.Mesh(this.projectileGeometry, this.projectileMaterial);\r\n        \r\n        // Add to scene temporarily\r\n        this.scene.add(dummyProjectile);\r\n        \r\n        // Force shader compilation for better performance\r\n            this.renderer.renderer.compile(this.scene, this.camera);\r\n        \r\n        // Remove dummy object after compilation\r\n            this.renderer._withGuard(() => this.scene.remove(dummyProjectile));\r\n        \r\n        console.log(\"Essential shaders pre-warmed\");\r\n    }\r\n    \r\n    // Initialize object pools for commonly created objects\r\n    initializeObjectPools() {\r\n        console.log(\"Initializing object pools...\");\r\n        \r\n        // Hit effect pool\r\n        window.objectPool.createPool('hitEffect', () => {\r\n            // Create geometry only once\r\n            if (!this.hitEffectGeometry) {\r\n                this.hitEffectGeometry = new THREE.SphereGeometry(1, 8, 8);\r\n            }\r\n            \r\n            // Create a default material that will be customized on get()\r\n            const material = new THREE.MeshBasicMaterial({\r\n                color: 0xffffff,\r\n                transparent: true,\r\n                opacity: 0.8\r\n            });\r\n            \r\n            // Create the mesh\r\n            const mesh = new THREE.Mesh(this.hitEffectGeometry, material);\r\n            \r\n            // Return an object with reset and clear methods\r\n            return {\r\n                mesh: mesh,\r\n                material: material,\r\n                \r\n                // Reset function for when the object is retrieved from the pool\r\n                reset: function(color = 0xff5500, size = 1) {\r\n                    this.material.color.set(color);\r\n                    this.material.opacity = 0.8;\r\n                    this.mesh.scale.set(size, size, size);\r\n                    this.mesh.visible = true;\r\n                },\r\n                \r\n                // Clear function for when the object is returned to the pool\r\n                clear: function() {\r\n                    if (this.mesh.parent) {\r\n                        this.mesh.parent.remove(this.mesh);\r\n                    }\r\n                    this.mesh.visible = false;\r\n                }\r\n            };\r\n        }, 20, 100); // Pre-create 20, max 100\r\n        \r\n        // Projectile pool\r\n        window.objectPool.createPool('projectile', () => {\r\n            // Create projectile geometry only once\r\n            if (!this.projectileGeometry) {\r\n                this.projectileGeometry = new THREE.SphereGeometry(2, 8, 8);\r\n            }\r\n            \r\n            // Create a default material that will be customized on get()\r\n            const material = new THREE.MeshStandardMaterial({\r\n                color: 0x00ffff,\r\n                emissive: 0x00ffff,\r\n                emissiveIntensity: 1,\r\n                metalness: 0.3,\r\n                roughness: 0.2\r\n            });\r\n            \r\n            // Create the mesh\r\n            const mesh = new THREE.Mesh(this.projectileGeometry, material);\r\n            \r\n            // Return an object with reset and clear methods\r\n            return {\r\n                mesh: mesh,\r\n                material: material,\r\n                velocity: new THREE.Vector3(),\r\n                \r\n                // Reset function for when the object is retrieved from the pool\r\n                reset: function(position, direction, speed = 500, color = 0x00ffff) {\r\n                    // Set position\r\n                    this.mesh.position.copy(position);\r\n                    \r\n                    // Set velocity based on direction and speed\r\n                    this.velocity.copy(direction).normalize().multiplyScalar(speed);\r\n                    \r\n                    // Set color\r\n                    this.material.color.set(color);\r\n                    this.material.emissive.set(color);\r\n                    \r\n                    // Make visible\r\n                    this.mesh.visible = true;\r\n                },\r\n                \r\n                // Clear function for when the object is returned to the pool\r\n                clear: function() {\r\n                    if (this.mesh.parent) {\r\n                        this.mesh.parent.remove(this.mesh);\r\n                    }\r\n                    this.mesh.visible = false;\r\n                    this.velocity.set(0, 0, 0);\r\n                }\r\n            };\r\n        }, 50, 200); // Pre-create 50, max 200\r\n        \r\n        // Particle effect pool\r\n        window.objectPool.createPool('particleEffect', () => {\r\n            // Create particles\r\n            const particleCount = 20;\r\n            const particles = new THREE.BufferGeometry();\r\n            \r\n            // Use typed arrays for better performance\r\n            const positions = new Float32Array(particleCount * 3);\r\n            const colors = new Float32Array(particleCount * 3);\r\n            \r\n            // Initialize particle positions and colors\r\n            for (let i = 0; i < particleCount; i++) {\r\n                const i3 = i * 3;\r\n                // All particles start at origin\r\n                positions[i3] = 0;\r\n                positions[i3 + 1] = 0;\r\n                positions[i3 + 2] = 0;\r\n                \r\n                // Default white color\r\n                colors[i3] = 1;\r\n                colors[i3 + 1] = 1;\r\n                colors[i3 + 2] = 1;\r\n            }\r\n            \r\n            // Set particle attributes\r\n            particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n            particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n            \r\n            // Create particle material\r\n            const particleMaterial = new THREE.PointsMaterial({\r\n                size: 3,\r\n                transparent: true,\r\n                opacity: 0.8,\r\n                vertexColors: true,\r\n                blending: THREE.AdditiveBlending\r\n            });\r\n            \r\n            // Create particle system\r\n            const particleSystem = new THREE.Points(particles, particleMaterial);\r\n            \r\n            // Return an object with reset and clear methods\r\n            return {\r\n                system: particleSystem,\r\n                velocities: new Float32Array(particleCount * 3),\r\n                lifetime: new Float32Array(particleCount),\r\n                maxLifetime: new Float32Array(particleCount),\r\n                \r\n                // Reset function for when the object is retrieved from the pool\r\n                reset: function(position, color = new THREE.Color(1, 1, 1), size = 3, particleSpeed = 20) {\r\n                    // Set particle system position\r\n                    this.system.position.copy(position);\r\n                    \r\n                    // Get position and color arrays\r\n                    const positions = this.system.geometry.attributes.position.array;\r\n                    const colors = this.system.geometry.attributes.color.array;\r\n                    \r\n                    // Set material size\r\n                    this.system.material.size = size;\r\n                    \r\n                    // Initialize particles\r\n                    for (let i = 0; i < particleCount; i++) {\r\n                        const i3 = i * 3;\r\n                        \r\n                        // Reset particle position to center\r\n                        positions[i3] = 0;\r\n                        positions[i3 + 1] = 0;\r\n                        positions[i3 + 2] = 0;\r\n                        \r\n                        // Set particle color\r\n                        colors[i3] = color.r;\r\n                        colors[i3 + 1] = color.g;\r\n                        colors[i3 + 2] = color.b;\r\n                        \r\n                        // Random velocity in all directions\r\n                        const theta = Math.random() * Math.PI * 2;\r\n                        const phi = Math.random() * Math.PI;\r\n                        \r\n                        this.velocities[i3] = Math.sin(phi) * Math.cos(theta) * (Math.random() * particleSpeed);\r\n                        this.velocities[i3 + 1] = Math.sin(phi) * Math.sin(theta) * (Math.random() * particleSpeed);\r\n                        this.velocities[i3 + 2] = Math.cos(phi) * (Math.random() * particleSpeed);\r\n                        \r\n                        // Random lifetime\r\n                        this.maxLifetime[i] = 0.5 + Math.random() * 1.5; // 0.5 to 2 seconds\r\n                        this.lifetime[i] = this.maxLifetime[i];\r\n                    }\r\n                    \r\n                    // Update attributes\r\n                    this.system.geometry.attributes.position.needsUpdate = true;\r\n                    this.system.geometry.attributes.color.needsUpdate = true;\r\n                    \r\n                    // Make visible and add to scene\r\n                    this.system.visible = true;\r\n                    if (!this.system.parent) {\r\n                        window.game.scene.add(this.system);\r\n                    }\r\n                    \r\n                    // Start the animation\r\n                    this.animate();\r\n                },\r\n                \r\n                // Animation function\r\n                animate: function() {\r\n                    if (!this.system.visible) return;\r\n                    \r\n                    // Get position and color arrays\r\n                    const positions = this.system.geometry.attributes.position.array;\r\n                    const colors = this.system.geometry.attributes.color.array;\r\n                    \r\n                    // Track if any particles are still alive\r\n                    let anyAlive = false;\r\n                    \r\n                    // Update particles\r\n                    for (let i = 0; i < particleCount; i++) {\r\n                        const i3 = i * 3;\r\n                        \r\n                        // Update lifetime\r\n                        this.lifetime[i] -= 0.016; // Approximate 60fps\r\n                        \r\n                        // Skip dead particles\r\n                        if (this.lifetime[i] <= 0) continue;\r\n                        \r\n                        anyAlive = true;\r\n                        \r\n                        // Move particle based on velocity\r\n                        positions[i3] += this.velocities[i3] * 0.016;\r\n                        positions[i3 + 1] += this.velocities[i3 + 1] * 0.016;\r\n                        positions[i3 + 2] += this.velocities[i3 + 2] * 0.016;\r\n                        \r\n                        // Update alpha based on lifetime\r\n                        const lifeRatio = this.lifetime[i] / this.maxLifetime[i];\r\n                        this.system.material.opacity = lifeRatio;\r\n                    }\r\n                    \r\n                    // Update attributes\r\n                    this.system.geometry.attributes.position.needsUpdate = true;\r\n                    \r\n                    // Continue animation if particles are still alive\r\n                    if (anyAlive) {\r\n                        requestAnimationFrame(this.animate.bind(this));\r\n                    } else {\r\n                        this.clear();\r\n                    }\r\n                },\r\n                \r\n                // Clear function for when the object is returned to the pool\r\n                clear: function() {\r\n                    if (this.system.parent) {\r\n                        this.system.parent.remove(this.system);\r\n                    }\r\n                    this.system.visible = false;\r\n                }\r\n            };\r\n        }, 10, 50); // Pre-create 10, max 50\r\n        \r\n        console.log(\"Object pools initialized\");\r\n    }\r\n    \r\n    startDocked() {\r\n        // Start the game docked with the stargate for tutorial/intro\r\n        // Make sure the ship is already docked\r\n        if (this.spaceship) {\r\n            // Ensure the ship is docked\r\n            if (!this.spaceship.isDocked) {\r\n        this.spaceship.dock();\r\n            }\r\n        }\r\n        \r\n        // Show stargate UI after a short delay\r\n        setTimeout(() => {\r\n            if (this.controls && this.controls.dockingSystem) {\r\n                // Just show stargate UI without changing state\r\n                this.controls.dockingSystem.dockWithStargate();\r\n                console.log(\"Stargate UI shown\");\r\n            } else {\r\n                console.error(\"Controls or dockingSystem not available\");\r\n            }\r\n        }, 500);\r\n    }\r\n    \r\n    /**\r\n     * Initialize the intro sequence\r\n     */\r\n    initIntroSequence() {\r\n        console.log(\"Initializing intro sequence...\");\r\n        \r\n        // Create intro sequence instance\r\n        this.introSequence = new IntroSequence(\r\n            this.scene,\r\n            this.camera,\r\n            this.spaceship,\r\n            this.audio\r\n        );\r\n        \r\n        // Store original camera and player positions\r\n        this.originalCameraPosition = this.camera.position.clone();\r\n        this.originalCameraRotation = this.camera.rotation.clone();\r\n        \r\n        console.log(\"Intro sequence initialized\");\r\n    }\r\n    \r\n    /**\r\n     * Start the intro sequence\r\n     */\r\n    startIntroSequence() {\r\n        if (!this.introSequence) {\r\n            this.initIntroSequence();\r\n        }\r\n        \r\n        console.log(\"Starting intro sequence...\");\r\n        this.introSequenceActive = true; // Mark intro as active to prevent player control\r\n        \r\n        // Freeze all enemies during intro sequence\r\n        if (this.combat && this.combat.world && this.combat.enemySystem) {\r\n            console.log(\"Freezing all enemies for intro sequence\");\r\n            this.combat.enemySystem.freezeAllEnemies();\r\n        } else if (window.game && window.game.ecsWorld && window.game.ecsWorld.enemySystem) {\r\n            console.log(\"Freezing all enemies via global reference for intro sequence\");\r\n            window.game.ecsWorld.enemySystem.freezeAllEnemies();\r\n        }\r\n        \r\n        // Set initial camera position to match intro sequence starting position\r\n        // This prevents any camera flash from being visible\r\n        this.camera.position.set(0, 6000, 12000);\r\n        this.camera.lookAt(30000, 5000, 0);\r\n        \r\n        // Disable player controls\r\n        if (this.controls && this.controls.inputHandler) {\r\n            this.controls.inputHandler.enabled = false;\r\n        }\r\n        \r\n        // Explicitly hide stargate UI\r\n        if (this.ui && this.ui.stargateInterface) {\r\n            console.log(\"Explicitly hiding stargate UI before intro sequence\");\r\n            this.ui.stargateInterface.hideStargateUI();\r\n        }\r\n        \r\n        // Hide all UI elements\r\n        if (this.ui) {\r\n            this.ui.hideUI();\r\n        }\r\n        \r\n        // Make sure player ship is initially hidden\r\n        if (this.spaceship && this.spaceship.mesh) {\r\n            this.spaceship.mesh.visible = false;\r\n        }\r\n        \r\n        // Start the sequence with a completion callback\r\n        this.introSequence.startSequence(() => {\r\n            this.completeIntroSequence();\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Handle completion of the intro sequence\r\n     */\r\n    completeIntroSequence() {\r\n        console.log(\"Intro sequence completed - final phase\");\r\n        \r\n        // Unfreeze all enemies after intro sequence\r\n        if (this.combat && this.combat.world && this.combat.enemySystem) {\r\n            console.log(\"Unfreezing all enemies after intro sequence\");\r\n            this.combat.enemySystem.unfreezeAllEnemies();\r\n        } else if (window.game && window.game.ecsWorld && window.game.ecsWorld.enemySystem) {\r\n            console.log(\"Unfreezing all enemies via global reference after intro sequence\");\r\n            window.game.ecsWorld.enemySystem.unfreezeAllEnemies();\r\n        }\r\n        \r\n        // Explicitly hide stargate UI if it's visible\r\n        if (this.ui && this.ui.stargateInterface) {\r\n            console.log(\"Explicitly hiding stargate UI after intro sequence\");\r\n            this.ui.stargateInterface.hideStargateUI();\r\n        }\r\n        \r\n        // Mark intro as complete - now the player can control the ship/camera\r\n        this.introSequenceActive = false;\r\n        \r\n        // Show all UI elements AFTER marking intro inactive\r\n        if (this.ui) {\r\n            console.log(\"Showing game UI elements after intro completion\");\r\n            this.ui.showUI();\r\n        }\r\n        \r\n        // Make sure the player ship is visible and UNDOCKED\r\n        if (this.spaceship && this.spaceship.mesh) {\r\n            this.spaceship.mesh.visible = true;\r\n            \r\n            // Force undocked state\r\n            if (this.spaceship.isDocked) {\r\n                console.log(\"Forcing undocked state in completeIntroSequence\");\r\n                this.spaceship.isDocked = false;\r\n            }\r\n        }\r\n        \r\n        // NOW is when we re-enable player controls (at the very end)\r\n        if (this.controls && this.controls.inputHandler) {\r\n            console.log(\"Re-enabling player controls\");\r\n            this.controls.inputHandler.enabled = true;\r\n        }\r\n        \r\n        // Mark intro as played in local storage\r\n        localStorage.setItem('introPlayed', 'true');\r\n        \r\n        // Emit event for other systems\r\n        if (window.mainMessageBus) {\r\n            window.mainMessageBus.publish('intro.completed', {});\r\n        }\r\n        \r\n        console.log(\"Game starting after intro sequence\");\r\n    }\r\n    \r\n    setupEventHandlers() {\r\n        // Handle window resize\r\n        window.addEventListener('resize', this.handleResize);\r\n        \r\n        // Handle visibility change to pause/resume game\r\n        document.addEventListener('visibilitychange', this.handleVisibilityChange);\r\n        \r\n        // Handle keyboard events\r\n        document.addEventListener('keydown', this.handleKeyDown);\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        if (this.isGameOver) return;\r\n        \r\n        // Update horde mode survival time if active\r\n        if (this.isHordeActive) {\r\n            this.hordeSurvivalTime = performance.now() - this.hordeStartTime;\r\n        }\r\n        \r\n            // Update physics\r\n            this.physics.update(deltaTime);\r\n        \r\n        // Update spaceship\r\n        if (this.spaceship.update) {\r\n            this.spaceship.update(deltaTime);\r\n        }\r\n        \r\n        // Update difficulty manager (but not during intro sequence)\r\n        if (this.difficultyManager && !this.introSequenceActive && !this.spaceship.isDocked) {\r\n            this.difficultyManager.update(deltaTime);\r\n        }\r\n        \r\n        // Update coordinates in HUD after physics update\r\n        if (this.ui && this.ui.updateCoordinates && this.spaceship && this.spaceship.mesh) {\r\n            // Use direct position reference instead of creating a new object\r\n            const position = this.spaceship.mesh.position;\r\n            this.ui.updateCoordinates(position.x, position.y, position.z);\r\n        }\r\n        \r\n        // Calculate instantaneous FPS based on frame time\r\n        const now = performance.now();\r\n        const instantFPS = this.actualFrameTime ? 1000 / this.actualFrameTime : 60;\r\n        \r\n        // Add to FPS buffer with weighted preference to more recent readings\r\n        // This helps the FPS display stabilize faster when frame rate changes\r\n        this.fpsBuffer.push(instantFPS);\r\n        if (this.fpsBuffer.length > this.fpsBufferSize) {\r\n            this.fpsBuffer.shift(); // Remove oldest value\r\n        }\r\n        \r\n        // Use weighted average to more accurately represent current FPS\r\n        // Gives more importance to recent frames\r\n        let totalWeight = 0;\r\n        let weightedSum = 0;\r\n        \r\n        for (let i = 0; i < this.fpsBuffer.length; i++) {\r\n            // Weight increases linearly with frame index (newer frames get higher weight)\r\n            const weight = i + 1;\r\n            weightedSum += this.fpsBuffer[i] * weight;\r\n            totalWeight += weight;\r\n        }\r\n        \r\n        // Calculate weighted average for smoother display\r\n        this.currentFPS = Math.round(weightedSum / totalWeight);\r\n        \r\n        // Only update FPS display every few frames to reduce DOM operations\r\n        if (this.frameCount % 5 === 0 && this.ui && this.ui.updateFPS) {\r\n            // If capped, show cap information along with actual FPS\r\n            if (this.frameRateCap > 0) {\r\n                this.ui.updateFPS(this.currentFPS, this.frameRateCap);\r\n            } else {\r\n                this.ui.updateFPS(this.currentFPS);\r\n            }\r\n        }\r\n        \r\n        // Update controls\r\n        if (this.controls.update) {\r\n            this.controls.update();\r\n        }\r\n        \r\n        // Ensure the combat system's player entity is always up to date\r\n        if (this.combat && this.combat.updatePlayerReference) {\r\n            try {\r\n                this.combat.updatePlayerReference();\r\n            } catch (error) {\r\n                console.warn(\"Error updating player reference:\", error);\r\n            }\r\n        } else if (this.combat && !this.combat.updatePlayerReference) {\r\n            console.warn(\"Combat module does not have updatePlayerReference method\");\r\n            \r\n            // Try to initialize player entity directly if method is missing\r\n            if (this.combat.createPlayerReferenceEntity && !this.combat.playerEntity) {\r\n                console.log(\"Creating player entity directly since updatePlayerReference is not available\");\r\n                this.combat.createPlayerReferenceEntity();\r\n            }\r\n        }\r\n        \r\n        // Update combat systems - this will update the ECS world\r\n        if (this.combat && this.combat.update) {\r\n            this.combat.update(deltaTime);\r\n        }\r\n        \r\n        // Update environment\r\n        if (this.environment.update) {\r\n            this.environment.update();\r\n        }\r\n        \r\n        // Update UI\r\n        if (this.ui.update) {\r\n            this.ui.update();\r\n        }\r\n        \r\n        // Update audio\r\n        this.updateAudio();\r\n        \r\n        // Check for game over conditions\r\n        this.checkGameOver();\r\n        \r\n        // Count frames for performance monitoring\r\n        this.frameCount++;\r\n        \r\n            // Update the ECS world with the current delta time - skip during intro sequence\r\n            if (this.world && !this.introSequenceActive) {\r\n                // Fixed-step for ECS using same delta to keep in lockstep\r\n                this.world.messageBus && this.world.messageBus.fastPublish && this.world.messageBus.fastPublish('world.preUpdate', { deltaTime });\r\n                this.world.systemManager.update(deltaTime);\r\n                this.world.messageBus && this.world.messageBus.fastPublish && this.world.messageBus.fastPublish('world.postUpdate', { deltaTime });\r\n            } else if (this.world && this.introSequenceActive) {\r\n            // If intro is active, only update essential systems but not enemy systems\r\n            // This is a fallback in case freezeAllEnemies() wasn't called or doesn't work\r\n            if (this.world.entityManager && this.world.systemManager) {\r\n                for (const system of this.world.systemManager.systems) {\r\n                    // Skip enemy-related systems during intro\r\n                    if (system.constructor.name !== 'EnemySystem' && \r\n                        system.constructor.name !== 'EnemyAISystem' && \r\n                        system.constructor.name !== 'CombatSystem') {\r\n                        system.update(deltaTime);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Update game sounds based on current game state\r\n    updateAudio() {\r\n        if (!this.audio || !this.spaceship) return;\r\n        \r\n        // Handle thruster sounds based on current thrust state\r\n        if (this.spaceship.isDocked) {\r\n            // No thruster sounds when docked\r\n            this.audio.stopSound('thrust');\r\n        } else {\r\n            const isThrusting = this.spaceship.thrust.forward || \r\n                              this.spaceship.thrust.backward || \r\n                              this.spaceship.thrust.left || \r\n                              this.spaceship.thrust.right;\r\n                              \r\n            if (isThrusting) {\r\n                // Play thrust sound if not already playing\r\n                this.audio.playSound('thrust');\r\n                \r\n                // Calculate thrust intensity for volume\r\n                let thrustIntensity = 0.5; // Base level\r\n                \r\n                if (this.spaceship.thrust.forward) thrustIntensity += 0.2;\r\n                if (this.spaceship.thrust.backward) thrustIntensity += 0.1;\r\n                if (this.spaceship.thrust.left) thrustIntensity += 0.1;\r\n                if (this.spaceship.thrust.right) thrustIntensity += 0.1;\r\n                \r\n                // Boost increases volume\r\n                if (this.spaceship.thrust.boost) thrustIntensity *= 1.5;\r\n                \r\n                // Set thrust volume\r\n                this.audio.setThrustVolume(thrustIntensity);\r\n            } else {\r\n                // Stop thrust sound if no thrusters active\r\n                this.audio.stopSound('thrust');\r\n            }\r\n        }\r\n        \r\n        // Mining sound is handled by the mining system integration\r\n    }\r\n    \r\n    checkGameOver() {\r\n        // Make sure spaceship exists\r\n        if (!this.spaceship) return;\r\n        \r\n        // Don't check for game over conditions if the ship is docked\r\n        if (this.spaceship.isDocked) return;\r\n        \r\n        // Check if out of fuel and not near stargate\r\n        if (this.spaceship.fuel <= 0 && \r\n            this.controls.dockingSystem && \r\n            !this.controls.dockingSystem.nearStargate) {\r\n            this.gameOver(\"Your ship ran out of fuel\");\r\n            return;\r\n        }\r\n        \r\n        // Check for collision with sun\r\n        // Reuse a single vector for calculation instead of creating a new one\r\n        const sunPosition = window.vectorPool.get(0, 0, 0);\r\n        const distanceToSun = this.spaceship.mesh.position.distanceTo(sunPosition);\r\n        window.vectorPool.release(sunPosition);\r\n        \r\n        if (distanceToSun < 400) { // Sun collision radius\r\n            this.gameOver(\"Your ship was destroyed by the sun's heat\");\r\n            return;\r\n        }\r\n    }\r\n    \r\n    gameOver(message) {\r\n        if (this.isGameOver) return;\r\n        \r\n        console.log(\"Game over:\", message);\r\n        this.isGameOver = true;\r\n        \r\n        // Play explosion sound\r\n        if (this.audio) {\r\n            this.audio.playSound('explosion');\r\n        }\r\n        \r\n        // Show game over screen with resources collected\r\n        if (this.ui.showGameOver && this.controls.resources) {\r\n            // Add horde mode information to the game stats\r\n            const gameStats = {\r\n                resources: this.controls.resources,\r\n                hordeMode: {\r\n                    active: this.isHordeActive,\r\n                    survivalTime: this.isHordeActive ? this.getFormattedHordeSurvivalTime() : \"00:00\",\r\n                    rawSurvivalTime: this.hordeSurvivalTime || 0\r\n                }\r\n            };\r\n            \r\n            this.ui.showGameOver(gameStats, message);\r\n        }\r\n        \r\n        // Stop spaceship movement if it exists\r\n        if (this.spaceship && this.spaceship.thrust) {\r\n            this.spaceship.thrust.forward = false;\r\n            this.spaceship.thrust.backward = false;\r\n            this.spaceship.thrust.left = false;\r\n            this.spaceship.thrust.right = false;\r\n            this.spaceship.thrust.boost = false;\r\n        }\r\n        \r\n        // Stop all control inputs\r\n        if (this.controls && this.controls.inputHandler) {\r\n            this.controls.inputHandler.exitPointerLock();\r\n        }\r\n        \r\n        // Set a timeout to clean up resources after the game over screen has been shown\r\n        // This ensures all final animations and sounds can play before cleanup\r\n        this.gameOverCleanupTimeout = setTimeout(() => {\r\n            // Keep references to the UI and audio for the game over screen\r\n            const ui = this.ui;\r\n            const audio = this.audio;\r\n            \r\n            // Prevent these specific modules from being cleaned up\r\n            this.ui = null;\r\n            this.audio = null;\r\n            \r\n            // Clean up other resources\r\n            this.destroy();\r\n            \r\n            // Restore references for the game over screen\r\n            this.ui = ui;\r\n            this.audio = audio;\r\n        }, 5000); // 5 seconds delay\r\n    }\r\n    \r\n    animate(timestamp) {\r\n        // Handle warm-up frames for timing stabilization\r\n        if (this.currentWarmupFrame < this.warmupFrames) {\r\n            this.currentWarmupFrame++;\r\n            \r\n            // Initialize timing on first real frame after warm-up\r\n            if (this.currentWarmupFrame === this.warmupFrames) {\r\n                this.lastFrameTime = timestamp;\r\n                this.frameStartTime = performance.now();\r\n                this.lastUpdateTime = performance.now();\r\n                this.performanceStable = true;\r\n                console.log(`Warm-up complete, starting game loop`);\r\n            }\r\n            \r\n            // Continue warm-up\r\n            requestAnimationFrame(this.boundAnimate);\r\n            return;\r\n        }\r\n        \r\n        // Initialize frame timing if needed (fallback)\r\n        if (!this.lastFrameTime) {\r\n            this.lastFrameTime = timestamp;\r\n            this.frameStartTime = performance.now();\r\n            // Request next frame and return\r\n            requestAnimationFrame(this.boundAnimate);\r\n            return; // Skip first frame to establish baseline\r\n        }\r\n        \r\n        // Track actual frame time for FPS calculation\r\n        this.actualFrameTime = timestamp - this.lastFrameTime;\r\n        \r\n        // Frame rate cap handling\r\n        if (this.frameRateCap > 0) {\r\n            // Calculate target frame duration in milliseconds\r\n            const targetFrameTime = 1000 / this.frameRateCap;\r\n            \r\n            // Calculate elapsed time since last rendered frame\r\n            const elapsedSinceLastFrame = timestamp - this.lastFrameTime;\r\n            \r\n            // If we haven't reached the target frame time yet, skip this frame\r\n            if (elapsedSinceLastFrame < targetFrameTime - 0.5) { // Subtract small amount to account for timing imprecision\r\n                // Request next frame and return early\r\n                requestAnimationFrame(this.boundAnimate);\r\n                return;\r\n            }\r\n            \r\n            // Update timing for next frame - use the exact target time\r\n            // This helps maintain a more consistent frame rate\r\n            this.lastFrameTime += targetFrameTime;\r\n            \r\n            // If we're more than one frame behind, catch up to avoid spiraling\r\n            if (timestamp - this.lastFrameTime > targetFrameTime) {\r\n                this.lastFrameTime = timestamp;\r\n            }\r\n        } else {\r\n            // No cap, just update the frame time\r\n            this.lastFrameTime = timestamp;\r\n        }\r\n        \r\n        // Calculate delta time with better precision\r\n        const now = performance.now();\r\n        let frameDelta = Math.min(now - this.lastUpdateTime, 100) / 1000; // Clamped to 100ms\r\n        \r\n        // Performance auto-adjustment\r\n        if (this.performanceStable && this.frameCount % 60 === 0) {\r\n            this.checkPerformanceAndAdjust();\r\n        }\r\n        \r\n        // Improved fixed timestep implementation\r\n        // Use fixed timestep for consistent physics on all refresh rates\r\n        const useFixedTimestep = !this.frameRateCap || this.frameRateCap > 90 || this.frameRateCap === 0;\r\n        \r\n        if (useFixedTimestep) {\r\n            // Accumulate time for fixed timestep\r\n            this.accumulator += frameDelta;\r\n            \r\n            // Use consistent 60Hz physics timestep\r\n            const fixedTimestep = this.fixedDeltaTime || (1/60);\r\n            let updates = 0;\r\n            const maxUpdates = 4; // Allow up to 4 updates to catch up\r\n            \r\n            const simStart = performance.now();\r\n            \r\n            // Process fixed timestep updates\r\n            while (this.accumulator >= fixedTimestep && updates < maxUpdates) {\r\n                // Snapshot transforms before step for interpolation\r\n                if (this.combat && this.combat.world) {\r\n                    const ents = this.combat.world.getEntitiesWithComponents(['TransformComponent']);\r\n                    for (const e of ents) {\r\n                        const t = e.getComponent('TransformComponent');\r\n                        if (t && t.snapshotPrevious) t.snapshotPrevious();\r\n                    }\r\n                }\r\n                \r\n                // Fixed timestep update\r\n                this.update(fixedTimestep);\r\n                this.accumulator -= fixedTimestep;\r\n                updates++;\r\n            }\r\n            \r\n            const simEnd = performance.now();\r\n            \r\n            // Prevent spiral of death - if we're too far behind, reset\r\n            if (this.accumulator > fixedTimestep * 2) {\r\n                console.warn(`Resetting accumulator from ${this.accumulator} to prevent spiral`);\r\n                this.accumulator = fixedTimestep;\r\n            }\r\n            \r\n            // Calculate interpolation factor for smooth rendering\r\n            const alpha = Math.min(this.accumulator / fixedTimestep, 1.0);\r\n            \r\n            // Render with interpolation\r\n            const renderStart = performance.now();\r\n            if (this.renderer.interpolateMeshes) {\r\n                this.renderer.interpolateMeshes(alpha);\r\n            }\r\n            this.renderer.render();\r\n            const renderEnd = performance.now();\r\n\r\n            // Update perf sink\r\n            if (window.__perf) {\r\n                const frameFps = this.actualFrameTime ? (1000 / this.actualFrameTime) : 60;\r\n                window.__perf.fps = Math.round(frameFps);\r\n                window.__perf.simMs = (simEnd - simStart) || 0;\r\n                window.__perf.renderMs = (renderEnd - renderStart) || 0;\r\n            }\r\n        } else {\r\n            // For locked frame rates, use simple delta time\r\n            this.deltaTime = frameDelta;\r\n            const simStart = performance.now();\r\n            // Snapshot transforms before variable step (still provide some interpolation)\r\n            if (this.combat && this.combat.world) {\r\n                const ents = this.combat.world.getEntitiesWithComponents(['TransformComponent']);\r\n                for (const e of ents) {\r\n                    const t = e.getComponent('TransformComponent');\r\n                    t && t.snapshotPrevious && t.snapshotPrevious();\r\n                }\r\n            }\r\n            this.update(this.deltaTime);\r\n            const simEnd = performance.now();\r\n            const renderStart = performance.now();\r\n            if (this.renderer.interpolateMeshes) this.renderer.interpolateMeshes(1);\r\n            this.renderer.render();\r\n            const renderEnd = performance.now();\r\n            if (window.__perf) {\r\n                window.__perf.fps = Math.round(1 / (this.deltaTime||0.016));\r\n                window.__perf.simMs = (simEnd - simStart) || 0;\r\n                window.__perf.renderMs = (renderEnd - renderStart) || 0;\r\n            }\r\n        }\r\n        \r\n        this.lastUpdateTime = now;\r\n        \r\n        // Update frame counter\r\n        this.frameCount++;\r\n        \r\n        // Request next frame at the END of the animation cycle\r\n        requestAnimationFrame(this.boundAnimate);\r\n    }\r\n    \r\n    pause() {\r\n        // Pause game logic here\r\n        console.log('Game paused');\r\n        \r\n        // Mute audio when game is paused\r\n        if (this.audio) {\r\n            this.audio.muted = true;\r\n            for (const sound of Object.values(this.audio.sounds)) {\r\n                sound.muted = true;\r\n            }\r\n            for (const track of this.audio.music) {\r\n                track.muted = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    resume() {\r\n        // Resume game logic here\r\n        console.log('Game resumed');\r\n        this.lastUpdateTime = performance.now(); // Reset timer to avoid large delta\r\n        \r\n        // Unmute audio when game is resumed\r\n        if (this.audio && !this.audio.muted) {\r\n            for (const sound of Object.values(this.audio.sounds)) {\r\n                sound.muted = false;\r\n            }\r\n            for (const track of this.audio.music) {\r\n                track.muted = false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Create a fallback for the initOptimizedECS method that is causing errors\r\n    initOptimizedECS() {\r\n        // [PRESERVED FOR FUTURE SCALING]\r\n        // This method is a placeholder for a potential future implementation\r\n        // of the optimized ECS system using TypedArrays and Data-Oriented Design.\r\n        // \r\n        // The optimized components, systems and DataStore code are preserved \r\n        // in the codebase for future performance scaling needs, such as:\r\n        // - Massive asteroid fields (1000+ asteroids)\r\n        // - Large-scale space battles\r\n        // - Advanced particle systems\r\n        console.log(\"initOptimizedECS called - This is a placeholder implementation\");\r\n        \r\n        // Check if we need to initialize optimized systems\r\n        if (this.world && typeof this.world.getSystem !== 'function') {\r\n            console.log(\"Adding getSystem method to World class to fix compatibility issues\");\r\n            // Add getSystem method to World prototype if it doesn't exist\r\n            this.world.getSystem = function(systemType) {\r\n                if (this.systemManager && typeof this.systemManager.getSystem === 'function') {\r\n                    return this.systemManager.getSystem(systemType);\r\n                }\r\n                return null;\r\n            };\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Toggle debug mode\r\n     */\r\n    toggleDebugMode() {\r\n        window.DEBUG_MODE = !window.DEBUG_MODE;\r\n        console.log(`Debug mode ${window.DEBUG_MODE ? 'enabled' : 'disabled'}`);\r\n        \r\n        // Initialize or remove performance monitor\r\n        if (window.DEBUG_MODE) {\r\n            if (this.ui && !document.getElementById('performance-stats')) {\r\n                this.ui.initializePerformanceMonitor();\r\n            }\r\n            \r\n            // Force memory stats update\r\n            if (window.MemoryStats) {\r\n                window.MemoryStats.update();\r\n                window.MemoryStats.logReport();\r\n            }\r\n        } else {\r\n            // Remove performance monitor if it exists\r\n            const statsElement = document.getElementById('performance-stats');\r\n            if (statsElement) {\r\n                statsElement.remove();\r\n            }\r\n            \r\n            // Clear interval if it exists\r\n            if (this.ui && this.ui.statsInterval) {\r\n                clearInterval(this.ui.statsInterval);\r\n                this.ui.statsInterval = null;\r\n            }\r\n        }\r\n        \r\n        // Add global debug command to trigger intro sequence\r\n        window.playIntro = () => {\r\n            if (this.startIntroSequence) {\r\n                console.log(\"Manually triggering intro sequence\");\r\n                this.startIntroSequence();\r\n                return \"Playing intro sequence...\";\r\n            }\r\n            return \"Intro sequence not available\";\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * Initialize difficulty manager when combat system is ready\r\n     */\r\n    initializeDifficultyManager() {\r\n        // Initialize difficulty manager for dynamic difficulty scaling\r\n        this.difficultyManager = {\r\n            params: {\r\n                maxEnemies: 10,\r\n                spawnInterval: 3,\r\n                enemyHealth: 20,\r\n                enemyDamage: 15,\r\n                enemySpeed: 700\r\n            },\r\n            gameTime: 0,\r\n            currentLevel: 1,\r\n            \r\n            update: function(deltaTime) {\r\n                // Update game time in minutes\r\n                this.gameTime += deltaTime;\r\n                const minutes = this.gameTime / 60;\r\n                \r\n                // Calculate level based on minutes played\r\n                // Level increases every 3 minutes\r\n                const newLevel = Math.floor(minutes / 3) + 1;\r\n                \r\n                // Only update if level changed\r\n                if (newLevel !== this.currentLevel) {\r\n                    this.currentLevel = newLevel;\r\n                    \r\n                    // Get difficulty multiplier: 1x at level 1, 1.5x at level 2, 2x at level 3, etc.\r\n                    // Cap at level 5 (3x difficulty) for fairness\r\n                    const difficultyMultiplier = 1 + (Math.min(this.currentLevel - 1, 4) * 0.5);\r\n                    \r\n                    // Update parameters\r\n                    this.params.maxEnemies = Math.min(10 * difficultyMultiplier, 30);\r\n                    this.params.spawnInterval = Math.max(3 / difficultyMultiplier, 1);\r\n                    this.params.enemyHealth = Math.floor(20 * difficultyMultiplier);\r\n                    this.params.enemyDamage = Math.floor(15 * difficultyMultiplier);\r\n                    this.params.enemySpeed = Math.min(700 * (1 + (0.2 * (this.currentLevel - 1))), 1400);\r\n                    \r\n                    console.log(`Difficulty increased to level ${this.currentLevel} (${difficultyMultiplier}x)`);\r\n                    console.log(`Parameters: maxEnemies=${this.params.maxEnemies}, spawnInterval=${this.params.spawnInterval}`);\r\n                    console.log(`Health=${this.params.enemyHealth}, Damage=${this.params.enemyDamage}, Speed=${this.params.enemySpeed}`);\r\n                }\r\n            }\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * Activate horde mode (extreme survival challenge)\r\n     */\r\n    activateHordeMode() {\r\n        if (this.isHordeActive) return; // Already active\r\n        \r\n        console.log(\"ACTIVATING HORDE MODE - EXTREME SURVIVAL CHALLENGE\");\r\n        this.isHordeActive = true;\r\n        this.hordeStartTime = performance.now();\r\n        this.hordeSurvivalTime = 0;\r\n        \r\n        // Play an intense sound to signal the start of horde mode\r\n        if (this.audio) {\r\n            this.audio.playSound('boink');\r\n        }\r\n        \r\n        // Notify UI to update\r\n        window.mainMessageBus.publish('horde.activated', {\r\n            startTime: this.hordeStartTime\r\n        });\r\n        \r\n        // Notify the player\r\n        if (this.ui && this.ui.showNotification) {\r\n            this.ui.showNotification(\"HORDE MODE ACTIVATED - SURVIVE!\", 5000);\r\n        }\r\n        \r\n        // Force player to undock if currently docked\r\n        if (this.spaceship && this.spaceship.isDocked) {\r\n            console.log(\"Horde mode forcing undock from stargate\");\r\n            \r\n            // Undock the ship\r\n            this.spaceship.undock();\r\n            \r\n            // Notify the docking system\r\n            window.mainMessageBus.publish('player.requestUndock', {\r\n                forced: true,\r\n                reason: \"horde_mode_activation\"\r\n            });\r\n            \r\n            // CRITICAL FIX: Explicitly show the HUD after forcing undock\r\n            // Use a short delay to ensure undocking process is complete\r\n            setTimeout(() => {\r\n                console.log(\"Horde mode ensuring HUD is visible\");\r\n                if (this.ui && this.ui.showUI) {\r\n                    this.ui.showUI();\r\n                }\r\n            }, 200);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Format horde survival time as MM:SS\r\n     * @returns {string} Formatted time string\r\n     */\r\n    getFormattedHordeSurvivalTime() {\r\n        const totalSeconds = Math.floor(this.hordeSurvivalTime / 1000);\r\n        const minutes = Math.floor(totalSeconds / 60);\r\n        const seconds = totalSeconds % 60;\r\n        return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n    }\r\n    \r\n    /**\r\n     * Clean up all game resources, event listeners, and references\r\n     * Call this when the game is no longer needed to prevent memory leaks\r\n     */\r\n    destroy() {\r\n        console.log(\"Cleaning up game resources...\");\r\n        \r\n        // Cancel animation frame\r\n        if (this.boundAnimate) {\r\n            cancelAnimationFrame(this.boundAnimate);\r\n            this.boundAnimate = null;\r\n        }\r\n        \r\n        // Clear any pending timeouts\r\n        if (this.gameOverCleanupTimeout) {\r\n            clearTimeout(this.gameOverCleanupTimeout);\r\n            this.gameOverCleanupTimeout = null;\r\n        }\r\n        \r\n        // Remove event listeners\r\n        window.removeEventListener('resize', this.handleResize);\r\n        document.removeEventListener('visibilitychange', this.handleVisibilityChange);\r\n        document.removeEventListener('keydown', this.handleKeyDown);\r\n        \r\n        // Clean up modules\r\n        if (this.renderer) {\r\n            this.renderer.dispose();\r\n            this.renderer = null;\r\n        }\r\n        \r\n        if (this.audio) {\r\n            this.audio.dispose();\r\n            this.audio = null;\r\n        }\r\n        \r\n        if (this.physics) {\r\n            this.physics.dispose();\r\n            this.physics = null;\r\n        }\r\n        \r\n        if (this.spaceship) {\r\n            this.spaceship.dispose();\r\n            this.spaceship = null;\r\n        }\r\n        \r\n        if (this.environment) {\r\n            this.environment.dispose();\r\n            this.environment = null;\r\n        }\r\n        \r\n        if (this.controls) {\r\n            this.controls.dispose();\r\n            this.controls = null;\r\n        }\r\n        \r\n        if (this.ui) {\r\n            this.ui.dispose();\r\n            this.ui = null;\r\n        }\r\n        \r\n        if (this.combat) {\r\n            this.combat.dispose();\r\n            this.combat = null;\r\n        }\r\n        \r\n        if (this.introSequence) {\r\n            this.introSequence.destroy();\r\n            this.introSequence = null;\r\n        }\r\n        \r\n        // Clean up ECS world\r\n        if (this.world) {\r\n            // Destroy all entities\r\n            if (this.world.entityManager) {\r\n                const entityIds = [...this.world.entityManager.entities.keys()];\r\n                for (const entityId of entityIds) {\r\n                    this.world.destroyEntity(entityId);\r\n                }\r\n            }\r\n            \r\n            // Destroy all systems\r\n            if (this.world.systemManager) {\r\n                for (const system of this.world.systemManager.systems) {\r\n                    if (system.onDestroyed && typeof system.onDestroyed === 'function') {\r\n                        system.onDestroyed();\r\n                    }\r\n                }\r\n            }\r\n            \r\n            this.world = null;\r\n        }\r\n        \r\n        // Unsubscribe from MessageBus\r\n        if (window.mainMessageBus) {\r\n            window.mainMessageBus.unsubscribe('game.over', this.gameOver.bind(this));\r\n        }\r\n        \r\n        // Clear global references\r\n        window.game = null;\r\n        \r\n        // Clear object pools\r\n        if (window.vectorPool) {\r\n            window.vectorPool.pool = [];\r\n        }\r\n        \r\n        if (window.objectPool) {\r\n            window.objectPool.clearAllPools();\r\n        }\r\n        \r\n        // Clear references\r\n        this.scene = null;\r\n        this.camera = null;\r\n        this.fpsBuffer = [];\r\n        \r\n        console.log(\"Game resources cleaned up successfully\");\r\n    }\r\n    \r\n    /**\r\n     * Handle window resize event\r\n     * @private\r\n     */\r\n    handleResize = () => {\r\n        if (this.renderer) {\r\n            this.renderer.handleResize();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Handle visibility change event\r\n     * @private\r\n     */\r\n    handleVisibilityChange = () => {\r\n        if (document.hidden) {\r\n            this.pause();\r\n        } else {\r\n            this.resume();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Handle key down event\r\n     * @param {KeyboardEvent} e Key event\r\n     * @private\r\n     */\r\n    handleKeyDown = (e) => {\r\n        if (e.key === 'Escape' && document.pointerLockElement) {\r\n            document.exitPointerLock();\r\n        }\r\n        \r\n        // Add audio mute toggle (M key)\r\n        if (e.key.toLowerCase() === 'm' && this.audio) {\r\n            const isMuted = this.audio.toggleMute();\r\n            console.log(`Audio ${isMuted ? 'muted' : 'unmuted'}`);\r\n        }\r\n        \r\n        // Add debug mode toggle (D key + Shift)\r\n        if (e.key.toLowerCase() === 'd' && e.shiftKey) {\r\n            this.toggleDebugMode();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Apply frame rate settings based on detected refresh rate and user preferences\r\n     */\r\n    applyFrameRateSettings() {\r\n        if (!this.ui || !this.ui.settings) return;\r\n        \r\n        const settings = this.ui.settings.settings;\r\n        const refreshRate = this.ui.settings.monitorRefreshRate || 60;\r\n        \r\n        if (settings.frameRateCap === 'auto') {\r\n            // Mobile devices: cap at 60fps for battery life\r\n            if (this.isMobile) {\r\n                this.frameRateCap = 60;\r\n                console.log(`Mobile device: capping at 60fps for battery life`);\r\n            }\r\n            // High refresh displays: use adaptive approach\r\n            else if (refreshRate > 90) {\r\n                // For very high refresh rates, use fixed timestep with interpolation\r\n                this.frameRateCap = 0; // Unlimited with fixed timestep\r\n                this.fixedDeltaTime = 1/60; // Keep physics at 60Hz\r\n                console.log(`High refresh display (${refreshRate}Hz): using fixed 60Hz physics with interpolation`);\r\n            }\r\n            else if (refreshRate > 65) {\r\n                // For moderate high refresh (75-90Hz), cap at refresh rate\r\n                this.frameRateCap = refreshRate;\r\n                console.log(`Moderate high refresh (${refreshRate}Hz): capping at monitor rate`);\r\n            } else {\r\n                // Standard 60Hz display\r\n                this.frameRateCap = refreshRate;\r\n                console.log(`Standard display: matching refresh rate at ${refreshRate}Hz`);\r\n            }\r\n        } else {\r\n            // Manual setting\r\n            this.frameRateCap = parseInt(settings.frameRateCap) || 0;\r\n            \r\n            // Override for mobile if unlimited\r\n            if (this.isMobile && this.frameRateCap === 0) {\r\n                this.frameRateCap = 60;\r\n                console.log(`Mobile device: overriding unlimited to 60fps`);\r\n            }\r\n        }\r\n        \r\n        console.log(`Frame rate configuration: cap=${this.frameRateCap}, fixed timestep=${this.fixedDeltaTime * 1000}ms`);\r\n    }\r\n    \r\n    /**\r\n     * Monitor performance and auto-adjust settings if needed\r\n     */\r\n    checkPerformanceAndAdjust() {\r\n        if (!this.ui || !this.ui.settings || !this.ui.settings.settings.autoQuality) {\r\n            return;\r\n        }\r\n        \r\n        // Calculate average FPS over recent samples\r\n        if (this.fpsBuffer.length < 10) return;\r\n        \r\n        const avgFPS = this.fpsBuffer.reduce((a, b) => a + b, 0) / this.fpsBuffer.length;\r\n        const targetFPS = this.frameRateCap || 60;\r\n        const performanceRatio = avgFPS / targetFPS;\r\n        \r\n        // Auto-adjust quality if performance is poor\r\n        if (performanceRatio < 0.85) { // Less than 85% of target FPS\r\n            const currentQuality = this.ui.settings.settings.graphicalQuality;\r\n            \r\n            if (currentQuality === 'high') {\r\n                console.log(`Performance low (${Math.round(avgFPS)}fps), reducing quality to medium`);\r\n                this.ui.settings.settings.graphicalQuality = 'medium';\r\n                this.ui.settings.applyGraphicsSettings();\r\n                this.ui.settings.saveSettings();\r\n            } else if (currentQuality === 'medium') {\r\n                console.log(`Performance low (${Math.round(avgFPS)}fps), reducing quality to low`);\r\n                this.ui.settings.settings.graphicalQuality = 'low';\r\n                this.ui.settings.applyGraphicsSettings();\r\n                this.ui.settings.saveSettings();\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Fallback to old behavior if start screen is not available\r\n    fallbackToDefaultBehavior() {\r\n        // Check if intro has been played before\r\n        const introPlayed = localStorage.getItem('introPlayed') === 'true';\r\n        \r\n        if (introPlayed) {\r\n            console.log(\"Intro already played, starting in docked state\");\r\n            // Only set initial camera position if we're not doing the intro\r\n            this.camera.position.set(0, 1500, 0);\r\n            // Only start docked if we've already seen the intro\r\n            this.startDocked();\r\n        } else {\r\n            console.log(\"First time playing, preparing for intro sequence\");\r\n            // Make sure ship is docked but DON'T show the UI\r\n            if (this.spaceship && !this.spaceship.isDocked) {\r\n                this.spaceship.dock();\r\n            }\r\n            // Start intro with a small delay to ensure everything is loaded\r\n            setTimeout(() => {\r\n                this.startIntroSequence();\r\n            }, 500);\r\n        }\r\n    }\r\n}\r\n\r\n// Bridge legacy window.objectPool to unified PoolRegistry (no-alloc facade)\r\n(() => {\r\n    const registry = getGlobalPoolRegistry();\r\n    window.objectPool = {\r\n        createPool: function(type, factory, initialSize = 10, maxSize = 100) {\r\n            registry.register(type, { factory, reset: (o)=>{}, preallocate: initialSize, maxSize });\r\n        },\r\n        get: function(type, ...args) {\r\n            try { return registry.get(type, ...args); } catch (e) { console.warn(e.message); return null; }\r\n        },\r\n        release: function(type, obj) { registry.release(type, obj); },\r\n        clearAllPools: function() { registry.clearAll(); },\r\n        clearPool: function(type) { registry.clear(type); }\r\n    };\r\n})();\r\n\r\nfunction startGameMainModule() {\r\n    // Add a console message to help debug loading issues\r\n    console.log(\"DOM ready, starting game initialization...\");\r\n    \r\n    // Clear any existing WebGL contexts to ensure clean start\r\n    const canvases = document.querySelectorAll('canvas');\r\n    canvases.forEach(canvas => {\r\n        const gl = canvas.getContext('webgl') || canvas.getContext('webgl2');\r\n        if (gl && gl.getExtension('WEBGL_lose_context')) {\r\n            gl.getExtension('WEBGL_lose_context').loseContext();\r\n        }\r\n    });\r\n    \r\n    // Small delay to ensure clean GPU state\r\n    setTimeout(() => {\r\n        initializeGame();\r\n    }, 50);\r\n}\r\n\r\nfunction initializeGame() {\r\n    // Initialize the game directly instead of using a loading screen\r\n    console.log(\"Creating game instance...\");\r\n    \r\n    // Initialize the game with error handling\r\n    try {\r\n        console.log(\"Checking for THREE module availability...\");\r\n        // Log THREE availability for debugging\r\n        console.log(\"THREE available:\", typeof THREE !== 'undefined');\r\n        \r\n        window.game = new Game(); // Initialize the game\r\n        \r\n        // Preload projectile assets to prevent stutter\r\n        console.log(\"Precomputing projectile assets and warming shaders...\");\r\n        \r\n        // Create template projectile geometry and materials\r\n        window.game.projectileGeometry = new THREE.SphereGeometry(1.8, 12, 12);\r\n        window.game.projectileMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x00ffff,\r\n            emissive: 0x00ffff,\r\n            emissiveIntensity: 5,\r\n            metalness: 0.7,\r\n            roughness: 0.3\r\n        });\r\n        \r\n        // Create template glow geometry and material\r\n        window.game.projectileGlowGeometry = new THREE.SphereGeometry(2.4, 16, 16);\r\n        window.game.projectileGlowMaterial = new THREE.MeshBasicMaterial({\r\n            color: 0x00ffff,\r\n            transparent: true,\r\n            opacity: 0.4,\r\n            blending: THREE.AdditiveBlending\r\n        });\r\n        \r\n        // Precompute trail particle geometries for different sizes\r\n        console.log(\"Precomputing trail particle geometries...\");\r\n        window.game.trailParticleGeometries = [];\r\n        const numPoints = 20; // Match the number in addProjectileTrail\r\n        \r\n        for (let i = 0; i < numPoints; i++) {\r\n            const ratio = i / numPoints;\r\n            const size = 0.5 * (1 - ratio); // Match the size calculation in addProjectileTrail\r\n            const particleGeometry = new THREE.SphereGeometry(size, 8, 8);\r\n            window.game.trailParticleGeometries.push(particleGeometry);\r\n        }\r\n        \r\n        // Force shader compilation for better performance\r\n        console.log(\"Warming shaders...\");\r\n        const dummyProjectile = new THREE.Mesh(window.game.projectileGeometry, window.game.projectileMaterial);\r\n        const dummyGlow = new THREE.Mesh(window.game.projectileGlowGeometry, window.game.projectileGlowMaterial);\r\n        dummyProjectile.add(dummyGlow);\r\n        \r\n        // Add to scene temporarily\r\n        if (window.game && window.game.renderer && typeof window.game.renderer._withGuard === 'function') {\r\n            window.game.renderer._withGuard(() => window.game.scene.add(dummyProjectile));\r\n        } else {\r\n            window.game.scene.add(dummyProjectile);\r\n        }\r\n        \r\n        // Precompute and warm shaders for explosion and hit effects\r\n        console.log(\"Precomputing explosion effect assets...\");\r\n        \r\n        // Create template explosion particle geometry and materials\r\n        window.game.explosionGeometry = new THREE.SphereGeometry(1, 8, 8);\r\n        window.game.explosionMaterial = new THREE.MeshBasicMaterial({\r\n            color: 0xff5500,\r\n            transparent: true,\r\n            opacity: 0.8\r\n        });\r\n        \r\n        // Create template hit effect geometry\r\n        window.game.hitEffectGeometry = new THREE.SphereGeometry(1, 8, 8);\r\n        \r\n        // Create dummy explosion particles for shader warming\r\n        const dummyExplosionContainer = new THREE.Group();\r\n        if (window.game && window.game.renderer && typeof window.game.renderer._withGuard === 'function') {\r\n            window.game.renderer._withGuard(() => window.game.scene.add(dummyExplosionContainer));\r\n        } else {\r\n            window.game.scene.add(dummyExplosionContainer);\r\n        }\r\n        \r\n        // Create a sample of explosion particles with various sizes\r\n        const explosionParticleCount = 20;\r\n        const dummyExplosionParticles = [];\r\n        \r\n        for (let i = 0; i < explosionParticleCount; i++) {\r\n            const size = Math.random() * 2 + 1;\r\n            const particle = new THREE.Mesh(\r\n                window.game.explosionGeometry,\r\n                window.game.explosionMaterial.clone() // Clone material for individual control\r\n            );\r\n            \r\n            // Position out of view but still rendered\r\n            particle.position.set(\r\n                Math.random() * 10 - 5,\r\n                Math.random() * 10 - 5,\r\n                Math.random() * 10 - 5\r\n            );\r\n            particle.position.multiplyScalar(10).add(new THREE.Vector3(0, -10000, 0));\r\n            \r\n            // Add to container\r\n            dummyExplosionContainer.add(particle);\r\n            dummyExplosionParticles.push(particle);\r\n        }\r\n        \r\n        // Create explosion particle effect pool\r\n        window.objectPool.createPool('explosionParticle', () => {\r\n            // Reuse the geometry and create a cloned material\r\n            const material = window.game.explosionMaterial.clone();\r\n            const mesh = new THREE.Mesh(window.game.explosionGeometry, material);\r\n            \r\n            return {\r\n                mesh: mesh,\r\n                material: material,\r\n                velocity: new THREE.Vector3(),\r\n                \r\n                // Reset function when retrieved from pool\r\n                reset: function(position, size = 1.0, color = 0xff5500) {\r\n                    // Check if position is defined, use default if not\r\n                    if (!position) {\r\n                        position = new THREE.Vector3(0, 0, 0);\r\n                    }\r\n                    \r\n                    // Set position\r\n                    this.mesh.position.copy(position);\r\n                    \r\n                    // Set size\r\n                    this.mesh.scale.set(size, size, size);\r\n                    \r\n                    // Set color and opacity\r\n                    this.material.color.set(color);\r\n                    this.material.opacity = 0.8;\r\n                    \r\n                    // Make visible\r\n                    this.mesh.visible = true;\r\n                },\r\n                \r\n                // Clear function when returned to pool\r\n                clear: function() {\r\n                    if (this.mesh.parent) {\r\n                        this.mesh.parent.remove(this.mesh);\r\n                    }\r\n                    this.mesh.visible = false;\r\n                    this.velocity.set(0, 0, 0);\r\n                }\r\n            };\r\n        }, 50, 200); // Pre-create 50, max 200\r\n        \r\n        // Ensure hitEffect pool exists before using it during warming\r\n        try {\r\n            let testHit = window.objectPool.get('hitEffect');\r\n            if (!testHit) {\r\n                // Minimal factory mirroring initializeObjectPools behavior\r\n                window.objectPool.createPool('hitEffect', () => {\r\n                    const geo = window.game.hitEffectGeometry || new THREE.SphereGeometry(1, 8, 8);\r\n                    const material = new THREE.MeshBasicMaterial({ color: 0xffffff, transparent: true, opacity: 0.8 });\r\n                    const mesh = new THREE.Mesh(geo, material);\r\n                    return {\r\n                        mesh,\r\n                        material,\r\n                        reset(color = 0xff5500, size = 1) {\r\n                            this.material.color.set(color);\r\n                            this.material.opacity = 0.8;\r\n                            this.mesh.scale.set(size, size, size);\r\n                            this.mesh.visible = true;\r\n                        },\r\n                        clear() {\r\n                            if (this.mesh.parent) { this.mesh.parent.remove(this.mesh); }\r\n                            this.mesh.visible = false;\r\n                        }\r\n                    };\r\n                }, 10, 100);\r\n            } else {\r\n                // Put back the test object since we just probed\r\n                window.objectPool.release('hitEffect', testHit);\r\n            }\r\n        } catch {}\r\n\r\n        // Create variation of hit effects with different colors for shader warming\r\n        const hitEffectColors = [0xff5500, 0x3399ff, 0xff0000, 0xffff00];\r\n        const dummyHitEffects = [];\r\n        \r\n        for (const color of hitEffectColors) {\r\n            const hitEffect = window.objectPool.get('hitEffect', color, 1.5);\r\n            if (hitEffect && hitEffect.mesh) {\r\n                // Position far away but still rendered\r\n                hitEffect.mesh.position.set(0, -10100, 0);\r\n                if (window.game && window.game.renderer && typeof window.game.renderer._withGuard === 'function') {\r\n                    window.game.renderer._withGuard(() => window.game.scene.add(hitEffect.mesh));\r\n                } else {\r\n                    window.game.scene.add(hitEffect.mesh);\r\n                }\r\n                dummyHitEffects.push(hitEffect);\r\n            }\r\n        }\r\n        \r\n        // Force shader compilation for all new objects\r\n        window.game.renderer.renderer.compile(window.game.scene, window.game.camera);\r\n        \r\n        console.log(\"Cleaning up dummy objects after warming...\");\r\n        \r\n        // Remove dummy explosion container after compilation\r\n        if (window.game && window.game.renderer && typeof window.game.renderer._withGuard === 'function') {\r\n            window.game.renderer._withGuard(() => window.game.scene.remove(dummyExplosionContainer));\r\n        } else {\r\n            window.game.scene.remove(dummyExplosionContainer);\r\n        }\r\n        for (const particle of dummyExplosionParticles) {\r\n            dummyExplosionContainer.remove(particle);\r\n        }\r\n        \r\n        // Return hit effects to pool\r\n        for (const hitEffect of dummyHitEffects) {\r\n            window.objectPool.release('hitEffect', hitEffect);\r\n        }\r\n        \r\n        console.log(\"Precomputed assets and shaders warmed successfully\");\r\n        \r\n        console.log(\"Game started successfully\");\r\n    } catch (error) {\r\n        console.error(\"Error starting game:\", error);\r\n        \r\n        // Show error message to user\r\n        const errorMessage = document.createElement('div');\r\n        errorMessage.style.position = 'fixed';\r\n        errorMessage.style.top = '50%';\r\n        errorMessage.style.left = '50%';\r\n        errorMessage.style.transform = 'translate(-50%, -50%)';\r\n        errorMessage.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\r\n        errorMessage.style.color = '#ff3030';\r\n        errorMessage.style.padding = '20px';\r\n        errorMessage.style.borderRadius = '10px';\r\n        errorMessage.style.border = '1px solid #ff3030';\r\n        errorMessage.style.zIndex = '9999';\r\n        errorMessage.style.textAlign = 'center';\r\n        errorMessage.style.fontFamily = 'Courier New, monospace';\r\n        errorMessage.style.maxWidth = '80%';\r\n        \r\n        errorMessage.innerHTML = `\r\n            <h2>Error Starting Game</h2>\r\n            <p>${error.message}</p>\r\n            <p>Check the console for more details (F12).</p>\r\n            <p>You can try refreshing the page or clearing your browser cache.</p>\r\n            <button id=\"reload-button\" style=\"background: #ff3030; color: white; border: none; padding: 10px; margin-top: 20px; cursor: pointer;\">Reload Page</button>\r\n        `;\r\n        \r\n        document.body.appendChild(errorMessage);\r\n        \r\n        // Add event listener to reload button\r\n        document.getElementById('reload-button').addEventListener('click', () => {\r\n            // Add cache-busting parameter to the URL\r\n            const cacheBuster = Date.now();\r\n            window.location.href = window.location.pathname + '?cache=' + cacheBuster;\r\n        });\r\n    }\r\n}\r\n\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', startGameMainModule);\r\n} else {\r\n    // DOM is already ready (e.g., module imported after DOMContentLoaded)\r\n    startGameMainModule();\r\n} "],"names":["StarDreadnought","scene","THREE.Group","shipScale","scale","hullLength","hullWidth","hullHeight","taperFactor","hullGeometry","THREE.BufferGeometry","vertices","THREE.BufferAttribute","hullMaterial","THREE.MeshStandardMaterial","hull","THREE.Mesh","parentHull","plateLength","plateWidth","plateHeight","plateY","i","plateZ","plateGeometry","THREE.BoxGeometry","plateMaterial","plate","bridgeHeight","bridgeWidth","bridgeDepth","bridgeY","bridgeZ","bridgeMaterial","mainTowerGeometry","mainTower","secondaryTowerScale","secondaryTowerGeometry","leftTower","rightTower","bridgeTower","windowSize","windowSpacing","windowRows","windowCols","windowsStartY","windowDepth","windowMaterial","row","col","windowGeometry","window","engineRadius","engineLength","engineZ","engineY","engineHousingWidth","engineHousingHeight","engineHousingLength","housingGeometry","housingMaterial","engineHousing","engineMaterial","glowMaterial","engineRows","enginesPerRow","verticalSpacing","rowY","posX","engineGeometry","THREE.CylinderGeometry","engine","glowGeometry","THREE.SphereGeometry","glow","outerGlowGeometry","outerGlowMaterial","outerGlow","turretRadius","turretHeight","baseRadius","baseHeight","turretMaterial","portPositions","z","pos","baseGeometry","base","turretGeometry","turret","starboardPositions","trenchWidth","trenchDepth","trenchLength","trenchMaterial","centerTrenchGeometry","centerTrench","sideTrenchGeometry","portTrench","starboardTrench","domeRadius","domeY","domeZ","domeMaterial","portDomeGeometry","portDome","starboardDomeGeometry","starboardDome","beamTopRadius","beamBottomRadius","beamHeight","beamMaterial","THREE.ShaderMaterial","THREE.Color","THREE.DoubleSide","THREE.AdditiveBlending","beamGeometry","ringGeometry","THREE.RingGeometry","ringMaterial","particleGeometry","positions","colors","sizes","i3","isInnerBeam","radius","theta","height","particleMaterial","THREE.Points","canvas","context","gradient","texture","THREE.Texture","width","enginePositions","engineIndex","engineX","offsetX","offsetY","trailLength","power","index","baseSizes","progress","timeIncrement","intensity","ringScale","IntroSequence","camera","spaceship","audioManager","audioPath","getAbsolutePath","audio","e","error","destination","warpFilter","warpReverb","warpSynth","noiseFilter","noiseGain","noise","now","volumeLevel","arrivalFilter","arrivalSynth","rumbleFilter","rumbleSynth","teleportFilter","teleportChorus","teleportSynth","beamFilter","beamSynth","line","dialogueAudio","playPromise","err","charIndex","waitTime","portalGeometry","portalMaterial","particleCount","particles","angle","THREE.PointsMaterial","onComplete","currentTime","deltaTime","portalScale","t","easeInOut","start","THREE.Vector3","control","end","p0","p1","p2","position","enginePower","portalFade","shipPos","dreadPos","lookY","portalPos","portalProgress","rotateProgress","startRot","endRot","moveProgress","startPos","beyondPos","easeIn","collapseScale","lookPos","geometry","material","THREE.MeshBasicMaterial","maxOpacity","skipButton","sound","PerfOverlay","obs","list","entry","el","p","sysHtml","k","v","_a","_b","initPerfOverlay","x","y","vector","Game","__publicField","isMuted","MessageBus","AudioManager","Renderer","Physics","Environment","Spaceship","UI","Controls","resolve","Combat","dummyProjectile","color","size","direction","speed","particleSpeed","phi","anyAlive","lifeRatio","instantFPS","totalWeight","weightedSum","weight","system","thrustIntensity","sunPosition","distanceToSun","message","gameStats","ui","timestamp","targetFrameTime","frameDelta","fixedTimestep","updates","maxUpdates","simStart","ents","simEnd","alpha","renderStart","renderEnd","frameFps","track","systemType","statsElement","minutes","newLevel","difficultyMultiplier","totalSeconds","seconds","entityIds","entityId","settings","refreshRate","avgFPS","a","b","targetFPS","currentQuality","registry","getGlobalPoolRegistry","type","factory","initialSize","maxSize","args","obj","startGameMainModule","gl","initializeGame","THREE","numPoints","dummyGlow","dummyExplosionContainer","explosionParticleCount","dummyExplosionParticles","particle","testHit","geo","hitEffectColors","dummyHitEffects","hitEffect","errorMessage","cacheBuster"],"mappings":"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"}