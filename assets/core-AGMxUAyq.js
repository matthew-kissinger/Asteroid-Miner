class h{constructor(e,s){this.id=e,this.world=s,this.components=new Map,this.tags=new Set,this._isEnemy=void 0,this._isPlayer=void 0,this._isProjectile=void 0,this._isPooled=void 0}addComponent(e){return e.entity=this,this.components.set(e.constructor.name,e),e.onAttached&&e.onAttached(),this.world&&this.world.messageBus&&this.world.messageBus.publish("component.added",{entity:this,componentType:e.constructor.name,component:e}),this}removeComponent(e){const s=this.getComponent(e);if(s){s.onDetached&&s.onDetached(),s.entity=null;const t=e.name;this.components.delete(t),this.world&&this.world.messageBus&&this.world.messageBus.publish("component.removed",{entity:this,componentType:t,component:s})}return this}getComponent(e){return typeof e=="string"?this.components.get(e):this.components.get(e.name)}hasComponent(e){return typeof e=="string"?this.components.has(e):this.components.has(e.name)}_syncTagCache(){this._isEnemy=this.tags.has("enemy"),this._isPlayer=this.tags.has("player"),this._isProjectile=this.tags.has("projectile"),this._isPooled=this.tags.has("pooled")}addTag(e){return this.tags.has(e)||(this.tags.add(e),e==="enemy"?this._isEnemy=!0:e==="player"?this._isPlayer=!0:e==="projectile"?this._isProjectile=!0:e==="pooled"&&(this._isPooled=!0),this.world&&this.world.entityManager&&(this.world.entityManager.onTagAdded(this,e),(!this.world.entityManager.entitiesByTag.has(e)||!this.world.entityManager.entitiesByTag.get(e).includes(this))&&(console.error(`Failed to register entity ${this.id} with tag '${e}' in entity manager!`),this.world.entityManager.entitiesByTag.has(e)||this.world.entityManager.entitiesByTag.set(e,[]),this.world.entityManager.entitiesByTag.get(e).push(this),console.log(`Manually fixed tag registration for entity ${this.id} with tag '${e}'`)))),this}removeTag(e){return this.tags.has(e)&&(this.tags.delete(e),e==="enemy"?this._isEnemy=!1:e==="player"?this._isPlayer=!1:e==="projectile"?this._isProjectile=!1:e==="pooled"&&(this._isPooled=!1),this.world&&this.world.entityManager&&this.world.entityManager.onTagRemoved(this,e)),this}clearTags(){const e=[...this.tags];for(const s of e)this.removeTag(s);return this._isEnemy=!1,this._isPlayer=!1,this._isProjectile=!1,this._isPooled=!1,this.tags.clear(),this}hasTag(e){const s=this.tags.has(e);let t=!1;return e==="enemy"&&this._isEnemy!==s?(console.warn(`Tag cache inconsistency for entity ${this.id}: _isEnemy=${this._isEnemy}, actual=Set{${Array.from(this.tags)}}`),this._isEnemy=s,t=!0):e==="player"&&this._isPlayer!==s?(console.warn(`Tag cache inconsistency for entity ${this.id}: _isPlayer=${this._isPlayer}, actual=Set{${Array.from(this.tags)}}`),this._isPlayer=s,t=!0):e==="projectile"&&this._isProjectile!==s?(console.warn(`Tag cache inconsistency for entity ${this.id}: _isProjectile=${this._isProjectile}, actual=Set{${Array.from(this.tags)}}`),this._isProjectile=s,t=!0):e==="pooled"&&this._isPooled!==s&&(console.warn(`Tag cache inconsistency for entity ${this.id}: _isPooled=${this._isPooled}, actual=Set{${Array.from(this.tags)}}`),this._isPooled=s,t=!0),t&&this._syncTagCache(),s}}class g{constructor(e){this.world=e,this.entities=new Map,this.entitiesByComponent=new Map,this.entitiesByTag=new Map,this.lastEntityId=0,this.recycledEntities=[],this.maxRecycledEntities=100}createEntity(e=""){let s;if(this.recycledEntities.length>0)s=this.recycledEntities.pop(),s.components.clear(),s.tags.clear(),s._isEnemy=void 0,s._isPlayer=void 0,s._isProjectile=void 0;else{const t=this._generateEntityId();s=new h(t,this.world)}return this.entities.set(s.id.toString(),s),e&&s.addTag(e),this.world.messageBus.publish("entity.created",{entity:s}),s}destroyEntity(e){const s=typeof e=="string"?e:e.id,t=this.entities.get(s.toString());if(t){this.world.messageBus.publish("entity.destroyed",{entity:t}),t.tags.forEach(i=>{if(this.entitiesByTag.has(i)){const n=this.entitiesByTag.get(i),o=n.indexOf(t);o!==-1&&n.splice(o,1),n.length===0&&this.entitiesByTag.delete(i)}});for(const[i,n]of t.components.entries())t.removeComponent(n.constructor);this.entities.delete(s.toString()),this.recycledEntities.length<this.maxRecycledEntities&&this.recycledEntities.push(t)}}getEntity(e){return this.entities.get(e.toString())}getEntitiesByTag(e){return this.entitiesByTag.get(e)||[]}getEntitiesWithComponents(e){return!e||e.length===0?Array.from(this.entities.values()):Array.from(this.entities.values()).filter(s=>e.every(t=>s.hasComponent(t)))}getEntities(){return Array.from(this.entities.values())}onTagAdded(e,s){this.entitiesByTag.has(s)||this.entitiesByTag.set(s,[]),this.entitiesByTag.get(s).push(e)}onTagRemoved(e,s){if(this.entitiesByTag.has(s)){const t=this.entitiesByTag.get(s),i=t.indexOf(e);i!==-1&&t.splice(i,1),t.length===0&&this.entitiesByTag.delete(s)}}_generateEntityId(){return(++this.lastEntityId).toString()}}class c{constructor(e){this.world=e,this.systems=[],this.systemsByType=new Map}registerSystem(e){return this.systemsByType.has(e.constructor.name)?(console.warn(`System of type ${e.constructor.name} already registered`),e):(this.systems.push(e),this.systemsByType.set(e.constructor.name,e),this.systems.sort((s,t)=>s.priority-t.priority),e)}getSystem(e){return this.systemsByType.get(e.name)}update(e){for(const s of this.systems)s.enabled&&s.update(e)}initialize(){for(const e of this.systems)typeof e.initialize=="function"&&e.initialize()}enableSystem(e){const s=this.getSystem(e);s&&s.enable()}disableSystem(e){const s=this.getSystem(e);s&&s.disable()}}class l{constructor(){this.listeners=new Map,this.queuedMessages=[],this.dispatching=!1,this.highFrequencyTypes=new Set(["transform.updated","physics.update","render.update"]),window.messageRegistry||(window.messageRegistry=new Set),window.messageRegistry.add(this),window.mainMessageBus?window.mainMessageBus!==this&&console.log("MessageBus: This instance will forward game.over events to window.mainMessageBus"):(window.mainMessageBus=this,console.log("MessageBus: Set this instance as window.mainMessageBus")),console.log("MessageBus: New instance created and added to registry")}subscribe(e,s,t=null){return this.listeners.has(e)||this.listeners.set(e,[]),this.listeners.get(e).push({callback:s,context:t}),()=>this.unsubscribe(e,s,t)}unsubscribe(e,s,t=null){if(!this.listeners.has(e))return;const i=this.listeners.get(e),n=i.findIndex(o=>o.callback===s&&o.context===t);n!==-1&&i.splice(n,1),i.length===0&&this.listeners.delete(e)}fastPublish(e,s={}){if(!this.listeners.has(e))return;const t=this.listeners.get(e),i={type:e,data:s,timestamp:Date.now()};for(let n=0;n<t.length;n++){const o=t[n];o.callback.call(o.context,i)}}publish(e,s={}){if(this.highFrequencyTypes.has(e))return this.fastPublish(e,s);if(["entity.created","entity.destroyed","component.added","component.removed","game.over"].includes(e)&&console.log(`MessageBus: Publishing ${e}`,s),e==="game.over"){if(window.mainMessageBus&&window.mainMessageBus!==this){console.log("MessageBus: Forwarding game.over event to window.mainMessageBus"),window.mainMessageBus.publish(e,s);return}if(this.listeners.has(e)){const i=this.listeners.get(e);console.log(`MessageBus: Found ${i.length} listeners for '${e}' event`)}else{console.error(`MessageBus: No listeners found for '${e}' event!`),console.log("MessageBus: Registered event types:",Array.from(this.listeners.keys())),console.trace("MessageBus: This is where the game.over event was published from"),window.game?(console.log("MessageBus: window.game exists:",window.game),console.log("MessageBus: window.game.messageBus exists:",window.game.messageBus),console.log("MessageBus: Directly calling window.game.gameOver as an emergency measure"),window.game.gameOver(s.reason||"Unknown reason")):console.error("MessageBus: window.game does not exist - critical issue");return}}if(this.listeners.has(e)){if(this.dispatching){console.log(`MessageBus: Already dispatching, queueing ${e} message`),this.queuedMessages.push({type:e,data:s});return}try{this.dispatching=!0,this.listeners.get(e).forEach((n,o)=>{try{e==="game.over"&&console.log(`MessageBus: Calling listener #${o+1} for game.over event`),n.callback.call(n.context,{type:e,data:s,timestamp:Date.now()}),e==="game.over"&&console.log(`MessageBus: Listener #${o+1} for game.over event completed successfully`)}catch(a){console.error(`Error in message listener #${o+1} (${e}):`,a),console.error("Error stack:",a.stack)}})}finally{if(this.dispatching=!1,this.queuedMessages.length>0){const i=[...this.queuedMessages];this.queuedMessages=[],i.forEach(n=>{this.publish(n.type,n.data)})}}}}queue(e,s={}){this.queuedMessages.push({type:e,data:s})}static triggerGameOver(e,s){console.log("MessageBus.triggerGameOver called:",e,"from",s);let t=null;if(window.mainMessageBus?(console.log("MessageBus: Using window.mainMessageBus for game over"),t=window.mainMessageBus):window.game&&window.game.messageBus&&(console.log("MessageBus: Using window.game.messageBus for game over"),t=window.game.messageBus),t){if(console.log("MessageBus: Publishing game.over event"),t.listeners.has("game.over")){const i=t.listeners.get("game.over");console.log(`MessageBus: Found ${i.length} game.over listeners`)}else console.warn("MessageBus: No game.over listeners found before publishing");t.publish("game.over",{reason:e,source:s})}else console.error("MessageBus: No message bus instance found for game over!")}}const d=Object.freeze(Object.defineProperty({__proto__:null,MessageBus:l},Symbol.toStringTag,{value:"Module"}));class u{constructor(e=null){this.messageBus=e||new l,!e&&!window.mainMessageBus&&(window.mainMessageBus=this.messageBus,console.log("World: Set this.messageBus as window.mainMessageBus")),this.entityManager=new g(this),this.systemManager=new c(this),this.deltaTime=0,this.time=0,this.lastUpdateTime=0}initialize(){this.lastUpdateTime=performance.now(),this.systemManager.initialize(),this.messageBus.publish("world.initialized",{})}update(){const e=performance.now();if(this.deltaTime=Math.min((e-this.lastUpdateTime)/1e3,.1),this.lastUpdateTime=e,this.time+=this.deltaTime,this.messageBus.publish("world.preUpdate",{deltaTime:this.deltaTime,time:this.time}),this.systemManager.update(this.deltaTime),this.messageBus.publish("world.postUpdate",{deltaTime:this.deltaTime,time:this.time}),window.DEBUG_MODE&&this.time%5<this.deltaTime){const s=Array.from(this.entityManager.entities.values());console.log(`World update - ${s.length} entities active`);const t=this.getEntitiesWithComponents(["MeshComponent"]);console.log(`Entities with mesh: ${t.length}`)}}createEntity(e=""){return this.entityManager.createEntity(e)}destroyEntity(e){this.entityManager.destroyEntity(e)}registerSystem(e){return this.systemManager.registerSystem(e)}getEntitiesWithComponents(e){return this.entityManager.getEntitiesWithComponents(e)}getEntitiesByTag(e){return this.entityManager.getEntitiesByTag(e)}getEntity(e){return this.entityManager.getEntity(e)}getSystem(e){return this.systemManager.getSystem(e)}}class m{constructor(e){this.world=e,this.enabled=!0,this.requiredComponents=[],this.priority=0}checkEntity(e){return this.requiredComponents.every(s=>e.hasComponent(s))}getEntities(){return this.world.getEntitiesWithComponents(this.requiredComponents)}update(e){if(!this.enabled)return;this.getEntities().forEach(t=>{this.processEntity(t,e)})}processEntity(e,s){}initialize(){}enable(){this.enabled=!0}disable(){this.enabled=!1}}export{l as M,m as S,u as W,d as m};
//# sourceMappingURL=core-AGMxUAyq.js.map
