{"version":3,"file":"main-DffMw3nC.js","sources":["../../js/modules/environment/starDreadnought.js","../../js/modules/introSequence.js","../../js/modules/debug/perfOverlay.js","../../js/main.js"],"sourcesContent":["// starDreadnought.js - Creates and manages the massive Star Dreadnought ship\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport class StarDreadnought {\r\n    constructor(scene) {\r\n        this.scene = scene;\r\n        this.ship = null;\r\n        this.engineGlows = [];\r\n        this.teleportBeam = null;\r\n        this.teleportBeamParticles = null;\r\n        this.teleportBeamActive = false;\r\n        \r\n        // Create ship model programmatically\r\n        this.createShipModel();\r\n        \r\n        // Add to scene\r\n        this.scene.add(this.ship);\r\n        \r\n        console.log(\"Star Dreadnought created\");\r\n    }\r\n    \r\n    createShipModel() {\r\n        // Create a group for the entire ship\r\n        this.ship = new THREE.Group();\r\n        this.ship.name = 'starDreadnought';\r\n        \r\n        // Set scale - this is a massive ship\r\n        const shipScale = 1200; // Overall scale factor\r\n        \r\n        // Main hull - elongated wedge shape\r\n        this.createMainHull(shipScale);\r\n        \r\n        // Command bridge superstructure\r\n        this.createCommandBridge(shipScale);\r\n        \r\n        // Engine array\r\n        this.createEngineArray(shipScale);\r\n        \r\n        // Surface details\r\n        this.createSurfaceDetails(shipScale);\r\n        \r\n        // Teleport beam (initially inactive)\r\n        this.createTeleportBeam(shipScale);\r\n    }\r\n    \r\n    createMainHull(scale) {\r\n        // Create main hull using custom geometry for the distinctive arrow/dagger shape\r\n        const hullLength = scale;\r\n        const hullWidth = scale * 0.22;\r\n        const hullHeight = scale * 0.06;\r\n        const taperFactor = 0.15; // How much the front tapers\r\n        \r\n        // Create geometry for the main hull shape\r\n        const hullGeometry = new THREE.BufferGeometry();\r\n        \r\n        // Define vertices for the hull shape (triangulated)\r\n        const vertices = new Float32Array([\r\n            // Bottom face\r\n            -hullWidth/2, -hullHeight/2, hullLength/2,  // bottom left back\r\n            hullWidth/2, -hullHeight/2, hullLength/2,   // bottom right back\r\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\r\n            \r\n            hullWidth/2, -hullHeight/2, hullLength/2,   // bottom right back\r\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2,  // bottom right front\r\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\r\n            \r\n            // Top face\r\n            -hullWidth/2, hullHeight/2, hullLength/2,  // top left back\r\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2, // top left front\r\n            hullWidth/2, hullHeight/2, hullLength/2,   // top right back\r\n            \r\n            hullWidth/2, hullHeight/2, hullLength/2,   // top right back\r\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2, // top left front\r\n            hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top right front\r\n            \r\n            // Left face\r\n            -hullWidth/2, -hullHeight/2, hullLength/2,  // bottom left back\r\n            -hullWidth/2, hullHeight/2, hullLength/2,   // top left back\r\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\r\n            \r\n            -hullWidth/2, hullHeight/2, hullLength/2,   // top left back\r\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top left front\r\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\r\n            \r\n            // Right face\r\n            hullWidth/2, -hullHeight/2, hullLength/2,  // bottom right back\r\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom right front\r\n            hullWidth/2, hullHeight/2, hullLength/2,   // top right back\r\n            \r\n            hullWidth/2, hullHeight/2, hullLength/2,   // top right back\r\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom right front\r\n            hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top right front\r\n            \r\n            // Back face\r\n            -hullWidth/2, -hullHeight/2, hullLength/2,  // bottom left back\r\n            -hullWidth/2, hullHeight/2, hullLength/2,   // top left back\r\n            hullWidth/2, -hullHeight/2, hullLength/2,   // bottom right back\r\n            \r\n            hullWidth/2, -hullHeight/2, hullLength/2,   // bottom right back\r\n            -hullWidth/2, hullHeight/2, hullLength/2,   // top left back\r\n            hullWidth/2, hullHeight/2, hullLength/2,    // top right back\r\n            \r\n            // Front face (pointed)\r\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\r\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top left front\r\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2,  // bottom right front\r\n            \r\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2,  // bottom right front\r\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top left front\r\n            hullWidth*taperFactor, hullHeight/2, -hullLength/2    // top right front\r\n        ]);\r\n        \r\n        // Calculate normals for lighting\r\n        const normals = new Float32Array(vertices.length);\r\n        \r\n        // Add attributes to the geometry\r\n        hullGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n        \r\n        // Material for the main hull - metallic dark gray\r\n        const hullMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x333344,\r\n            metalness: 0.8,\r\n            roughness: 0.3,\r\n            emissive: 0x111111,\r\n            emissiveIntensity: 0.2\r\n        });\r\n        \r\n        // Create the hull mesh\r\n        const hull = new THREE.Mesh(hullGeometry, hullMaterial);\r\n        hull.geometry.computeVertexNormals(); // Auto-generate normals\r\n        \r\n        // Cast shadows\r\n        hull.castShadow = true;\r\n        hull.receiveShadow = true;\r\n        \r\n        // Add to ship group\r\n        this.ship.add(hull);\r\n        \r\n        // Add additional hull plates for more detail\r\n        this.addHullPlates(scale, hull);\r\n    }\r\n    \r\n    addHullPlates(scale, parentHull) {\r\n        // Add additional hull plates for more detail and segmentation\r\n        const plateLength = scale * 0.2;\r\n        const plateWidth = scale * 0.18;\r\n        const plateHeight = scale * 0.01;\r\n        const plateY = scale * 0.035; // Just above the hull\r\n        \r\n        // Create 5 plates down the center of the ship\r\n        for (let i = 0; i < 5; i++) {\r\n            const plateZ = scale * 0.4 - (i * plateLength);\r\n            \r\n            const plateGeometry = new THREE.BoxGeometry(plateWidth, plateHeight, plateLength);\r\n            const plateMaterial = new THREE.MeshStandardMaterial({\r\n                color: 0x444455,\r\n                metalness: 0.7,\r\n                roughness: 0.4,\r\n                emissive: 0x222222\r\n            });\r\n            \r\n            const plate = new THREE.Mesh(plateGeometry, plateMaterial);\r\n            plate.position.set(0, plateY, plateZ);\r\n            \r\n            plate.castShadow = true;\r\n            plate.receiveShadow = true;\r\n            \r\n            this.ship.add(plate);\r\n        }\r\n    }\r\n    \r\n    createCommandBridge(scale) {\r\n        // Command bridge superstructure - distinctive two-tower design\r\n        const bridgeHeight = scale * 0.12;\r\n        const bridgeWidth = scale * 0.06;\r\n        const bridgeDepth = scale * 0.08;\r\n        const bridgeY = scale * 0.085; // Position on top of hull\r\n        const bridgeZ = scale * 0.28; // Position toward the back\r\n        \r\n        // Bridge material - slightly lighter than hull\r\n        const bridgeMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x555566,\r\n            metalness: 0.7,\r\n            roughness: 0.3,\r\n            emissive: 0x222222,\r\n            emissiveIntensity: 0.2\r\n        });\r\n        \r\n        // Main command tower (larger)\r\n        const mainTowerGeometry = new THREE.BoxGeometry(bridgeWidth, bridgeHeight, bridgeDepth);\r\n        const mainTower = new THREE.Mesh(mainTowerGeometry, bridgeMaterial);\r\n        mainTower.position.set(0, bridgeY, bridgeZ);\r\n        mainTower.castShadow = true;\r\n        mainTower.receiveShadow = true;\r\n        this.ship.add(mainTower);\r\n        \r\n        // Add windows to the bridge\r\n        this.addBridgeWindows(scale, mainTower, bridgeY);\r\n        \r\n        // Secondary command towers (smaller)\r\n        const secondaryTowerScale = 0.7; // 70% the size of main tower\r\n        const secondaryTowerGeometry = new THREE.BoxGeometry(\r\n            bridgeWidth * secondaryTowerScale, \r\n            bridgeHeight * secondaryTowerScale, \r\n            bridgeDepth * secondaryTowerScale\r\n        );\r\n        \r\n        // Left tower\r\n        const leftTower = new THREE.Mesh(secondaryTowerGeometry, bridgeMaterial);\r\n        leftTower.position.set(-bridgeWidth * 1.2, bridgeY, bridgeZ + bridgeDepth * 0.6);\r\n        leftTower.castShadow = true;\r\n        leftTower.receiveShadow = true;\r\n        this.ship.add(leftTower);\r\n        \r\n        // Right tower\r\n        const rightTower = new THREE.Mesh(secondaryTowerGeometry, bridgeMaterial);\r\n        rightTower.position.set(bridgeWidth * 1.2, bridgeY, bridgeZ + bridgeDepth * 0.6);\r\n        rightTower.castShadow = true;\r\n        rightTower.receiveShadow = true;\r\n        this.ship.add(rightTower);\r\n    }\r\n    \r\n    addBridgeWindows(scale, bridgeTower, bridgeY) {\r\n        // Add illuminated windows to the bridge\r\n        const windowSize = scale * 0.003;\r\n        const windowSpacing = scale * 0.006;\r\n        const windowRows = 6;\r\n        const windowCols = 10;\r\n        const windowsStartY = bridgeY - scale * 0.02;\r\n        const windowDepth = scale * 0.001;\r\n        \r\n        // Window material - emissive for glow\r\n        const windowMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0xaabbcc,\r\n            emissive: 0xaabbcc,\r\n            emissiveIntensity: 1.0,\r\n            transparent: true,\r\n            opacity: 0.9\r\n        });\r\n        \r\n        // Create window instances\r\n        for (let row = 0; row < windowRows; row++) {\r\n            for (let col = 0; col < windowCols; col++) {\r\n                // Random chance to skip a window (for variety)\r\n                if (Math.random() > 0.85) continue;\r\n                \r\n                const windowGeometry = new THREE.BoxGeometry(windowSize, windowSize, windowDepth);\r\n                const window = new THREE.Mesh(windowGeometry, windowMaterial);\r\n                \r\n                // Position window on the front face of the bridge\r\n                window.position.set(\r\n                    (col - windowCols/2) * windowSpacing,\r\n                    windowsStartY + row * windowSpacing,\r\n                    bridgeTower.position.z + scale * 0.04 + windowDepth\r\n                );\r\n                \r\n                this.ship.add(window);\r\n            }\r\n        }\r\n    }\r\n    \r\n    createEngineArray(scale) {\r\n        // Create engine array at the back of the ship\r\n        const engineRadius = scale * 0.018;\r\n        const engineLength = scale * 0.04;\r\n        const engineZ = scale * 0.48; // Position at the back\r\n        const engineY = scale * 0.01; // Slightly above center line\r\n        \r\n        // Engine housing\r\n        const engineHousingWidth = scale * 0.2;\r\n        const engineHousingHeight = scale * 0.05;\r\n        const engineHousingLength = scale * 0.06;\r\n        \r\n        const housingGeometry = new THREE.BoxGeometry(engineHousingWidth, engineHousingHeight, engineHousingLength);\r\n        const housingMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x333344,\r\n            metalness: 0.8,\r\n            roughness: 0.4\r\n        });\r\n        \r\n        const engineHousing = new THREE.Mesh(housingGeometry, housingMaterial);\r\n        engineHousing.position.set(0, engineY, engineZ);\r\n        engineHousing.castShadow = true;\r\n        engineHousing.receiveShadow = true;\r\n        this.ship.add(engineHousing);\r\n        \r\n        // Engine exhaust material - blue glow for Star Wars style\r\n        const engineMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x3366ff,\r\n            emissive: 0x3366ff,\r\n            emissiveIntensity: 0.7,\r\n            transparent: true,\r\n            opacity: 0.7\r\n        });\r\n        \r\n        // Glow material (fully emissive)\r\n        const glowMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x3366ff,\r\n            emissive: 0x3366ff,\r\n            emissiveIntensity: 1.5,\r\n            transparent: true,\r\n            opacity: 0.8\r\n        });\r\n        \r\n        // Create engine exhausts - two rows of engines for Star Destroyer style\r\n        const engineRows = 2;\r\n        const enginesPerRow = 5;\r\n        const verticalSpacing = engineHousingHeight * 0.5;\r\n        \r\n        for (let row = 0; row < engineRows; row++) {\r\n            const rowY = engineY - verticalSpacing * (row - 0.5);\r\n            \r\n            for (let i = 0; i < enginesPerRow; i++) {\r\n                // Distribute engines across the width\r\n                const posX = (i - (enginesPerRow - 1) / 2) * (engineHousingWidth / (enginesPerRow - 1) * 0.8);\r\n                \r\n                // Engine exhaust\r\n                const engineGeometry = new THREE.CylinderGeometry(engineRadius, engineRadius * 1.5, engineLength, 16);\r\n                const engine = new THREE.Mesh(engineGeometry, engineMaterial);\r\n                \r\n                // Position and orient the engine\r\n                engine.position.set(posX, rowY, engineZ + engineHousingLength * 0.5);\r\n                engine.rotation.x = Math.PI / 2; // Orient horizontally\r\n                \r\n                this.ship.add(engine);\r\n                \r\n                // Add engine glow with additional outer glow\r\n                const glowGeometry = new THREE.SphereGeometry(engineRadius * 1.6, 16, 16);\r\n                const glow = new THREE.Mesh(glowGeometry, glowMaterial.clone());\r\n                glow.position.set(posX, rowY, engineZ + engineHousingLength * 0.5 + engineLength * 1.1);\r\n                \r\n                this.ship.add(glow);\r\n                this.engineGlows.push(glow);\r\n                \r\n                // Add additional outer glow for more dramatic effect\r\n                const outerGlowGeometry = new THREE.SphereGeometry(engineRadius * 2.5, 16, 16);\r\n                const outerGlowMaterial = glowMaterial.clone();\r\n                outerGlowMaterial.opacity = 0.4;\r\n                const outerGlow = new THREE.Mesh(outerGlowGeometry, outerGlowMaterial);\r\n                outerGlow.position.copy(glow.position);\r\n                \r\n                this.ship.add(outerGlow);\r\n                this.engineGlows.push(outerGlow);\r\n            }\r\n        }\r\n        \r\n        // Add engine trail particles\r\n        this.createEngineTrailParticles(scale, engineZ, engineHousingWidth);\r\n    }\r\n    \r\n    createSurfaceDetails(scale) {\r\n        // Add surface details for more visual interest\r\n        \r\n        // Turrets along the sides\r\n        this.createTurrets(scale);\r\n        \r\n        // Trenches and surface details\r\n        this.createSurfaceTrenches(scale);\r\n        \r\n        // Shield generator domes\r\n        this.createShieldGenerators(scale);\r\n    }\r\n    \r\n    createTurrets(scale) {\r\n        // Create turret batteries along the sides\r\n        const turretRadius = scale * 0.008;\r\n        const turretHeight = scale * 0.01;\r\n        const baseRadius = scale * 0.01;\r\n        const baseHeight = scale * 0.005;\r\n        \r\n        // Turret material\r\n        const turretMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x666677,\r\n            metalness: 0.7,\r\n            roughness: 0.3\r\n        });\r\n        \r\n        // Positions for turrets (port side)\r\n        const portPositions = [];\r\n        for (let i = 0; i < 12; i++) {\r\n            const z = scale * 0.2 - (i * scale * 0.07);\r\n            portPositions.push([-scale * 0.1, scale * 0.035, z]);\r\n        }\r\n        \r\n        // Create port side turrets\r\n        portPositions.forEach(pos => {\r\n            // Turret base\r\n            const baseGeometry = new THREE.CylinderGeometry(baseRadius, baseRadius, baseHeight, 8);\r\n            const base = new THREE.Mesh(baseGeometry, turretMaterial);\r\n            base.position.set(pos[0], pos[1], pos[2]);\r\n            this.ship.add(base);\r\n            \r\n            // Turret gun\r\n            const turretGeometry = new THREE.CylinderGeometry(turretRadius, turretRadius, turretHeight, 8);\r\n            const turret = new THREE.Mesh(turretGeometry, turretMaterial);\r\n            turret.position.set(pos[0], pos[1] + baseHeight * 0.5 + turretHeight * 0.5, pos[2]);\r\n            turret.rotation.x = Math.PI / 2; // Orient horizontally\r\n            turret.rotation.z = -Math.PI / 6; // Angle outward\r\n            this.ship.add(turret);\r\n        });\r\n        \r\n        // Positions for turrets (starboard side)\r\n        const starboardPositions = [];\r\n        for (let i = 0; i < 12; i++) {\r\n            const z = scale * 0.2 - (i * scale * 0.07);\r\n            starboardPositions.push([scale * 0.1, scale * 0.035, z]);\r\n        }\r\n        \r\n        // Create starboard side turrets\r\n        starboardPositions.forEach(pos => {\r\n            // Turret base\r\n            const baseGeometry = new THREE.CylinderGeometry(baseRadius, baseRadius, baseHeight, 8);\r\n            const base = new THREE.Mesh(baseGeometry, turretMaterial);\r\n            base.position.set(pos[0], pos[1], pos[2]);\r\n            this.ship.add(base);\r\n            \r\n            // Turret gun\r\n            const turretGeometry = new THREE.CylinderGeometry(turretRadius, turretRadius, turretHeight, 8);\r\n            const turret = new THREE.Mesh(turretGeometry, turretMaterial);\r\n            turret.position.set(pos[0], pos[1] + baseHeight * 0.5 + turretHeight * 0.5, pos[2]);\r\n            turret.rotation.x = Math.PI / 2; // Orient horizontally\r\n            turret.rotation.z = Math.PI / 6; // Angle outward\r\n            this.ship.add(turret);\r\n        });\r\n    }\r\n    \r\n    createSurfaceTrenches(scale) {\r\n        // Create surface trenches and details\r\n        const trenchWidth = scale * 0.01;\r\n        const trenchDepth = scale * 0.01;\r\n        const trenchLength = scale * 0.3;\r\n        \r\n        // Trench material - darker than hull\r\n        const trenchMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x222233,\r\n            metalness: 0.7,\r\n            roughness: 0.8,\r\n            emissive: 0x111122,\r\n            emissiveIntensity: 0.3\r\n        });\r\n        \r\n        // Center trench (inspired by Death Star trench)\r\n        const centerTrenchGeometry = new THREE.BoxGeometry(trenchWidth, trenchDepth, trenchLength);\r\n        const centerTrench = new THREE.Mesh(centerTrenchGeometry, trenchMaterial);\r\n        centerTrench.position.set(0, scale * 0.035, scale * 0.1);\r\n        this.ship.add(centerTrench);\r\n        \r\n        // Side trenches\r\n        const sideTrenchGeometry = new THREE.BoxGeometry(trenchWidth, trenchDepth, trenchLength * 0.7);\r\n        \r\n        // Port side trench\r\n        const portTrench = new THREE.Mesh(sideTrenchGeometry, trenchMaterial);\r\n        portTrench.position.set(-scale * 0.07, scale * 0.035, scale * 0.05);\r\n        this.ship.add(portTrench);\r\n        \r\n        // Starboard side trench\r\n        const starboardTrench = new THREE.Mesh(sideTrenchGeometry, trenchMaterial);\r\n        starboardTrench.position.set(scale * 0.07, scale * 0.035, scale * 0.05);\r\n        this.ship.add(starboardTrench);\r\n    }\r\n    \r\n    createShieldGenerators(scale) {\r\n        // Create shield generator domes\r\n        const domeRadius = scale * 0.02;\r\n        const domeY = scale * 0.05;\r\n        const domeZ = scale * 0.35;\r\n        \r\n        // Dome material - slightly transparent blue\r\n        const domeMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x3366aa,\r\n            metalness: 0.2,\r\n            roughness: 0.3,\r\n            transparent: true,\r\n            opacity: 0.6,\r\n            emissive: 0x112244,\r\n            emissiveIntensity: 0.3\r\n        });\r\n        \r\n        // Port side shield generator\r\n        const portDomeGeometry = new THREE.SphereGeometry(domeRadius, 16, 16, 0, Math.PI * 2, 0, Math.PI / 2);\r\n        const portDome = new THREE.Mesh(portDomeGeometry, domeMaterial);\r\n        portDome.position.set(-scale * 0.08, domeY, domeZ);\r\n        portDome.rotation.x = Math.PI; // Orient half-sphere\r\n        this.ship.add(portDome);\r\n        \r\n        // Starboard side shield generator\r\n        const starboardDomeGeometry = new THREE.SphereGeometry(domeRadius, 16, 16, 0, Math.PI * 2, 0, Math.PI / 2);\r\n        const starboardDome = new THREE.Mesh(starboardDomeGeometry, domeMaterial);\r\n        starboardDome.position.set(scale * 0.08, domeY, domeZ);\r\n        starboardDome.rotation.x = Math.PI; // Orient half-sphere\r\n        this.ship.add(starboardDome);\r\n    }\r\n    \r\n    createTeleportBeam(scale) {\r\n        // Create teleport beam (initially inactive)\r\n        const beamTopRadius = scale * 0.03;\r\n        const beamBottomRadius = scale * 0.2; // Much wider at bottom for dramatic beam\r\n        const beamHeight = scale * 0.8; // Longer beam to reach further\r\n        \r\n        // Custom shader material for energy beam effect with more dynamic patterns\r\n        const beamMaterial = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                time: { value: 0.0 },\r\n                color: { value: new THREE.Color(0x33ccff) },\r\n                pulseFrequency: { value: 12.0 },\r\n                pulseAmplitude: { value: 0.3 }\r\n            },\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                \r\n                void main() {\r\n                    vUv = uv;\r\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                uniform float time;\r\n                uniform vec3 color;\r\n                uniform float pulseFrequency;\r\n                uniform float pulseAmplitude;\r\n                varying vec2 vUv;\r\n                \r\n                // Improved pattern with scrolling and pulsing\r\n                void main() {\r\n                    // Create primary energy pattern - vertical striations\r\n                    float verticalPattern = sin(vUv.y * 50.0 - time * 3.0) * 0.5 + 0.5;\r\n                    \r\n                    // Create horizontal pulse bands\r\n                    float horizontalPulse = sin(vUv.y * pulseFrequency - time * 2.0) * pulseAmplitude + (1.0 - pulseAmplitude);\r\n                    \r\n                    // Edge glow effect with distortion\r\n                    float edgeEffect = smoothstep(0.0, 0.4, vUv.x) * smoothstep(1.0, 0.6, vUv.x);\r\n                    \r\n                    // Swirling energy effect\r\n                    float swirl = sin(vUv.y * 30.0 + vUv.x * 5.0 + time * 4.0) * 0.5 + 0.5;\r\n                    \r\n                    // Combine effects\r\n                    float pattern = mix(verticalPattern, swirl, 0.5) * horizontalPulse * edgeEffect;\r\n                    \r\n                    // Add vertical fade for more realistic beam\r\n                    float opacity = (1.0 - vUv.y * 0.8) * 0.9;\r\n                    \r\n                    // Pulsing brightness based on time\r\n                    float pulse = sin(time * 3.0) * 0.1 + 0.9;\r\n                    \r\n                    // Combine final color \r\n                    vec3 finalColor = color * pulse;\r\n                    \r\n                    // Output final color with combined opacity\r\n                    gl_FragColor = vec4(finalColor, opacity * pattern);\r\n                }\r\n            `,\r\n            transparent: true,\r\n            side: THREE.DoubleSide,\r\n            blending: THREE.AdditiveBlending // Use additive blending for glowing effect\r\n        });\r\n        \r\n        // Create beam cone\r\n        const beamGeometry = new THREE.CylinderGeometry(beamBottomRadius, beamTopRadius, beamHeight, 32, 16, true);\r\n        this.teleportBeam = new THREE.Mesh(beamGeometry, beamMaterial);\r\n        \r\n        // Position beam below the ship facing down\r\n        this.teleportBeam.position.set(0, -beamHeight/2, -scale * 0.1);\r\n        this.teleportBeam.rotation.x = Math.PI; // Point downward\r\n        \r\n        // Hide beam initially\r\n        this.teleportBeam.visible = false;\r\n        \r\n        // Add to ship\r\n        this.ship.add(this.teleportBeam);\r\n        \r\n        // Create teleport beam particles\r\n        this.createTeleportParticles(scale);\r\n        \r\n        // Create beam impact ring effect\r\n        this.createBeamImpactRing(scale);\r\n    }\r\n    \r\n    createBeamImpactRing(scale) {\r\n        // Create a flat ring at the beam impact point\r\n        const ringGeometry = new THREE.RingGeometry(scale * 0.1, scale * 0.22, 32);\r\n        const ringMaterial = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                time: { value: 0.0 },\r\n                color: { value: new THREE.Color(0x33ccff) }\r\n            },\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                void main() {\r\n                    vUv = uv;\r\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                uniform float time;\r\n                uniform vec3 color;\r\n                varying vec2 vUv;\r\n                \r\n                void main() {\r\n                    // Animated ripple effect\r\n                    float ripple = sin(distance(vUv, vec2(0.5)) * 20.0 - time * 5.0) * 0.5 + 0.5;\r\n                    \r\n                    // Rotating element\r\n                    float angle = atan(vUv.y - 0.5, vUv.x - 0.5);\r\n                    float rotatingPattern = sin(angle * 8.0 + time * 3.0) * 0.5 + 0.5;\r\n                    \r\n                    // Pulsing opacity\r\n                    float pulse = sin(time * 2.0) * 0.3 + 0.7;\r\n                    \r\n                    // Combine patterns\r\n                    float pattern = mix(ripple, rotatingPattern, 0.5) * pulse;\r\n                    \r\n                    gl_FragColor = vec4(color, pattern * 0.7);\r\n                }\r\n            `,\r\n            transparent: true,\r\n            side: THREE.DoubleSide,\r\n            blending: THREE.AdditiveBlending,\r\n            depthWrite: false\r\n        });\r\n        \r\n        this.impactRing = new THREE.Mesh(ringGeometry, ringMaterial);\r\n        \r\n        // Position the ring below the beam's end\r\n        this.impactRing.position.set(0, -scale * 1.0, -scale * 0.1);\r\n        this.impactRing.rotation.x = -Math.PI/2; // Face downward\r\n        \r\n        // Hide initially\r\n        this.impactRing.visible = false;\r\n        \r\n        // Add to ship\r\n        this.ship.add(this.impactRing);\r\n    }\r\n    \r\n    createTeleportParticles(scale) {\r\n        // Create particle system for teleport beam\r\n        const particleCount = 800; // More particles\r\n        const particleGeometry = new THREE.BufferGeometry();\r\n        \r\n        // Create arrays for particle properties\r\n        const positions = new Float32Array(particleCount * 3);\r\n        const colors = new Float32Array(particleCount * 3);\r\n        const sizes = new Float32Array(particleCount);\r\n        \r\n        // Initialize particle positions in a cone shape with more variation\r\n        for (let i = 0; i < particleCount; i++) {\r\n            const i3 = i * 3;\r\n            \r\n            // Determine if this should be an inner or outer particle\r\n            const isInnerBeam = Math.random() > 0.3;\r\n            \r\n            // Random position within the cone or surrounding area\r\n            const radius = isInnerBeam ? \r\n                Math.random() * scale * 0.03 : // Inner beam\r\n                scale * 0.03 + Math.random() * scale * 0.17; // Outer beam area\r\n            \r\n            const theta = Math.random() * Math.PI * 2;\r\n            const height = -(Math.random() * scale * 0.8); // Full beam height\r\n            \r\n            // Convert to Cartesian\r\n            positions[i3] = radius * Math.cos(theta);     // x\r\n            positions[i3 + 1] = height;                   // y (negative for downward direction)\r\n            positions[i3 + 2] = radius * Math.sin(theta); // z\r\n            \r\n            // Gradient colors from cyan to blue with variation\r\n            if (isInnerBeam) {\r\n                // Brighter inner beam\r\n                colors[i3] = 0.3 + Math.random() * 0.2;       // r\r\n                colors[i3 + 1] = 0.9 + Math.random() * 0.1;   // g\r\n                colors[i3 + 2] = 1.0;                         // b\r\n            } else {\r\n                // Cooler outer particles\r\n                colors[i3] = 0.1 + Math.random() * 0.1;       // r \r\n                colors[i3 + 1] = 0.7 + Math.random() * 0.3;   // g\r\n                colors[i3 + 2] = 0.9 + Math.random() * 0.1;   // b\r\n            }\r\n            \r\n            // Varied particle sizes\r\n            sizes[i] = isInnerBeam ? \r\n                scale * 0.002 + Math.random() * scale * 0.002 : // Small inner particles\r\n                scale * 0.004 + Math.random() * scale * 0.006;  // Larger outer particles\r\n        }\r\n        \r\n        // Add attributes to geometry\r\n        particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n        particleGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n        particleGeometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\r\n        \r\n        // Particle material with custom shader for better glow\r\n        const particleMaterial = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                time: { value: 0 },\r\n                pointTexture: { value: this.createParticleTexture() }\r\n            },\r\n            vertexShader: `\r\n                attribute float size;\r\n                attribute vec3 color;\r\n                varying vec3 vColor;\r\n                uniform float time;\r\n                \r\n                void main() {\r\n                    vColor = color;\r\n                    \r\n                    // Animate size with time\r\n                    float pulseFactor = sin(time * 2.0 + position.z * 0.1) * 0.3 + 0.7;\r\n                    \r\n                    // Calculate position\r\n                    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n                    \r\n                    // Size attenuation\r\n                    gl_PointSize = size * pulseFactor * (300.0 / -mvPosition.z);\r\n                    gl_Position = projectionMatrix * mvPosition;\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                uniform sampler2D pointTexture;\r\n                varying vec3 vColor;\r\n                \r\n                void main() {\r\n                    // Sample soft particle texture\r\n                    vec4 texColor = texture2D(pointTexture, gl_PointCoord);\r\n                    \r\n                    // Apply color\r\n                    gl_FragColor = vec4(vColor, texColor.r);\r\n                }\r\n            `,\r\n            transparent: true,\r\n            depthWrite: false,\r\n            blending: THREE.AdditiveBlending,\r\n            vertexColors: true\r\n        });\r\n        \r\n        // Create particle system\r\n        this.teleportParticles = new THREE.Points(particleGeometry, particleMaterial);\r\n        this.teleportParticles.visible = false;\r\n        \r\n        // Position particle system\r\n        this.teleportParticles.position.set(0, 0, -scale * 0.1);\r\n        \r\n        // Add to ship\r\n        this.ship.add(this.teleportParticles);\r\n    }\r\n    \r\n    createParticleTexture() {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = 64;\r\n        canvas.height = 64;\r\n        \r\n        const context = canvas.getContext('2d');\r\n        const gradient = context.createRadialGradient(\r\n            32, 32, 0, 32, 32, 32\r\n        );\r\n        \r\n        gradient.addColorStop(0, 'rgba(255,255,255,1)');\r\n        gradient.addColorStop(0.3, 'rgba(255,255,255,0.8)');\r\n        gradient.addColorStop(0.5, 'rgba(255,255,255,0.4)');\r\n        gradient.addColorStop(1, 'rgba(255,255,255,0)');\r\n        \r\n        context.fillStyle = gradient;\r\n        context.fillRect(0, 0, 64, 64);\r\n        \r\n        const texture = new THREE.Texture(canvas);\r\n        texture.needsUpdate = true;\r\n        return texture;\r\n    }\r\n    \r\n    createEngineTrailParticles(scale, engineZ, width) {\r\n        const particleCount = 200;\r\n        const particleGeometry = new THREE.BufferGeometry();\r\n        \r\n        // Create arrays for particle properties\r\n        const positions = new Float32Array(particleCount * 3);\r\n        const colors = new Float32Array(particleCount * 3);\r\n        const sizes = new Float32Array(particleCount);\r\n        \r\n        // Engine positions to emit particles from\r\n        const enginePositions = [];\r\n        const enginesPerRow = 5;\r\n        \r\n        for (let i = 0; i < enginesPerRow; i++) {\r\n            const posX = (i - (enginesPerRow - 1) / 2) * (width / (enginesPerRow - 1) * 0.8);\r\n            enginePositions.push(posX);\r\n        }\r\n        \r\n        // Initialize particles\r\n        for (let i = 0; i < particleCount; i++) {\r\n            const i3 = i * 3;\r\n            \r\n            // Choose an engine position to emit from\r\n            const engineIndex = Math.floor(Math.random() * enginePositions.length);\r\n            const engineX = enginePositions[engineIndex];\r\n            \r\n            // Random offset from engine\r\n            const offsetX = (Math.random() - 0.5) * scale * 0.01;\r\n            const offsetY = (Math.random() - 0.5) * scale * 0.01;\r\n            \r\n            // Position behind the engine\r\n            const trailLength = Math.random() * scale * 0.5;\r\n            \r\n            positions[i3] = engineX + offsetX;     // x\r\n            positions[i3 + 1] = offsetY;           // y\r\n            positions[i3 + 2] = engineZ + engineX * 0.05 + trailLength; // z with slight angle\r\n            \r\n            // Blue-white colors for engine glow\r\n            colors[i3] = 0.5 + Math.random() * 0.5;     // r\r\n            colors[i3 + 1] = 0.7 + Math.random() * 0.3; // g\r\n            colors[i3 + 2] = 1.0;                       // b\r\n            \r\n            // Different sizes for depth\r\n            sizes[i] = (Math.random() * 0.5 + 0.5) * scale * 0.004;\r\n        }\r\n        \r\n        // Add attributes to geometry\r\n        particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n        particleGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n        particleGeometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\r\n        \r\n        // Particle material with custom shader\r\n        const particleMaterial = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                time: { value: 0 },\r\n                pointTexture: { value: this.createParticleTexture() }\r\n            },\r\n            vertexShader: `\r\n                attribute float size;\r\n                attribute vec3 color;\r\n                varying vec3 vColor;\r\n                uniform float time;\r\n                \r\n                void main() {\r\n                    vColor = color;\r\n                    \r\n                    // Animate size with time\r\n                    float pulseFactor = sin(time * 2.0 + position.z * 0.1) * 0.3 + 0.7;\r\n                    \r\n                    // Calculate position\r\n                    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n                    \r\n                    // Size attenuation\r\n                    gl_PointSize = size * pulseFactor * (300.0 / -mvPosition.z);\r\n                    gl_Position = projectionMatrix * mvPosition;\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                uniform sampler2D pointTexture;\r\n                varying vec3 vColor;\r\n                \r\n                void main() {\r\n                    // Sample soft particle texture\r\n                    vec4 texColor = texture2D(pointTexture, gl_PointCoord);\r\n                    \r\n                    // Apply color\r\n                    gl_FragColor = vec4(vColor, texColor.r);\r\n                }\r\n            `,\r\n            transparent: true,\r\n            depthWrite: false,\r\n            blending: THREE.AdditiveBlending,\r\n            vertexColors: true\r\n        });\r\n        \r\n        // Create particle system\r\n        this.engineTrailParticles = new THREE.Points(particleGeometry, particleMaterial);\r\n        this.ship.add(this.engineTrailParticles);\r\n    }\r\n    \r\n    // Set engines power level (0-1)\r\n    setEnginesPower(power) {\r\n        // Adjust engine glow intensity based on power level\r\n        this.engineGlows.forEach((glow, index) => {\r\n            // Alternate between main glow and outer glow\r\n            const isMainGlow = index % 2 === 0;\r\n            \r\n            if (isMainGlow) {\r\n                // Main engine glow - brighter\r\n                glow.material.emissiveIntensity = 0.8 + power * 1.2;\r\n                glow.material.opacity = 0.5 + power * 0.5;\r\n            } else {\r\n                // Outer engine glow - softer\r\n                glow.material.emissiveIntensity = 0.5 + power * 0.8;\r\n                glow.material.opacity = 0.2 + power * 0.3;\r\n            }\r\n            \r\n            // Scale the glow with power\r\n            const scale = 1 + power * 0.8;\r\n            glow.scale.set(scale, scale, scale * 1.2); // Stretch slightly on z-axis\r\n        });\r\n        \r\n        // Update engine trail particles\r\n        if (this.engineTrailParticles) {\r\n            this.engineTrailParticles.visible = power > 0.2;\r\n            \r\n            // Scale particle sizes based on power\r\n            if (this.engineTrailParticles.geometry.attributes.size) {\r\n                const sizes = this.engineTrailParticles.geometry.attributes.size.array;\r\n                const baseSizes = this.engineTrailParticles.userData.baseSizes || \r\n                                  Array.from(sizes); // Store original sizes if not saved\r\n                                  \r\n                // Save original sizes\r\n                if (!this.engineTrailParticles.userData.baseSizes) {\r\n                    this.engineTrailParticles.userData.baseSizes = baseSizes;\r\n                }\r\n                \r\n                // Scale sizes\r\n                for (let i = 0; i < sizes.length; i++) {\r\n                    sizes[i] = baseSizes[i] * (1 + power * 2);\r\n                }\r\n                \r\n                this.engineTrailParticles.geometry.attributes.size.needsUpdate = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Activate teleport beam\r\n    activateTeleportBeam() {\r\n        if (this.teleportBeam) {\r\n            this.teleportBeam.visible = true;\r\n            this.teleportParticles.visible = true;\r\n            this.impactRing.visible = true;\r\n            this.teleportBeamActive = true;\r\n            \r\n            // Reset animation time\r\n            this.teleportBeam.material.uniforms.time.value = 0;\r\n            this.impactRing.material.uniforms.time.value = 0;\r\n            if (this.teleportParticles.material.uniforms) {\r\n                this.teleportParticles.material.uniforms.time.value = 0;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Deactivate teleport beam\r\n    deactivateTeleportBeam() {\r\n        if (this.teleportBeam) {\r\n            this.teleportBeam.visible = false;\r\n            this.teleportParticles.visible = false;\r\n            this.impactRing.visible = false;\r\n            this.teleportBeamActive = false;\r\n        }\r\n    }\r\n    \r\n    // Update teleport beam effect\r\n    updateTeleportBeam(progress) {\r\n        if (!this.teleportBeamActive) return;\r\n        \r\n        // Update shader time uniforms for animation\r\n        const timeIncrement = 0.02;\r\n        \r\n        if (this.teleportBeam && this.teleportBeam.material.uniforms) {\r\n            this.teleportBeam.material.uniforms.time.value += timeIncrement;\r\n            \r\n            // Pulse the beam based on progress\r\n            const intensity = 0.3 + Math.sin(progress * Math.PI * 6) * 0.1;\r\n            this.teleportBeam.material.uniforms.pulseAmplitude.value = intensity;\r\n        }\r\n        \r\n        // Update impact ring\r\n        if (this.impactRing && this.impactRing.material.uniforms) {\r\n            this.impactRing.material.uniforms.time.value += timeIncrement;\r\n            \r\n            // Scale the impact ring with progress\r\n            const ringScale = 1.0 + Math.sin(progress * Math.PI * 3) * 0.2;\r\n            this.impactRing.scale.set(ringScale, ringScale, 1);\r\n        }\r\n        \r\n        // Animate particles\r\n        if (this.teleportParticles && this.teleportParticles.material.uniforms) {\r\n            this.teleportParticles.material.uniforms.time.value += timeIncrement;\r\n            \r\n            // Moving particles\r\n            const positions = this.teleportParticles.geometry.attributes.position.array;\r\n            \r\n            // Move particles downward and reset when they reach bottom\r\n            for (let i = 0; i < positions.length; i += 3) {\r\n                // Move particle down faster\r\n                positions[i + 1] -= 5;\r\n                \r\n                // Add slight horizontal movement for realism\r\n                positions[i] += (Math.random() - 0.5) * 2;\r\n                positions[i + 2] += (Math.random() - 0.5) * 2;\r\n                \r\n                // Reset particle when it gets too far\r\n                if (positions[i + 1] < -1000) {\r\n                    // Get a reference position to place particle within beam\r\n                    const isInnerBeam = Math.random() > 0.3;\r\n                    const radius = isInnerBeam ? \r\n                        Math.random() * 40 : // Inner beam\r\n                        40 + Math.random() * 180; // Outer area\r\n                    const theta = Math.random() * Math.PI * 2;\r\n                    \r\n                    positions[i] = radius * Math.cos(theta);     // x\r\n                    positions[i + 1] = -(Math.random() * 400);   // y (reset to top of beam)\r\n                    positions[i + 2] = radius * Math.sin(theta); // z\r\n                }\r\n            }\r\n            \r\n            // Update buffer geometry\r\n            this.teleportParticles.geometry.attributes.position.needsUpdate = true;\r\n        }\r\n        \r\n        // Update engine trails if they exist\r\n        if (this.engineTrailParticles && this.engineTrailParticles.material.uniforms) {\r\n            this.engineTrailParticles.material.uniforms.time.value += timeIncrement;\r\n        }\r\n    }\r\n} ","// introSequence.js - Manages the cinematic Star Dreadnought intro sequence\r\n\r\nimport * as THREE from 'three';\r\nimport { StarDreadnought } from './environment/starDreadnought.js';\r\nimport { getAbsolutePath } from '../utils/pathUtils.js';\r\n\r\nexport class IntroSequence {\r\n    constructor(scene, camera, spaceship, audioManager) {\r\n        this.scene = scene;\r\n        this.camera = camera;\r\n        this.spaceship = spaceship;\r\n        this.audio = audioManager;\r\n        this.isPlaying = false;\r\n        this.sequenceTime = 0;\r\n        this.onComplete = null;\r\n        this.skipEnabled = false; // Only enable skip after first playthrough\r\n        \r\n        // Save initial camera position\r\n        this.initialCameraPosition = null;\r\n        this.initialCameraRotation = null;\r\n        \r\n        // Create StarDreadnought instance\r\n        this.starDreadnought = new StarDreadnought(scene);\r\n        \r\n        // Setup portal effect\r\n        this.setupPortalEffect();\r\n        \r\n        // Overlay for flash effects\r\n        this.setupOverlay();\r\n        \r\n        // Dialogue elements\r\n        this.dialogueBox = null;\r\n        this.dialogueText = null;\r\n        this.currentDialogueIndex = 0;\r\n        this.isTyping = false;\r\n        this.typeInterval = null;\r\n        \r\n        // Custom sound effects\r\n        this.introSounds = {};\r\n        \r\n        // Dialogue WAV files\r\n        this.dialogueWavs = [];\r\n        \r\n        // Dialogue lines\r\n        this.dialogueLines = [\r\n            \"CORP CONTROLLER: [static] Belter #337, status check. Your cryostasis cycle is now complete.\",\r\n            \"CORP CONTROLLER: Welcome to your deployment in the Sol System, circa 2077. As you can see, Earth is... well... let's just say \\\"available for unrestricted mining operations\\\" now.\",\r\n            \"CORP CONTROLLER: CorpEx Resource Acquisition reminds you that all planetary bodies in this system are now classified as \\\"unclaimed assets\\\" following the... unfortunate global circumstances.\",\r\n            \"CORP CONTROLLER: Your primary objective is resource extraction from the asteroid belt. Initial scans show promising mineral concentrations untouched since the evacuation.\",\r\n            \"CORP CONTROLLER: The Stargate remains your lifeline. Return for fuel, upgrades, trading, and your allocated 15 minutes of daily entertainment. Remember, a happy belter is a productive belter!\",\r\n            \"CORP CONTROLLER: Resource extraction targets are non-negotiable. Failure to meet quotas will result in extension of your 42-year contract.\",\r\n            \"CORP CONTROLLER: Oh, and our long-range scans have detected spectral drone activity in adjacent sectors. Remnants of old defense systems, probably. Nothing a resourceful belter like you can't handle.\",\r\n            \"CORP CONTROLLER: Connection terminating in 3...2...1... Don't die out there, #337. Replacement clones are expensive.\",\r\n            \"[TRANSMISSION TERMINATED]\",\r\n            \"[BELTER #337 DEPLOYMENT ACTIVE]\"\r\n        ];\r\n        \r\n        console.log(\"Intro sequence initialized\");\r\n        \r\n        // Load dialogue WAV files\r\n        this.loadDialogueWavs();\r\n        \r\n        // Create custom Tone.js sound effects\r\n        this.createIntroSoundEffects();\r\n    }\r\n    \r\n    // Load dialogue WAV files (1.wav through 8.wav)\r\n    loadDialogueWavs() {\r\n        console.log(\"Loading dialogue WAV files...\");\r\n        \r\n        try {\r\n            // Load 8 dialogue WAV files\r\n            for (let i = 1; i <= 8; i++) {\r\n                const audioPath = getAbsolutePath(`sounds/dialogue/${i}.wav`);\r\n                console.log(`Attempting to load dialogue file: ${audioPath}`);\r\n                \r\n                // Create audio element\r\n                const audio = new Audio();\r\n                \r\n                // Setup event handlers before setting src to avoid race conditions\r\n                audio.addEventListener('canplaythrough', () => {\r\n                    console.log(`Dialogue WAV ${i} loaded successfully`);\r\n                });\r\n                \r\n                audio.addEventListener('error', (e) => {\r\n                    console.warn(`Dialogue WAV ${i} not found or couldn't be loaded - this is normal if you haven't added the files yet`);\r\n                    // Don't log the full error object as it's noisy\r\n                });\r\n                \r\n                // Set source after adding event listeners\r\n                audio.src = audioPath;\r\n                \r\n                // Store reference even if loading fails - the game will just skip playing it\r\n                this.dialogueWavs.push(audio);\r\n            }\r\n            \r\n            console.log(\"Dialogue WAV files setup complete - they'll be used if available\");\r\n        } catch (error) {\r\n            console.error(\"Error in dialogue WAV files setup:\", error);\r\n        }\r\n    }\r\n    \r\n    // Create custom Tone.js sound effects for the intro sequence\r\n    createIntroSoundEffects() {\r\n        if (typeof Tone === 'undefined') {\r\n            console.error(\"Tone.js not available for intro sound effects\");\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            console.log(\"Creating intro sequence sound effects...\");\r\n            \r\n            // Create warp portal sound\r\n            this.createWarpSound();\r\n            \r\n            // Create ship arrival sound\r\n            this.createShipArrivalSound();\r\n            \r\n            // Create teleport beam sound\r\n            this.createTeleportSound();\r\n            \r\n            console.log(\"Intro sequence sound effects created\");\r\n        } catch (error) {\r\n            console.error(\"Error creating intro sound effects:\", error);\r\n        }\r\n    }\r\n    \r\n    // Create warp portal sound effect\r\n    createWarpSound() {\r\n        try {\r\n            // Connect to master effects chain if available\r\n            const destination = this.audio && this.audio.masterEQ ? \r\n                this.audio.masterEQ : Tone.Destination;\r\n            \r\n            // Filter for warp sound\r\n            const warpFilter = new Tone.Filter({\r\n                type: \"lowpass\",\r\n                frequency: 2000,\r\n                Q: 2\r\n            }).connect(destination);\r\n            \r\n            // Add reverb for spaciousness\r\n            const warpReverb = new Tone.Reverb({\r\n                decay: 2,\r\n                wet: 0.5\r\n            }).connect(warpFilter);\r\n            \r\n            // Create synth for warp sound\r\n            const warpSynth = new Tone.FMSynth({\r\n                harmonicity: 3,\r\n                modulationIndex: 10,\r\n                oscillator: {\r\n                    type: \"sine\"\r\n                },\r\n                envelope: {\r\n                    attack: 0.1,\r\n                    decay: 0.2,\r\n                    sustain: 0.8,\r\n                    release: 1.5\r\n                },\r\n                modulation: {\r\n                    type: \"square\"\r\n                },\r\n                modulationEnvelope: {\r\n                    attack: 0.5,\r\n                    decay: 0.1,\r\n                    sustain: 0.2,\r\n                    release: 0.5\r\n                }\r\n            }).connect(warpReverb);\r\n            \r\n            // Create noise component for texture\r\n            const noiseFilter = new Tone.Filter({\r\n                type: \"bandpass\",\r\n                frequency: 700,\r\n                Q: 0.6\r\n            }).connect(destination);\r\n            \r\n            const noiseGain = new Tone.Gain(0.3).connect(noiseFilter);\r\n            const noise = new Tone.Noise(\"pink\").connect(noiseGain);\r\n            \r\n            // Store the sound\r\n            this.introSounds.warp = {\r\n                lastPlayTime: 0, // Track when we last played this sound\r\n                play: () => {\r\n                    if (this.audio && this.audio.muted) return;\r\n                    \r\n                    const now = Tone.now();\r\n                    \r\n                    // Prevent playing if it was played too recently (within 0.1 seconds)\r\n                    if (now - this.introSounds.warp.lastPlayTime < 0.1) {\r\n                        console.log(\"Preventing too rapid warp sound playback\");\r\n                        return;\r\n                    }\r\n                    \r\n                    // Update last play time\r\n                    this.introSounds.warp.lastPlayTime = now;\r\n                    \r\n                    // Set volume - reduced by 40%\r\n                    const volumeLevel = this.audio ? this.audio.sfxVolume * 0.36 : 0.18;\r\n                    warpSynth.volume.value = Tone.gainToDb(volumeLevel);\r\n                    \r\n                    // Start noise component with reduced volume\r\n                    noise.start();\r\n                    \r\n                    // Play descending sequence for portal forming\r\n                    warpSynth.triggerAttack(\"C5\", now);\r\n                    warpSynth.frequency.exponentialRampTo(\"C2\", 2, now);\r\n                    \r\n                    // Fade out noise after 3 seconds - start with lower gain\r\n                    noiseGain.gain.setValueAtTime(0.18, now);\r\n                    noiseGain.gain.exponentialRampTo(0.01, 3, now + 1);\r\n                    \r\n                    // Stop synth and noise after 3 seconds\r\n                    setTimeout(() => {\r\n                        warpSynth.triggerRelease();\r\n                        setTimeout(() => {\r\n                            noise.stop();\r\n                        }, 500);\r\n                    }, 3000);\r\n                }\r\n            };\r\n        } catch (error) {\r\n            console.error(\"Error creating warp sound:\", error);\r\n        }\r\n    }\r\n    \r\n    // Create ship arrival sound effect\r\n    createShipArrivalSound() {\r\n        try {\r\n            // Connect to master effects chain if available\r\n            const destination = this.audio && this.audio.masterEQ ? \r\n                this.audio.masterEQ : Tone.Destination;\r\n            \r\n            // Filter for arrival sound\r\n            const arrivalFilter = new Tone.Filter({\r\n                type: \"lowpass\",\r\n                frequency: 1200,\r\n                Q: 1\r\n            }).connect(destination);\r\n            \r\n            // Create synth for ship arrival sound\r\n            const arrivalSynth = new Tone.PolySynth(Tone.Synth, {\r\n                oscillator: {\r\n                    type: \"triangle\"\r\n                },\r\n                envelope: {\r\n                    attack: 0.02,\r\n                    decay: 0.3,\r\n                    sustain: 0.1,\r\n                    release: 0.8\r\n                }\r\n            }).connect(arrivalFilter);\r\n            \r\n            // Create deep bass for engine rumble\r\n            const rumbleFilter = new Tone.Filter({\r\n                type: \"lowpass\",\r\n                frequency: 200,\r\n                Q: 0.5\r\n            }).connect(destination);\r\n            \r\n            const rumbleSynth = new Tone.Synth({\r\n                oscillator: {\r\n                    type: \"sine\"\r\n                },\r\n                envelope: {\r\n                    attack: 0.1,\r\n                    decay: 0.3,\r\n                    sustain: 0.6,\r\n                    release: 1\r\n                }\r\n            }).connect(rumbleFilter);\r\n            \r\n            // Store the sound\r\n            this.introSounds.shipArrival = {\r\n                play: () => {\r\n                    if (this.audio && this.audio.muted) return;\r\n                    \r\n                    const now = Tone.now();\r\n                    \r\n                    // Set volume - reduced by 40%\r\n                    const volumeLevel = this.audio ? this.audio.sfxVolume * 0.42 : 0.24;\r\n                    arrivalSynth.volume.value = Tone.gainToDb(volumeLevel);\r\n                    rumbleSynth.volume.value = Tone.gainToDb(volumeLevel * 0.8); // Further reduced rumble\r\n                    \r\n                    // Play dramatic chord for ship appearance\r\n                    arrivalSynth.triggerAttackRelease([\"G3\", \"D4\", \"A4\"], 1.5, now);\r\n                    \r\n                    // Add engine rumble\r\n                    rumbleSynth.triggerAttack(\"G1\", now);\r\n                    rumbleSynth.frequency.exponentialRampTo(\"C2\", 2, now + 0.5);\r\n                    \r\n                    // Stop rumble after 2 seconds\r\n                    setTimeout(() => {\r\n                        rumbleSynth.triggerRelease();\r\n                    }, 2000);\r\n                }\r\n            };\r\n        } catch (error) {\r\n            console.error(\"Error creating ship arrival sound:\", error);\r\n        }\r\n    }\r\n    \r\n    // Create teleport beam sound effect\r\n    createTeleportSound() {\r\n        try {\r\n            // Connect to master effects chain if available\r\n            const destination = this.audio && this.audio.masterEQ ? \r\n                this.audio.masterEQ : Tone.Destination;\r\n            \r\n            // Filter for teleport sound\r\n            const teleportFilter = new Tone.Filter({\r\n                type: \"bandpass\",\r\n                frequency: 800,\r\n                Q: 2\r\n            }).connect(destination);\r\n            \r\n            // Add chorus for otherworldly effect\r\n            const teleportChorus = new Tone.Chorus({\r\n                frequency: 1.5,\r\n                delayTime: 3.5,\r\n                depth: 0.7,\r\n                wet: 0.5\r\n            }).connect(teleportFilter).start();\r\n            \r\n            // Create synth for teleport beam\r\n            const teleportSynth = new Tone.Synth({\r\n                oscillator: {\r\n                    type: \"sine\"\r\n                },\r\n                envelope: {\r\n                    attack: 0.05,\r\n                    decay: 0.2,\r\n                    sustain: 0.8,\r\n                    release: 1\r\n                }\r\n            }).connect(teleportChorus);\r\n            \r\n            // Create high-pitched accent for the beam\r\n            const beamFilter = new Tone.Filter({\r\n                type: \"highpass\",\r\n                frequency: 2000,\r\n                Q: 1\r\n            }).connect(destination);\r\n            \r\n            const beamSynth = new Tone.Synth({\r\n                oscillator: {\r\n                    type: \"square\"\r\n                },\r\n                envelope: {\r\n                    attack: 0.01,\r\n                    decay: 0.1,\r\n                    sustain: 0.6,\r\n                    release: 0.5\r\n                }\r\n            }).connect(beamFilter);\r\n            \r\n            // Store the sound\r\n            this.introSounds.teleport = {\r\n                play: () => {\r\n                    if (this.audio && this.audio.muted) return;\r\n                    \r\n                    const now = Tone.now();\r\n                    \r\n                    // Set volume - reduced by 40%\r\n                    const volumeLevel = this.audio ? this.audio.sfxVolume * 0.3 : 0.18;\r\n                    teleportSynth.volume.value = Tone.gainToDb(volumeLevel);\r\n                    beamSynth.volume.value = Tone.gainToDb(volumeLevel * 0.4); // Further reduced high pitch\r\n                    \r\n                    // Play upward sweep for teleport activation\r\n                    teleportSynth.triggerAttack(\"C4\", now);\r\n                    teleportSynth.frequency.exponentialRampTo(\"C6\", 1.5, now);\r\n                    \r\n                    // Add high-pitched beam activation sound\r\n                    beamSynth.triggerAttackRelease(\"E7\", 0.1, now + 0.3);\r\n                    setTimeout(() => {\r\n                        beamSynth.triggerAttackRelease(\"G7\", 0.1, now + 0.5);\r\n                    }, 200);\r\n                    \r\n                    // Release after 2 seconds\r\n                    setTimeout(() => {\r\n                        teleportSynth.triggerRelease();\r\n                    }, 2000);\r\n                }\r\n            };\r\n        } catch (error) {\r\n            console.error(\"Error creating teleport sound:\", error);\r\n        }\r\n    }\r\n    \r\n    setupDialogueUI() {\r\n        // Create dialogue box\r\n        this.dialogueBox = document.createElement('div');\r\n        this.dialogueBox.id = 'intro-dialogue';\r\n        this.dialogueBox.style.position = 'fixed';\r\n        this.dialogueBox.style.bottom = '50px';\r\n        this.dialogueBox.style.left = '50%';\r\n        this.dialogueBox.style.transform = 'translateX(-50%)';\r\n        this.dialogueBox.style.width = '80%';\r\n        this.dialogueBox.style.maxWidth = '800px';\r\n        this.dialogueBox.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\r\n        this.dialogueBox.style.color = '#30f0c0';\r\n        this.dialogueBox.style.border = '1px solid #30f0c0';\r\n        this.dialogueBox.style.borderRadius = '5px';\r\n        this.dialogueBox.style.padding = '15px';\r\n        this.dialogueBox.style.fontFamily = 'Courier New, monospace';\r\n        this.dialogueBox.style.fontSize = '16px';\r\n        this.dialogueBox.style.zIndex = '10000';\r\n        this.dialogueBox.style.textShadow = '0 0 5px #30f0c0';\r\n        this.dialogueBox.style.boxShadow = '0 0 10px rgba(48, 240, 192, 0.3)';\r\n        this.dialogueBox.style.opacity = '0';\r\n        this.dialogueBox.style.transition = 'opacity 0.5s';\r\n        \r\n        // Add dialogue text element\r\n        this.dialogueText = document.createElement('div');\r\n        this.dialogueText.style.lineHeight = '1.5';\r\n        \r\n        this.dialogueBox.appendChild(this.dialogueText);\r\n        document.body.appendChild(this.dialogueBox);\r\n        \r\n        // Fade in dialogue box\r\n        setTimeout(() => {\r\n            this.dialogueBox.style.opacity = '1';\r\n        }, 200);\r\n    }\r\n    \r\n    typeNextDialogue() {\r\n        if (this.currentDialogueIndex >= this.dialogueLines.length) {\r\n            return;\r\n        }\r\n        \r\n        const line = this.dialogueLines[this.currentDialogueIndex];\r\n        \r\n        // Play the appropriate dialogue WAV file\r\n        // Only play WAVs for the first 8 dialogues (the ones with voice acting)\r\n        if (this.currentDialogueIndex < 8 && this.dialogueWavs[this.currentDialogueIndex]) {\r\n            try {\r\n                const dialogueAudio = this.dialogueWavs[this.currentDialogueIndex];\r\n                \r\n                // Only attempt to play if the file has actually loaded successfully\r\n                // We can check this by examining the networkState or readyState\r\n                if (dialogueAudio.readyState > 0 && dialogueAudio.error === null) {\r\n                    dialogueAudio.volume = this.audio ? this.audio.sfxVolume * 0.8 : 0.5;\r\n                    dialogueAudio.currentTime = 0;\r\n                    \r\n                    // Try to play and catch any potential errors\r\n                    const playPromise = dialogueAudio.play();\r\n                    if (playPromise !== undefined) {\r\n                        playPromise.catch(err => {\r\n                            console.warn(`Couldn't play dialogue WAV ${this.currentDialogueIndex}: ${err.message}`);\r\n                        });\r\n                    }\r\n                } else {\r\n                    console.log(`Skipping dialogue WAV ${this.currentDialogueIndex + 1} (not loaded)`);\r\n                }\r\n            } catch (error) {\r\n                console.warn(`Error playing dialogue WAV ${this.currentDialogueIndex + 1}, continuing without audio`, error.message);\r\n            }\r\n        }\r\n        \r\n        this.currentDialogueIndex++;\r\n        \r\n        // Clear previous text\r\n        this.dialogueText.textContent = '';\r\n        \r\n        // Show dialogue box if not visible\r\n        if (this.dialogueBox.style.opacity === '0') {\r\n            this.dialogueBox.style.opacity = '1';\r\n        }\r\n        \r\n        // Type out text\r\n        let charIndex = 0;\r\n        this.isTyping = true;\r\n        \r\n        // Clear previous interval if exists\r\n        if (this.typeInterval) {\r\n            clearInterval(this.typeInterval);\r\n        }\r\n        \r\n        // Special effects for transmission terminated line\r\n        if (line.includes(\"TRANSMISSION TERMINATED\") || line.includes(\"DEPLOYMENT ACTIVE\")) {\r\n            this.dialogueText.style.color = '#ff3030';\r\n        } else {\r\n            this.dialogueText.style.color = '#30f0c0';\r\n        }\r\n        \r\n        // Type each character with random speed for effect\r\n        this.typeInterval = setInterval(() => {\r\n            if (charIndex < line.length) {\r\n                this.dialogueText.textContent += line.charAt(charIndex);\r\n                charIndex++;\r\n                \r\n                // Play typing sound\r\n                if (this.audio && this.audio.playSound && charIndex % 3 === 0) {\r\n                    // Try to play a typing sound if available\r\n                    if (typeof this.audio.playSound === 'function') {\r\n                        try {\r\n                            this.audio.playSound('uiClick', 0.1); // Low volume typing sound\r\n                        } catch (e) {\r\n                            // Ignore if sound not available\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                clearInterval(this.typeInterval);\r\n                this.typeInterval = null;\r\n                this.isTyping = false;\r\n                \r\n                // Automatically advance to next dialogue after a delay\r\n                // but only for certain progress points in the sequence\r\n                if (this.sequenceTime < 22) { // Don't auto advance during the very end\r\n                    const waitTime = Math.max(line.length * 50, 3000); // Longer lines stay longer\r\n                    setTimeout(() => {\r\n                        if (!this.isTyping && this.isPlaying) {\r\n                            this.typeNextDialogue();\r\n                        }\r\n                    }, waitTime);\r\n                }\r\n            }\r\n        }, 30); // Base typing speed\r\n    }\r\n    \r\n    setupPortalEffect() {\r\n        // Create a circular portal instead of a particle tower\r\n        const portalGeometry = new THREE.RingGeometry(0, 400, 64);\r\n        const portalMaterial = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                time: { value: 0 },\r\n                color: { value: new THREE.Color(0x6633aa) }\r\n            },\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                void main() {\r\n                    vUv = uv;\r\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                uniform float time;\r\n                uniform vec3 color;\r\n                varying vec2 vUv;\r\n                \r\n                void main() {\r\n                    float distFromCenter = length(vUv - vec2(0.5, 0.5)) * 2.0;\r\n                    float ripple = sin(distFromCenter * 20.0 - time * 3.0) * 0.5 + 0.5;\r\n                    float alpha = (1.0 - distFromCenter) * ripple;\r\n                    \r\n                    vec3 finalColor = color * (0.8 + ripple * 0.4);\r\n                    gl_FragColor = vec4(finalColor, alpha);\r\n                }\r\n            `,\r\n            transparent: true,\r\n            side: THREE.DoubleSide\r\n        });\r\n        \r\n        this.warpPortal = new THREE.Mesh(portalGeometry, portalMaterial);\r\n        \r\n        // Create a subtle particle system around the portal for effect\r\n        const particleCount = 500;\r\n        const particles = new THREE.BufferGeometry();\r\n        const positions = new Float32Array(particleCount * 3);\r\n        \r\n        for (let i = 0; i < particleCount; i++) {\r\n            const angle = Math.random() * Math.PI * 2;\r\n            const radius = 350 + Math.random() * 150;\r\n            positions[i * 3] = Math.cos(angle) * radius;\r\n            positions[i * 3 + 1] = Math.sin(angle) * radius;\r\n            positions[i * 3 + 2] = (Math.random() - 0.5) * 50;\r\n        }\r\n        \r\n        particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n        \r\n        const particleMaterial = new THREE.PointsMaterial({\r\n            color: 0xaa33ff,\r\n            size: 3,\r\n            transparent: true,\r\n            blending: THREE.AdditiveBlending\r\n        });\r\n        \r\n        this.portalParticles = new THREE.Points(particles, particleMaterial);\r\n        \r\n        // Group the portal elements\r\n        this.warpTunnel = new THREE.Group();\r\n        this.warpTunnel.add(this.warpPortal);\r\n        this.warpTunnel.add(this.portalParticles);\r\n    }\r\n    \r\n    setupOverlay() {\r\n        // Create a DOM overlay for the flash effect\r\n        this.overlay = document.createElement('div');\r\n        this.overlay.id = 'intro-overlay';\r\n        this.overlay.style.position = 'fixed';\r\n        this.overlay.style.top = '0';\r\n        this.overlay.style.left = '0';\r\n        this.overlay.style.width = '100%';\r\n        this.overlay.style.height = '100%';\r\n        this.overlay.style.backgroundColor = '#aa33ff'; // Match portal color\r\n        this.overlay.style.opacity = '0';\r\n        this.overlay.style.transition = 'opacity 0.5s';\r\n        this.overlay.style.pointerEvents = 'none';\r\n        this.overlay.style.zIndex = '9999';\r\n        \r\n        // Add to DOM but hide initially\r\n        document.body.appendChild(this.overlay);\r\n    }\r\n    \r\n    startSequence(onComplete) {\r\n        if (this.isPlaying) return;\r\n        \r\n        console.log(\"Starting intro sequence...\");\r\n        this.isPlaying = true;\r\n        this.sequenceTime = 0;\r\n        this.onComplete = onComplete;\r\n        \r\n        // Store initial camera state to restore player camera after sequence\r\n        this.initialCameraPosition = this.camera.position.clone();\r\n        this.initialCameraRotation = this.camera.rotation.clone();\r\n        \r\n        // Position camera for initial view of portal forming\r\n        this.camera.position.set(0, 6000, 12000);\r\n        this.camera.lookAt(30000, 5000, 0); // Look at where portal will appear\r\n        \r\n        // Hide player ship during sequence\r\n        if (this.spaceship && this.spaceship.mesh) {\r\n            this.spaceship.mesh.visible = false;\r\n            \r\n            // Disable ship thrusters to prevent any movement\r\n            if (this.spaceship.thrust) {\r\n                this.spaceship.thrust.forward = false;\r\n                this.spaceship.thrust.backward = false;\r\n                this.spaceship.thrust.left = false;\r\n                this.spaceship.thrust.right = false;\r\n                this.spaceship.thrust.boost = false;\r\n            }\r\n            \r\n            // Make sure velocity is zero\r\n            if (this.spaceship.velocity) {\r\n                this.spaceship.velocity.set(0, 0, 0);\r\n            }\r\n        }\r\n        \r\n        // Add portal to scene\r\n        this.scene.add(this.warpTunnel);\r\n        \r\n        // Position the star dreadnought initially outside the scene\r\n        this.starDreadnought.ship.position.set(35000, 5000, 0); // Off-screen\r\n        this.starDreadnought.ship.rotation.y = Math.PI/2; // Face toward center\r\n        this.starDreadnought.ship.visible = false;\r\n        \r\n        // Start sequence animation\r\n        this.animate = this.animate.bind(this);\r\n        this.lastTime = performance.now();\r\n        requestAnimationFrame(this.animate);\r\n        \r\n        // Setup skip functionality\r\n        this.setupSkipHandler();\r\n        \r\n        // Setup dialogue UI\r\n        this.setupDialogueUI();\r\n        \r\n        // Start first dialogue line\r\n        setTimeout(() => {\r\n            this.typeNextDialogue();\r\n        }, 2000);\r\n        \r\n        // Play warp sound\r\n        if (this.introSounds.warp) {\r\n            // Initialize lastPlayTime for the first play\r\n            this.introSounds.warp.lastPlayTime = Tone.now() - 1; // Ensure it's been at least 1 second\r\n            this.introSounds.warp.play();\r\n        }\r\n    }\r\n    \r\n    animate(currentTime) {\r\n        if (!this.isPlaying) return;\r\n        \r\n        // Slower pace for more sublime experience\r\n        const deltaTime = Math.min((currentTime - this.lastTime) / 1000, 0.1) * 0.4; // 60% slower\r\n        this.lastTime = currentTime;\r\n        \r\n        // Update sequence timer\r\n        this.sequenceTime += deltaTime;\r\n        \r\n        // Just TWO phases - arrival and departure\r\n        if (this.sequenceTime < 14.0) {\r\n            // Phase 1: Portal, ship arrival and player deployment (0-14s)\r\n            this.updateArrivalPhase(this.sequenceTime / 14.0);\r\n        } else if (this.sequenceTime < 24.0) {\r\n            // Phase 2: Ship departure (14-24s)\r\n            this.updateDeparturePhase((this.sequenceTime - 14.0) / 10.0);\r\n        } else {\r\n            // Sequence complete\r\n            this.completeSequence();\r\n            return;\r\n        }\r\n        \r\n        requestAnimationFrame(this.animate);\r\n    }\r\n    \r\n    updateArrivalPhase(progress) {\r\n        // Portal animation\r\n        if (this.warpPortal && this.warpPortal.material.uniforms) {\r\n            this.warpPortal.material.uniforms.time.value += 0.016;\r\n        }\r\n        \r\n        // Position portal outside the asteroid belt\r\n        this.warpTunnel.position.set(30000, 5000, 0);\r\n        this.warpTunnel.rotation.z = Math.PI/2;\r\n        \r\n        // PORTAL GROWTH phase (0-0.2)\r\n        if (progress < 0.2) {\r\n            // Grow portal\r\n            const portalProgress = progress / 0.2;\r\n            const portalScale = portalProgress * 3.5;\r\n            this.warpTunnel.scale.set(portalScale, portalScale, 1);\r\n            \r\n            // Medium-distance side view of portal formation\r\n            this.camera.position.set(0, 6000, 12000);\r\n            this.camera.lookAt(30000, 5000, 0); // Look at portal\r\n        }\r\n        \r\n        // SHIP EMERGENCE and JOURNEY phase (0.2-0.7)\r\n        if (progress >= 0.2 && progress < 0.7) {\r\n            // Make ship visible when it first emerges\r\n            if (progress >= 0.2 && !this.starDreadnought.ship.visible) {\r\n                this.starDreadnought.ship.visible = true;\r\n                this.flashOverlay(0.3);\r\n                \r\n                // Play arrival sound using Tone.js\r\n                if (this.introSounds.shipArrival) {\r\n                    this.introSounds.shipArrival.play();\r\n                }\r\n            }\r\n            \r\n            // Smooth continuous movement along Bezier curve\r\n            const t = (progress - 0.2) / 0.5; // Normalized time for this phase\r\n            const easeInOut = t < 0.5 \r\n                ? 2 * t * t \r\n                : 1 - Math.pow(-2 * t + 2, 2) / 2;\r\n            \r\n            // Bezier curve control points for ship path\r\n            const start = new THREE.Vector3(30000, 5000, 0);        // Portal position\r\n            const control = new THREE.Vector3(26000, 5300, -2000);  // Control point for curve\r\n            const end = new THREE.Vector3(22000, 5000, 0);          // Final position above belt\r\n            \r\n            // Calculate position along quadratic Bezier curve\r\n            const p0 = new THREE.Vector3();\r\n            const p1 = new THREE.Vector3();\r\n            const p2 = new THREE.Vector3();\r\n            \r\n            p0.copy(start).multiplyScalar(Math.pow(1-easeInOut, 2));\r\n            p1.copy(control).multiplyScalar(2 * (1-easeInOut) * easeInOut);\r\n            p2.copy(end).multiplyScalar(easeInOut * easeInOut);\r\n            \r\n            const position = new THREE.Vector3()\r\n                .add(p0)\r\n                .add(p1)\r\n                .add(p2);\r\n            \r\n            // Add subtle vertical oscillation like a naval vessel\r\n            position.y += Math.sin(progress * Math.PI * 3) * 80;\r\n            \r\n            // Update ship position\r\n            this.starDreadnought.ship.position.copy(position);\r\n            \r\n            // Engine power during journey\r\n            const enginePower = 0.4 + easeInOut * 0.6;\r\n            this.starDreadnought.setEnginesPower(enginePower);\r\n            \r\n            // Fade out portal as ship moves away\r\n            if (progress > 0.3) {\r\n                const portalFade = Math.min((progress - 0.3) / 0.3, 1.0);\r\n                if (this.portalParticles.material) {\r\n                    this.portalParticles.material.opacity = 1 - portalFade;\r\n                }\r\n                if (this.warpPortal.material) {\r\n                    this.warpPortal.material.opacity = 1 - portalFade;\r\n                }\r\n            }\r\n            \r\n            // Tracking shot alongside ship journey\r\n            const shipPos = this.starDreadnought.ship.position.clone();\r\n            this.camera.position.set(\r\n                shipPos.x - 3000, \r\n                shipPos.y + 1000, \r\n                8000\r\n            );\r\n            this.camera.lookAt(shipPos);\r\n        }\r\n        \r\n        // PLAYER DEPLOYMENT phase (0.7-1.0)\r\n        if (progress >= 0.7) {\r\n            // Ensure portal is fully invisible\r\n            if (this.portalParticles.material) {\r\n                this.portalParticles.material.opacity = 0;\r\n            }\r\n            if (this.warpPortal.material) {\r\n                this.warpPortal.material.opacity = 0;\r\n            }\r\n            \r\n            // Activate teleport beam if not already active\r\n            if (progress < 0.75 && !this.starDreadnought.teleportBeamActive) {\r\n                this.starDreadnought.activateTeleportBeam();\r\n                \r\n                // Play teleport sound using Tone.js\r\n                if (this.introSounds.teleport) {\r\n                    this.introSounds.teleport.play();\r\n                }\r\n            }\r\n            \r\n            // Update teleport beam\r\n            this.starDreadnought.updateTeleportBeam(progress);\r\n            \r\n            // Deploy player ship\r\n            if (progress > 0.8 && this.spaceship && !this.spaceship.mesh.visible) {\r\n                // Position player ship BELOW dreadnought but ABOVE the asteroid belt\r\n                const dreadPos = this.starDreadnought.ship.position;\r\n                this.spaceship.mesh.position.set(\r\n                    dreadPos.x, \r\n                    dreadPos.y - 2000, // 2000 units below dreadnought\r\n                    dreadPos.z\r\n                );\r\n                \r\n                // Properly undock the ship - this is critical to update game state\r\n                if (this.spaceship.isDocked) {\r\n                    console.log(\"Undocking player ship during intro sequence\");\r\n                    this.spaceship.isDocked = false; // Force undock directly to avoid position reset\r\n                    this.spaceship.mesh.visible = true;\r\n                } else {\r\n                    this.spaceship.mesh.visible = true;\r\n                }\r\n                \r\n                // Store final player position\r\n                this.finalPlayerPosition = this.spaceship.mesh.position.clone();\r\n                \r\n                // Add shield effect to player ship\r\n                this.createPlayerShieldEffect();\r\n                \r\n                // Flash effect for ship appearance\r\n                this.flashOverlay(0.3);\r\n            }\r\n            \r\n            // Teleport beam view camera\r\n            const shipPos = this.starDreadnought.ship.position.clone();\r\n            const t = (progress - 0.7) / 0.3;\r\n            this.camera.position.set(\r\n                shipPos.x - 2000 + t * 2000,\r\n                shipPos.y + 2000,\r\n                5000 - t * 3000\r\n            );\r\n            \r\n            // Look at midpoint between ship and deployed player\r\n            const lookY = shipPos.y - 1000;\r\n            this.camera.lookAt(shipPos.x, lookY, shipPos.z);\r\n        }\r\n    }\r\n    \r\n    updateDeparturePhase(progress) {\r\n        // Simple departure sequence: rotate ship 180 degrees and go back through original portal\r\n        \r\n        // Original portal location\r\n        const portalPos = new THREE.Vector3(30000, 5000, 0);\r\n        \r\n        // FIRST HALF: Ship rotates and portal reappears (0-0.5)\r\n        if (progress < 0.5) {\r\n            // Turn off teleport beam at start\r\n            if (progress < 0.1 && this.starDreadnought.teleportBeamActive) {\r\n                this.starDreadnought.deactivateTeleportBeam();\r\n            }\r\n            \r\n            // Make portal visible again at original position\r\n            if (progress > 0.1) {\r\n                // Position portal back at original entry point\r\n                this.warpTunnel.position.copy(portalPos);\r\n                this.warpTunnel.visible = true;\r\n                this.warpTunnel.rotation.z = Math.PI/2; // Original orientation\r\n                \r\n                // Portal should be at full size immediately\r\n                this.warpTunnel.scale.set(3.5, 3.5, 1);\r\n                \r\n                // Fade in portal\r\n                const portalProgress = Math.min((progress - 0.1) / 0.3, 1.0);\r\n                if (this.portalParticles.material) {\r\n                    this.portalParticles.material.opacity = portalProgress;\r\n                }\r\n                if (this.warpPortal.material) {\r\n                    this.warpPortal.material.opacity = portalProgress;\r\n                }\r\n            }\r\n            \r\n            // Simple 180 degree rotation\r\n            if (progress > 0.2) {\r\n                const rotateProgress = Math.min((progress - 0.2) / 0.3, 1.0);\r\n                const startRot = Math.PI/2;  // Currently facing center\r\n                const endRot = 3 * Math.PI/2; // 180 degree rotation (facing back toward original portal)\r\n                this.starDreadnought.ship.rotation.y = startRot + (endRot - startRot) * rotateProgress;\r\n            }\r\n            \r\n            // Fixed camera position from the side to view the rotation\r\n            const shipPos = this.starDreadnought.ship.position.clone();\r\n            this.camera.position.set(\r\n                shipPos.x,\r\n                shipPos.y + 3000, // High-ish angle\r\n                shipPos.z + 8000  // Side view\r\n            );\r\n            this.camera.lookAt(shipPos);\r\n        }\r\n        \r\n        // SECOND HALF: Ship accelerates through original portal and disappears (0.5-1.0)\r\n        else {\r\n            // Calculate movement progress for this phase\r\n            const moveProgress = (progress - 0.5) / 0.5;\r\n            \r\n            // Ship position calculation - go back toward original portal\r\n            const startPos = new THREE.Vector3(22000, 5000, 0); // Ship's current position\r\n            const beyondPos = new THREE.Vector3(35000, 5000, 0); // Beyond portal\r\n            \r\n            // Simple acceleration curve\r\n            const easeIn = moveProgress * moveProgress; // Accelerating movement\r\n            \r\n            // Ship position calculation\r\n            let position;\r\n            if (moveProgress < 0.7) {\r\n                // Move to portal\r\n                const t = easeIn / 0.5; // Normalized and accelerated\r\n                position = new THREE.Vector3().lerpVectors(startPos, portalPos, t);\r\n            } else {\r\n                // Continue beyond portal\r\n                const t = (moveProgress - 0.7) / 0.3;\r\n                position = new THREE.Vector3().lerpVectors(portalPos, beyondPos, t);\r\n            }\r\n            \r\n            // Update ship position\r\n            this.starDreadnought.ship.position.copy(position);\r\n            \r\n            // Increase engine power for dramatic exit\r\n            this.starDreadnought.setEnginesPower(0.7 + moveProgress * 0.8);\r\n            \r\n            // Flash when ship enters portal\r\n            if (moveProgress > 0.6 && moveProgress < 0.63) {\r\n                this.flashOverlay(0.4);\r\n                \r\n                // Play warp sound for re-entry but only exactly once at 0.61\r\n                if (this.introSounds.warp && Math.abs(moveProgress - 0.61) < 0.01) {\r\n                    this.introSounds.warp.play();\r\n                }\r\n            }\r\n            \r\n            // Hide ship after it enters portal\r\n            if (moveProgress > 0.65) {\r\n                this.starDreadnought.ship.visible = false;\r\n            }\r\n            \r\n            // Collapse portal at the very end\r\n            if (moveProgress > 0.9) {\r\n                const collapseProgress = (moveProgress - 0.9) / 0.1;\r\n                const collapseScale = (1 - collapseProgress) * 3.5;\r\n                this.warpTunnel.scale.set(collapseScale, collapseScale, 1);\r\n            }\r\n            \r\n            // Static camera position showing ship's departure path\r\n            const shipPos = startPos.clone(); // Use initial position as reference\r\n            this.camera.position.set(\r\n                shipPos.x - 2000,\r\n                shipPos.y + 3000,\r\n                10000 // Side view\r\n            );\r\n            // Look at the midpoint of the departure path\r\n            const lookPos = new THREE.Vector3().lerpVectors(startPos, portalPos, 0.5);\r\n            this.camera.lookAt(lookPos);\r\n        }\r\n    }\r\n    \r\n    createPlayerShieldEffect() {\r\n        // Create a sphere slightly larger than the player ship\r\n        const geometry = new THREE.SphereGeometry(30, 32, 32);\r\n        const material = new THREE.MeshBasicMaterial({\r\n            color: 0x88ccff,\r\n            transparent: true, \r\n            opacity: 0.6,\r\n            side: THREE.DoubleSide\r\n        });\r\n        \r\n        this.playerShieldEffect = new THREE.Mesh(geometry, material);\r\n        this.playerShieldEffect.scale.set(1.2, 1.2, 1.2);\r\n        this.spaceship.mesh.add(this.playerShieldEffect);\r\n        \r\n        // Add pulsing animation\r\n        this.shieldPulseTime = 0;\r\n    }\r\n    \r\n    // Update portal shader uniforms\r\n    updatePortalEffect() {\r\n        if (this.warpPortal && this.warpPortal.material.uniforms) {\r\n            this.warpPortal.material.uniforms.time.value += 0.016;\r\n        }\r\n    }\r\n    \r\n    flashOverlay(maxOpacity = 0.6) {\r\n        if (!this.overlay) return;\r\n        \r\n        // Flash overlay effect\r\n        this.overlay.style.opacity = maxOpacity.toString();\r\n        \r\n        // Fade out after flash\r\n        setTimeout(() => {\r\n            this.overlay.style.opacity = '0';\r\n        }, 300);\r\n    }\r\n    \r\n    setupSkipHandler() {\r\n        // Add skip button\r\n        const skipButton = document.createElement('div');\r\n        skipButton.id = 'skip-intro-button';\r\n        skipButton.textContent = 'SKIP INTRO';\r\n        skipButton.style.position = 'fixed';\r\n        skipButton.style.bottom = '10px';\r\n        skipButton.style.left = '50%';\r\n        skipButton.style.transform = 'translateX(-50%)';\r\n        skipButton.style.padding = '10px 15px';\r\n        skipButton.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\r\n        skipButton.style.color = '#30f0c0';\r\n        skipButton.style.border = '1px solid #30f0c0';\r\n        skipButton.style.borderRadius = '5px';\r\n        skipButton.style.cursor = 'pointer';\r\n        skipButton.style.zIndex = '10000';\r\n        skipButton.style.fontFamily = 'Courier New, monospace';\r\n        skipButton.style.boxShadow = '0 0 10px rgba(48, 240, 192, 0.3)';\r\n        \r\n        skipButton.addEventListener('click', () => {\r\n            this.skipSequence();\r\n        });\r\n        \r\n        document.body.appendChild(skipButton);\r\n        this.skipButton = skipButton;\r\n    }\r\n    \r\n    skipSequence() {\r\n        console.log(\"Skipping intro sequence\");\r\n        \r\n        // End the sequence immediately\r\n        this.completeSequence();\r\n        \r\n        // Make sure the ship is properly docked\r\n        if (this.spaceship) {\r\n            // Ensure the ship is docked\r\n            this.spaceship.isDocked = true;\r\n            \r\n            // Set ship to proper docking position if necessary\r\n            if (this.spaceship.mesh) {\r\n                // Position near stargate (these values should match your stargate position)\r\n                this.spaceship.mesh.position.set(22000, 5000, 0);\r\n            }\r\n        }\r\n        \r\n        // Show the stargate UI terminal\r\n        // Access the game instance to use its docking functionality\r\n        if (window.gameInstance && \r\n            window.gameInstance.controls && \r\n            window.gameInstance.controls.dockingSystem) {\r\n            \r\n            // Explicitly show stargate UI\r\n            setTimeout(() => {\r\n                window.gameInstance.controls.dockingSystem.dockWithStargate();\r\n                console.log(\"Stargate UI shown after skip\");\r\n            }, 100);\r\n        }\r\n    }\r\n    \r\n    completeSequence() {\r\n        console.log(\"Intro sequence complete\");\r\n        this.isPlaying = false;\r\n        \r\n        // Remove warp tunnel from scene\r\n        this.scene.remove(this.warpTunnel);\r\n        \r\n        // Hide dreadnought\r\n        this.starDreadnought.ship.visible = false;\r\n        \r\n        // Enable skip button for next time\r\n        this.skipEnabled = true;\r\n        \r\n        // Remove shield effect from player\r\n        if (this.playerShieldEffect) {\r\n            this.spaceship.mesh.remove(this.playerShieldEffect);\r\n            this.playerShieldEffect = null;\r\n        }\r\n        \r\n        // Remove skip button if it exists\r\n        if (this.skipButton) {\r\n            document.body.removeChild(this.skipButton);\r\n            this.skipButton = null;\r\n        }\r\n        \r\n        // Remove overlay from DOM completely\r\n        if (this.overlay) {\r\n            document.body.removeChild(this.overlay);\r\n            this.overlay = null;\r\n        }\r\n        \r\n        // Remove dialogue box if it exists\r\n        if (this.dialogueBox) {\r\n            document.body.removeChild(this.dialogueBox);\r\n            this.dialogueBox = null;\r\n        }\r\n        \r\n        // Clear typing interval if running\r\n        if (this.typeInterval) {\r\n            clearInterval(this.typeInterval);\r\n            this.typeInterval = null;\r\n        }\r\n        \r\n        // Make sure player ship is visible but DO NOT reset position\r\n        if (this.spaceship && this.spaceship.mesh) {\r\n            this.spaceship.mesh.visible = true;\r\n            \r\n            // IMPORTANT: Make sure ship is properly undocked\r\n            if (this.spaceship.isDocked) {\r\n                console.log(\"Forcing ship to undocked state after intro sequence\");\r\n                this.spaceship.isDocked = false;\r\n            }\r\n            \r\n            // Log the final player position for debugging\r\n            console.log(\"Player final position:\", \r\n                this.spaceship.mesh.position.x, \r\n                this.spaceship.mesh.position.y, \r\n                this.spaceship.mesh.position.z\r\n            );\r\n        }\r\n        \r\n        // Call completion callback if provided\r\n        if (this.onComplete && typeof this.onComplete === 'function') {\r\n            // Use setTimeout to make sure this executes after the animation frame\r\n            setTimeout(() => {\r\n                console.log(\"Executing intro sequence completion callback\");\r\n                this.onComplete();\r\n            }, 100);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clean up resources when intro sequence is no longer needed\r\n     */\r\n    destroy() {\r\n        // Cancel animation frame if running\r\n        if (this.animationFrameId) {\r\n            cancelAnimationFrame(this.animationFrameId);\r\n            this.animationFrameId = null;\r\n        }\r\n        \r\n        // Clean up dialogue interval\r\n        if (this.typeInterval) {\r\n            clearInterval(this.typeInterval);\r\n            this.typeInterval = null;\r\n        }\r\n        \r\n        // Clean up DOM elements\r\n        if (this.dialogueBox && this.dialogueBox.parentNode) {\r\n            this.dialogueBox.parentNode.removeChild(this.dialogueBox);\r\n        }\r\n        \r\n        if (this.overlay && this.overlay.parentNode) {\r\n            this.overlay.parentNode.removeChild(this.overlay);\r\n        }\r\n        \r\n        // Remove skip handler\r\n        document.removeEventListener('keydown', this.skipHandler);\r\n        \r\n        // Remove portal effect from scene\r\n        if (this.portalMesh && this.portalMesh.parent) {\r\n            this.portalMesh.parent.remove(this.portalMesh);\r\n        }\r\n        if (this.portalFlare && this.portalFlare.parent) {\r\n            this.portalFlare.parent.remove(this.portalFlare);\r\n        }\r\n        \r\n        // Dispose of THREE.js objects\r\n        if (this.portalMesh) {\r\n            if (this.portalMesh.geometry) this.portalMesh.geometry.dispose();\r\n            if (this.portalMesh.material) this.portalMesh.material.dispose();\r\n        }\r\n        if (this.portalFlare) {\r\n            if (this.portalFlare.geometry) this.portalFlare.geometry.dispose();\r\n            if (this.portalFlare.material) this.portalFlare.material.dispose();\r\n        }\r\n        \r\n        // Dispose of star dreadnought resources\r\n        if (this.starDreadnought && typeof this.starDreadnought.destroy === 'function') {\r\n            this.starDreadnought.destroy();\r\n        }\r\n        \r\n        // Dispose of Tone.js sound effects\r\n        if (this.introSounds) {\r\n            Object.values(this.introSounds).forEach(sound => {\r\n                if (sound.dispose && typeof sound.dispose === 'function') {\r\n                    sound.dispose();\r\n                }\r\n            });\r\n            this.introSounds = {};\r\n        }\r\n        \r\n        // Clear references to help GC\r\n        this.scene = null;\r\n        this.camera = null;\r\n        this.spaceship = null;\r\n        this.audio = null;\r\n        this.starDreadnought = null;\r\n        this.portalMesh = null;\r\n        this.portalFlare = null;\r\n        this.portalGeometry = null;\r\n        this.portalMaterial = null;\r\n        this.dialogueWavs = [];\r\n    }\r\n} ","// perfOverlay.js - Minimal scaffold for performance overlay toggle (F3)\r\n// Feature flag default ON per V07_TIGHTENING\r\n\r\nconst FEATURE_FLAG = true; // V07_TIGHTENING default ON\r\n\r\nexport class PerfOverlay {\r\n  constructor() {\r\n    // Global perf sink\r\n    if (!window.__perf) {\r\n      window.__perf = {\r\n        enabled: false,\r\n        fps: 0,\r\n        simMs: 0,\r\n        renderMs: 0,\r\n        drawCalls: 0,\r\n        visibleInstances: 0,\r\n        pools: { hits: 0, misses: 0 },\r\n        gc: 0,\r\n        systems: {},\r\n      };\r\n    }\r\n\r\n    this.panel = null;\r\n    this.lastUpdate = 0;\r\n    this.updateHzMs = 500; // ~2Hz\r\n\r\n    // optional GC observer (best-effort)\r\n    try {\r\n      if ('PerformanceObserver' in window && performance && performance.observe) {\r\n        // no-op, older API; fallback below\r\n      }\r\n      if ('PerformanceObserver' in window) {\r\n        const obs = new PerformanceObserver((list) => {\r\n          for (const entry of list.getEntries()) {\r\n            if (entry.entryType === 'gc') {\r\n              if (!window.__perf.gc) window.__perf.gc = 0;\r\n              window.__perf.gc += 1;\r\n            }\r\n          }\r\n        });\r\n        obs.observe({ entryTypes: ['gc'] });\r\n        this._gcObserver = obs;\r\n      }\r\n    } catch {}\r\n\r\n    if (FEATURE_FLAG) {\r\n      // Hook F3 toggle\r\n      document.addEventListener('keydown', (e) => {\r\n        if (e.key === 'F3') {\r\n          this.toggle();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  toggle() {\r\n    window.__perf.enabled = !window.__perf.enabled;\r\n    if (window.__perf.enabled) {\r\n      this.ensurePanel();\r\n      this.renderOnce();\r\n    } else {\r\n      this.destroy();\r\n    }\r\n  }\r\n\r\n  ensurePanel() {\r\n    if (this.panel) return;\r\n    const el = document.createElement('div');\r\n    el.id = 'perf-overlay';\r\n    el.style.position = 'fixed';\r\n    el.style.top = '8px';\r\n    el.style.right = '8px';\r\n    el.style.minWidth = '220px';\r\n    el.style.maxWidth = '320px';\r\n    el.style.background = 'rgba(0,0,0,0.6)';\r\n    el.style.color = '#9ef7ff';\r\n    el.style.fontFamily = 'monospace';\r\n    el.style.fontSize = '12px';\r\n    el.style.lineHeight = '1.4';\r\n    el.style.padding = '8px 10px';\r\n    el.style.border = '1px solid rgba(158,247,255,0.3)';\r\n    el.style.borderRadius = '6px';\r\n    el.style.zIndex = '99999';\r\n    el.style.pointerEvents = 'none';\r\n    el.innerHTML = this.renderContent();\r\n    document.body.appendChild(el);\r\n    this.panel = el;\r\n\r\n    // Start a lightweight interval to update ~2Hz\r\n    this.interval = setInterval(() => this.renderOnce(), this.updateHzMs);\r\n  }\r\n\r\n  renderOnce() {\r\n    if (!this.panel) return;\r\n    this.panel.innerHTML = this.renderContent();\r\n  }\r\n\r\n  renderContent() {\r\n    const p = window.__perf;\r\n    const systems = p.systems ? Object.entries(p.systems).slice(0, 8) : [];\r\n    const sysHtml = systems.map(([k,v]) => `<div>${k}: ${Number(v).toFixed(2)} ms</div>`).join('');\r\n    return (\r\n      `<div style=\\\"opacity:.85\\\">` +\r\n      `<div><b>Perf Overlay</b> (F3)</div>` +\r\n      `<div>FPS: ${Math.round(p.fps || 0)}</div>` +\r\n      `<div>Sim: ${Number(p.simMs || 0).toFixed(2)} ms</div>` +\r\n      `<div>Render: ${Number(p.renderMs || 0).toFixed(2)} ms</div>` +\r\n      `<div>DrawCalls: ${p.drawCalls || 0}</div>` +\r\n      `<div>Instances: ${p.visibleInstances || 0}</div>` +\r\n      `<div>Pool hits/misses: ${(p.pools?.hits||0)} / ${(p.pools?.misses||0)}</div>` +\r\n      `<div>GC: ${p.gc || 0}</div>` +\r\n      `<div style=\\\"margin-top:6px; border-top:1px solid rgba(158,247,255,.2)\\\">` +\r\n      `<div><b>Systems</b></div>` + sysHtml +\r\n      `</div>` +\r\n      `</div>`\r\n    );\r\n  }\r\n\r\n  destroy() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval);\r\n      this.interval = null;\r\n    }\r\n    if (this._gcObserver && this._gcObserver.disconnect) {\r\n      this._gcObserver.disconnect();\r\n      this._gcObserver = null;\r\n    }\r\n    if (this.panel && this.panel.parentNode) {\r\n      this.panel.parentNode.removeChild(this.panel);\r\n    }\r\n    this.panel = null;\r\n  }\r\n}\r\n\r\nexport function initPerfOverlay() {\r\n  // Create once, attach to window for future hooks\r\n  if (!window.__perfOverlay) {\r\n    window.__perfOverlay = new PerfOverlay();\r\n  }\r\n  return window.__perfOverlay;\r\n}\r\n\r\n\r\n","// main.js - Main entry point for the game\r\n\r\n// Global debug flag - set to true for development\r\nwindow.DEBUG_MODE = false;\r\n\r\nimport * as THREE from 'three';\r\nimport { Renderer } from './modules/renderer.js';\r\nimport { Spaceship } from './modules/spaceship.js';\r\nimport { Physics } from './modules/physics.js';\r\nimport { Environment } from './modules/environment.js';\r\nimport { Controls } from './modules/controls.js';\r\nimport { UI } from './modules/ui.js';\r\nimport { AudioManager } from './modules/audio.js';\r\nimport { Combat } from './modules/combat.js';\r\nimport { MessageBus } from './core/messageBus.js';\r\nimport { IntroSequence } from './modules/introSequence.js';\r\nimport { DifficultyManager } from './core/difficultyManager.js';\r\nimport { getGlobalPoolRegistry } from './modules/pooling/PoolRegistry.js';\r\nimport { initPerfOverlay } from './modules/debug/perfOverlay.js';\r\n\r\n// Global vector pool for reusing vector objects\r\nwindow.vectorPool = {\r\n    pool: [],\r\n    maxSize: 100,\r\n    \r\n    get: function(x = 0, y = 0, z = 0) {\r\n        if (this.pool.length > 0) {\r\n            return this.pool.pop().set(x, y, z);\r\n        }\r\n        return new THREE.Vector3(x, y, z);\r\n    },\r\n    \r\n    release: function(vector) {\r\n        if (this.pool.length < this.maxSize) {\r\n            this.pool.push(vector);\r\n        }\r\n    }\r\n};\r\n\r\nclass Game {\r\n    constructor() {\r\n        console.log(\"Initializing game...\");\r\n        \r\n        // Make game instance globally accessible for emergency access\r\n        window.game = this;\r\n        \r\n        // Set up global message bus for cross-system communication\r\n        window.mainMessageBus = new MessageBus();\r\n        window.mainMessageBus.subscribe('game.over', this.gameOver.bind(this));\r\n        \r\n        try {\r\n            // Create audio manager first but don't initialize yet\r\n            console.log(\"Creating audio manager...\");\r\n            this.audio = new AudioManager();\r\n            \r\n            // Initialize renderer first\r\n            console.log(\"Creating renderer...\");\r\n            this.renderer = new Renderer();\r\n            console.log(\"Renderer created, getting scene...\");\r\n            \r\n            // Access scene and camera directly rather than through getters\r\n            this.scene = this.renderer.scene;\r\n            this.camera = this.renderer.camera;\r\n            \r\n            console.log(\"Scene and camera references obtained\");\r\n            \r\n            // Share camera reference with scene for easy access by other components\r\n            this.scene.camera = this.camera;\r\n            \r\n            // Initialize essential components needed for the start screen\r\n            console.log(\"Initializing essential components...\");\r\n            \r\n            // Initialize physics\r\n            this.physics = new Physics(this.scene);\r\n            \r\n            // Set camera reference in physics\r\n            this.physics.setCamera(this.camera);\r\n            \r\n            // Initialize environment (essential components only)\r\n            this.environment = new Environment(this.scene);\r\n            \r\n            // Initialize spaceship\r\n            console.log(\"Creating spaceship...\");\r\n            this.spaceship = new Spaceship(this.scene);\r\n            \r\n            // Set spaceship reference in physics\r\n            this.physics.setSpaceship(this.spaceship);\r\n            \r\n            // Set spaceship reference in environment (for VibeVerse portals)\r\n            this.environment.setSpaceship(this.spaceship);\r\n            \r\n            // Initialize UI\r\n            this.ui = new UI(this.spaceship, this.environment);\r\n            \r\n            // Share audio reference with UI for sound-based components\r\n            this.ui.setAudio(this.audio);\r\n            \r\n            // Initialize controls last, as it depends on other components\r\n            this.controls = new Controls(this.spaceship, this.physics, this.environment, this.ui);\r\n            \r\n            // Share controls reference with UI for bidirectional communication\r\n            this.ui.setControls(this.controls);\r\n            \r\n            // Initialize settings\r\n            console.log(\"Initializing settings...\");\r\n            this.ui.initializeSettings(this);\r\n            \r\n            // Game state\r\n            this.isGameOver = false;\r\n            this.lastUpdateTime = performance.now();\r\n            this.frameCount = 0;\r\n            this.currentFPS = 0;\r\n            this.introSequenceActive = false; // Flag to prevent player control during intro\r\n            this.gameTime = 0; // Track total game time in seconds\r\n\r\n            // Perf overlay & sink\r\n            initPerfOverlay();\r\n            if (!window.__perf) window.__perf = {};\r\n            window.__perf.enabled = false;\r\n            \r\n            // Detect mobile device\r\n            this.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||\r\n                           (window.matchMedia && window.matchMedia('(max-width: 768px)').matches);\r\n            \r\n            // Frame rate cap (defaults to auto/monitor refresh rate)\r\n            this.frameRateCap = 0; // Will be updated by settings or refresh rate detection\r\n            this.warmupFrames = 10; // Number of frames to skip for timing stabilization\r\n            this.currentWarmupFrame = 0;\r\n            this.performanceStable = false;\r\n            \r\n            // Apply settings if available (restored block)\r\n            if (this.ui && this.ui.settings) {\r\n                this.applyFrameRateSettings();\r\n            }\r\n            \r\n            // Time tracking for frame rate cap and FPS calculation\r\n            this.lastFrameTime = 0;\r\n            this.actualFrameTime = 0;\r\n            this.frameStartTime = 0;\r\n            this.accumulator = 0;\r\n            this.fixedDeltaTime = 1/60; // Fixed 60 Hz update rate\r\n            \r\n            // FPS averaging for smoother display\r\n            this.fpsBuffer = [];\r\n            this.fpsBufferSize = 15; // Smaller buffer for more responsive updates\r\n            \r\n            // Initialize difficulty manager \r\n            console.log(\"Initializing difficulty manager...\");\r\n            this.initializeDifficultyManager();\r\n            \r\n            // Register event handlers\r\n            this.setupEventHandlers();\r\n            \r\n            // Pre-bind animate method to avoid creating a new function every frame\r\n            this.boundAnimate = this.animate.bind(this);\r\n            \r\n            // Reusable deltaTime variable to avoid creating new variables in hot path\r\n            this.deltaTime = 0;\r\n            \r\n            // Start the initialization sequence\r\n            this.initializeGameSequence();\r\n            \r\n        } catch (error) {\r\n            console.error(\"Error in game initialization:\", error);\r\n            throw error; // Re-throw to show in the UI\r\n        }\r\n    }\r\n    \r\n    // Initialize game in sequence, showing start screen first and loading non-essentials after\r\n    async initializeGameSequence() {\r\n        try {\r\n            console.log(\"Starting game initialization sequence...\");\r\n            \r\n            // Add a small delay to let browser stabilize after page load\r\n            await new Promise(resolve => setTimeout(resolve, 100));\r\n            \r\n            // Resume audio context if needed (browser autoplay policy)\r\n            if (this.audio && this.audio.audioContext && this.audio.audioContext.state === 'suspended') {\r\n                try {\r\n                    this.audio.resumeAudioContext();\r\n                } catch (e) {\r\n                    console.log(\"Audio context couldn't be resumed yet, will try again after user interaction\");\r\n                }\r\n            }\r\n            \r\n            // Show the start screen immediately\r\n            if (this.ui && this.ui.startScreen) {\r\n                console.log(\"Showing start screen\");\r\n                this.ui.startScreen.show();\r\n            } else {\r\n                console.error(\"Start screen not found, falling back to default behavior\");\r\n                this.fallbackToDefaultBehavior();\r\n            }\r\n            \r\n            // Start game loop with warm-up frames\r\n            console.log(\"Starting game loop with warm-up frames\");\r\n            requestAnimationFrame(this.boundAnimate);\r\n            \r\n            // Initialize remaining systems in the background after start screen is shown\r\n            this.initializeRemainingSystemsAsync();\r\n            \r\n            console.log(\"Game initialization sequence completed successfully\");\r\n        } catch (error) {\r\n            console.error(\"Error during game initialization sequence:\", error);\r\n            \r\n            // Show error in UI if possible\r\n            if (this.ui && this.ui.showError) {\r\n                this.ui.showError(\"Failed to initialize game: \" + error.message);\r\n            } else {\r\n                alert(\"Failed to initialize game: \" + error.message);\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Initialize remaining systems asynchronously after showing the start screen\r\n    async initializeRemainingSystemsAsync() {\r\n        try {\r\n            // Start loading audio in the background\r\n            this.loadAudioAsync();\r\n            \r\n            // Initialize combat systems asynchronously\r\n            console.log(\"Initializing combat module asynchronously...\");\r\n            if (!this.combat) {\r\n                this.combat = new Combat(this.scene, this.spaceship);\r\n                \r\n                // Ensure the ECS world in combat is properly initialized\r\n                if (this.combat.world) {\r\n                    console.log(\"Combat ECS world successfully created\");\r\n                } else {\r\n                    console.log(\"Waiting for combat ECS world to initialize...\");\r\n                    // Add a check to ensure the player entity exists\r\n                    setTimeout(() => {\r\n                        if (this.combat.world && this.combat.playerEntity) {\r\n                            console.log(\"Combat ECS world and player entity initialized after delay\");\r\n                        } else {\r\n                            console.warn(\"Combat ECS world or player entity not available after delay, recreating...\");\r\n                            if (this.combat.createPlayerReferenceEntity) {\r\n                                this.combat.createPlayerReferenceEntity();\r\n                            }\r\n                        }\r\n                    }, 1000);\r\n                }\r\n            }\r\n            \r\n            // Initialize common object pools after start screen is shown\r\n            setTimeout(() => {\r\n                this.initializeObjectPools();\r\n                \r\n                // Pre-warm essential shaders and projectile assets after start screen is shown\r\n                this.preWarmBasicShaders();\r\n            }, 100);\r\n        } catch (error) {\r\n            console.error(\"Error initializing remaining systems:\", error);\r\n        }\r\n    }\r\n    \r\n    // Load audio asynchronously after showing the start screen\r\n    async loadAudioAsync() {\r\n        try {\r\n            if (this.audio) {\r\n                // Initialize audio in the background\r\n                console.log(\"Initializing audio system asynchronously...\");\r\n                this.audio.initialize().then(() => {\r\n                    console.log(\"Audio system initialization complete\");\r\n                }).catch(error => {\r\n                    console.error(\"Error initializing audio:\", error);\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error loading audio:\", error);\r\n        }\r\n    }\r\n    \r\n    // Pre-warm only the most essential shaders needed for immediate gameplay\r\n    preWarmBasicShaders() {\r\n        console.log(\"Pre-warming essential shaders...\");\r\n        \r\n        // Create template projectile geometry and materials\r\n        this.projectileGeometry = new THREE.SphereGeometry(1.8, 12, 12);\r\n        this.projectileMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x00ffff,\r\n            emissive: 0x00ffff,\r\n            emissiveIntensity: 5,\r\n            metalness: 0.7,\r\n            roughness: 0.3\r\n        });\r\n        \r\n        // Create simple dummy objects to warm up the renderer\r\n        const dummyProjectile = new THREE.Mesh(this.projectileGeometry, this.projectileMaterial);\r\n        \r\n        // Add to scene temporarily\r\n        this.scene.add(dummyProjectile);\r\n        \r\n        // Force shader compilation for better performance\r\n            this.renderer.renderer.compile(this.scene, this.camera);\r\n        \r\n        // Remove dummy object after compilation\r\n            this.renderer._withGuard(() => this.scene.remove(dummyProjectile));\r\n        \r\n        console.log(\"Essential shaders pre-warmed\");\r\n    }\r\n    \r\n    // Initialize object pools for commonly created objects\r\n    initializeObjectPools() {\r\n        console.log(\"Initializing object pools...\");\r\n        \r\n        // Hit effect pool\r\n        window.objectPool.createPool('hitEffect', () => {\r\n            // Create geometry only once\r\n            if (!this.hitEffectGeometry) {\r\n                this.hitEffectGeometry = new THREE.SphereGeometry(1, 8, 8);\r\n            }\r\n            \r\n            // Create a default material that will be customized on get()\r\n            const material = new THREE.MeshBasicMaterial({\r\n                color: 0xffffff,\r\n                transparent: true,\r\n                opacity: 0.8\r\n            });\r\n            \r\n            // Create the mesh\r\n            const mesh = new THREE.Mesh(this.hitEffectGeometry, material);\r\n            \r\n            // Return an object with reset and clear methods\r\n            return {\r\n                mesh: mesh,\r\n                material: material,\r\n                \r\n                // Reset function for when the object is retrieved from the pool\r\n                reset: function(color = 0xff5500, size = 1) {\r\n                    this.material.color.set(color);\r\n                    this.material.opacity = 0.8;\r\n                    this.mesh.scale.set(size, size, size);\r\n                    this.mesh.visible = true;\r\n                },\r\n                \r\n                // Clear function for when the object is returned to the pool\r\n                clear: function() {\r\n                    if (this.mesh.parent) {\r\n                        this.mesh.parent.remove(this.mesh);\r\n                    }\r\n                    this.mesh.visible = false;\r\n                }\r\n            };\r\n        }, 20, 100); // Pre-create 20, max 100\r\n        \r\n        // Projectile pool\r\n        window.objectPool.createPool('projectile', () => {\r\n            // Create projectile geometry only once\r\n            if (!this.projectileGeometry) {\r\n                this.projectileGeometry = new THREE.SphereGeometry(2, 8, 8);\r\n            }\r\n            \r\n            // Create a default material that will be customized on get()\r\n            const material = new THREE.MeshStandardMaterial({\r\n                color: 0x00ffff,\r\n                emissive: 0x00ffff,\r\n                emissiveIntensity: 1,\r\n                metalness: 0.3,\r\n                roughness: 0.2\r\n            });\r\n            \r\n            // Create the mesh\r\n            const mesh = new THREE.Mesh(this.projectileGeometry, material);\r\n            \r\n            // Return an object with reset and clear methods\r\n            return {\r\n                mesh: mesh,\r\n                material: material,\r\n                velocity: new THREE.Vector3(),\r\n                \r\n                // Reset function for when the object is retrieved from the pool\r\n                reset: function(position, direction, speed = 500, color = 0x00ffff) {\r\n                    // Set position\r\n                    this.mesh.position.copy(position);\r\n                    \r\n                    // Set velocity based on direction and speed\r\n                    this.velocity.copy(direction).normalize().multiplyScalar(speed);\r\n                    \r\n                    // Set color\r\n                    this.material.color.set(color);\r\n                    this.material.emissive.set(color);\r\n                    \r\n                    // Make visible\r\n                    this.mesh.visible = true;\r\n                },\r\n                \r\n                // Clear function for when the object is returned to the pool\r\n                clear: function() {\r\n                    if (this.mesh.parent) {\r\n                        this.mesh.parent.remove(this.mesh);\r\n                    }\r\n                    this.mesh.visible = false;\r\n                    this.velocity.set(0, 0, 0);\r\n                }\r\n            };\r\n        }, 50, 200); // Pre-create 50, max 200\r\n        \r\n        // Particle effect pool\r\n        window.objectPool.createPool('particleEffect', () => {\r\n            // Create particles\r\n            const particleCount = 20;\r\n            const particles = new THREE.BufferGeometry();\r\n            \r\n            // Use typed arrays for better performance\r\n            const positions = new Float32Array(particleCount * 3);\r\n            const colors = new Float32Array(particleCount * 3);\r\n            \r\n            // Initialize particle positions and colors\r\n            for (let i = 0; i < particleCount; i++) {\r\n                const i3 = i * 3;\r\n                // All particles start at origin\r\n                positions[i3] = 0;\r\n                positions[i3 + 1] = 0;\r\n                positions[i3 + 2] = 0;\r\n                \r\n                // Default white color\r\n                colors[i3] = 1;\r\n                colors[i3 + 1] = 1;\r\n                colors[i3 + 2] = 1;\r\n            }\r\n            \r\n            // Set particle attributes\r\n            particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n            particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n            \r\n            // Create particle material\r\n            const particleMaterial = new THREE.PointsMaterial({\r\n                size: 3,\r\n                transparent: true,\r\n                opacity: 0.8,\r\n                vertexColors: true,\r\n                blending: THREE.AdditiveBlending\r\n            });\r\n            \r\n            // Create particle system\r\n            const particleSystem = new THREE.Points(particles, particleMaterial);\r\n            \r\n            // Return an object with reset and clear methods\r\n            return {\r\n                system: particleSystem,\r\n                velocities: new Float32Array(particleCount * 3),\r\n                lifetime: new Float32Array(particleCount),\r\n                maxLifetime: new Float32Array(particleCount),\r\n                \r\n                // Reset function for when the object is retrieved from the pool\r\n                reset: function(position, color = new THREE.Color(1, 1, 1), size = 3, particleSpeed = 20) {\r\n                    // Set particle system position\r\n                    this.system.position.copy(position);\r\n                    \r\n                    // Get position and color arrays\r\n                    const positions = this.system.geometry.attributes.position.array;\r\n                    const colors = this.system.geometry.attributes.color.array;\r\n                    \r\n                    // Set material size\r\n                    this.system.material.size = size;\r\n                    \r\n                    // Initialize particles\r\n                    for (let i = 0; i < particleCount; i++) {\r\n                        const i3 = i * 3;\r\n                        \r\n                        // Reset particle position to center\r\n                        positions[i3] = 0;\r\n                        positions[i3 + 1] = 0;\r\n                        positions[i3 + 2] = 0;\r\n                        \r\n                        // Set particle color\r\n                        colors[i3] = color.r;\r\n                        colors[i3 + 1] = color.g;\r\n                        colors[i3 + 2] = color.b;\r\n                        \r\n                        // Random velocity in all directions\r\n                        const theta = Math.random() * Math.PI * 2;\r\n                        const phi = Math.random() * Math.PI;\r\n                        \r\n                        this.velocities[i3] = Math.sin(phi) * Math.cos(theta) * (Math.random() * particleSpeed);\r\n                        this.velocities[i3 + 1] = Math.sin(phi) * Math.sin(theta) * (Math.random() * particleSpeed);\r\n                        this.velocities[i3 + 2] = Math.cos(phi) * (Math.random() * particleSpeed);\r\n                        \r\n                        // Random lifetime\r\n                        this.maxLifetime[i] = 0.5 + Math.random() * 1.5; // 0.5 to 2 seconds\r\n                        this.lifetime[i] = this.maxLifetime[i];\r\n                    }\r\n                    \r\n                    // Update attributes\r\n                    this.system.geometry.attributes.position.needsUpdate = true;\r\n                    this.system.geometry.attributes.color.needsUpdate = true;\r\n                    \r\n                    // Make visible and add to scene\r\n                    this.system.visible = true;\r\n                    if (!this.system.parent) {\r\n                        window.game.scene.add(this.system);\r\n                    }\r\n                    \r\n                    // Start the animation\r\n                    this.animate();\r\n                },\r\n                \r\n                // Animation function\r\n                animate: function() {\r\n                    if (!this.system.visible) return;\r\n                    \r\n                    // Get position and color arrays\r\n                    const positions = this.system.geometry.attributes.position.array;\r\n                    const colors = this.system.geometry.attributes.color.array;\r\n                    \r\n                    // Track if any particles are still alive\r\n                    let anyAlive = false;\r\n                    \r\n                    // Update particles\r\n                    for (let i = 0; i < particleCount; i++) {\r\n                        const i3 = i * 3;\r\n                        \r\n                        // Update lifetime\r\n                        this.lifetime[i] -= 0.016; // Approximate 60fps\r\n                        \r\n                        // Skip dead particles\r\n                        if (this.lifetime[i] <= 0) continue;\r\n                        \r\n                        anyAlive = true;\r\n                        \r\n                        // Move particle based on velocity\r\n                        positions[i3] += this.velocities[i3] * 0.016;\r\n                        positions[i3 + 1] += this.velocities[i3 + 1] * 0.016;\r\n                        positions[i3 + 2] += this.velocities[i3 + 2] * 0.016;\r\n                        \r\n                        // Update alpha based on lifetime\r\n                        const lifeRatio = this.lifetime[i] / this.maxLifetime[i];\r\n                        this.system.material.opacity = lifeRatio;\r\n                    }\r\n                    \r\n                    // Update attributes\r\n                    this.system.geometry.attributes.position.needsUpdate = true;\r\n                    \r\n                    // Continue animation if particles are still alive\r\n                    if (anyAlive) {\r\n                        requestAnimationFrame(this.animate.bind(this));\r\n                    } else {\r\n                        this.clear();\r\n                    }\r\n                },\r\n                \r\n                // Clear function for when the object is returned to the pool\r\n                clear: function() {\r\n                    if (this.system.parent) {\r\n                        this.system.parent.remove(this.system);\r\n                    }\r\n                    this.system.visible = false;\r\n                }\r\n            };\r\n        }, 10, 50); // Pre-create 10, max 50\r\n        \r\n        console.log(\"Object pools initialized\");\r\n    }\r\n    \r\n    startDocked() {\r\n        // Start the game docked with the stargate for tutorial/intro\r\n        // Make sure the ship is already docked\r\n        if (this.spaceship) {\r\n            // Ensure the ship is docked\r\n            if (!this.spaceship.isDocked) {\r\n        this.spaceship.dock();\r\n            }\r\n        }\r\n        \r\n        // Show stargate UI after a short delay\r\n        setTimeout(() => {\r\n            if (this.controls && this.controls.dockingSystem) {\r\n                // Just show stargate UI without changing state\r\n                this.controls.dockingSystem.dockWithStargate();\r\n                console.log(\"Stargate UI shown\");\r\n            } else {\r\n                console.error(\"Controls or dockingSystem not available\");\r\n            }\r\n        }, 500);\r\n    }\r\n    \r\n    /**\r\n     * Initialize the intro sequence\r\n     */\r\n    initIntroSequence() {\r\n        console.log(\"Initializing intro sequence...\");\r\n        \r\n        // Create intro sequence instance\r\n        this.introSequence = new IntroSequence(\r\n            this.scene,\r\n            this.camera,\r\n            this.spaceship,\r\n            this.audio\r\n        );\r\n        \r\n        // Store original camera and player positions\r\n        this.originalCameraPosition = this.camera.position.clone();\r\n        this.originalCameraRotation = this.camera.rotation.clone();\r\n        \r\n        console.log(\"Intro sequence initialized\");\r\n    }\r\n    \r\n    /**\r\n     * Start the intro sequence\r\n     */\r\n    startIntroSequence() {\r\n        if (!this.introSequence) {\r\n            this.initIntroSequence();\r\n        }\r\n        \r\n        console.log(\"Starting intro sequence...\");\r\n        this.introSequenceActive = true; // Mark intro as active to prevent player control\r\n        \r\n        // Freeze all enemies during intro sequence\r\n        if (this.combat && this.combat.world && this.combat.enemySystem) {\r\n            console.log(\"Freezing all enemies for intro sequence\");\r\n            this.combat.enemySystem.freezeAllEnemies();\r\n        } else if (window.game && window.game.ecsWorld && window.game.ecsWorld.enemySystem) {\r\n            console.log(\"Freezing all enemies via global reference for intro sequence\");\r\n            window.game.ecsWorld.enemySystem.freezeAllEnemies();\r\n        }\r\n        \r\n        // Set initial camera position to match intro sequence starting position\r\n        // This prevents any camera flash from being visible\r\n        this.camera.position.set(0, 6000, 12000);\r\n        this.camera.lookAt(30000, 5000, 0);\r\n        \r\n        // Disable player controls\r\n        if (this.controls && this.controls.inputHandler) {\r\n            this.controls.inputHandler.enabled = false;\r\n        }\r\n        \r\n        // Explicitly hide stargate UI\r\n        if (this.ui && this.ui.stargateInterface) {\r\n            console.log(\"Explicitly hiding stargate UI before intro sequence\");\r\n            this.ui.stargateInterface.hideStargateUI();\r\n        }\r\n        \r\n        // Hide all UI elements\r\n        if (this.ui) {\r\n            this.ui.hideUI();\r\n        }\r\n        \r\n        // Make sure player ship is initially hidden\r\n        if (this.spaceship && this.spaceship.mesh) {\r\n            this.spaceship.mesh.visible = false;\r\n        }\r\n        \r\n        // Start the sequence with a completion callback\r\n        this.introSequence.startSequence(() => {\r\n            this.completeIntroSequence();\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Handle completion of the intro sequence\r\n     */\r\n    completeIntroSequence() {\r\n        console.log(\"Intro sequence completed - final phase\");\r\n        \r\n        // Unfreeze all enemies after intro sequence\r\n        if (this.combat && this.combat.world && this.combat.enemySystem) {\r\n            console.log(\"Unfreezing all enemies after intro sequence\");\r\n            this.combat.enemySystem.unfreezeAllEnemies();\r\n        } else if (window.game && window.game.ecsWorld && window.game.ecsWorld.enemySystem) {\r\n            console.log(\"Unfreezing all enemies via global reference after intro sequence\");\r\n            window.game.ecsWorld.enemySystem.unfreezeAllEnemies();\r\n        }\r\n        \r\n        // Explicitly hide stargate UI if it's visible\r\n        if (this.ui && this.ui.stargateInterface) {\r\n            console.log(\"Explicitly hiding stargate UI after intro sequence\");\r\n            this.ui.stargateInterface.hideStargateUI();\r\n        }\r\n        \r\n        // Mark intro as complete - now the player can control the ship/camera\r\n        this.introSequenceActive = false;\r\n        \r\n        // Show all UI elements AFTER marking intro inactive\r\n        if (this.ui) {\r\n            console.log(\"Showing game UI elements after intro completion\");\r\n            this.ui.showUI();\r\n        }\r\n        \r\n        // Make sure the player ship is visible and UNDOCKED\r\n        if (this.spaceship && this.spaceship.mesh) {\r\n            this.spaceship.mesh.visible = true;\r\n            \r\n            // Force undocked state\r\n            if (this.spaceship.isDocked) {\r\n                console.log(\"Forcing undocked state in completeIntroSequence\");\r\n                this.spaceship.isDocked = false;\r\n            }\r\n        }\r\n        \r\n        // NOW is when we re-enable player controls (at the very end)\r\n        if (this.controls && this.controls.inputHandler) {\r\n            console.log(\"Re-enabling player controls\");\r\n            this.controls.inputHandler.enabled = true;\r\n        }\r\n        \r\n        // Mark intro as played in local storage\r\n        localStorage.setItem('introPlayed', 'true');\r\n        \r\n        // Emit event for other systems\r\n        if (window.mainMessageBus) {\r\n            window.mainMessageBus.publish('intro.completed', {});\r\n        }\r\n        \r\n        console.log(\"Game starting after intro sequence\");\r\n    }\r\n    \r\n    setupEventHandlers() {\r\n        // Handle window resize\r\n        window.addEventListener('resize', this.handleResize);\r\n        \r\n        // Handle visibility change to pause/resume game\r\n        document.addEventListener('visibilitychange', this.handleVisibilityChange);\r\n        \r\n        // Handle keyboard events\r\n        document.addEventListener('keydown', this.handleKeyDown);\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        if (this.isGameOver) return;\r\n        \r\n        // Update horde mode survival time if active\r\n        if (this.isHordeActive) {\r\n            this.hordeSurvivalTime = performance.now() - this.hordeStartTime;\r\n        }\r\n        \r\n            // Update physics\r\n            this.physics.update(deltaTime);\r\n        \r\n        // Update spaceship\r\n        if (this.spaceship.update) {\r\n            this.spaceship.update(deltaTime);\r\n        }\r\n        \r\n        // Update difficulty manager (but not during intro sequence)\r\n        if (this.difficultyManager && !this.introSequenceActive && !this.spaceship.isDocked) {\r\n            this.difficultyManager.update(deltaTime);\r\n        }\r\n        \r\n        // Update coordinates in HUD after physics update\r\n        if (this.ui && this.ui.updateCoordinates && this.spaceship && this.spaceship.mesh) {\r\n            // Use direct position reference instead of creating a new object\r\n            const position = this.spaceship.mesh.position;\r\n            this.ui.updateCoordinates(position.x, position.y, position.z);\r\n        }\r\n        \r\n        // Calculate instantaneous FPS based on frame time\r\n        const now = performance.now();\r\n        const instantFPS = this.actualFrameTime ? 1000 / this.actualFrameTime : 60;\r\n        \r\n        // Add to FPS buffer with weighted preference to more recent readings\r\n        // This helps the FPS display stabilize faster when frame rate changes\r\n        this.fpsBuffer.push(instantFPS);\r\n        if (this.fpsBuffer.length > this.fpsBufferSize) {\r\n            this.fpsBuffer.shift(); // Remove oldest value\r\n        }\r\n        \r\n        // Use weighted average to more accurately represent current FPS\r\n        // Gives more importance to recent frames\r\n        let totalWeight = 0;\r\n        let weightedSum = 0;\r\n        \r\n        for (let i = 0; i < this.fpsBuffer.length; i++) {\r\n            // Weight increases linearly with frame index (newer frames get higher weight)\r\n            const weight = i + 1;\r\n            weightedSum += this.fpsBuffer[i] * weight;\r\n            totalWeight += weight;\r\n        }\r\n        \r\n        // Calculate weighted average for smoother display\r\n        this.currentFPS = Math.round(weightedSum / totalWeight);\r\n        \r\n        // Only update FPS display every few frames to reduce DOM operations\r\n        if (this.frameCount % 5 === 0 && this.ui && this.ui.updateFPS) {\r\n            // If capped, show cap information along with actual FPS\r\n            if (this.frameRateCap > 0) {\r\n                this.ui.updateFPS(this.currentFPS, this.frameRateCap);\r\n            } else {\r\n                this.ui.updateFPS(this.currentFPS);\r\n            }\r\n        }\r\n        \r\n        // Update controls\r\n        if (this.controls.update) {\r\n            this.controls.update();\r\n        }\r\n        \r\n        // Ensure the combat system's player entity is always up to date\r\n        if (this.combat && this.combat.updatePlayerReference) {\r\n            try {\r\n                this.combat.updatePlayerReference();\r\n            } catch (error) {\r\n                console.warn(\"Error updating player reference:\", error);\r\n            }\r\n        } else if (this.combat && !this.combat.updatePlayerReference) {\r\n            console.warn(\"Combat module does not have updatePlayerReference method\");\r\n            \r\n            // Try to initialize player entity directly if method is missing\r\n            if (this.combat.createPlayerReferenceEntity && !this.combat.playerEntity) {\r\n                console.log(\"Creating player entity directly since updatePlayerReference is not available\");\r\n                this.combat.createPlayerReferenceEntity();\r\n            }\r\n        }\r\n        \r\n        // Update combat systems - this will update the ECS world\r\n        if (this.combat && this.combat.update) {\r\n            this.combat.update(deltaTime);\r\n        }\r\n        \r\n        // Update environment\r\n        if (this.environment.update) {\r\n            this.environment.update();\r\n        }\r\n        \r\n        // Update UI\r\n        if (this.ui.update) {\r\n            this.ui.update();\r\n        }\r\n        \r\n        // Update audio\r\n        this.updateAudio();\r\n        \r\n        // Check for game over conditions\r\n        this.checkGameOver();\r\n        \r\n        // Count frames for performance monitoring\r\n        this.frameCount++;\r\n        \r\n            // Update the ECS world with the current delta time - skip during intro sequence\r\n            if (this.world && !this.introSequenceActive) {\r\n                // Fixed-step for ECS using same delta to keep in lockstep\r\n                this.world.messageBus && this.world.messageBus.fastPublish && this.world.messageBus.fastPublish('world.preUpdate', { deltaTime });\r\n                this.world.systemManager.update(deltaTime);\r\n                this.world.messageBus && this.world.messageBus.fastPublish && this.world.messageBus.fastPublish('world.postUpdate', { deltaTime });\r\n            } else if (this.world && this.introSequenceActive) {\r\n            // If intro is active, only update essential systems but not enemy systems\r\n            // This is a fallback in case freezeAllEnemies() wasn't called or doesn't work\r\n            if (this.world.entityManager && this.world.systemManager) {\r\n                for (const system of this.world.systemManager.systems) {\r\n                    // Skip enemy-related systems during intro\r\n                    if (system.constructor.name !== 'EnemySystem' && \r\n                        system.constructor.name !== 'EnemyAISystem' && \r\n                        system.constructor.name !== 'CombatSystem') {\r\n                        system.update(deltaTime);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Update game sounds based on current game state\r\n    updateAudio() {\r\n        if (!this.audio || !this.spaceship) return;\r\n        \r\n        // Handle thruster sounds based on current thrust state\r\n        if (this.spaceship.isDocked) {\r\n            // No thruster sounds when docked\r\n            this.audio.stopSound('thrust');\r\n        } else {\r\n            const isThrusting = this.spaceship.thrust.forward || \r\n                              this.spaceship.thrust.backward || \r\n                              this.spaceship.thrust.left || \r\n                              this.spaceship.thrust.right;\r\n                              \r\n            if (isThrusting) {\r\n                // Play thrust sound if not already playing\r\n                this.audio.playSound('thrust');\r\n                \r\n                // Calculate thrust intensity for volume\r\n                let thrustIntensity = 0.5; // Base level\r\n                \r\n                if (this.spaceship.thrust.forward) thrustIntensity += 0.2;\r\n                if (this.spaceship.thrust.backward) thrustIntensity += 0.1;\r\n                if (this.spaceship.thrust.left) thrustIntensity += 0.1;\r\n                if (this.spaceship.thrust.right) thrustIntensity += 0.1;\r\n                \r\n                // Boost increases volume\r\n                if (this.spaceship.thrust.boost) thrustIntensity *= 1.5;\r\n                \r\n                // Set thrust volume\r\n                this.audio.setThrustVolume(thrustIntensity);\r\n            } else {\r\n                // Stop thrust sound if no thrusters active\r\n                this.audio.stopSound('thrust');\r\n            }\r\n        }\r\n        \r\n        // Mining sound is handled by the mining system integration\r\n    }\r\n    \r\n    checkGameOver() {\r\n        // Make sure spaceship exists\r\n        if (!this.spaceship) return;\r\n        \r\n        // Don't check for game over conditions if the ship is docked\r\n        if (this.spaceship.isDocked) return;\r\n        \r\n        // Check if out of fuel and not near stargate\r\n        if (this.spaceship.fuel <= 0 && \r\n            this.controls.dockingSystem && \r\n            !this.controls.dockingSystem.nearStargate) {\r\n            this.gameOver(\"Your ship ran out of fuel\");\r\n            return;\r\n        }\r\n        \r\n        // Check for collision with sun\r\n        // Reuse a single vector for calculation instead of creating a new one\r\n        const sunPosition = window.vectorPool.get(0, 0, 0);\r\n        const distanceToSun = this.spaceship.mesh.position.distanceTo(sunPosition);\r\n        window.vectorPool.release(sunPosition);\r\n        \r\n        if (distanceToSun < 400) { // Sun collision radius\r\n            this.gameOver(\"Your ship was destroyed by the sun's heat\");\r\n            return;\r\n        }\r\n    }\r\n    \r\n    gameOver(message) {\r\n        if (this.isGameOver) return;\r\n        \r\n        console.log(\"Game over:\", message);\r\n        this.isGameOver = true;\r\n        \r\n        // Play explosion sound\r\n        if (this.audio) {\r\n            this.audio.playSound('explosion');\r\n        }\r\n        \r\n        // Show game over screen with resources collected\r\n        if (this.ui.showGameOver && this.controls.resources) {\r\n            // Add horde mode information to the game stats\r\n            const gameStats = {\r\n                resources: this.controls.resources,\r\n                hordeMode: {\r\n                    active: this.isHordeActive,\r\n                    survivalTime: this.isHordeActive ? this.getFormattedHordeSurvivalTime() : \"00:00\",\r\n                    rawSurvivalTime: this.hordeSurvivalTime || 0\r\n                }\r\n            };\r\n            \r\n            this.ui.showGameOver(gameStats, message);\r\n        }\r\n        \r\n        // Stop spaceship movement if it exists\r\n        if (this.spaceship && this.spaceship.thrust) {\r\n            this.spaceship.thrust.forward = false;\r\n            this.spaceship.thrust.backward = false;\r\n            this.spaceship.thrust.left = false;\r\n            this.spaceship.thrust.right = false;\r\n            this.spaceship.thrust.boost = false;\r\n        }\r\n        \r\n        // Stop all control inputs\r\n        if (this.controls && this.controls.inputHandler) {\r\n            this.controls.inputHandler.exitPointerLock();\r\n        }\r\n        \r\n        // Set a timeout to clean up resources after the game over screen has been shown\r\n        // This ensures all final animations and sounds can play before cleanup\r\n        this.gameOverCleanupTimeout = setTimeout(() => {\r\n            // Keep references to the UI and audio for the game over screen\r\n            const ui = this.ui;\r\n            const audio = this.audio;\r\n            \r\n            // Prevent these specific modules from being cleaned up\r\n            this.ui = null;\r\n            this.audio = null;\r\n            \r\n            // Clean up other resources\r\n            this.destroy();\r\n            \r\n            // Restore references for the game over screen\r\n            this.ui = ui;\r\n            this.audio = audio;\r\n        }, 5000); // 5 seconds delay\r\n    }\r\n    \r\n    animate(timestamp) {\r\n        // Handle warm-up frames for timing stabilization\r\n        if (this.currentWarmupFrame < this.warmupFrames) {\r\n            this.currentWarmupFrame++;\r\n            \r\n            // Initialize timing on first real frame after warm-up\r\n            if (this.currentWarmupFrame === this.warmupFrames) {\r\n                this.lastFrameTime = timestamp;\r\n                this.frameStartTime = performance.now();\r\n                this.lastUpdateTime = performance.now();\r\n                this.performanceStable = true;\r\n                console.log(`Warm-up complete, starting game loop`);\r\n            }\r\n            \r\n            // Continue warm-up\r\n            requestAnimationFrame(this.boundAnimate);\r\n            return;\r\n        }\r\n        \r\n        // Initialize frame timing if needed (fallback)\r\n        if (!this.lastFrameTime) {\r\n            this.lastFrameTime = timestamp;\r\n            this.frameStartTime = performance.now();\r\n            // Request next frame and return\r\n            requestAnimationFrame(this.boundAnimate);\r\n            return; // Skip first frame to establish baseline\r\n        }\r\n        \r\n        // Track actual frame time for FPS calculation\r\n        this.actualFrameTime = timestamp - this.lastFrameTime;\r\n        \r\n        // Frame rate cap handling\r\n        if (this.frameRateCap > 0) {\r\n            // Calculate target frame duration in milliseconds\r\n            const targetFrameTime = 1000 / this.frameRateCap;\r\n            \r\n            // Calculate elapsed time since last rendered frame\r\n            const elapsedSinceLastFrame = timestamp - this.lastFrameTime;\r\n            \r\n            // If we haven't reached the target frame time yet, skip this frame\r\n            if (elapsedSinceLastFrame < targetFrameTime - 0.5) { // Subtract small amount to account for timing imprecision\r\n                // Request next frame and return early\r\n                requestAnimationFrame(this.boundAnimate);\r\n                return;\r\n            }\r\n            \r\n            // Update timing for next frame - use the exact target time\r\n            // This helps maintain a more consistent frame rate\r\n            this.lastFrameTime += targetFrameTime;\r\n            \r\n            // If we're more than one frame behind, catch up to avoid spiraling\r\n            if (timestamp - this.lastFrameTime > targetFrameTime) {\r\n                this.lastFrameTime = timestamp;\r\n            }\r\n        } else {\r\n            // No cap, just update the frame time\r\n            this.lastFrameTime = timestamp;\r\n        }\r\n        \r\n        // Calculate delta time with better precision\r\n        const now = performance.now();\r\n        let frameDelta = Math.min(now - this.lastUpdateTime, 100) / 1000; // Clamped to 100ms\r\n        \r\n        // Performance auto-adjustment\r\n        if (this.performanceStable && this.frameCount % 60 === 0) {\r\n            this.checkPerformanceAndAdjust();\r\n        }\r\n        \r\n        // Improved fixed timestep implementation\r\n        // Use fixed timestep for consistent physics on all refresh rates\r\n        const useFixedTimestep = !this.frameRateCap || this.frameRateCap > 90 || this.frameRateCap === 0;\r\n        \r\n        if (useFixedTimestep) {\r\n            // Accumulate time for fixed timestep\r\n            this.accumulator += frameDelta;\r\n            \r\n            // Use consistent 60Hz physics timestep\r\n            const fixedTimestep = this.fixedDeltaTime || (1/60);\r\n            let updates = 0;\r\n            const maxUpdates = 4; // Allow up to 4 updates to catch up\r\n            \r\n            const simStart = performance.now();\r\n            \r\n            // Process fixed timestep updates\r\n            while (this.accumulator >= fixedTimestep && updates < maxUpdates) {\r\n                // Snapshot transforms before step for interpolation\r\n                if (this.combat && this.combat.world) {\r\n                    const ents = this.combat.world.getEntitiesWithComponents(['TransformComponent']);\r\n                    for (const e of ents) {\r\n                        const t = e.getComponent('TransformComponent');\r\n                        if (t && t.snapshotPrevious) t.snapshotPrevious();\r\n                    }\r\n                }\r\n                \r\n                // Fixed timestep update\r\n                this.update(fixedTimestep);\r\n                this.accumulator -= fixedTimestep;\r\n                updates++;\r\n            }\r\n            \r\n            const simEnd = performance.now();\r\n            \r\n            // Prevent spiral of death - if we're too far behind, reset\r\n            if (this.accumulator > fixedTimestep * 2) {\r\n                console.warn(`Resetting accumulator from ${this.accumulator} to prevent spiral`);\r\n                this.accumulator = fixedTimestep;\r\n            }\r\n            \r\n            // Calculate interpolation factor for smooth rendering\r\n            const alpha = Math.min(this.accumulator / fixedTimestep, 1.0);\r\n            \r\n            // Render with interpolation\r\n            const renderStart = performance.now();\r\n            if (this.renderer.interpolateMeshes) {\r\n                this.renderer.interpolateMeshes(alpha);\r\n            }\r\n            this.renderer.render();\r\n            const renderEnd = performance.now();\r\n\r\n            // Update perf sink\r\n            if (window.__perf) {\r\n                const frameFps = this.actualFrameTime ? (1000 / this.actualFrameTime) : 60;\r\n                window.__perf.fps = Math.round(frameFps);\r\n                window.__perf.simMs = (simEnd - simStart) || 0;\r\n                window.__perf.renderMs = (renderEnd - renderStart) || 0;\r\n            }\r\n        } else {\r\n            // For locked frame rates, use simple delta time\r\n            this.deltaTime = frameDelta;\r\n            const simStart = performance.now();\r\n            // Snapshot transforms before variable step (still provide some interpolation)\r\n            if (this.combat && this.combat.world) {\r\n                const ents = this.combat.world.getEntitiesWithComponents(['TransformComponent']);\r\n                for (const e of ents) {\r\n                    const t = e.getComponent('TransformComponent');\r\n                    t && t.snapshotPrevious && t.snapshotPrevious();\r\n                }\r\n            }\r\n            this.update(this.deltaTime);\r\n            const simEnd = performance.now();\r\n            const renderStart = performance.now();\r\n            if (this.renderer.interpolateMeshes) this.renderer.interpolateMeshes(1);\r\n            this.renderer.render();\r\n            const renderEnd = performance.now();\r\n            if (window.__perf) {\r\n                window.__perf.fps = Math.round(1 / (this.deltaTime||0.016));\r\n                window.__perf.simMs = (simEnd - simStart) || 0;\r\n                window.__perf.renderMs = (renderEnd - renderStart) || 0;\r\n            }\r\n        }\r\n        \r\n        this.lastUpdateTime = now;\r\n        \r\n        // Update frame counter\r\n        this.frameCount++;\r\n        \r\n        // Request next frame at the END of the animation cycle\r\n        requestAnimationFrame(this.boundAnimate);\r\n    }\r\n    \r\n    pause() {\r\n        // Pause game logic here\r\n        console.log('Game paused');\r\n        \r\n        // Mute audio when game is paused\r\n        if (this.audio) {\r\n            this.audio.muted = true;\r\n            for (const sound of Object.values(this.audio.sounds)) {\r\n                sound.muted = true;\r\n            }\r\n            for (const track of this.audio.music) {\r\n                track.muted = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    resume() {\r\n        // Resume game logic here\r\n        console.log('Game resumed');\r\n        this.lastUpdateTime = performance.now(); // Reset timer to avoid large delta\r\n        \r\n        // Unmute audio when game is resumed\r\n        if (this.audio && !this.audio.muted) {\r\n            for (const sound of Object.values(this.audio.sounds)) {\r\n                sound.muted = false;\r\n            }\r\n            for (const track of this.audio.music) {\r\n                track.muted = false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Create a fallback for the initOptimizedECS method that is causing errors\r\n    initOptimizedECS() {\r\n        // [PRESERVED FOR FUTURE SCALING]\r\n        // This method is a placeholder for a potential future implementation\r\n        // of the optimized ECS system using TypedArrays and Data-Oriented Design.\r\n        // \r\n        // The optimized components, systems and DataStore code are preserved \r\n        // in the codebase for future performance scaling needs, such as:\r\n        // - Massive asteroid fields (1000+ asteroids)\r\n        // - Large-scale space battles\r\n        // - Advanced particle systems\r\n        console.log(\"initOptimizedECS called - This is a placeholder implementation\");\r\n        \r\n        // Check if we need to initialize optimized systems\r\n        if (this.world && typeof this.world.getSystem !== 'function') {\r\n            console.log(\"Adding getSystem method to World class to fix compatibility issues\");\r\n            // Add getSystem method to World prototype if it doesn't exist\r\n            this.world.getSystem = function(systemType) {\r\n                if (this.systemManager && typeof this.systemManager.getSystem === 'function') {\r\n                    return this.systemManager.getSystem(systemType);\r\n                }\r\n                return null;\r\n            };\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Toggle debug mode\r\n     */\r\n    toggleDebugMode() {\r\n        window.DEBUG_MODE = !window.DEBUG_MODE;\r\n        console.log(`Debug mode ${window.DEBUG_MODE ? 'enabled' : 'disabled'}`);\r\n        \r\n        // Initialize or remove performance monitor\r\n        if (window.DEBUG_MODE) {\r\n            if (this.ui && !document.getElementById('performance-stats')) {\r\n                this.ui.initializePerformanceMonitor();\r\n            }\r\n            \r\n            // Force memory stats update\r\n            if (window.MemoryStats) {\r\n                window.MemoryStats.update();\r\n                window.MemoryStats.logReport();\r\n            }\r\n        } else {\r\n            // Remove performance monitor if it exists\r\n            const statsElement = document.getElementById('performance-stats');\r\n            if (statsElement) {\r\n                statsElement.remove();\r\n            }\r\n            \r\n            // Clear interval if it exists\r\n            if (this.ui && this.ui.statsInterval) {\r\n                clearInterval(this.ui.statsInterval);\r\n                this.ui.statsInterval = null;\r\n            }\r\n        }\r\n        \r\n        // Add global debug command to trigger intro sequence\r\n        window.playIntro = () => {\r\n            if (this.startIntroSequence) {\r\n                console.log(\"Manually triggering intro sequence\");\r\n                this.startIntroSequence();\r\n                return \"Playing intro sequence...\";\r\n            }\r\n            return \"Intro sequence not available\";\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * Initialize difficulty manager when combat system is ready\r\n     */\r\n    initializeDifficultyManager() {\r\n        // Initialize difficulty manager for dynamic difficulty scaling\r\n        this.difficultyManager = {\r\n            params: {\r\n                maxEnemies: 10,\r\n                spawnInterval: 3,\r\n                enemyHealth: 20,\r\n                enemyDamage: 15,\r\n                enemySpeed: 700\r\n            },\r\n            gameTime: 0,\r\n            currentLevel: 1,\r\n            \r\n            update: function(deltaTime) {\r\n                // Update game time in minutes\r\n                this.gameTime += deltaTime;\r\n                const minutes = this.gameTime / 60;\r\n                \r\n                // Calculate level based on minutes played\r\n                // Level increases every 3 minutes\r\n                const newLevel = Math.floor(minutes / 3) + 1;\r\n                \r\n                // Only update if level changed\r\n                if (newLevel !== this.currentLevel) {\r\n                    this.currentLevel = newLevel;\r\n                    \r\n                    // Get difficulty multiplier: 1x at level 1, 1.5x at level 2, 2x at level 3, etc.\r\n                    // Cap at level 5 (3x difficulty) for fairness\r\n                    const difficultyMultiplier = 1 + (Math.min(this.currentLevel - 1, 4) * 0.5);\r\n                    \r\n                    // Update parameters\r\n                    this.params.maxEnemies = Math.min(10 * difficultyMultiplier, 30);\r\n                    this.params.spawnInterval = Math.max(3 / difficultyMultiplier, 1);\r\n                    this.params.enemyHealth = Math.floor(20 * difficultyMultiplier);\r\n                    this.params.enemyDamage = Math.floor(15 * difficultyMultiplier);\r\n                    this.params.enemySpeed = Math.min(700 * (1 + (0.2 * (this.currentLevel - 1))), 1400);\r\n                    \r\n                    console.log(`Difficulty increased to level ${this.currentLevel} (${difficultyMultiplier}x)`);\r\n                    console.log(`Parameters: maxEnemies=${this.params.maxEnemies}, spawnInterval=${this.params.spawnInterval}`);\r\n                    console.log(`Health=${this.params.enemyHealth}, Damage=${this.params.enemyDamage}, Speed=${this.params.enemySpeed}`);\r\n                }\r\n            }\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * Activate horde mode (extreme survival challenge)\r\n     */\r\n    activateHordeMode() {\r\n        if (this.isHordeActive) return; // Already active\r\n        \r\n        console.log(\"ACTIVATING HORDE MODE - EXTREME SURVIVAL CHALLENGE\");\r\n        this.isHordeActive = true;\r\n        this.hordeStartTime = performance.now();\r\n        this.hordeSurvivalTime = 0;\r\n        \r\n        // Play an intense sound to signal the start of horde mode\r\n        if (this.audio) {\r\n            this.audio.playSound('boink');\r\n        }\r\n        \r\n        // Notify UI to update\r\n        window.mainMessageBus.publish('horde.activated', {\r\n            startTime: this.hordeStartTime\r\n        });\r\n        \r\n        // Notify the player\r\n        if (this.ui && this.ui.showNotification) {\r\n            this.ui.showNotification(\"HORDE MODE ACTIVATED - SURVIVE!\", 5000);\r\n        }\r\n        \r\n        // Force player to undock if currently docked\r\n        if (this.spaceship && this.spaceship.isDocked) {\r\n            console.log(\"Horde mode forcing undock from stargate\");\r\n            \r\n            // Undock the ship\r\n            this.spaceship.undock();\r\n            \r\n            // Notify the docking system\r\n            window.mainMessageBus.publish('player.requestUndock', {\r\n                forced: true,\r\n                reason: \"horde_mode_activation\"\r\n            });\r\n            \r\n            // CRITICAL FIX: Explicitly show the HUD after forcing undock\r\n            // Use a short delay to ensure undocking process is complete\r\n            setTimeout(() => {\r\n                console.log(\"Horde mode ensuring HUD is visible\");\r\n                if (this.ui && this.ui.showUI) {\r\n                    this.ui.showUI();\r\n                }\r\n            }, 200);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Format horde survival time as MM:SS\r\n     * @returns {string} Formatted time string\r\n     */\r\n    getFormattedHordeSurvivalTime() {\r\n        const totalSeconds = Math.floor(this.hordeSurvivalTime / 1000);\r\n        const minutes = Math.floor(totalSeconds / 60);\r\n        const seconds = totalSeconds % 60;\r\n        return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n    }\r\n    \r\n    /**\r\n     * Clean up all game resources, event listeners, and references\r\n     * Call this when the game is no longer needed to prevent memory leaks\r\n     */\r\n    destroy() {\r\n        console.log(\"Cleaning up game resources...\");\r\n        \r\n        // Cancel animation frame\r\n        if (this.boundAnimate) {\r\n            cancelAnimationFrame(this.boundAnimate);\r\n            this.boundAnimate = null;\r\n        }\r\n        \r\n        // Clear any pending timeouts\r\n        if (this.gameOverCleanupTimeout) {\r\n            clearTimeout(this.gameOverCleanupTimeout);\r\n            this.gameOverCleanupTimeout = null;\r\n        }\r\n        \r\n        // Remove event listeners\r\n        window.removeEventListener('resize', this.handleResize);\r\n        document.removeEventListener('visibilitychange', this.handleVisibilityChange);\r\n        document.removeEventListener('keydown', this.handleKeyDown);\r\n        \r\n        // Clean up modules\r\n        if (this.renderer) {\r\n            this.renderer.dispose();\r\n            this.renderer = null;\r\n        }\r\n        \r\n        if (this.audio) {\r\n            this.audio.dispose();\r\n            this.audio = null;\r\n        }\r\n        \r\n        if (this.physics) {\r\n            this.physics.dispose();\r\n            this.physics = null;\r\n        }\r\n        \r\n        if (this.spaceship) {\r\n            this.spaceship.dispose();\r\n            this.spaceship = null;\r\n        }\r\n        \r\n        if (this.environment) {\r\n            this.environment.dispose();\r\n            this.environment = null;\r\n        }\r\n        \r\n        if (this.controls) {\r\n            this.controls.dispose();\r\n            this.controls = null;\r\n        }\r\n        \r\n        if (this.ui) {\r\n            this.ui.dispose();\r\n            this.ui = null;\r\n        }\r\n        \r\n        if (this.combat) {\r\n            this.combat.dispose();\r\n            this.combat = null;\r\n        }\r\n        \r\n        if (this.introSequence) {\r\n            this.introSequence.destroy();\r\n            this.introSequence = null;\r\n        }\r\n        \r\n        // Clean up ECS world\r\n        if (this.world) {\r\n            // Destroy all entities\r\n            if (this.world.entityManager) {\r\n                const entityIds = [...this.world.entityManager.entities.keys()];\r\n                for (const entityId of entityIds) {\r\n                    this.world.destroyEntity(entityId);\r\n                }\r\n            }\r\n            \r\n            // Destroy all systems\r\n            if (this.world.systemManager) {\r\n                for (const system of this.world.systemManager.systems) {\r\n                    if (system.onDestroyed && typeof system.onDestroyed === 'function') {\r\n                        system.onDestroyed();\r\n                    }\r\n                }\r\n            }\r\n            \r\n            this.world = null;\r\n        }\r\n        \r\n        // Unsubscribe from MessageBus\r\n        if (window.mainMessageBus) {\r\n            window.mainMessageBus.unsubscribe('game.over', this.gameOver.bind(this));\r\n        }\r\n        \r\n        // Clear global references\r\n        window.game = null;\r\n        \r\n        // Clear object pools\r\n        if (window.vectorPool) {\r\n            window.vectorPool.pool = [];\r\n        }\r\n        \r\n        if (window.objectPool) {\r\n            window.objectPool.clearAllPools();\r\n        }\r\n        \r\n        // Clear references\r\n        this.scene = null;\r\n        this.camera = null;\r\n        this.fpsBuffer = [];\r\n        \r\n        console.log(\"Game resources cleaned up successfully\");\r\n    }\r\n    \r\n    /**\r\n     * Handle window resize event\r\n     * @private\r\n     */\r\n    handleResize = () => {\r\n        if (this.renderer) {\r\n            this.renderer.handleResize();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Handle visibility change event\r\n     * @private\r\n     */\r\n    handleVisibilityChange = () => {\r\n        if (document.hidden) {\r\n            this.pause();\r\n        } else {\r\n            this.resume();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Handle key down event\r\n     * @param {KeyboardEvent} e Key event\r\n     * @private\r\n     */\r\n    handleKeyDown = (e) => {\r\n        if (e.key === 'Escape' && document.pointerLockElement) {\r\n            document.exitPointerLock();\r\n        }\r\n        \r\n        // Add audio mute toggle (M key)\r\n        if (e.key.toLowerCase() === 'm' && this.audio) {\r\n            const isMuted = this.audio.toggleMute();\r\n            console.log(`Audio ${isMuted ? 'muted' : 'unmuted'}`);\r\n        }\r\n        \r\n        // Add debug mode toggle (D key + Shift)\r\n        if (e.key.toLowerCase() === 'd' && e.shiftKey) {\r\n            this.toggleDebugMode();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Apply frame rate settings based on detected refresh rate and user preferences\r\n     */\r\n    applyFrameRateSettings() {\r\n        if (!this.ui || !this.ui.settings) return;\r\n        \r\n        const settings = this.ui.settings.settings;\r\n        const refreshRate = this.ui.settings.monitorRefreshRate || 60;\r\n        \r\n        if (settings.frameRateCap === 'auto') {\r\n            // Mobile devices: cap at 60fps for battery life\r\n            if (this.isMobile) {\r\n                this.frameRateCap = 60;\r\n                console.log(`Mobile device: capping at 60fps for battery life`);\r\n            }\r\n            // High refresh displays: use adaptive approach\r\n            else if (refreshRate > 90) {\r\n                // For very high refresh rates, use fixed timestep with interpolation\r\n                this.frameRateCap = 0; // Unlimited with fixed timestep\r\n                this.fixedDeltaTime = 1/60; // Keep physics at 60Hz\r\n                console.log(`High refresh display (${refreshRate}Hz): using fixed 60Hz physics with interpolation`);\r\n            }\r\n            else if (refreshRate > 65) {\r\n                // For moderate high refresh (75-90Hz), cap at refresh rate\r\n                this.frameRateCap = refreshRate;\r\n                console.log(`Moderate high refresh (${refreshRate}Hz): capping at monitor rate`);\r\n            } else {\r\n                // Standard 60Hz display\r\n                this.frameRateCap = refreshRate;\r\n                console.log(`Standard display: matching refresh rate at ${refreshRate}Hz`);\r\n            }\r\n        } else {\r\n            // Manual setting\r\n            this.frameRateCap = parseInt(settings.frameRateCap) || 0;\r\n            \r\n            // Override for mobile if unlimited\r\n            if (this.isMobile && this.frameRateCap === 0) {\r\n                this.frameRateCap = 60;\r\n                console.log(`Mobile device: overriding unlimited to 60fps`);\r\n            }\r\n        }\r\n        \r\n        console.log(`Frame rate configuration: cap=${this.frameRateCap}, fixed timestep=${this.fixedDeltaTime * 1000}ms`);\r\n    }\r\n    \r\n    /**\r\n     * Monitor performance and auto-adjust settings if needed\r\n     */\r\n    checkPerformanceAndAdjust() {\r\n        if (!this.ui || !this.ui.settings || !this.ui.settings.settings.autoQuality) {\r\n            return;\r\n        }\r\n        \r\n        // Calculate average FPS over recent samples\r\n        if (this.fpsBuffer.length < 10) return;\r\n        \r\n        const avgFPS = this.fpsBuffer.reduce((a, b) => a + b, 0) / this.fpsBuffer.length;\r\n        const targetFPS = this.frameRateCap || 60;\r\n        const performanceRatio = avgFPS / targetFPS;\r\n        \r\n        // Auto-adjust quality if performance is poor\r\n        if (performanceRatio < 0.85) { // Less than 85% of target FPS\r\n            const currentQuality = this.ui.settings.settings.graphicalQuality;\r\n            \r\n            if (currentQuality === 'high') {\r\n                console.log(`Performance low (${Math.round(avgFPS)}fps), reducing quality to medium`);\r\n                this.ui.settings.settings.graphicalQuality = 'medium';\r\n                this.ui.settings.applyGraphicsSettings();\r\n                this.ui.settings.saveSettings();\r\n            } else if (currentQuality === 'medium') {\r\n                console.log(`Performance low (${Math.round(avgFPS)}fps), reducing quality to low`);\r\n                this.ui.settings.settings.graphicalQuality = 'low';\r\n                this.ui.settings.applyGraphicsSettings();\r\n                this.ui.settings.saveSettings();\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Fallback to old behavior if start screen is not available\r\n    fallbackToDefaultBehavior() {\r\n        // Check if intro has been played before\r\n        const introPlayed = localStorage.getItem('introPlayed') === 'true';\r\n        \r\n        if (introPlayed) {\r\n            console.log(\"Intro already played, starting in docked state\");\r\n            // Only set initial camera position if we're not doing the intro\r\n            this.camera.position.set(0, 1500, 0);\r\n            // Only start docked if we've already seen the intro\r\n            this.startDocked();\r\n        } else {\r\n            console.log(\"First time playing, preparing for intro sequence\");\r\n            // Make sure ship is docked but DON'T show the UI\r\n            if (this.spaceship && !this.spaceship.isDocked) {\r\n                this.spaceship.dock();\r\n            }\r\n            // Start intro with a small delay to ensure everything is loaded\r\n            setTimeout(() => {\r\n                this.startIntroSequence();\r\n            }, 500);\r\n        }\r\n    }\r\n}\r\n\r\n// Bridge legacy window.objectPool to unified PoolRegistry (no-alloc facade)\r\n(() => {\r\n    const registry = getGlobalPoolRegistry();\r\n    window.objectPool = {\r\n        createPool: function(type, factory, initialSize = 10, maxSize = 100) {\r\n            registry.register(type, { factory, reset: (o)=>{}, preallocate: initialSize, maxSize });\r\n        },\r\n        get: function(type, ...args) {\r\n            try { return registry.get(type, ...args); } catch (e) { console.warn(e.message); return null; }\r\n        },\r\n        release: function(type, obj) { registry.release(type, obj); },\r\n        clearAllPools: function() { registry.clearAll(); },\r\n        clearPool: function(type) { registry.clear(type); }\r\n    };\r\n})();\r\n\r\nfunction startGameMainModule() {\r\n    // Add a console message to help debug loading issues\r\n    console.log(\"DOM ready, starting game initialization...\");\r\n    \r\n    // Clear any existing WebGL contexts to ensure clean start\r\n    const canvases = document.querySelectorAll('canvas');\r\n    canvases.forEach(canvas => {\r\n        const gl = canvas.getContext('webgl') || canvas.getContext('webgl2');\r\n        if (gl && gl.getExtension('WEBGL_lose_context')) {\r\n            gl.getExtension('WEBGL_lose_context').loseContext();\r\n        }\r\n    });\r\n    \r\n    // Small delay to ensure clean GPU state\r\n    setTimeout(() => {\r\n        initializeGame();\r\n    }, 50);\r\n}\r\n\r\nfunction initializeGame() {\r\n    // Initialize the game directly instead of using a loading screen\r\n    console.log(\"Creating game instance...\");\r\n    \r\n    // Initialize the game with error handling\r\n    try {\r\n        console.log(\"Checking for THREE module availability...\");\r\n        // Log THREE availability for debugging\r\n        console.log(\"THREE available:\", typeof THREE !== 'undefined');\r\n        \r\n        window.game = new Game(); // Initialize the game\r\n        \r\n        // Preload projectile assets to prevent stutter\r\n        console.log(\"Precomputing projectile assets and warming shaders...\");\r\n        \r\n        // Create template projectile geometry and materials\r\n        window.game.projectileGeometry = new THREE.SphereGeometry(1.8, 12, 12);\r\n        window.game.projectileMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x00ffff,\r\n            emissive: 0x00ffff,\r\n            emissiveIntensity: 5,\r\n            metalness: 0.7,\r\n            roughness: 0.3\r\n        });\r\n        \r\n        // Create template glow geometry and material\r\n        window.game.projectileGlowGeometry = new THREE.SphereGeometry(2.4, 16, 16);\r\n        window.game.projectileGlowMaterial = new THREE.MeshBasicMaterial({\r\n            color: 0x00ffff,\r\n            transparent: true,\r\n            opacity: 0.4,\r\n            blending: THREE.AdditiveBlending\r\n        });\r\n        \r\n        // Precompute trail particle geometries for different sizes\r\n        console.log(\"Precomputing trail particle geometries...\");\r\n        window.game.trailParticleGeometries = [];\r\n        const numPoints = 20; // Match the number in addProjectileTrail\r\n        \r\n        for (let i = 0; i < numPoints; i++) {\r\n            const ratio = i / numPoints;\r\n            const size = 0.5 * (1 - ratio); // Match the size calculation in addProjectileTrail\r\n            const particleGeometry = new THREE.SphereGeometry(size, 8, 8);\r\n            window.game.trailParticleGeometries.push(particleGeometry);\r\n        }\r\n        \r\n        // Force shader compilation for better performance\r\n        console.log(\"Warming shaders...\");\r\n        const dummyProjectile = new THREE.Mesh(window.game.projectileGeometry, window.game.projectileMaterial);\r\n        const dummyGlow = new THREE.Mesh(window.game.projectileGlowGeometry, window.game.projectileGlowMaterial);\r\n        dummyProjectile.add(dummyGlow);\r\n        \r\n        // Add to scene temporarily\r\n        if (window.game && window.game.renderer && typeof window.game.renderer._withGuard === 'function') {\r\n            window.game.renderer._withGuard(() => window.game.scene.add(dummyProjectile));\r\n        } else {\r\n            window.game.scene.add(dummyProjectile);\r\n        }\r\n        \r\n        // Precompute and warm shaders for explosion and hit effects\r\n        console.log(\"Precomputing explosion effect assets...\");\r\n        \r\n        // Create template explosion particle geometry and materials\r\n        window.game.explosionGeometry = new THREE.SphereGeometry(1, 8, 8);\r\n        window.game.explosionMaterial = new THREE.MeshBasicMaterial({\r\n            color: 0xff5500,\r\n            transparent: true,\r\n            opacity: 0.8\r\n        });\r\n        \r\n        // Create template hit effect geometry\r\n        window.game.hitEffectGeometry = new THREE.SphereGeometry(1, 8, 8);\r\n        \r\n        // Create dummy explosion particles for shader warming\r\n        const dummyExplosionContainer = new THREE.Group();\r\n        if (window.game && window.game.renderer && typeof window.game.renderer._withGuard === 'function') {\r\n            window.game.renderer._withGuard(() => window.game.scene.add(dummyExplosionContainer));\r\n        } else {\r\n            window.game.scene.add(dummyExplosionContainer);\r\n        }\r\n        \r\n        // Create a sample of explosion particles with various sizes\r\n        const explosionParticleCount = 20;\r\n        const dummyExplosionParticles = [];\r\n        \r\n        for (let i = 0; i < explosionParticleCount; i++) {\r\n            const size = Math.random() * 2 + 1;\r\n            const particle = new THREE.Mesh(\r\n                window.game.explosionGeometry,\r\n                window.game.explosionMaterial.clone() // Clone material for individual control\r\n            );\r\n            \r\n            // Position out of view but still rendered\r\n            particle.position.set(\r\n                Math.random() * 10 - 5,\r\n                Math.random() * 10 - 5,\r\n                Math.random() * 10 - 5\r\n            );\r\n            particle.position.multiplyScalar(10).add(new THREE.Vector3(0, -10000, 0));\r\n            \r\n            // Add to container\r\n            dummyExplosionContainer.add(particle);\r\n            dummyExplosionParticles.push(particle);\r\n        }\r\n        \r\n        // Create explosion particle effect pool\r\n        window.objectPool.createPool('explosionParticle', () => {\r\n            // Reuse the geometry and create a cloned material\r\n            const material = window.game.explosionMaterial.clone();\r\n            const mesh = new THREE.Mesh(window.game.explosionGeometry, material);\r\n            \r\n            return {\r\n                mesh: mesh,\r\n                material: material,\r\n                velocity: new THREE.Vector3(),\r\n                \r\n                // Reset function when retrieved from pool\r\n                reset: function(position, size = 1.0, color = 0xff5500) {\r\n                    // Check if position is defined, use default if not\r\n                    if (!position) {\r\n                        position = new THREE.Vector3(0, 0, 0);\r\n                    }\r\n                    \r\n                    // Set position\r\n                    this.mesh.position.copy(position);\r\n                    \r\n                    // Set size\r\n                    this.mesh.scale.set(size, size, size);\r\n                    \r\n                    // Set color and opacity\r\n                    this.material.color.set(color);\r\n                    this.material.opacity = 0.8;\r\n                    \r\n                    // Make visible\r\n                    this.mesh.visible = true;\r\n                },\r\n                \r\n                // Clear function when returned to pool\r\n                clear: function() {\r\n                    if (this.mesh.parent) {\r\n                        this.mesh.parent.remove(this.mesh);\r\n                    }\r\n                    this.mesh.visible = false;\r\n                    this.velocity.set(0, 0, 0);\r\n                }\r\n            };\r\n        }, 50, 200); // Pre-create 50, max 200\r\n        \r\n        // Ensure hitEffect pool exists before using it during warming\r\n        try {\r\n            let testHit = window.objectPool.get('hitEffect');\r\n            if (!testHit) {\r\n                // Minimal factory mirroring initializeObjectPools behavior\r\n                window.objectPool.createPool('hitEffect', () => {\r\n                    const geo = window.game.hitEffectGeometry || new THREE.SphereGeometry(1, 8, 8);\r\n                    const material = new THREE.MeshBasicMaterial({ color: 0xffffff, transparent: true, opacity: 0.8 });\r\n                    const mesh = new THREE.Mesh(geo, material);\r\n                    return {\r\n                        mesh,\r\n                        material,\r\n                        reset(color = 0xff5500, size = 1) {\r\n                            this.material.color.set(color);\r\n                            this.material.opacity = 0.8;\r\n                            this.mesh.scale.set(size, size, size);\r\n                            this.mesh.visible = true;\r\n                        },\r\n                        clear() {\r\n                            if (this.mesh.parent) { this.mesh.parent.remove(this.mesh); }\r\n                            this.mesh.visible = false;\r\n                        }\r\n                    };\r\n                }, 10, 100);\r\n            } else {\r\n                // Put back the test object since we just probed\r\n                window.objectPool.release('hitEffect', testHit);\r\n            }\r\n        } catch {}\r\n\r\n        // Create variation of hit effects with different colors for shader warming\r\n        const hitEffectColors = [0xff5500, 0x3399ff, 0xff0000, 0xffff00];\r\n        const dummyHitEffects = [];\r\n        \r\n        for (const color of hitEffectColors) {\r\n            const hitEffect = window.objectPool.get('hitEffect', color, 1.5);\r\n            if (hitEffect && hitEffect.mesh) {\r\n                // Position far away but still rendered\r\n                hitEffect.mesh.position.set(0, -10100, 0);\r\n                if (window.game && window.game.renderer && typeof window.game.renderer._withGuard === 'function') {\r\n                    window.game.renderer._withGuard(() => window.game.scene.add(hitEffect.mesh));\r\n                } else {\r\n                    window.game.scene.add(hitEffect.mesh);\r\n                }\r\n                dummyHitEffects.push(hitEffect);\r\n            }\r\n        }\r\n        \r\n        // Force shader compilation for all new objects\r\n        window.game.renderer.renderer.compile(window.game.scene, window.game.camera);\r\n        \r\n        console.log(\"Cleaning up dummy objects after warming...\");\r\n        \r\n        // Remove dummy explosion container after compilation\r\n        if (window.game && window.game.renderer && typeof window.game.renderer._withGuard === 'function') {\r\n            window.game.renderer._withGuard(() => window.game.scene.remove(dummyExplosionContainer));\r\n        } else {\r\n            window.game.scene.remove(dummyExplosionContainer);\r\n        }\r\n        for (const particle of dummyExplosionParticles) {\r\n            dummyExplosionContainer.remove(particle);\r\n        }\r\n        \r\n        // Return hit effects to pool\r\n        for (const hitEffect of dummyHitEffects) {\r\n            window.objectPool.release('hitEffect', hitEffect);\r\n        }\r\n        \r\n        console.log(\"Precomputed assets and shaders warmed successfully\");\r\n        \r\n        console.log(\"Game started successfully\");\r\n    } catch (error) {\r\n        console.error(\"Error starting game:\", error);\r\n        \r\n        // Show error message to user\r\n        const errorMessage = document.createElement('div');\r\n        errorMessage.style.position = 'fixed';\r\n        errorMessage.style.top = '50%';\r\n        errorMessage.style.left = '50%';\r\n        errorMessage.style.transform = 'translate(-50%, -50%)';\r\n        errorMessage.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\r\n        errorMessage.style.color = '#ff3030';\r\n        errorMessage.style.padding = '20px';\r\n        errorMessage.style.borderRadius = '10px';\r\n        errorMessage.style.border = '1px solid #ff3030';\r\n        errorMessage.style.zIndex = '9999';\r\n        errorMessage.style.textAlign = 'center';\r\n        errorMessage.style.fontFamily = 'Courier New, monospace';\r\n        errorMessage.style.maxWidth = '80%';\r\n        \r\n        errorMessage.innerHTML = `\r\n            <h2>Error Starting Game</h2>\r\n            <p>${error.message}</p>\r\n            <p>Check the console for more details (F12).</p>\r\n            <p>You can try refreshing the page or clearing your browser cache.</p>\r\n            <button id=\"reload-button\" style=\"background: #ff3030; color: white; border: none; padding: 10px; margin-top: 20px; cursor: pointer;\">Reload Page</button>\r\n        `;\r\n        \r\n        document.body.appendChild(errorMessage);\r\n        \r\n        // Add event listener to reload button\r\n        document.getElementById('reload-button').addEventListener('click', () => {\r\n            // Add cache-busting parameter to the URL\r\n            const cacheBuster = Date.now();\r\n            window.location.href = window.location.pathname + '?cache=' + cacheBuster;\r\n        });\r\n    }\r\n}\r\n\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', startGameMainModule);\r\n} else {\r\n    // DOM is already ready (e.g., module imported after DOMContentLoaded)\r\n    startGameMainModule();\r\n} "],"names":["THREE.Group","THREE.BufferGeometry","THREE.BufferAttribute","THREE.MeshStandardMaterial","THREE.Mesh","THREE.BoxGeometry","window","THREE.CylinderGeometry","THREE.SphereGeometry","THREE.ShaderMaterial","THREE.Color","THREE.DoubleSide","THREE.AdditiveBlending","THREE.RingGeometry","THREE.Points","THREE.Texture","THREE.PointsMaterial","THREE.Vector3","THREE.MeshBasicMaterial","positions","colors"],"mappings":";;;;;;;AAIO,MAAM,gBAAgB;AAAA,EACzB,YAAY,OAAO;AACf,SAAK,QAAQ;AACb,SAAK,OAAO;AACZ,SAAK,cAAc;AACnB,SAAK,eAAe;AACpB,SAAK,wBAAwB;AAC7B,SAAK,qBAAqB;AAG1B,SAAK,gBAAe;AAGpB,SAAK,MAAM,IAAI,KAAK,IAAI;AAExB,YAAQ,IAAI,0BAA0B;AAAA,EACzC;AAAA,EAED,kBAAkB;AAEd,SAAK,OAAO,IAAIA;AAChB,SAAK,KAAK,OAAO;AAGjB,UAAM,YAAY;AAGlB,SAAK,eAAe,SAAS;AAG7B,SAAK,oBAAoB,SAAS;AAGlC,SAAK,kBAAkB,SAAS;AAGhC,SAAK,qBAAqB,SAAS;AAGnC,SAAK,mBAAmB,SAAS;AAAA,EACpC;AAAA,EAED,eAAe,OAAO;AAElB,UAAM,aAAa;AACnB,UAAM,YAAY,QAAQ;AAC1B,UAAM,aAAa,QAAQ;AAC3B,UAAM,cAAc;AAGpB,UAAM,eAAe,IAAIC;AAGzB,UAAM,WAAW,IAAI,aAAa;AAAA;AAAA,MAE9B,CAAC,YAAU;AAAA,MAAG,CAAC,aAAW;AAAA,MAAG,aAAW;AAAA;AAAA,MACxC,YAAU;AAAA,MAAG,CAAC,aAAW;AAAA,MAAG,aAAW;AAAA;AAAA,MACvC,CAAC,YAAU;AAAA,MAAa,CAAC,aAAW;AAAA,MAAG,CAAC,aAAW;AAAA;AAAA,MAEnD,YAAU;AAAA,MAAG,CAAC,aAAW;AAAA,MAAG,aAAW;AAAA;AAAA,MACvC,YAAU;AAAA,MAAa,CAAC,aAAW;AAAA,MAAG,CAAC,aAAW;AAAA;AAAA,MAClD,CAAC,YAAU;AAAA,MAAa,CAAC,aAAW;AAAA,MAAG,CAAC,aAAW;AAAA;AAAA;AAAA,MAGnD,CAAC,YAAU;AAAA,MAAG,aAAW;AAAA,MAAG,aAAW;AAAA;AAAA,MACvC,CAAC,YAAU;AAAA,MAAa,aAAW;AAAA,MAAG,CAAC,aAAW;AAAA;AAAA,MAClD,YAAU;AAAA,MAAG,aAAW;AAAA,MAAG,aAAW;AAAA;AAAA,MAEtC,YAAU;AAAA,MAAG,aAAW;AAAA,MAAG,aAAW;AAAA;AAAA,MACtC,CAAC,YAAU;AAAA,MAAa,aAAW;AAAA,MAAG,CAAC,aAAW;AAAA;AAAA,MAClD,YAAU;AAAA,MAAa,aAAW;AAAA,MAAG,CAAC,aAAW;AAAA;AAAA;AAAA,MAGjD,CAAC,YAAU;AAAA,MAAG,CAAC,aAAW;AAAA,MAAG,aAAW;AAAA;AAAA,MACxC,CAAC,YAAU;AAAA,MAAG,aAAW;AAAA,MAAG,aAAW;AAAA;AAAA,MACvC,CAAC,YAAU;AAAA,MAAa,CAAC,aAAW;AAAA,MAAG,CAAC,aAAW;AAAA;AAAA,MAEnD,CAAC,YAAU;AAAA,MAAG,aAAW;AAAA,MAAG,aAAW;AAAA;AAAA,MACvC,CAAC,YAAU;AAAA,MAAa,aAAW;AAAA,MAAG,CAAC,aAAW;AAAA;AAAA,MAClD,CAAC,YAAU;AAAA,MAAa,CAAC,aAAW;AAAA,MAAG,CAAC,aAAW;AAAA;AAAA;AAAA,MAGnD,YAAU;AAAA,MAAG,CAAC,aAAW;AAAA,MAAG,aAAW;AAAA;AAAA,MACvC,YAAU;AAAA,MAAa,CAAC,aAAW;AAAA,MAAG,CAAC,aAAW;AAAA;AAAA,MAClD,YAAU;AAAA,MAAG,aAAW;AAAA,MAAG,aAAW;AAAA;AAAA,MAEtC,YAAU;AAAA,MAAG,aAAW;AAAA,MAAG,aAAW;AAAA;AAAA,MACtC,YAAU;AAAA,MAAa,CAAC,aAAW;AAAA,MAAG,CAAC,aAAW;AAAA;AAAA,MAClD,YAAU;AAAA,MAAa,aAAW;AAAA,MAAG,CAAC,aAAW;AAAA;AAAA;AAAA,MAGjD,CAAC,YAAU;AAAA,MAAG,CAAC,aAAW;AAAA,MAAG,aAAW;AAAA;AAAA,MACxC,CAAC,YAAU;AAAA,MAAG,aAAW;AAAA,MAAG,aAAW;AAAA;AAAA,MACvC,YAAU;AAAA,MAAG,CAAC,aAAW;AAAA,MAAG,aAAW;AAAA;AAAA,MAEvC,YAAU;AAAA,MAAG,CAAC,aAAW;AAAA,MAAG,aAAW;AAAA;AAAA,MACvC,CAAC,YAAU;AAAA,MAAG,aAAW;AAAA,MAAG,aAAW;AAAA;AAAA,MACvC,YAAU;AAAA,MAAG,aAAW;AAAA,MAAG,aAAW;AAAA;AAAA;AAAA,MAGtC,CAAC,YAAU;AAAA,MAAa,CAAC,aAAW;AAAA,MAAG,CAAC,aAAW;AAAA;AAAA,MACnD,CAAC,YAAU;AAAA,MAAa,aAAW;AAAA,MAAG,CAAC,aAAW;AAAA;AAAA,MAClD,YAAU;AAAA,MAAa,CAAC,aAAW;AAAA,MAAG,CAAC,aAAW;AAAA;AAAA,MAElD,YAAU;AAAA,MAAa,CAAC,aAAW;AAAA,MAAG,CAAC,aAAW;AAAA;AAAA,MAClD,CAAC,YAAU;AAAA,MAAa,aAAW;AAAA,MAAG,CAAC,aAAW;AAAA;AAAA,MAClD,YAAU;AAAA,MAAa,aAAW;AAAA,MAAG,CAAC,aAAW;AAAA;AAAA,IAC7D,CAAS;AAGe,QAAI,aAAa,SAAS,MAAM;AAGhD,iBAAa,aAAa,YAAY,IAAIC,gBAAsB,UAAU,CAAC,CAAC;AAG5E,UAAM,eAAe,IAAIC,qBAA2B;AAAA,MAChD,OAAO;AAAA,MACP,WAAW;AAAA,MACX,WAAW;AAAA,MACX,UAAU;AAAA,MACV,mBAAmB;AAAA,IAC/B,CAAS;AAGD,UAAM,OAAO,IAAIC,KAAW,cAAc,YAAY;AACtD,SAAK,SAAS;AAGd,SAAK,aAAa;AAClB,SAAK,gBAAgB;AAGrB,SAAK,KAAK,IAAI,IAAI;AAGlB,SAAK,cAAc,OAAO,IAAI;AAAA,EACjC;AAAA,EAED,cAAc,OAAO,YAAY;AAE7B,UAAM,cAAc,QAAQ;AAC5B,UAAM,aAAa,QAAQ;AAC3B,UAAM,cAAc,QAAQ;AAC5B,UAAM,SAAS,QAAQ;AAGvB,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,YAAM,SAAS,QAAQ,MAAO,IAAI;AAElC,YAAM,gBAAgB,IAAIC,YAAkB,YAAY,aAAa,WAAW;AAChF,YAAM,gBAAgB,IAAIF,qBAA2B;AAAA,QACjD,OAAO;AAAA,QACP,WAAW;AAAA,QACX,WAAW;AAAA,QACX,UAAU;AAAA,MAC1B,CAAa;AAED,YAAM,QAAQ,IAAIC,KAAW,eAAe,aAAa;AACzD,YAAM,SAAS,IAAI,GAAG,QAAQ,MAAM;AAEpC,YAAM,aAAa;AACnB,YAAM,gBAAgB;AAEtB,WAAK,KAAK,IAAI,KAAK;AAAA,IACtB;AAAA,EACJ;AAAA,EAED,oBAAoB,OAAO;AAEvB,UAAM,eAAe,QAAQ;AAC7B,UAAM,cAAc,QAAQ;AAC5B,UAAM,cAAc,QAAQ;AAC5B,UAAM,UAAU,QAAQ;AACxB,UAAM,UAAU,QAAQ;AAGxB,UAAM,iBAAiB,IAAID,qBAA2B;AAAA,MAClD,OAAO;AAAA,MACP,WAAW;AAAA,MACX,WAAW;AAAA,MACX,UAAU;AAAA,MACV,mBAAmB;AAAA,IAC/B,CAAS;AAGD,UAAM,oBAAoB,IAAIE,YAAkB,aAAa,cAAc,WAAW;AACtF,UAAM,YAAY,IAAID,KAAW,mBAAmB,cAAc;AAClE,cAAU,SAAS,IAAI,GAAG,SAAS,OAAO;AAC1C,cAAU,aAAa;AACvB,cAAU,gBAAgB;AAC1B,SAAK,KAAK,IAAI,SAAS;AAGvB,SAAK,iBAAiB,OAAO,WAAW,OAAO;AAG/C,UAAM,sBAAsB;AAC5B,UAAM,yBAAyB,IAAIC;AAAAA,MAC/B,cAAc;AAAA,MACd,eAAe;AAAA,MACf,cAAc;AAAA,IAC1B;AAGQ,UAAM,YAAY,IAAID,KAAW,wBAAwB,cAAc;AACvE,cAAU,SAAS,IAAI,CAAC,cAAc,KAAK,SAAS,UAAU,cAAc,GAAG;AAC/E,cAAU,aAAa;AACvB,cAAU,gBAAgB;AAC1B,SAAK,KAAK,IAAI,SAAS;AAGvB,UAAM,aAAa,IAAIA,KAAW,wBAAwB,cAAc;AACxE,eAAW,SAAS,IAAI,cAAc,KAAK,SAAS,UAAU,cAAc,GAAG;AAC/E,eAAW,aAAa;AACxB,eAAW,gBAAgB;AAC3B,SAAK,KAAK,IAAI,UAAU;AAAA,EAC3B;AAAA,EAED,iBAAiB,OAAO,aAAa,SAAS;AAE1C,UAAM,aAAa,QAAQ;AAC3B,UAAM,gBAAgB,QAAQ;AAC9B,UAAM,aAAa;AACnB,UAAM,aAAa;AACnB,UAAM,gBAAgB,UAAU,QAAQ;AACxC,UAAM,cAAc,QAAQ;AAG5B,UAAM,iBAAiB,IAAID,qBAA2B;AAAA,MAClD,OAAO;AAAA,MACP,UAAU;AAAA,MACV,mBAAmB;AAAA,MACnB,aAAa;AAAA,MACb,SAAS;AAAA,IACrB,CAAS;AAGD,aAAS,MAAM,GAAG,MAAM,YAAY,OAAO;AACvC,eAAS,MAAM,GAAG,MAAM,YAAY,OAAO;AAEvC,YAAI,KAAK,WAAW,KAAM;AAE1B,cAAM,iBAAiB,IAAIE,YAAkB,YAAY,YAAY,WAAW;AAChF,cAAMC,UAAS,IAAIF,KAAW,gBAAgB,cAAc;AAG5D,QAAAE,QAAO,SAAS;AAAA,WACX,MAAM,aAAW,KAAK;AAAA,UACvB,gBAAgB,MAAM;AAAA,UACtB,YAAY,SAAS,IAAI,QAAQ,OAAO;AAAA,QAC5D;AAEgB,aAAK,KAAK,IAAIA,OAAM;AAAA,MACvB;AAAA,IACJ;AAAA,EACJ;AAAA,EAED,kBAAkB,OAAO;AAErB,UAAM,eAAe,QAAQ;AAC7B,UAAM,eAAe,QAAQ;AAC7B,UAAM,UAAU,QAAQ;AACxB,UAAM,UAAU,QAAQ;AAGxB,UAAM,qBAAqB,QAAQ;AACnC,UAAM,sBAAsB,QAAQ;AACpC,UAAM,sBAAsB,QAAQ;AAEpC,UAAM,kBAAkB,IAAID,YAAkB,oBAAoB,qBAAqB,mBAAmB;AAC1G,UAAM,kBAAkB,IAAIF,qBAA2B;AAAA,MACnD,OAAO;AAAA,MACP,WAAW;AAAA,MACX,WAAW;AAAA,IACvB,CAAS;AAED,UAAM,gBAAgB,IAAIC,KAAW,iBAAiB,eAAe;AACrE,kBAAc,SAAS,IAAI,GAAG,SAAS,OAAO;AAC9C,kBAAc,aAAa;AAC3B,kBAAc,gBAAgB;AAC9B,SAAK,KAAK,IAAI,aAAa;AAG3B,UAAM,iBAAiB,IAAID,qBAA2B;AAAA,MAClD,OAAO;AAAA,MACP,UAAU;AAAA,MACV,mBAAmB;AAAA,MACnB,aAAa;AAAA,MACb,SAAS;AAAA,IACrB,CAAS;AAGD,UAAM,eAAe,IAAIA,qBAA2B;AAAA,MAChD,OAAO;AAAA,MACP,UAAU;AAAA,MACV,mBAAmB;AAAA,MACnB,aAAa;AAAA,MACb,SAAS;AAAA,IACrB,CAAS;AAGD,UAAM,aAAa;AACnB,UAAM,gBAAgB;AACtB,UAAM,kBAAkB,sBAAsB;AAE9C,aAAS,MAAM,GAAG,MAAM,YAAY,OAAO;AACvC,YAAM,OAAO,UAAU,mBAAmB,MAAM;AAEhD,eAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AAEpC,cAAM,QAAQ,KAAK,gBAAgB,KAAK,MAAM,sBAAsB,gBAAgB,KAAK;AAGzF,cAAM,iBAAiB,IAAII,iBAAuB,cAAc,eAAe,KAAK,cAAc,EAAE;AACpG,cAAM,SAAS,IAAIH,KAAW,gBAAgB,cAAc;AAG5D,eAAO,SAAS,IAAI,MAAM,MAAM,UAAU,sBAAsB,GAAG;AACnE,eAAO,SAAS,IAAI,KAAK,KAAK;AAE9B,aAAK,KAAK,IAAI,MAAM;AAGpB,cAAM,eAAe,IAAII,eAAqB,eAAe,KAAK,IAAI,EAAE;AACxE,cAAM,OAAO,IAAIJ,KAAW,cAAc,aAAa,MAAK,CAAE;AAC9D,aAAK,SAAS,IAAI,MAAM,MAAM,UAAU,sBAAsB,MAAM,eAAe,GAAG;AAEtF,aAAK,KAAK,IAAI,IAAI;AAClB,aAAK,YAAY,KAAK,IAAI;AAG1B,cAAM,oBAAoB,IAAII,eAAqB,eAAe,KAAK,IAAI,EAAE;AAC7E,cAAM,oBAAoB,aAAa;AACvC,0BAAkB,UAAU;AAC5B,cAAM,YAAY,IAAIJ,KAAW,mBAAmB,iBAAiB;AACrE,kBAAU,SAAS,KAAK,KAAK,QAAQ;AAErC,aAAK,KAAK,IAAI,SAAS;AACvB,aAAK,YAAY,KAAK,SAAS;AAAA,MAClC;AAAA,IACJ;AAGD,SAAK,2BAA2B,OAAO,SAAS,kBAAkB;AAAA,EACrE;AAAA,EAED,qBAAqB,OAAO;AAIxB,SAAK,cAAc,KAAK;AAGxB,SAAK,sBAAsB,KAAK;AAGhC,SAAK,uBAAuB,KAAK;AAAA,EACpC;AAAA,EAED,cAAc,OAAO;AAEjB,UAAM,eAAe,QAAQ;AAC7B,UAAM,eAAe,QAAQ;AAC7B,UAAM,aAAa,QAAQ;AAC3B,UAAM,aAAa,QAAQ;AAG3B,UAAM,iBAAiB,IAAID,qBAA2B;AAAA,MAClD,OAAO;AAAA,MACP,WAAW;AAAA,MACX,WAAW;AAAA,IACvB,CAAS;AAGD,UAAM,gBAAgB,CAAA;AACtB,aAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AACzB,YAAM,IAAI,QAAQ,MAAO,IAAI,QAAQ;AACrC,oBAAc,KAAK,CAAC,CAAC,QAAQ,KAAK,QAAQ,OAAO,CAAC,CAAC;AAAA,IACtD;AAGD,kBAAc,QAAQ,SAAO;AAEzB,YAAM,eAAe,IAAII,iBAAuB,YAAY,YAAY,YAAY,CAAC;AACrF,YAAM,OAAO,IAAIH,KAAW,cAAc,cAAc;AACxD,WAAK,SAAS,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AACxC,WAAK,KAAK,IAAI,IAAI;AAGlB,YAAM,iBAAiB,IAAIG,iBAAuB,cAAc,cAAc,cAAc,CAAC;AAC7F,YAAM,SAAS,IAAIH,KAAW,gBAAgB,cAAc;AAC5D,aAAO,SAAS,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,aAAa,MAAM,eAAe,KAAK,IAAI,CAAC,CAAC;AAClF,aAAO,SAAS,IAAI,KAAK,KAAK;AAC9B,aAAO,SAAS,IAAI,CAAC,KAAK,KAAK;AAC/B,WAAK,KAAK,IAAI,MAAM;AAAA,IAChC,CAAS;AAGD,UAAM,qBAAqB,CAAA;AAC3B,aAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AACzB,YAAM,IAAI,QAAQ,MAAO,IAAI,QAAQ;AACrC,yBAAmB,KAAK,CAAC,QAAQ,KAAK,QAAQ,OAAO,CAAC,CAAC;AAAA,IAC1D;AAGD,uBAAmB,QAAQ,SAAO;AAE9B,YAAM,eAAe,IAAIG,iBAAuB,YAAY,YAAY,YAAY,CAAC;AACrF,YAAM,OAAO,IAAIH,KAAW,cAAc,cAAc;AACxD,WAAK,SAAS,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AACxC,WAAK,KAAK,IAAI,IAAI;AAGlB,YAAM,iBAAiB,IAAIG,iBAAuB,cAAc,cAAc,cAAc,CAAC;AAC7F,YAAM,SAAS,IAAIH,KAAW,gBAAgB,cAAc;AAC5D,aAAO,SAAS,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,aAAa,MAAM,eAAe,KAAK,IAAI,CAAC,CAAC;AAClF,aAAO,SAAS,IAAI,KAAK,KAAK;AAC9B,aAAO,SAAS,IAAI,KAAK,KAAK;AAC9B,WAAK,KAAK,IAAI,MAAM;AAAA,IAChC,CAAS;AAAA,EACJ;AAAA,EAED,sBAAsB,OAAO;AAEzB,UAAM,cAAc,QAAQ;AAC5B,UAAM,cAAc,QAAQ;AAC5B,UAAM,eAAe,QAAQ;AAG7B,UAAM,iBAAiB,IAAID,qBAA2B;AAAA,MAClD,OAAO;AAAA,MACP,WAAW;AAAA,MACX,WAAW;AAAA,MACX,UAAU;AAAA,MACV,mBAAmB;AAAA,IAC/B,CAAS;AAGD,UAAM,uBAAuB,IAAIE,YAAkB,aAAa,aAAa,YAAY;AACzF,UAAM,eAAe,IAAID,KAAW,sBAAsB,cAAc;AACxE,iBAAa,SAAS,IAAI,GAAG,QAAQ,OAAO,QAAQ,GAAG;AACvD,SAAK,KAAK,IAAI,YAAY;AAG1B,UAAM,qBAAqB,IAAIC,YAAkB,aAAa,aAAa,eAAe,GAAG;AAG7F,UAAM,aAAa,IAAID,KAAW,oBAAoB,cAAc;AACpE,eAAW,SAAS,IAAI,CAAC,QAAQ,MAAM,QAAQ,OAAO,QAAQ,IAAI;AAClE,SAAK,KAAK,IAAI,UAAU;AAGxB,UAAM,kBAAkB,IAAIA,KAAW,oBAAoB,cAAc;AACzE,oBAAgB,SAAS,IAAI,QAAQ,MAAM,QAAQ,OAAO,QAAQ,IAAI;AACtE,SAAK,KAAK,IAAI,eAAe;AAAA,EAChC;AAAA,EAED,uBAAuB,OAAO;AAE1B,UAAM,aAAa,QAAQ;AAC3B,UAAM,QAAQ,QAAQ;AACtB,UAAM,QAAQ,QAAQ;AAGtB,UAAM,eAAe,IAAID,qBAA2B;AAAA,MAChD,OAAO;AAAA,MACP,WAAW;AAAA,MACX,WAAW;AAAA,MACX,aAAa;AAAA,MACb,SAAS;AAAA,MACT,UAAU;AAAA,MACV,mBAAmB;AAAA,IAC/B,CAAS;AAGD,UAAM,mBAAmB,IAAIK,eAAqB,YAAY,IAAI,IAAI,GAAG,KAAK,KAAK,GAAG,GAAG,KAAK,KAAK,CAAC;AACpG,UAAM,WAAW,IAAIJ,KAAW,kBAAkB,YAAY;AAC9D,aAAS,SAAS,IAAI,CAAC,QAAQ,MAAM,OAAO,KAAK;AACjD,aAAS,SAAS,IAAI,KAAK;AAC3B,SAAK,KAAK,IAAI,QAAQ;AAGtB,UAAM,wBAAwB,IAAII,eAAqB,YAAY,IAAI,IAAI,GAAG,KAAK,KAAK,GAAG,GAAG,KAAK,KAAK,CAAC;AACzG,UAAM,gBAAgB,IAAIJ,KAAW,uBAAuB,YAAY;AACxE,kBAAc,SAAS,IAAI,QAAQ,MAAM,OAAO,KAAK;AACrD,kBAAc,SAAS,IAAI,KAAK;AAChC,SAAK,KAAK,IAAI,aAAa;AAAA,EAC9B;AAAA,EAED,mBAAmB,OAAO;AAEtB,UAAM,gBAAgB,QAAQ;AAC9B,UAAM,mBAAmB,QAAQ;AACjC,UAAM,aAAa,QAAQ;AAG3B,UAAM,eAAe,IAAIK,eAAqB;AAAA,MAC1C,UAAU;AAAA,QACN,MAAM,EAAE,OAAO,EAAK;AAAA,QACpB,OAAO,EAAE,OAAO,IAAIC,MAAY,OAAQ,EAAG;AAAA,QAC3C,gBAAgB,EAAE,OAAO,GAAM;AAAA,QAC/B,gBAAgB,EAAE,OAAO,IAAK;AAAA,MACjC;AAAA,MACD,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQd,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAqChB,aAAa;AAAA,MACb,MAAMC;AAAAA,MACN,UAAUC;AAAAA;AAAAA,IACtB,CAAS;AAGD,UAAM,eAAe,IAAIL,iBAAuB,kBAAkB,eAAe,YAAY,IAAI,IAAI,IAAI;AACzG,SAAK,eAAe,IAAIH,KAAW,cAAc,YAAY;AAG7D,SAAK,aAAa,SAAS,IAAI,GAAG,CAAC,aAAW,GAAG,CAAC,QAAQ,GAAG;AAC7D,SAAK,aAAa,SAAS,IAAI,KAAK;AAGpC,SAAK,aAAa,UAAU;AAG5B,SAAK,KAAK,IAAI,KAAK,YAAY;AAG/B,SAAK,wBAAwB,KAAK;AAGlC,SAAK,qBAAqB,KAAK;AAAA,EAClC;AAAA,EAED,qBAAqB,OAAO;AAExB,UAAM,eAAe,IAAIS,aAAmB,QAAQ,KAAK,QAAQ,MAAM,EAAE;AACzE,UAAM,eAAe,IAAIJ,eAAqB;AAAA,MAC1C,UAAU;AAAA,QACN,MAAM,EAAE,OAAO,EAAK;AAAA,QACpB,OAAO,EAAE,OAAO,IAAIC,MAAY,OAAQ,EAAG;AAAA,MAC9C;AAAA,MACD,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOd,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAsBhB,aAAa;AAAA,MACb,MAAMC;AAAAA,MACN,UAAUC;AAAAA,MACV,YAAY;AAAA,IACxB,CAAS;AAED,SAAK,aAAa,IAAIR,KAAW,cAAc,YAAY;AAG3D,SAAK,WAAW,SAAS,IAAI,GAAG,CAAC,QAAQ,GAAK,CAAC,QAAQ,GAAG;AAC1D,SAAK,WAAW,SAAS,IAAI,CAAC,KAAK,KAAG;AAGtC,SAAK,WAAW,UAAU;AAG1B,SAAK,KAAK,IAAI,KAAK,UAAU;AAAA,EAChC;AAAA,EAED,wBAAwB,OAAO;AAE3B,UAAM,gBAAgB;AACtB,UAAM,mBAAmB,IAAIH;AAG7B,UAAM,YAAY,IAAI,aAAa,gBAAgB,CAAC;AACpD,UAAM,SAAS,IAAI,aAAa,gBAAgB,CAAC;AACjD,UAAM,QAAQ,IAAI,aAAa,aAAa;AAG5C,aAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AACpC,YAAM,KAAK,IAAI;AAGf,YAAM,cAAc,KAAK,OAAM,IAAK;AAGpC,YAAM,SAAS,cACX,KAAK,WAAW,QAAQ;AAAA;AAAA,QACxB,QAAQ,OAAO,KAAK,OAAM,IAAK,QAAQ;AAAA;AAE3C,YAAM,QAAQ,KAAK,OAAQ,IAAG,KAAK,KAAK;AACxC,YAAM,SAAS,EAAE,KAAK,OAAM,IAAK,QAAQ;AAGzC,gBAAU,EAAE,IAAI,SAAS,KAAK,IAAI,KAAK;AACvC,gBAAU,KAAK,CAAC,IAAI;AACpB,gBAAU,KAAK,CAAC,IAAI,SAAS,KAAK,IAAI,KAAK;AAG3C,UAAI,aAAa;AAEb,eAAO,EAAE,IAAI,MAAM,KAAK,OAAQ,IAAG;AACnC,eAAO,KAAK,CAAC,IAAI,MAAM,KAAK,OAAQ,IAAG;AACvC,eAAO,KAAK,CAAC,IAAI;AAAA,MACjC,OAAmB;AAEH,eAAO,EAAE,IAAI,MAAM,KAAK,OAAQ,IAAG;AACnC,eAAO,KAAK,CAAC,IAAI,MAAM,KAAK,OAAQ,IAAG;AACvC,eAAO,KAAK,CAAC,IAAI,MAAM,KAAK,OAAQ,IAAG;AAAA,MAC1C;AAGD,YAAM,CAAC,IAAI,cACP,QAAQ,OAAQ,KAAK,OAAQ,IAAG,QAAQ;AAAA;AAAA,QACxC,QAAQ,OAAQ,KAAK,OAAM,IAAK,QAAQ;AAAA;AAAA,IAC/C;AAGD,qBAAiB,aAAa,YAAY,IAAIC,gBAAsB,WAAW,CAAC,CAAC;AACjF,qBAAiB,aAAa,SAAS,IAAIA,gBAAsB,QAAQ,CAAC,CAAC;AAC3E,qBAAiB,aAAa,QAAQ,IAAIA,gBAAsB,OAAO,CAAC,CAAC;AAGzE,UAAM,mBAAmB,IAAIO,eAAqB;AAAA,MAC9C,UAAU;AAAA,QACN,MAAM,EAAE,OAAO,EAAG;AAAA,QAClB,cAAc,EAAE,OAAO,KAAK,sBAAqB,EAAI;AAAA,MACxD;AAAA,MACD,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAoBd,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYhB,aAAa;AAAA,MACb,YAAY;AAAA,MACZ,UAAUG;AAAAA,MACV,cAAc;AAAA,IAC1B,CAAS;AAGD,SAAK,oBAAoB,IAAIE,OAAa,kBAAkB,gBAAgB;AAC5E,SAAK,kBAAkB,UAAU;AAGjC,SAAK,kBAAkB,SAAS,IAAI,GAAG,GAAG,CAAC,QAAQ,GAAG;AAGtD,SAAK,KAAK,IAAI,KAAK,iBAAiB;AAAA,EACvC;AAAA,EAED,wBAAwB;AACpB,UAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,WAAO,QAAQ;AACf,WAAO,SAAS;AAEhB,UAAM,UAAU,OAAO,WAAW,IAAI;AACtC,UAAM,WAAW,QAAQ;AAAA,MACrB;AAAA,MAAI;AAAA,MAAI;AAAA,MAAG;AAAA,MAAI;AAAA,MAAI;AAAA,IAC/B;AAEQ,aAAS,aAAa,GAAG,qBAAqB;AAC9C,aAAS,aAAa,KAAK,uBAAuB;AAClD,aAAS,aAAa,KAAK,uBAAuB;AAClD,aAAS,aAAa,GAAG,qBAAqB;AAE9C,YAAQ,YAAY;AACpB,YAAQ,SAAS,GAAG,GAAG,IAAI,EAAE;AAE7B,UAAM,UAAU,IAAIC,QAAc,MAAM;AACxC,YAAQ,cAAc;AACtB,WAAO;AAAA,EACV;AAAA,EAED,2BAA2B,OAAO,SAAS,OAAO;AAC9C,UAAM,gBAAgB;AACtB,UAAM,mBAAmB,IAAId;AAG7B,UAAM,YAAY,IAAI,aAAa,gBAAgB,CAAC;AACpD,UAAM,SAAS,IAAI,aAAa,gBAAgB,CAAC;AACjD,UAAM,QAAQ,IAAI,aAAa,aAAa;AAG5C,UAAM,kBAAkB,CAAA;AACxB,UAAM,gBAAgB;AAEtB,aAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AACpC,YAAM,QAAQ,KAAK,gBAAgB,KAAK,MAAM,SAAS,gBAAgB,KAAK;AAC5E,sBAAgB,KAAK,IAAI;AAAA,IAC5B;AAGD,aAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AACpC,YAAM,KAAK,IAAI;AAGf,YAAM,cAAc,KAAK,MAAM,KAAK,WAAW,gBAAgB,MAAM;AACrE,YAAM,UAAU,gBAAgB,WAAW;AAG3C,YAAM,WAAW,KAAK,OAAQ,IAAG,OAAO,QAAQ;AAChD,YAAM,WAAW,KAAK,OAAQ,IAAG,OAAO,QAAQ;AAGhD,YAAM,cAAc,KAAK,OAAM,IAAK,QAAQ;AAE5C,gBAAU,EAAE,IAAI,UAAU;AAC1B,gBAAU,KAAK,CAAC,IAAI;AACpB,gBAAU,KAAK,CAAC,IAAI,UAAU,UAAU,OAAO;AAG/C,aAAO,EAAE,IAAI,MAAM,KAAK,OAAQ,IAAG;AACnC,aAAO,KAAK,CAAC,IAAI,MAAM,KAAK,OAAQ,IAAG;AACvC,aAAO,KAAK,CAAC,IAAI;AAGjB,YAAM,CAAC,KAAK,KAAK,OAAQ,IAAG,MAAM,OAAO,QAAQ;AAAA,IACpD;AAGD,qBAAiB,aAAa,YAAY,IAAIC,gBAAsB,WAAW,CAAC,CAAC;AACjF,qBAAiB,aAAa,SAAS,IAAIA,gBAAsB,QAAQ,CAAC,CAAC;AAC3E,qBAAiB,aAAa,QAAQ,IAAIA,gBAAsB,OAAO,CAAC,CAAC;AAGzE,UAAM,mBAAmB,IAAIO,eAAqB;AAAA,MAC9C,UAAU;AAAA,QACN,MAAM,EAAE,OAAO,EAAG;AAAA,QAClB,cAAc,EAAE,OAAO,KAAK,sBAAqB,EAAI;AAAA,MACxD;AAAA,MACD,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAoBd,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYhB,aAAa;AAAA,MACb,YAAY;AAAA,MACZ,UAAUG;AAAAA,MACV,cAAc;AAAA,IAC1B,CAAS;AAGD,SAAK,uBAAuB,IAAIE,OAAa,kBAAkB,gBAAgB;AAC/E,SAAK,KAAK,IAAI,KAAK,oBAAoB;AAAA,EAC1C;AAAA;AAAA,EAGD,gBAAgB,OAAO;AAEnB,SAAK,YAAY,QAAQ,CAAC,MAAM,UAAU;AAEtC,YAAM,aAAa,QAAQ,MAAM;AAEjC,UAAI,YAAY;AAEZ,aAAK,SAAS,oBAAoB,MAAM,QAAQ;AAChD,aAAK,SAAS,UAAU,MAAM,QAAQ;AAAA,MACtD,OAAmB;AAEH,aAAK,SAAS,oBAAoB,MAAM,QAAQ;AAChD,aAAK,SAAS,UAAU,MAAM,QAAQ;AAAA,MACzC;AAGD,YAAM,QAAQ,IAAI,QAAQ;AAC1B,WAAK,MAAM,IAAI,OAAO,OAAO,QAAQ,GAAG;AAAA,IACpD,CAAS;AAGD,QAAI,KAAK,sBAAsB;AAC3B,WAAK,qBAAqB,UAAU,QAAQ;AAG5C,UAAI,KAAK,qBAAqB,SAAS,WAAW,MAAM;AACpD,cAAM,QAAQ,KAAK,qBAAqB,SAAS,WAAW,KAAK;AACjE,cAAM,YAAY,KAAK,qBAAqB,SAAS,aACnC,MAAM,KAAK,KAAK;AAGlC,YAAI,CAAC,KAAK,qBAAqB,SAAS,WAAW;AAC/C,eAAK,qBAAqB,SAAS,YAAY;AAAA,QAClD;AAGD,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,gBAAM,CAAC,IAAI,UAAU,CAAC,KAAK,IAAI,QAAQ;AAAA,QAC1C;AAED,aAAK,qBAAqB,SAAS,WAAW,KAAK,cAAc;AAAA,MACpE;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAGD,uBAAuB;AACnB,QAAI,KAAK,cAAc;AACnB,WAAK,aAAa,UAAU;AAC5B,WAAK,kBAAkB,UAAU;AACjC,WAAK,WAAW,UAAU;AAC1B,WAAK,qBAAqB;AAG1B,WAAK,aAAa,SAAS,SAAS,KAAK,QAAQ;AACjD,WAAK,WAAW,SAAS,SAAS,KAAK,QAAQ;AAC/C,UAAI,KAAK,kBAAkB,SAAS,UAAU;AAC1C,aAAK,kBAAkB,SAAS,SAAS,KAAK,QAAQ;AAAA,MACzD;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAGD,yBAAyB;AACrB,QAAI,KAAK,cAAc;AACnB,WAAK,aAAa,UAAU;AAC5B,WAAK,kBAAkB,UAAU;AACjC,WAAK,WAAW,UAAU;AAC1B,WAAK,qBAAqB;AAAA,IAC7B;AAAA,EACJ;AAAA;AAAA,EAGD,mBAAmB,UAAU;AACzB,QAAI,CAAC,KAAK,mBAAoB;AAG9B,UAAM,gBAAgB;AAEtB,QAAI,KAAK,gBAAgB,KAAK,aAAa,SAAS,UAAU;AAC1D,WAAK,aAAa,SAAS,SAAS,KAAK,SAAS;AAGlD,YAAM,YAAY,MAAM,KAAK,IAAI,WAAW,KAAK,KAAK,CAAC,IAAI;AAC3D,WAAK,aAAa,SAAS,SAAS,eAAe,QAAQ;AAAA,IAC9D;AAGD,QAAI,KAAK,cAAc,KAAK,WAAW,SAAS,UAAU;AACtD,WAAK,WAAW,SAAS,SAAS,KAAK,SAAS;AAGhD,YAAM,YAAY,IAAM,KAAK,IAAI,WAAW,KAAK,KAAK,CAAC,IAAI;AAC3D,WAAK,WAAW,MAAM,IAAI,WAAW,WAAW,CAAC;AAAA,IACpD;AAGD,QAAI,KAAK,qBAAqB,KAAK,kBAAkB,SAAS,UAAU;AACpE,WAAK,kBAAkB,SAAS,SAAS,KAAK,SAAS;AAGvD,YAAM,YAAY,KAAK,kBAAkB,SAAS,WAAW,SAAS;AAGtE,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK,GAAG;AAE1C,kBAAU,IAAI,CAAC,KAAK;AAGpB,kBAAU,CAAC,MAAM,KAAK,OAAQ,IAAG,OAAO;AACxC,kBAAU,IAAI,CAAC,MAAM,KAAK,OAAQ,IAAG,OAAO;AAG5C,YAAI,UAAU,IAAI,CAAC,IAAI,MAAO;AAE1B,gBAAM,cAAc,KAAK,OAAM,IAAK;AACpC,gBAAM,SAAS,cACX,KAAK,OAAM,IAAK;AAAA;AAAA,YAChB,KAAK,KAAK,OAAQ,IAAG;AAAA;AACzB,gBAAM,QAAQ,KAAK,OAAQ,IAAG,KAAK,KAAK;AAExC,oBAAU,CAAC,IAAI,SAAS,KAAK,IAAI,KAAK;AACtC,oBAAU,IAAI,CAAC,IAAI,EAAE,KAAK,OAAM,IAAK;AACrC,oBAAU,IAAI,CAAC,IAAI,SAAS,KAAK,IAAI,KAAK;AAAA,QAC7C;AAAA,MACJ;AAGD,WAAK,kBAAkB,SAAS,WAAW,SAAS,cAAc;AAAA,IACrE;AAGD,QAAI,KAAK,wBAAwB,KAAK,qBAAqB,SAAS,UAAU;AAC1E,WAAK,qBAAqB,SAAS,SAAS,KAAK,SAAS;AAAA,IAC7D;AAAA,EACJ;AACL;ACv+BO,MAAM,cAAc;AAAA,EACvB,YAAY,OAAO,QAAQ,WAAW,cAAc;AAChD,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,SAAK,YAAY;AACjB,SAAK,QAAQ;AACb,SAAK,YAAY;AACjB,SAAK,eAAe;AACpB,SAAK,aAAa;AAClB,SAAK,cAAc;AAGnB,SAAK,wBAAwB;AAC7B,SAAK,wBAAwB;AAG7B,SAAK,kBAAkB,IAAI,gBAAgB,KAAK;AAGhD,SAAK,kBAAiB;AAGtB,SAAK,aAAY;AAGjB,SAAK,cAAc;AACnB,SAAK,eAAe;AACpB,SAAK,uBAAuB;AAC5B,SAAK,WAAW;AAChB,SAAK,eAAe;AAGpB,SAAK,cAAc;AAGnB,SAAK,eAAe;AAGpB,SAAK,gBAAgB;AAAA,MACjB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACZ;AAEQ,YAAQ,IAAI,4BAA4B;AAGxC,SAAK,iBAAgB;AAGrB,SAAK,wBAAuB;AAAA,EAC/B;AAAA;AAAA,EAGD,mBAAmB;AACf,YAAQ,IAAI,+BAA+B;AAE3C,QAAI;AAEA,eAAS,IAAI,GAAG,KAAK,GAAG,KAAK;AACzB,cAAM,YAAY,gBAAgB,mBAAmB,CAAC,MAAM;AAC5D,gBAAQ,IAAI,qCAAqC,SAAS,EAAE;AAG5D,cAAM,QAAQ,IAAI;AAGlB,cAAM,iBAAiB,kBAAkB,MAAM;AAC3C,kBAAQ,IAAI,gBAAgB,CAAC,sBAAsB;AAAA,QACvE,CAAiB;AAED,cAAM,iBAAiB,SAAS,CAAC,MAAM;AACnC,kBAAQ,KAAK,gBAAgB,CAAC,sFAAsF;AAAA,QAExI,CAAiB;AAGD,cAAM,MAAM;AAGZ,aAAK,aAAa,KAAK,KAAK;AAAA,MAC/B;AAED,cAAQ,IAAI,kEAAkE;AAAA,IACjF,SAAQ,OAAO;AACZ,cAAQ,MAAM,sCAAsC,KAAK;AAAA,IAC5D;AAAA,EACJ;AAAA;AAAA,EAGD,0BAA0B;AACtB,QAAI,OAAO,SAAS,aAAa;AAC7B,cAAQ,MAAM,+CAA+C;AAC7D;AAAA,IACH;AAED,QAAI;AACA,cAAQ,IAAI,0CAA0C;AAGtD,WAAK,gBAAe;AAGpB,WAAK,uBAAsB;AAG3B,WAAK,oBAAmB;AAExB,cAAQ,IAAI,sCAAsC;AAAA,IACrD,SAAQ,OAAO;AACZ,cAAQ,MAAM,uCAAuC,KAAK;AAAA,IAC7D;AAAA,EACJ;AAAA;AAAA,EAGD,kBAAkB;AACd,QAAI;AAEA,YAAM,cAAc,KAAK,SAAS,KAAK,MAAM,WACzC,KAAK,MAAM,WAAW,KAAK;AAG/B,YAAM,aAAa,IAAI,KAAK,OAAO;AAAA,QAC/B,MAAM;AAAA,QACN,WAAW;AAAA,QACX,GAAG;AAAA,MACnB,CAAa,EAAE,QAAQ,WAAW;AAGtB,YAAM,aAAa,IAAI,KAAK,OAAO;AAAA,QAC/B,OAAO;AAAA,QACP,KAAK;AAAA,MACrB,CAAa,EAAE,QAAQ,UAAU;AAGrB,YAAM,YAAY,IAAI,KAAK,QAAQ;AAAA,QAC/B,aAAa;AAAA,QACb,iBAAiB;AAAA,QACjB,YAAY;AAAA,UACR,MAAM;AAAA,QACT;AAAA,QACD,UAAU;AAAA,UACN,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,SAAS;AAAA,UACT,SAAS;AAAA,QACZ;AAAA,QACD,YAAY;AAAA,UACR,MAAM;AAAA,QACT;AAAA,QACD,oBAAoB;AAAA,UAChB,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,SAAS;AAAA,UACT,SAAS;AAAA,QACZ;AAAA,MACjB,CAAa,EAAE,QAAQ,UAAU;AAGrB,YAAM,cAAc,IAAI,KAAK,OAAO;AAAA,QAChC,MAAM;AAAA,QACN,WAAW;AAAA,QACX,GAAG;AAAA,MACnB,CAAa,EAAE,QAAQ,WAAW;AAEtB,YAAM,YAAY,IAAI,KAAK,KAAK,GAAG,EAAE,QAAQ,WAAW;AACxD,YAAM,QAAQ,IAAI,KAAK,MAAM,MAAM,EAAE,QAAQ,SAAS;AAGtD,WAAK,YAAY,OAAO;AAAA,QACpB,cAAc;AAAA;AAAA,QACd,MAAM,MAAM;AACR,cAAI,KAAK,SAAS,KAAK,MAAM,MAAO;AAEpC,gBAAM,MAAM,KAAK;AAGjB,cAAI,MAAM,KAAK,YAAY,KAAK,eAAe,KAAK;AAChD,oBAAQ,IAAI,0CAA0C;AACtD;AAAA,UACH;AAGD,eAAK,YAAY,KAAK,eAAe;AAGrC,gBAAM,cAAc,KAAK,QAAQ,KAAK,MAAM,YAAY,OAAO;AAC/D,oBAAU,OAAO,QAAQ,KAAK,SAAS,WAAW;AAGlD,gBAAM,MAAK;AAGX,oBAAU,cAAc,MAAM,GAAG;AACjC,oBAAU,UAAU,kBAAkB,MAAM,GAAG,GAAG;AAGlD,oBAAU,KAAK,eAAe,MAAM,GAAG;AACvC,oBAAU,KAAK,kBAAkB,MAAM,GAAG,MAAM,CAAC;AAGjD,qBAAW,MAAM;AACb,sBAAU,eAAc;AACxB,uBAAW,MAAM;AACb,oBAAM,KAAI;AAAA,YACb,GAAE,GAAG;AAAA,UACT,GAAE,GAAI;AAAA,QACV;AAAA,MACjB;AAAA,IACS,SAAQ,OAAO;AACZ,cAAQ,MAAM,8BAA8B,KAAK;AAAA,IACpD;AAAA,EACJ;AAAA;AAAA,EAGD,yBAAyB;AACrB,QAAI;AAEA,YAAM,cAAc,KAAK,SAAS,KAAK,MAAM,WACzC,KAAK,MAAM,WAAW,KAAK;AAG/B,YAAM,gBAAgB,IAAI,KAAK,OAAO;AAAA,QAClC,MAAM;AAAA,QACN,WAAW;AAAA,QACX,GAAG;AAAA,MACnB,CAAa,EAAE,QAAQ,WAAW;AAGtB,YAAM,eAAe,IAAI,KAAK,UAAU,KAAK,OAAO;AAAA,QAChD,YAAY;AAAA,UACR,MAAM;AAAA,QACT;AAAA,QACD,UAAU;AAAA,UACN,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,SAAS;AAAA,UACT,SAAS;AAAA,QACZ;AAAA,MACjB,CAAa,EAAE,QAAQ,aAAa;AAGxB,YAAM,eAAe,IAAI,KAAK,OAAO;AAAA,QACjC,MAAM;AAAA,QACN,WAAW;AAAA,QACX,GAAG;AAAA,MACnB,CAAa,EAAE,QAAQ,WAAW;AAEtB,YAAM,cAAc,IAAI,KAAK,MAAM;AAAA,QAC/B,YAAY;AAAA,UACR,MAAM;AAAA,QACT;AAAA,QACD,UAAU;AAAA,UACN,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,SAAS;AAAA,UACT,SAAS;AAAA,QACZ;AAAA,MACjB,CAAa,EAAE,QAAQ,YAAY;AAGvB,WAAK,YAAY,cAAc;AAAA,QAC3B,MAAM,MAAM;AACR,cAAI,KAAK,SAAS,KAAK,MAAM,MAAO;AAEpC,gBAAM,MAAM,KAAK;AAGjB,gBAAM,cAAc,KAAK,QAAQ,KAAK,MAAM,YAAY,OAAO;AAC/D,uBAAa,OAAO,QAAQ,KAAK,SAAS,WAAW;AACrD,sBAAY,OAAO,QAAQ,KAAK,SAAS,cAAc,GAAG;AAG1D,uBAAa,qBAAqB,CAAC,MAAM,MAAM,IAAI,GAAG,KAAK,GAAG;AAG9D,sBAAY,cAAc,MAAM,GAAG;AACnC,sBAAY,UAAU,kBAAkB,MAAM,GAAG,MAAM,GAAG;AAG1D,qBAAW,MAAM;AACb,wBAAY,eAAc;AAAA,UAC7B,GAAE,GAAI;AAAA,QACV;AAAA,MACjB;AAAA,IACS,SAAQ,OAAO;AACZ,cAAQ,MAAM,sCAAsC,KAAK;AAAA,IAC5D;AAAA,EACJ;AAAA;AAAA,EAGD,sBAAsB;AAClB,QAAI;AAEA,YAAM,cAAc,KAAK,SAAS,KAAK,MAAM,WACzC,KAAK,MAAM,WAAW,KAAK;AAG/B,YAAM,iBAAiB,IAAI,KAAK,OAAO;AAAA,QACnC,MAAM;AAAA,QACN,WAAW;AAAA,QACX,GAAG;AAAA,MACnB,CAAa,EAAE,QAAQ,WAAW;AAGtB,YAAM,iBAAiB,IAAI,KAAK,OAAO;AAAA,QACnC,WAAW;AAAA,QACX,WAAW;AAAA,QACX,OAAO;AAAA,QACP,KAAK;AAAA,MACR,CAAA,EAAE,QAAQ,cAAc,EAAE,MAAK;AAGhC,YAAM,gBAAgB,IAAI,KAAK,MAAM;AAAA,QACjC,YAAY;AAAA,UACR,MAAM;AAAA,QACT;AAAA,QACD,UAAU;AAAA,UACN,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,SAAS;AAAA,UACT,SAAS;AAAA,QACZ;AAAA,MACjB,CAAa,EAAE,QAAQ,cAAc;AAGzB,YAAM,aAAa,IAAI,KAAK,OAAO;AAAA,QAC/B,MAAM;AAAA,QACN,WAAW;AAAA,QACX,GAAG;AAAA,MACnB,CAAa,EAAE,QAAQ,WAAW;AAEtB,YAAM,YAAY,IAAI,KAAK,MAAM;AAAA,QAC7B,YAAY;AAAA,UACR,MAAM;AAAA,QACT;AAAA,QACD,UAAU;AAAA,UACN,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,SAAS;AAAA,UACT,SAAS;AAAA,QACZ;AAAA,MACjB,CAAa,EAAE,QAAQ,UAAU;AAGrB,WAAK,YAAY,WAAW;AAAA,QACxB,MAAM,MAAM;AACR,cAAI,KAAK,SAAS,KAAK,MAAM,MAAO;AAEpC,gBAAM,MAAM,KAAK;AAGjB,gBAAM,cAAc,KAAK,QAAQ,KAAK,MAAM,YAAY,MAAM;AAC9D,wBAAc,OAAO,QAAQ,KAAK,SAAS,WAAW;AACtD,oBAAU,OAAO,QAAQ,KAAK,SAAS,cAAc,GAAG;AAGxD,wBAAc,cAAc,MAAM,GAAG;AACrC,wBAAc,UAAU,kBAAkB,MAAM,KAAK,GAAG;AAGxD,oBAAU,qBAAqB,MAAM,KAAK,MAAM,GAAG;AACnD,qBAAW,MAAM;AACb,sBAAU,qBAAqB,MAAM,KAAK,MAAM,GAAG;AAAA,UACtD,GAAE,GAAG;AAGN,qBAAW,MAAM;AACb,0BAAc,eAAc;AAAA,UAC/B,GAAE,GAAI;AAAA,QACV;AAAA,MACjB;AAAA,IACS,SAAQ,OAAO;AACZ,cAAQ,MAAM,kCAAkC,KAAK;AAAA,IACxD;AAAA,EACJ;AAAA,EAED,kBAAkB;AAEd,SAAK,cAAc,SAAS,cAAc,KAAK;AAC/C,SAAK,YAAY,KAAK;AACtB,SAAK,YAAY,MAAM,WAAW;AAClC,SAAK,YAAY,MAAM,SAAS;AAChC,SAAK,YAAY,MAAM,OAAO;AAC9B,SAAK,YAAY,MAAM,YAAY;AACnC,SAAK,YAAY,MAAM,QAAQ;AAC/B,SAAK,YAAY,MAAM,WAAW;AAClC,SAAK,YAAY,MAAM,kBAAkB;AACzC,SAAK,YAAY,MAAM,QAAQ;AAC/B,SAAK,YAAY,MAAM,SAAS;AAChC,SAAK,YAAY,MAAM,eAAe;AACtC,SAAK,YAAY,MAAM,UAAU;AACjC,SAAK,YAAY,MAAM,aAAa;AACpC,SAAK,YAAY,MAAM,WAAW;AAClC,SAAK,YAAY,MAAM,SAAS;AAChC,SAAK,YAAY,MAAM,aAAa;AACpC,SAAK,YAAY,MAAM,YAAY;AACnC,SAAK,YAAY,MAAM,UAAU;AACjC,SAAK,YAAY,MAAM,aAAa;AAGpC,SAAK,eAAe,SAAS,cAAc,KAAK;AAChD,SAAK,aAAa,MAAM,aAAa;AAErC,SAAK,YAAY,YAAY,KAAK,YAAY;AAC9C,aAAS,KAAK,YAAY,KAAK,WAAW;AAG1C,eAAW,MAAM;AACb,WAAK,YAAY,MAAM,UAAU;AAAA,IACpC,GAAE,GAAG;AAAA,EACT;AAAA,EAED,mBAAmB;AACf,QAAI,KAAK,wBAAwB,KAAK,cAAc,QAAQ;AACxD;AAAA,IACH;AAED,UAAM,OAAO,KAAK,cAAc,KAAK,oBAAoB;AAIzD,QAAI,KAAK,uBAAuB,KAAK,KAAK,aAAa,KAAK,oBAAoB,GAAG;AAC/E,UAAI;AACA,cAAM,gBAAgB,KAAK,aAAa,KAAK,oBAAoB;AAIjE,YAAI,cAAc,aAAa,KAAK,cAAc,UAAU,MAAM;AAC9D,wBAAc,SAAS,KAAK,QAAQ,KAAK,MAAM,YAAY,MAAM;AACjE,wBAAc,cAAc;AAG5B,gBAAM,cAAc,cAAc;AAClC,cAAI,gBAAgB,QAAW;AAC3B,wBAAY,MAAM,SAAO;AACrB,sBAAQ,KAAK,8BAA8B,KAAK,oBAAoB,KAAK,IAAI,OAAO,EAAE;AAAA,YAClH,CAAyB;AAAA,UACJ;AAAA,QACrB,OAAuB;AACH,kBAAQ,IAAI,yBAAyB,KAAK,uBAAuB,CAAC,eAAe;AAAA,QACpF;AAAA,MACJ,SAAQ,OAAO;AACZ,gBAAQ,KAAK,8BAA8B,KAAK,uBAAuB,CAAC,8BAA8B,MAAM,OAAO;AAAA,MACtH;AAAA,IACJ;AAED,SAAK;AAGL,SAAK,aAAa,cAAc;AAGhC,QAAI,KAAK,YAAY,MAAM,YAAY,KAAK;AACxC,WAAK,YAAY,MAAM,UAAU;AAAA,IACpC;AAGD,QAAI,YAAY;AAChB,SAAK,WAAW;AAGhB,QAAI,KAAK,cAAc;AACnB,oBAAc,KAAK,YAAY;AAAA,IAClC;AAGD,QAAI,KAAK,SAAS,yBAAyB,KAAK,KAAK,SAAS,mBAAmB,GAAG;AAChF,WAAK,aAAa,MAAM,QAAQ;AAAA,IAC5C,OAAe;AACH,WAAK,aAAa,MAAM,QAAQ;AAAA,IACnC;AAGD,SAAK,eAAe,YAAY,MAAM;AAClC,UAAI,YAAY,KAAK,QAAQ;AACzB,aAAK,aAAa,eAAe,KAAK,OAAO,SAAS;AACtD;AAGA,YAAI,KAAK,SAAS,KAAK,MAAM,aAAa,YAAY,MAAM,GAAG;AAE3D,cAAI,OAAO,KAAK,MAAM,cAAc,YAAY;AAC5C,gBAAI;AACA,mBAAK,MAAM,UAAU,WAAW,GAAG;AAAA,YACtC,SAAQ,GAAG;AAAA,YAEX;AAAA,UACJ;AAAA,QACJ;AAAA,MACjB,OAAmB;AACH,sBAAc,KAAK,YAAY;AAC/B,aAAK,eAAe;AACpB,aAAK,WAAW;AAIhB,YAAI,KAAK,eAAe,IAAI;AACxB,gBAAM,WAAW,KAAK,IAAI,KAAK,SAAS,IAAI,GAAI;AAChD,qBAAW,MAAM;AACb,gBAAI,CAAC,KAAK,YAAY,KAAK,WAAW;AAClC,mBAAK,iBAAgB;AAAA,YACxB;AAAA,UACJ,GAAE,QAAQ;AAAA,QACd;AAAA,MACJ;AAAA,IACJ,GAAE,EAAE;AAAA,EACR;AAAA,EAED,oBAAoB;AAEhB,UAAM,iBAAiB,IAAID,aAAmB,GAAG,KAAK,EAAE;AACxD,UAAM,iBAAiB,IAAIJ,eAAqB;AAAA,MAC5C,UAAU;AAAA,QACN,MAAM,EAAE,OAAO,EAAG;AAAA,QAClB,OAAO,EAAE,OAAO,IAAIC,MAAY,OAAQ,EAAG;AAAA,MAC9C;AAAA,MACD,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOd,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAchB,aAAa;AAAA,MACb,MAAMC;AAAAA,IAClB,CAAS;AAED,SAAK,aAAa,IAAIP,KAAW,gBAAgB,cAAc;AAG/D,UAAM,gBAAgB;AACtB,UAAM,YAAY,IAAIH;AACtB,UAAM,YAAY,IAAI,aAAa,gBAAgB,CAAC;AAEpD,aAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AACpC,YAAM,QAAQ,KAAK,OAAQ,IAAG,KAAK,KAAK;AACxC,YAAM,SAAS,MAAM,KAAK,OAAM,IAAK;AACrC,gBAAU,IAAI,CAAC,IAAI,KAAK,IAAI,KAAK,IAAI;AACrC,gBAAU,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,KAAK,IAAI;AACzC,gBAAU,IAAI,IAAI,CAAC,KAAK,KAAK,OAAM,IAAK,OAAO;AAAA,IAClD;AAED,cAAU,aAAa,YAAY,IAAIC,gBAAsB,WAAW,CAAC,CAAC;AAE1E,UAAM,mBAAmB,IAAIc,eAAqB;AAAA,MAC9C,OAAO;AAAA,MACP,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAUJ;AAAAA,IACtB,CAAS;AAED,SAAK,kBAAkB,IAAIE,OAAa,WAAW,gBAAgB;AAGnE,SAAK,aAAa,IAAId;AACtB,SAAK,WAAW,IAAI,KAAK,UAAU;AACnC,SAAK,WAAW,IAAI,KAAK,eAAe;AAAA,EAC3C;AAAA,EAED,eAAe;AAEX,SAAK,UAAU,SAAS,cAAc,KAAK;AAC3C,SAAK,QAAQ,KAAK;AAClB,SAAK,QAAQ,MAAM,WAAW;AAC9B,SAAK,QAAQ,MAAM,MAAM;AACzB,SAAK,QAAQ,MAAM,OAAO;AAC1B,SAAK,QAAQ,MAAM,QAAQ;AAC3B,SAAK,QAAQ,MAAM,SAAS;AAC5B,SAAK,QAAQ,MAAM,kBAAkB;AACrC,SAAK,QAAQ,MAAM,UAAU;AAC7B,SAAK,QAAQ,MAAM,aAAa;AAChC,SAAK,QAAQ,MAAM,gBAAgB;AACnC,SAAK,QAAQ,MAAM,SAAS;AAG5B,aAAS,KAAK,YAAY,KAAK,OAAO;AAAA,EACzC;AAAA,EAED,cAAc,YAAY;AACtB,QAAI,KAAK,UAAW;AAEpB,YAAQ,IAAI,4BAA4B;AACxC,SAAK,YAAY;AACjB,SAAK,eAAe;AACpB,SAAK,aAAa;AAGlB,SAAK,wBAAwB,KAAK,OAAO,SAAS,MAAK;AACvD,SAAK,wBAAwB,KAAK,OAAO,SAAS,MAAK;AAGvD,SAAK,OAAO,SAAS,IAAI,GAAG,KAAM,IAAK;AACvC,SAAK,OAAO,OAAO,KAAO,KAAM,CAAC;AAGjC,QAAI,KAAK,aAAa,KAAK,UAAU,MAAM;AACvC,WAAK,UAAU,KAAK,UAAU;AAG9B,UAAI,KAAK,UAAU,QAAQ;AACvB,aAAK,UAAU,OAAO,UAAU;AAChC,aAAK,UAAU,OAAO,WAAW;AACjC,aAAK,UAAU,OAAO,OAAO;AAC7B,aAAK,UAAU,OAAO,QAAQ;AAC9B,aAAK,UAAU,OAAO,QAAQ;AAAA,MACjC;AAGD,UAAI,KAAK,UAAU,UAAU;AACzB,aAAK,UAAU,SAAS,IAAI,GAAG,GAAG,CAAC;AAAA,MACtC;AAAA,IACJ;AAGD,SAAK,MAAM,IAAI,KAAK,UAAU;AAG9B,SAAK,gBAAgB,KAAK,SAAS,IAAI,MAAO,KAAM,CAAC;AACrD,SAAK,gBAAgB,KAAK,SAAS,IAAI,KAAK,KAAG;AAC/C,SAAK,gBAAgB,KAAK,UAAU;AAGpC,SAAK,UAAU,KAAK,QAAQ,KAAK,IAAI;AACrC,SAAK,WAAW,YAAY;AAC5B,0BAAsB,KAAK,OAAO;AAGlC,SAAK,iBAAgB;AAGrB,SAAK,gBAAe;AAGpB,eAAW,MAAM;AACb,WAAK,iBAAgB;AAAA,IACxB,GAAE,GAAI;AAGP,QAAI,KAAK,YAAY,MAAM;AAEvB,WAAK,YAAY,KAAK,eAAe,KAAK,IAAK,IAAG;AAClD,WAAK,YAAY,KAAK;IACzB;AAAA,EACJ;AAAA,EAED,QAAQ,aAAa;AACjB,QAAI,CAAC,KAAK,UAAW;AAGrB,UAAM,YAAY,KAAK,KAAK,cAAc,KAAK,YAAY,KAAM,GAAG,IAAI;AACxE,SAAK,WAAW;AAGhB,SAAK,gBAAgB;AAGrB,QAAI,KAAK,eAAe,IAAM;AAE1B,WAAK,mBAAmB,KAAK,eAAe,EAAI;AAAA,IAC5D,WAAmB,KAAK,eAAe,IAAM;AAEjC,WAAK,sBAAsB,KAAK,eAAe,MAAQ,EAAI;AAAA,IACvE,OAAe;AAEH,WAAK,iBAAgB;AACrB;AAAA,IACH;AAED,0BAAsB,KAAK,OAAO;AAAA,EACrC;AAAA,EAED,mBAAmB,UAAU;AAEzB,QAAI,KAAK,cAAc,KAAK,WAAW,SAAS,UAAU;AACtD,WAAK,WAAW,SAAS,SAAS,KAAK,SAAS;AAAA,IACnD;AAGD,SAAK,WAAW,SAAS,IAAI,KAAO,KAAM,CAAC;AAC3C,SAAK,WAAW,SAAS,IAAI,KAAK,KAAG;AAGrC,QAAI,WAAW,KAAK;AAEhB,YAAM,iBAAiB,WAAW;AAClC,YAAM,cAAc,iBAAiB;AACrC,WAAK,WAAW,MAAM,IAAI,aAAa,aAAa,CAAC;AAGrD,WAAK,OAAO,SAAS,IAAI,GAAG,KAAM,IAAK;AACvC,WAAK,OAAO,OAAO,KAAO,KAAM,CAAC;AAAA,IACpC;AAGD,QAAI,YAAY,OAAO,WAAW,KAAK;AAEnC,UAAI,YAAY,OAAO,CAAC,KAAK,gBAAgB,KAAK,SAAS;AACvD,aAAK,gBAAgB,KAAK,UAAU;AACpC,aAAK,aAAa,GAAG;AAGrB,YAAI,KAAK,YAAY,aAAa;AAC9B,eAAK,YAAY,YAAY;QAChC;AAAA,MACJ;AAGD,YAAM,KAAK,WAAW,OAAO;AAC7B,YAAM,YAAY,IAAI,MAChB,IAAI,IAAI,IACR,IAAI,KAAK,IAAI,KAAK,IAAI,GAAG,CAAC,IAAI;AAGpC,YAAM,QAAQ,IAAIiB,QAAc,KAAO,KAAM,CAAC;AAC9C,YAAM,UAAU,IAAIA,QAAc,MAAO,MAAM,IAAK;AACpD,YAAM,MAAM,IAAIA,QAAc,MAAO,KAAM,CAAC;AAG5C,YAAM,KAAK,IAAIA;AACf,YAAM,KAAK,IAAIA;AACf,YAAM,KAAK,IAAIA;AAEf,SAAG,KAAK,KAAK,EAAE,eAAe,KAAK,IAAI,IAAE,WAAW,CAAC,CAAC;AACtD,SAAG,KAAK,OAAO,EAAE,eAAe,KAAK,IAAE,aAAa,SAAS;AAC7D,SAAG,KAAK,GAAG,EAAE,eAAe,YAAY,SAAS;AAEjD,YAAM,WAAW,IAAIA,QAAe,EAC/B,IAAI,EAAE,EACN,IAAI,EAAE,EACN,IAAI,EAAE;AAGX,eAAS,KAAK,KAAK,IAAI,WAAW,KAAK,KAAK,CAAC,IAAI;AAGjD,WAAK,gBAAgB,KAAK,SAAS,KAAK,QAAQ;AAGhD,YAAM,cAAc,MAAM,YAAY;AACtC,WAAK,gBAAgB,gBAAgB,WAAW;AAGhD,UAAI,WAAW,KAAK;AAChB,cAAM,aAAa,KAAK,KAAK,WAAW,OAAO,KAAK,CAAG;AACvD,YAAI,KAAK,gBAAgB,UAAU;AAC/B,eAAK,gBAAgB,SAAS,UAAU,IAAI;AAAA,QAC/C;AACD,YAAI,KAAK,WAAW,UAAU;AAC1B,eAAK,WAAW,SAAS,UAAU,IAAI;AAAA,QAC1C;AAAA,MACJ;AAGD,YAAM,UAAU,KAAK,gBAAgB,KAAK,SAAS;AACnD,WAAK,OAAO,SAAS;AAAA,QACjB,QAAQ,IAAI;AAAA,QACZ,QAAQ,IAAI;AAAA,QACZ;AAAA,MAChB;AACY,WAAK,OAAO,OAAO,OAAO;AAAA,IAC7B;AAGD,QAAI,YAAY,KAAK;AAEjB,UAAI,KAAK,gBAAgB,UAAU;AAC/B,aAAK,gBAAgB,SAAS,UAAU;AAAA,MAC3C;AACD,UAAI,KAAK,WAAW,UAAU;AAC1B,aAAK,WAAW,SAAS,UAAU;AAAA,MACtC;AAGD,UAAI,WAAW,QAAQ,CAAC,KAAK,gBAAgB,oBAAoB;AAC7D,aAAK,gBAAgB;AAGrB,YAAI,KAAK,YAAY,UAAU;AAC3B,eAAK,YAAY,SAAS;QAC7B;AAAA,MACJ;AAGD,WAAK,gBAAgB,mBAAmB,QAAQ;AAGhD,UAAI,WAAW,OAAO,KAAK,aAAa,CAAC,KAAK,UAAU,KAAK,SAAS;AAElE,cAAM,WAAW,KAAK,gBAAgB,KAAK;AAC3C,aAAK,UAAU,KAAK,SAAS;AAAA,UACzB,SAAS;AAAA,UACT,SAAS,IAAI;AAAA;AAAA,UACb,SAAS;AAAA,QAC7B;AAGgB,YAAI,KAAK,UAAU,UAAU;AACzB,kBAAQ,IAAI,6CAA6C;AACzD,eAAK,UAAU,WAAW;AAC1B,eAAK,UAAU,KAAK,UAAU;AAAA,QAClD,OAAuB;AACH,eAAK,UAAU,KAAK,UAAU;AAAA,QACjC;AAGD,aAAK,sBAAsB,KAAK,UAAU,KAAK,SAAS;AAGxD,aAAK,yBAAwB;AAG7B,aAAK,aAAa,GAAG;AAAA,MACxB;AAGD,YAAM,UAAU,KAAK,gBAAgB,KAAK,SAAS;AACnD,YAAM,KAAK,WAAW,OAAO;AAC7B,WAAK,OAAO,SAAS;AAAA,QACjB,QAAQ,IAAI,MAAO,IAAI;AAAA,QACvB,QAAQ,IAAI;AAAA,QACZ,MAAO,IAAI;AAAA,MAC3B;AAGY,YAAM,QAAQ,QAAQ,IAAI;AAC1B,WAAK,OAAO,OAAO,QAAQ,GAAG,OAAO,QAAQ,CAAC;AAAA,IACjD;AAAA,EACJ;AAAA,EAED,qBAAqB,UAAU;AAI3B,UAAM,YAAY,IAAIA,QAAc,KAAO,KAAM,CAAC;AAGlD,QAAI,WAAW,KAAK;AAEhB,UAAI,WAAW,OAAO,KAAK,gBAAgB,oBAAoB;AAC3D,aAAK,gBAAgB;MACxB;AAGD,UAAI,WAAW,KAAK;AAEhB,aAAK,WAAW,SAAS,KAAK,SAAS;AACvC,aAAK,WAAW,UAAU;AAC1B,aAAK,WAAW,SAAS,IAAI,KAAK,KAAG;AAGrC,aAAK,WAAW,MAAM,IAAI,KAAK,KAAK,CAAC;AAGrC,cAAM,iBAAiB,KAAK,KAAK,WAAW,OAAO,KAAK,CAAG;AAC3D,YAAI,KAAK,gBAAgB,UAAU;AAC/B,eAAK,gBAAgB,SAAS,UAAU;AAAA,QAC3C;AACD,YAAI,KAAK,WAAW,UAAU;AAC1B,eAAK,WAAW,SAAS,UAAU;AAAA,QACtC;AAAA,MACJ;AAGD,UAAI,WAAW,KAAK;AAChB,cAAM,iBAAiB,KAAK,KAAK,WAAW,OAAO,KAAK,CAAG;AAC3D,cAAM,WAAW,KAAK,KAAG;AACzB,cAAM,SAAS,IAAI,KAAK,KAAG;AAC3B,aAAK,gBAAgB,KAAK,SAAS,IAAI,YAAY,SAAS,YAAY;AAAA,MAC3E;AAGD,YAAM,UAAU,KAAK,gBAAgB,KAAK,SAAS;AACnD,WAAK,OAAO,SAAS;AAAA,QACjB,QAAQ;AAAA,QACR,QAAQ,IAAI;AAAA;AAAA,QACZ,QAAQ,IAAI;AAAA;AAAA,MAC5B;AACY,WAAK,OAAO,OAAO,OAAO;AAAA,IAC7B,OAGI;AAED,YAAM,gBAAgB,WAAW,OAAO;AAGxC,YAAM,WAAW,IAAIA,QAAc,MAAO,KAAM,CAAC;AACjD,YAAM,YAAY,IAAIA,QAAc,MAAO,KAAM,CAAC;AAGlD,YAAM,SAAS,eAAe;AAG9B,UAAI;AACJ,UAAI,eAAe,KAAK;AAEpB,cAAM,IAAI,SAAS;AACnB,mBAAW,IAAIA,UAAgB,YAAY,UAAU,WAAW,CAAC;AAAA,MACjF,OAAmB;AAEH,cAAM,KAAK,eAAe,OAAO;AACjC,mBAAW,IAAIA,UAAgB,YAAY,WAAW,WAAW,CAAC;AAAA,MACrE;AAGD,WAAK,gBAAgB,KAAK,SAAS,KAAK,QAAQ;AAGhD,WAAK,gBAAgB,gBAAgB,MAAM,eAAe,GAAG;AAG7D,UAAI,eAAe,OAAO,eAAe,MAAM;AAC3C,aAAK,aAAa,GAAG;AAGrB,YAAI,KAAK,YAAY,QAAQ,KAAK,IAAI,eAAe,IAAI,IAAI,MAAM;AAC/D,eAAK,YAAY,KAAK;QACzB;AAAA,MACJ;AAGD,UAAI,eAAe,MAAM;AACrB,aAAK,gBAAgB,KAAK,UAAU;AAAA,MACvC;AAGD,UAAI,eAAe,KAAK;AACpB,cAAM,oBAAoB,eAAe,OAAO;AAChD,cAAM,iBAAiB,IAAI,oBAAoB;AAC/C,aAAK,WAAW,MAAM,IAAI,eAAe,eAAe,CAAC;AAAA,MAC5D;AAGD,YAAM,UAAU,SAAS;AACzB,WAAK,OAAO,SAAS;AAAA,QACjB,QAAQ,IAAI;AAAA,QACZ,QAAQ,IAAI;AAAA,QACZ;AAAA;AAAA,MAChB;AAEY,YAAM,UAAU,IAAIA,QAAe,EAAC,YAAY,UAAU,WAAW,GAAG;AACxE,WAAK,OAAO,OAAO,OAAO;AAAA,IAC7B;AAAA,EACJ;AAAA,EAED,2BAA2B;AAEvB,UAAM,WAAW,IAAIT,eAAqB,IAAI,IAAI,EAAE;AACpD,UAAM,WAAW,IAAIU,kBAAwB;AAAA,MACzC,OAAO;AAAA,MACP,aAAa;AAAA,MACb,SAAS;AAAA,MACT,MAAMP;AAAAA,IAClB,CAAS;AAED,SAAK,qBAAqB,IAAIP,KAAW,UAAU,QAAQ;AAC3D,SAAK,mBAAmB,MAAM,IAAI,KAAK,KAAK,GAAG;AAC/C,SAAK,UAAU,KAAK,IAAI,KAAK,kBAAkB;AAG/C,SAAK,kBAAkB;AAAA,EAC1B;AAAA;AAAA,EAGD,qBAAqB;AACjB,QAAI,KAAK,cAAc,KAAK,WAAW,SAAS,UAAU;AACtD,WAAK,WAAW,SAAS,SAAS,KAAK,SAAS;AAAA,IACnD;AAAA,EACJ;AAAA,EAED,aAAa,aAAa,KAAK;AAC3B,QAAI,CAAC,KAAK,QAAS;AAGnB,SAAK,QAAQ,MAAM,UAAU,WAAW,SAAQ;AAGhD,eAAW,MAAM;AACb,WAAK,QAAQ,MAAM,UAAU;AAAA,IAChC,GAAE,GAAG;AAAA,EACT;AAAA,EAED,mBAAmB;AAEf,UAAM,aAAa,SAAS,cAAc,KAAK;AAC/C,eAAW,KAAK;AAChB,eAAW,cAAc;AACzB,eAAW,MAAM,WAAW;AAC5B,eAAW,MAAM,SAAS;AAC1B,eAAW,MAAM,OAAO;AACxB,eAAW,MAAM,YAAY;AAC7B,eAAW,MAAM,UAAU;AAC3B,eAAW,MAAM,kBAAkB;AACnC,eAAW,MAAM,QAAQ;AACzB,eAAW,MAAM,SAAS;AAC1B,eAAW,MAAM,eAAe;AAChC,eAAW,MAAM,SAAS;AAC1B,eAAW,MAAM,SAAS;AAC1B,eAAW,MAAM,aAAa;AAC9B,eAAW,MAAM,YAAY;AAE7B,eAAW,iBAAiB,SAAS,MAAM;AACvC,WAAK,aAAY;AAAA,IAC7B,CAAS;AAED,aAAS,KAAK,YAAY,UAAU;AACpC,SAAK,aAAa;AAAA,EACrB;AAAA,EAED,eAAe;AACX,YAAQ,IAAI,yBAAyB;AAGrC,SAAK,iBAAgB;AAGrB,QAAI,KAAK,WAAW;AAEhB,WAAK,UAAU,WAAW;AAG1B,UAAI,KAAK,UAAU,MAAM;AAErB,aAAK,UAAU,KAAK,SAAS,IAAI,MAAO,KAAM,CAAC;AAAA,MAClD;AAAA,IACJ;AAID,QAAI,OAAO,gBACP,OAAO,aAAa,YACpB,OAAO,aAAa,SAAS,eAAe;AAG5C,iBAAW,MAAM;AACb,eAAO,aAAa,SAAS,cAAc,iBAAgB;AAC3D,gBAAQ,IAAI,8BAA8B;AAAA,MAC7C,GAAE,GAAG;AAAA,IACT;AAAA,EACJ;AAAA,EAED,mBAAmB;AACf,YAAQ,IAAI,yBAAyB;AACrC,SAAK,YAAY;AAGjB,SAAK,MAAM,OAAO,KAAK,UAAU;AAGjC,SAAK,gBAAgB,KAAK,UAAU;AAGpC,SAAK,cAAc;AAGnB,QAAI,KAAK,oBAAoB;AACzB,WAAK,UAAU,KAAK,OAAO,KAAK,kBAAkB;AAClD,WAAK,qBAAqB;AAAA,IAC7B;AAGD,QAAI,KAAK,YAAY;AACjB,eAAS,KAAK,YAAY,KAAK,UAAU;AACzC,WAAK,aAAa;AAAA,IACrB;AAGD,QAAI,KAAK,SAAS;AACd,eAAS,KAAK,YAAY,KAAK,OAAO;AACtC,WAAK,UAAU;AAAA,IAClB;AAGD,QAAI,KAAK,aAAa;AAClB,eAAS,KAAK,YAAY,KAAK,WAAW;AAC1C,WAAK,cAAc;AAAA,IACtB;AAGD,QAAI,KAAK,cAAc;AACnB,oBAAc,KAAK,YAAY;AAC/B,WAAK,eAAe;AAAA,IACvB;AAGD,QAAI,KAAK,aAAa,KAAK,UAAU,MAAM;AACvC,WAAK,UAAU,KAAK,UAAU;AAG9B,UAAI,KAAK,UAAU,UAAU;AACzB,gBAAQ,IAAI,qDAAqD;AACjE,aAAK,UAAU,WAAW;AAAA,MAC7B;AAGD,cAAQ;AAAA,QAAI;AAAA,QACR,KAAK,UAAU,KAAK,SAAS;AAAA,QAC7B,KAAK,UAAU,KAAK,SAAS;AAAA,QAC7B,KAAK,UAAU,KAAK,SAAS;AAAA,MAC7C;AAAA,IACS;AAGD,QAAI,KAAK,cAAc,OAAO,KAAK,eAAe,YAAY;AAE1D,iBAAW,MAAM;AACb,gBAAQ,IAAI,8CAA8C;AAC1D,aAAK,WAAU;AAAA,MAClB,GAAE,GAAG;AAAA,IACT;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKD,UAAU;AAEN,QAAI,KAAK,kBAAkB;AACvB,2BAAqB,KAAK,gBAAgB;AAC1C,WAAK,mBAAmB;AAAA,IAC3B;AAGD,QAAI,KAAK,cAAc;AACnB,oBAAc,KAAK,YAAY;AAC/B,WAAK,eAAe;AAAA,IACvB;AAGD,QAAI,KAAK,eAAe,KAAK,YAAY,YAAY;AACjD,WAAK,YAAY,WAAW,YAAY,KAAK,WAAW;AAAA,IAC3D;AAED,QAAI,KAAK,WAAW,KAAK,QAAQ,YAAY;AACzC,WAAK,QAAQ,WAAW,YAAY,KAAK,OAAO;AAAA,IACnD;AAGD,aAAS,oBAAoB,WAAW,KAAK,WAAW;AAGxD,QAAI,KAAK,cAAc,KAAK,WAAW,QAAQ;AAC3C,WAAK,WAAW,OAAO,OAAO,KAAK,UAAU;AAAA,IAChD;AACD,QAAI,KAAK,eAAe,KAAK,YAAY,QAAQ;AAC7C,WAAK,YAAY,OAAO,OAAO,KAAK,WAAW;AAAA,IAClD;AAGD,QAAI,KAAK,YAAY;AACjB,UAAI,KAAK,WAAW,SAAU,MAAK,WAAW,SAAS;AACvD,UAAI,KAAK,WAAW,SAAU,MAAK,WAAW,SAAS;IAC1D;AACD,QAAI,KAAK,aAAa;AAClB,UAAI,KAAK,YAAY,SAAU,MAAK,YAAY,SAAS;AACzD,UAAI,KAAK,YAAY,SAAU,MAAK,YAAY,SAAS;IAC5D;AAGD,QAAI,KAAK,mBAAmB,OAAO,KAAK,gBAAgB,YAAY,YAAY;AAC5E,WAAK,gBAAgB;IACxB;AAGD,QAAI,KAAK,aAAa;AAClB,aAAO,OAAO,KAAK,WAAW,EAAE,QAAQ,WAAS;AAC7C,YAAI,MAAM,WAAW,OAAO,MAAM,YAAY,YAAY;AACtD,gBAAM,QAAO;AAAA,QAChB;AAAA,MACjB,CAAa;AACD,WAAK,cAAc;IACtB;AAGD,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,SAAK,YAAY;AACjB,SAAK,QAAQ;AACb,SAAK,kBAAkB;AACvB,SAAK,aAAa;AAClB,SAAK,cAAc;AACnB,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AACtB,SAAK,eAAe;EACvB;AACL;ACxrCO,MAAM,YAAY;AAAA,EACvB,cAAc;AAEZ,QAAI,CAAC,OAAO,QAAQ;AAClB,aAAO,SAAS;AAAA,QACd,SAAS;AAAA,QACT,KAAK;AAAA,QACL,OAAO;AAAA,QACP,UAAU;AAAA,QACV,WAAW;AAAA,QACX,kBAAkB;AAAA,QAClB,OAAO,EAAE,MAAM,GAAG,QAAQ,EAAG;AAAA,QAC7B,IAAI;AAAA,QACJ,SAAS,CAAE;AAAA,MACnB;AAAA,IACK;AAED,SAAK,QAAQ;AACb,SAAK,aAAa;AAClB,SAAK,aAAa;AAGlB,QAAI;AACF,UAAI,yBAAyB,UAAU,eAAe,YAAY,SAAS;AAAA,MAE1E;AACD,UAAI,yBAAyB,QAAQ;AACnC,cAAM,MAAM,IAAI,oBAAoB,CAAC,SAAS;AAC5C,qBAAW,SAAS,KAAK,cAAc;AACrC,gBAAI,MAAM,cAAc,MAAM;AAC5B,kBAAI,CAAC,OAAO,OAAO,GAAI,QAAO,OAAO,KAAK;AAC1C,qBAAO,OAAO,MAAM;AAAA,YACrB;AAAA,UACF;AAAA,QACX,CAAS;AACD,YAAI,QAAQ,EAAE,YAAY,CAAC,IAAI,EAAG,CAAA;AAClC,aAAK,cAAc;AAAA,MACpB;AAAA,IACF,QAAO;AAAA,IAAE;AAEQ;AAEhB,eAAS,iBAAiB,WAAW,CAAC,MAAM;AAC1C,YAAI,EAAE,QAAQ,MAAM;AAClB,eAAK,OAAM;AAAA,QACZ;AAAA,MACT,CAAO;AAAA,IACF;AAAA,EACF;AAAA,EAED,SAAS;AACP,WAAO,OAAO,UAAU,CAAC,OAAO,OAAO;AACvC,QAAI,OAAO,OAAO,SAAS;AACzB,WAAK,YAAW;AAChB,WAAK,WAAU;AAAA,IACrB,OAAW;AACL,WAAK,QAAO;AAAA,IACb;AAAA,EACF;AAAA,EAED,cAAc;AACZ,QAAI,KAAK,MAAO;AAChB,UAAM,KAAK,SAAS,cAAc,KAAK;AACvC,OAAG,KAAK;AACR,OAAG,MAAM,WAAW;AACpB,OAAG,MAAM,MAAM;AACf,OAAG,MAAM,QAAQ;AACjB,OAAG,MAAM,WAAW;AACpB,OAAG,MAAM,WAAW;AACpB,OAAG,MAAM,aAAa;AACtB,OAAG,MAAM,QAAQ;AACjB,OAAG,MAAM,aAAa;AACtB,OAAG,MAAM,WAAW;AACpB,OAAG,MAAM,aAAa;AACtB,OAAG,MAAM,UAAU;AACnB,OAAG,MAAM,SAAS;AAClB,OAAG,MAAM,eAAe;AACxB,OAAG,MAAM,SAAS;AAClB,OAAG,MAAM,gBAAgB;AACzB,OAAG,YAAY,KAAK;AACpB,aAAS,KAAK,YAAY,EAAE;AAC5B,SAAK,QAAQ;AAGb,SAAK,WAAW,YAAY,MAAM,KAAK,cAAc,KAAK,UAAU;AAAA,EACrE;AAAA,EAED,aAAa;AACX,QAAI,CAAC,KAAK,MAAO;AACjB,SAAK,MAAM,YAAY,KAAK,cAAa;AAAA,EAC1C;AAAA,EAED,gBAAgB;;AACd,UAAM,IAAI,OAAO;AACjB,UAAM,UAAU,EAAE,UAAU,OAAO,QAAQ,EAAE,OAAO,EAAE,MAAM,GAAG,CAAC,IAAI,CAAA;AACpE,UAAM,UAAU,QAAQ,IAAI,CAAC,CAAC,GAAE,CAAC,MAAM,QAAQ,CAAC,KAAK,OAAO,CAAC,EAAE,QAAQ,CAAC,CAAC,WAAW,EAAE,KAAK,EAAE;AAC7F,WACE,yEAEa,KAAK,MAAM,EAAE,OAAO,CAAC,CAAC,mBACtB,OAAO,EAAE,SAAS,CAAC,EAAE,QAAQ,CAAC,CAAC,yBAC5B,OAAO,EAAE,YAAY,CAAC,EAAE,QAAQ,CAAC,CAAC,4BAC/B,EAAE,aAAa,CAAC,yBAChB,EAAE,oBAAoB,CAAC,kCACf,OAAE,UAAF,mBAAS,SAAM,CAAC,QAAQ,OAAE,UAAF,mBAAS,WAAQ,CAAG,kBAC3D,EAAE,MAAM,CAAC,2GAES,UAC9B;AAAA,EAGH;AAAA,EAED,UAAU;AACR,QAAI,KAAK,UAAU;AACjB,oBAAc,KAAK,QAAQ;AAC3B,WAAK,WAAW;AAAA,IACjB;AACD,QAAI,KAAK,eAAe,KAAK,YAAY,YAAY;AACnD,WAAK,YAAY;AACjB,WAAK,cAAc;AAAA,IACpB;AACD,QAAI,KAAK,SAAS,KAAK,MAAM,YAAY;AACvC,WAAK,MAAM,WAAW,YAAY,KAAK,KAAK;AAAA,IAC7C;AACD,SAAK,QAAQ;AAAA,EACd;AACH;AAEO,SAAS,kBAAkB;AAEhC,MAAI,CAAC,OAAO,eAAe;AACzB,WAAO,gBAAgB,IAAI;EAC5B;AACD,SAAO,OAAO;AAChB;ACzIA,OAAO,aAAa;AAkBpB,OAAO,aAAa;AAAA,EAChB,MAAM,CAAE;AAAA,EACR,SAAS;AAAA,EAET,KAAK,SAAS,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG;AAC/B,QAAI,KAAK,KAAK,SAAS,GAAG;AACtB,aAAO,KAAK,KAAK,IAAK,EAAC,IAAI,GAAG,GAAG,CAAC;AAAA,IACrC;AACD,WAAO,IAAIa,QAAc,GAAG,GAAG,CAAC;AAAA,EACnC;AAAA,EAED,SAAS,SAAS,QAAQ;AACtB,QAAI,KAAK,KAAK,SAAS,KAAK,SAAS;AACjC,WAAK,KAAK,KAAK,MAAM;AAAA,IACxB;AAAA,EACJ;AACL;AAEA,MAAM,KAAK;AAAA,EACP,cAAc;AAu5Cd;AAAA;AAAA;AAAA;AAAA,wCAAe,MAAM;AACjB,UAAI,KAAK,UAAU;AACf,aAAK,SAAS;MACjB;AAAA,IACJ;AAMD;AAAA;AAAA;AAAA;AAAA,kDAAyB,MAAM;AAC3B,UAAI,SAAS,QAAQ;AACjB,aAAK,MAAK;AAAA,MACtB,OAAe;AACH,aAAK,OAAM;AAAA,MACd;AAAA,IACJ;AAOD;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAgB,CAAC,MAAM;AACnB,UAAI,EAAE,QAAQ,YAAY,SAAS,oBAAoB;AACnD,iBAAS,gBAAe;AAAA,MAC3B;AAGD,UAAI,EAAE,IAAI,YAAa,MAAK,OAAO,KAAK,OAAO;AAC3C,cAAM,UAAU,KAAK,MAAM,WAAU;AACrC,gBAAQ,IAAI,SAAS,UAAU,UAAU,SAAS,EAAE;AAAA,MACvD;AAGD,UAAI,EAAE,IAAI,YAAa,MAAK,OAAO,EAAE,UAAU;AAC3C,aAAK,gBAAe;AAAA,MACvB;AAAA,IACJ;AA57CG,YAAQ,IAAI,sBAAsB;AAGlC,WAAO,OAAO;AAGd,WAAO,iBAAiB,IAAI;AAC5B,WAAO,eAAe,UAAU,aAAa,KAAK,SAAS,KAAK,IAAI,CAAC;AAErE,QAAI;AAEA,cAAQ,IAAI,2BAA2B;AACvC,WAAK,QAAQ,IAAI;AAGjB,cAAQ,IAAI,sBAAsB;AAClC,WAAK,WAAW,IAAI;AACpB,cAAQ,IAAI,oCAAoC;AAGhD,WAAK,QAAQ,KAAK,SAAS;AAC3B,WAAK,SAAS,KAAK,SAAS;AAE5B,cAAQ,IAAI,sCAAsC;AAGlD,WAAK,MAAM,SAAS,KAAK;AAGzB,cAAQ,IAAI,sCAAsC;AAGlD,WAAK,UAAU,IAAI,QAAQ,KAAK,KAAK;AAGrC,WAAK,QAAQ,UAAU,KAAK,MAAM;AAGlC,WAAK,cAAc,IAAI,YAAY,KAAK,KAAK;AAG7C,cAAQ,IAAI,uBAAuB;AACnC,WAAK,YAAY,IAAI,UAAU,KAAK,KAAK;AAGzC,WAAK,QAAQ,aAAa,KAAK,SAAS;AAGxC,WAAK,YAAY,aAAa,KAAK,SAAS;AAG5C,WAAK,KAAK,IAAI,GAAG,KAAK,WAAW,KAAK,WAAW;AAGjD,WAAK,GAAG,SAAS,KAAK,KAAK;AAG3B,WAAK,WAAW,IAAI,SAAS,KAAK,WAAW,KAAK,SAAS,KAAK,aAAa,KAAK,EAAE;AAGpF,WAAK,GAAG,YAAY,KAAK,QAAQ;AAGjC,cAAQ,IAAI,0BAA0B;AACtC,WAAK,GAAG,mBAAmB,IAAI;AAG/B,WAAK,aAAa;AAClB,WAAK,iBAAiB,YAAY;AAClC,WAAK,aAAa;AAClB,WAAK,aAAa;AAClB,WAAK,sBAAsB;AAC3B,WAAK,WAAW;AAGhB;AACA,UAAI,CAAC,OAAO,OAAQ,QAAO,SAAS,CAAA;AACpC,aAAO,OAAO,UAAU;AAGxB,WAAK,WAAW,iEAAiE,KAAK,UAAU,SAAS,KACzF,OAAO,cAAc,OAAO,WAAW,oBAAoB,EAAE;AAG7E,WAAK,eAAe;AACpB,WAAK,eAAe;AACpB,WAAK,qBAAqB;AAC1B,WAAK,oBAAoB;AAGzB,UAAI,KAAK,MAAM,KAAK,GAAG,UAAU;AAC7B,aAAK,uBAAsB;AAAA,MAC9B;AAGD,WAAK,gBAAgB;AACrB,WAAK,kBAAkB;AACvB,WAAK,iBAAiB;AACtB,WAAK,cAAc;AACnB,WAAK,iBAAiB,IAAE;AAGxB,WAAK,YAAY;AACjB,WAAK,gBAAgB;AAGrB,cAAQ,IAAI,oCAAoC;AAChD,WAAK,4BAA2B;AAGhC,WAAK,mBAAkB;AAGvB,WAAK,eAAe,KAAK,QAAQ,KAAK,IAAI;AAG1C,WAAK,YAAY;AAGjB,WAAK,uBAAsB;AAAA,IAE9B,SAAQ,OAAO;AACZ,cAAQ,MAAM,iCAAiC,KAAK;AACpD,YAAM;AAAA,IACT;AAAA,EACJ;AAAA;AAAA,EAGD,MAAM,yBAAyB;AAC3B,QAAI;AACA,cAAQ,IAAI,0CAA0C;AAGtD,YAAM,IAAI,QAAQ,aAAW,WAAW,SAAS,GAAG,CAAC;AAGrD,UAAI,KAAK,SAAS,KAAK,MAAM,gBAAgB,KAAK,MAAM,aAAa,UAAU,aAAa;AACxF,YAAI;AACA,eAAK,MAAM;QACd,SAAQ,GAAG;AACR,kBAAQ,IAAI,8EAA8E;AAAA,QAC7F;AAAA,MACJ;AAGD,UAAI,KAAK,MAAM,KAAK,GAAG,aAAa;AAChC,gBAAQ,IAAI,sBAAsB;AAClC,aAAK,GAAG,YAAY;MACpC,OAAmB;AACH,gBAAQ,MAAM,0DAA0D;AACxE,aAAK,0BAAyB;AAAA,MACjC;AAGD,cAAQ,IAAI,wCAAwC;AACpD,4BAAsB,KAAK,YAAY;AAGvC,WAAK,gCAA+B;AAEpC,cAAQ,IAAI,qDAAqD;AAAA,IACpE,SAAQ,OAAO;AACZ,cAAQ,MAAM,8CAA8C,KAAK;AAGjE,UAAI,KAAK,MAAM,KAAK,GAAG,WAAW;AAC9B,aAAK,GAAG,UAAU,gCAAgC,MAAM,OAAO;AAAA,MAC/E,OAAmB;AACH,cAAM,gCAAgC,MAAM,OAAO;AAAA,MACtD;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAGD,MAAM,kCAAkC;AACpC,QAAI;AAEA,WAAK,eAAc;AAGnB,cAAQ,IAAI,8CAA8C;AAC1D,UAAI,CAAC,KAAK,QAAQ;AACd,aAAK,SAAS,IAAI,OAAO,KAAK,OAAO,KAAK,SAAS;AAGnD,YAAI,KAAK,OAAO,OAAO;AACnB,kBAAQ,IAAI,uCAAuC;AAAA,QACvE,OAAuB;AACH,kBAAQ,IAAI,+CAA+C;AAE3D,qBAAW,MAAM;AACb,gBAAI,KAAK,OAAO,SAAS,KAAK,OAAO,cAAc;AAC/C,sBAAQ,IAAI,4DAA4D;AAAA,YACpG,OAA+B;AACH,sBAAQ,KAAK,4EAA4E;AACzF,kBAAI,KAAK,OAAO,6BAA6B;AACzC,qBAAK,OAAO;cACf;AAAA,YACJ;AAAA,UACJ,GAAE,GAAI;AAAA,QACV;AAAA,MACJ;AAGD,iBAAW,MAAM;AACb,aAAK,sBAAqB;AAG1B,aAAK,oBAAmB;AAAA,MAC3B,GAAE,GAAG;AAAA,IACT,SAAQ,OAAO;AACZ,cAAQ,MAAM,yCAAyC,KAAK;AAAA,IAC/D;AAAA,EACJ;AAAA;AAAA,EAGD,MAAM,iBAAiB;AACnB,QAAI;AACA,UAAI,KAAK,OAAO;AAEZ,gBAAQ,IAAI,6CAA6C;AACzD,aAAK,MAAM,WAAY,EAAC,KAAK,MAAM;AAC/B,kBAAQ,IAAI,sCAAsC;AAAA,QACtE,CAAiB,EAAE,MAAM,WAAS;AACd,kBAAQ,MAAM,6BAA6B,KAAK;AAAA,QACpE,CAAiB;AAAA,MACJ;AAAA,IACJ,SAAQ,OAAO;AACZ,cAAQ,MAAM,wBAAwB,KAAK;AAAA,IAC9C;AAAA,EACJ;AAAA;AAAA,EAGD,sBAAsB;AAClB,YAAQ,IAAI,kCAAkC;AAG9C,SAAK,qBAAqB,IAAIT,eAAqB,KAAK,IAAI,EAAE;AAC9D,SAAK,qBAAqB,IAAIL,qBAA2B;AAAA,MACrD,OAAO;AAAA,MACP,UAAU;AAAA,MACV,mBAAmB;AAAA,MACnB,WAAW;AAAA,MACX,WAAW;AAAA,IACvB,CAAS;AAGD,UAAM,kBAAkB,IAAIC,KAAW,KAAK,oBAAoB,KAAK,kBAAkB;AAGvF,SAAK,MAAM,IAAI,eAAe;AAG1B,SAAK,SAAS,SAAS,QAAQ,KAAK,OAAO,KAAK,MAAM;AAGtD,SAAK,SAAS,WAAW,MAAM,KAAK,MAAM,OAAO,eAAe,CAAC;AAErE,YAAQ,IAAI,8BAA8B;AAAA,EAC7C;AAAA;AAAA,EAGD,wBAAwB;AACpB,YAAQ,IAAI,8BAA8B;AAG1C,WAAO,WAAW,WAAW,aAAa,MAAM;AAE5C,UAAI,CAAC,KAAK,mBAAmB;AACzB,aAAK,oBAAoB,IAAII,eAAqB,GAAG,GAAG,CAAC;AAAA,MAC5D;AAGD,YAAM,WAAW,IAAIU,kBAAwB;AAAA,QACzC,OAAO;AAAA,QACP,aAAa;AAAA,QACb,SAAS;AAAA,MACzB,CAAa;AAGD,YAAM,OAAO,IAAId,KAAW,KAAK,mBAAmB,QAAQ;AAG5D,aAAO;AAAA,QACH;AAAA,QACA;AAAA;AAAA,QAGA,OAAO,SAAS,QAAQ,UAAU,OAAO,GAAG;AACxC,eAAK,SAAS,MAAM,IAAI,KAAK;AAC7B,eAAK,SAAS,UAAU;AACxB,eAAK,KAAK,MAAM,IAAI,MAAM,MAAM,IAAI;AACpC,eAAK,KAAK,UAAU;AAAA,QACvB;AAAA;AAAA,QAGD,OAAO,WAAW;AACd,cAAI,KAAK,KAAK,QAAQ;AAClB,iBAAK,KAAK,OAAO,OAAO,KAAK,IAAI;AAAA,UACpC;AACD,eAAK,KAAK,UAAU;AAAA,QACvB;AAAA,MACjB;AAAA,IACA,GAAW,IAAI,GAAG;AAGV,WAAO,WAAW,WAAW,cAAc,MAAM;AAE7C,UAAI,CAAC,KAAK,oBAAoB;AAC1B,aAAK,qBAAqB,IAAII,eAAqB,GAAG,GAAG,CAAC;AAAA,MAC7D;AAGD,YAAM,WAAW,IAAIL,qBAA2B;AAAA,QAC5C,OAAO;AAAA,QACP,UAAU;AAAA,QACV,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,WAAW;AAAA,MAC3B,CAAa;AAGD,YAAM,OAAO,IAAIC,KAAW,KAAK,oBAAoB,QAAQ;AAG7D,aAAO;AAAA,QACH;AAAA,QACA;AAAA,QACA,UAAU,IAAIa,QAAe;AAAA;AAAA,QAG7B,OAAO,SAAS,UAAU,WAAW,QAAQ,KAAK,QAAQ,OAAU;AAEhE,eAAK,KAAK,SAAS,KAAK,QAAQ;AAGhC,eAAK,SAAS,KAAK,SAAS,EAAE,YAAY,eAAe,KAAK;AAG9D,eAAK,SAAS,MAAM,IAAI,KAAK;AAC7B,eAAK,SAAS,SAAS,IAAI,KAAK;AAGhC,eAAK,KAAK,UAAU;AAAA,QACvB;AAAA;AAAA,QAGD,OAAO,WAAW;AACd,cAAI,KAAK,KAAK,QAAQ;AAClB,iBAAK,KAAK,OAAO,OAAO,KAAK,IAAI;AAAA,UACpC;AACD,eAAK,KAAK,UAAU;AACpB,eAAK,SAAS,IAAI,GAAG,GAAG,CAAC;AAAA,QAC5B;AAAA,MACjB;AAAA,IACA,GAAW,IAAI,GAAG;AAGV,WAAO,WAAW,WAAW,kBAAkB,MAAM;AAEjD,YAAM,gBAAgB;AACtB,YAAM,YAAY,IAAIhB;AAGtB,YAAM,YAAY,IAAI,aAAa,gBAAgB,CAAC;AACpD,YAAM,SAAS,IAAI,aAAa,gBAAgB,CAAC;AAGjD,eAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AACpC,cAAM,KAAK,IAAI;AAEf,kBAAU,EAAE,IAAI;AAChB,kBAAU,KAAK,CAAC,IAAI;AACpB,kBAAU,KAAK,CAAC,IAAI;AAGpB,eAAO,EAAE,IAAI;AACb,eAAO,KAAK,CAAC,IAAI;AACjB,eAAO,KAAK,CAAC,IAAI;AAAA,MACpB;AAGD,gBAAU,aAAa,YAAY,IAAIC,gBAAsB,WAAW,CAAC,CAAC;AAC1E,gBAAU,aAAa,SAAS,IAAIA,gBAAsB,QAAQ,CAAC,CAAC;AAGpE,YAAM,mBAAmB,IAAIc,eAAqB;AAAA,QAC9C,MAAM;AAAA,QACN,aAAa;AAAA,QACb,SAAS;AAAA,QACT,cAAc;AAAA,QACd,UAAUJ;AAAAA,MAC1B,CAAa;AAGD,YAAM,iBAAiB,IAAIE,OAAa,WAAW,gBAAgB;AAGnE,aAAO;AAAA,QACH,QAAQ;AAAA,QACR,YAAY,IAAI,aAAa,gBAAgB,CAAC;AAAA,QAC9C,UAAU,IAAI,aAAa,aAAa;AAAA,QACxC,aAAa,IAAI,aAAa,aAAa;AAAA;AAAA,QAG3C,OAAO,SAAS,UAAU,QAAQ,IAAIJ,MAAY,GAAG,GAAG,CAAC,GAAG,OAAO,GAAG,gBAAgB,IAAI;AAEtF,eAAK,OAAO,SAAS,KAAK,QAAQ;AAGlC,gBAAMS,aAAY,KAAK,OAAO,SAAS,WAAW,SAAS;AAC3D,gBAAMC,UAAS,KAAK,OAAO,SAAS,WAAW,MAAM;AAGrD,eAAK,OAAO,SAAS,OAAO;AAG5B,mBAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AACpC,kBAAM,KAAK,IAAI;AAGf,YAAAD,WAAU,EAAE,IAAI;AAChB,YAAAA,WAAU,KAAK,CAAC,IAAI;AACpB,YAAAA,WAAU,KAAK,CAAC,IAAI;AAGpB,YAAAC,QAAO,EAAE,IAAI,MAAM;AACnB,YAAAA,QAAO,KAAK,CAAC,IAAI,MAAM;AACvB,YAAAA,QAAO,KAAK,CAAC,IAAI,MAAM;AAGvB,kBAAM,QAAQ,KAAK,OAAQ,IAAG,KAAK,KAAK;AACxC,kBAAM,MAAM,KAAK,OAAM,IAAK,KAAK;AAEjC,iBAAK,WAAW,EAAE,IAAI,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,KAAK,KAAK,KAAK,OAAQ,IAAG;AACzE,iBAAK,WAAW,KAAK,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,KAAK,KAAK,KAAK,OAAM,IAAK;AAC7E,iBAAK,WAAW,KAAK,CAAC,IAAI,KAAK,IAAI,GAAG,KAAK,KAAK,OAAQ,IAAG;AAG3D,iBAAK,YAAY,CAAC,IAAI,MAAM,KAAK,OAAQ,IAAG;AAC5C,iBAAK,SAAS,CAAC,IAAI,KAAK,YAAY,CAAC;AAAA,UACxC;AAGD,eAAK,OAAO,SAAS,WAAW,SAAS,cAAc;AACvD,eAAK,OAAO,SAAS,WAAW,MAAM,cAAc;AAGpD,eAAK,OAAO,UAAU;AACtB,cAAI,CAAC,KAAK,OAAO,QAAQ;AACrB,mBAAO,KAAK,MAAM,IAAI,KAAK,MAAM;AAAA,UACpC;AAGD,eAAK,QAAO;AAAA,QACf;AAAA;AAAA,QAGD,SAAS,WAAW;AAChB,cAAI,CAAC,KAAK,OAAO,QAAS;AAG1B,gBAAMD,aAAY,KAAK,OAAO,SAAS,WAAW,SAAS;AAC5C,eAAK,OAAO,SAAS,WAAW,MAAM;AAGrD,cAAI,WAAW;AAGf,mBAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AACpC,kBAAM,KAAK,IAAI;AAGf,iBAAK,SAAS,CAAC,KAAK;AAGpB,gBAAI,KAAK,SAAS,CAAC,KAAK,EAAG;AAE3B,uBAAW;AAGX,YAAAA,WAAU,EAAE,KAAK,KAAK,WAAW,EAAE,IAAI;AACvC,YAAAA,WAAU,KAAK,CAAC,KAAK,KAAK,WAAW,KAAK,CAAC,IAAI;AAC/C,YAAAA,WAAU,KAAK,CAAC,KAAK,KAAK,WAAW,KAAK,CAAC,IAAI;AAG/C,kBAAM,YAAY,KAAK,SAAS,CAAC,IAAI,KAAK,YAAY,CAAC;AACvD,iBAAK,OAAO,SAAS,UAAU;AAAA,UAClC;AAGD,eAAK,OAAO,SAAS,WAAW,SAAS,cAAc;AAGvD,cAAI,UAAU;AACV,kCAAsB,KAAK,QAAQ,KAAK,IAAI,CAAC;AAAA,UACrE,OAA2B;AACH,iBAAK,MAAK;AAAA,UACb;AAAA,QACJ;AAAA;AAAA,QAGD,OAAO,WAAW;AACd,cAAI,KAAK,OAAO,QAAQ;AACpB,iBAAK,OAAO,OAAO,OAAO,KAAK,MAAM;AAAA,UACxC;AACD,eAAK,OAAO,UAAU;AAAA,QACzB;AAAA,MACjB;AAAA,IACA,GAAW,IAAI,EAAE;AAET,YAAQ,IAAI,0BAA0B;AAAA,EACzC;AAAA,EAED,cAAc;AAGV,QAAI,KAAK,WAAW;AAEhB,UAAI,CAAC,KAAK,UAAU,UAAU;AAClC,aAAK,UAAU;MACV;AAAA,IACJ;AAGD,eAAW,MAAM;AACb,UAAI,KAAK,YAAY,KAAK,SAAS,eAAe;AAE9C,aAAK,SAAS,cAAc;AAC5B,gBAAQ,IAAI,mBAAmB;AAAA,MAC/C,OAAmB;AACH,gBAAQ,MAAM,yCAAyC;AAAA,MAC1D;AAAA,IACJ,GAAE,GAAG;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKD,oBAAoB;AAChB,YAAQ,IAAI,gCAAgC;AAG5C,SAAK,gBAAgB,IAAI;AAAA,MACrB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,IACjB;AAGQ,SAAK,yBAAyB,KAAK,OAAO,SAAS,MAAK;AACxD,SAAK,yBAAyB,KAAK,OAAO,SAAS,MAAK;AAExD,YAAQ,IAAI,4BAA4B;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAKD,qBAAqB;AACjB,QAAI,CAAC,KAAK,eAAe;AACrB,WAAK,kBAAiB;AAAA,IACzB;AAED,YAAQ,IAAI,4BAA4B;AACxC,SAAK,sBAAsB;AAG3B,QAAI,KAAK,UAAU,KAAK,OAAO,SAAS,KAAK,OAAO,aAAa;AAC7D,cAAQ,IAAI,yCAAyC;AACrD,WAAK,OAAO,YAAY;IACpC,WAAmB,OAAO,QAAQ,OAAO,KAAK,YAAY,OAAO,KAAK,SAAS,aAAa;AAChF,cAAQ,IAAI,8DAA8D;AAC1E,aAAO,KAAK,SAAS,YAAY,iBAAgB;AAAA,IACpD;AAID,SAAK,OAAO,SAAS,IAAI,GAAG,KAAM,IAAK;AACvC,SAAK,OAAO,OAAO,KAAO,KAAM,CAAC;AAGjC,QAAI,KAAK,YAAY,KAAK,SAAS,cAAc;AAC7C,WAAK,SAAS,aAAa,UAAU;AAAA,IACxC;AAGD,QAAI,KAAK,MAAM,KAAK,GAAG,mBAAmB;AACtC,cAAQ,IAAI,qDAAqD;AACjE,WAAK,GAAG,kBAAkB;IAC7B;AAGD,QAAI,KAAK,IAAI;AACT,WAAK,GAAG;IACX;AAGD,QAAI,KAAK,aAAa,KAAK,UAAU,MAAM;AACvC,WAAK,UAAU,KAAK,UAAU;AAAA,IACjC;AAGD,SAAK,cAAc,cAAc,MAAM;AACnC,WAAK,sBAAqB;AAAA,IACtC,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKD,wBAAwB;AACpB,YAAQ,IAAI,wCAAwC;AAGpD,QAAI,KAAK,UAAU,KAAK,OAAO,SAAS,KAAK,OAAO,aAAa;AAC7D,cAAQ,IAAI,6CAA6C;AACzD,WAAK,OAAO,YAAY;IACpC,WAAmB,OAAO,QAAQ,OAAO,KAAK,YAAY,OAAO,KAAK,SAAS,aAAa;AAChF,cAAQ,IAAI,kEAAkE;AAC9E,aAAO,KAAK,SAAS,YAAY,mBAAkB;AAAA,IACtD;AAGD,QAAI,KAAK,MAAM,KAAK,GAAG,mBAAmB;AACtC,cAAQ,IAAI,oDAAoD;AAChE,WAAK,GAAG,kBAAkB;IAC7B;AAGD,SAAK,sBAAsB;AAG3B,QAAI,KAAK,IAAI;AACT,cAAQ,IAAI,iDAAiD;AAC7D,WAAK,GAAG;IACX;AAGD,QAAI,KAAK,aAAa,KAAK,UAAU,MAAM;AACvC,WAAK,UAAU,KAAK,UAAU;AAG9B,UAAI,KAAK,UAAU,UAAU;AACzB,gBAAQ,IAAI,iDAAiD;AAC7D,aAAK,UAAU,WAAW;AAAA,MAC7B;AAAA,IACJ;AAGD,QAAI,KAAK,YAAY,KAAK,SAAS,cAAc;AAC7C,cAAQ,IAAI,6BAA6B;AACzC,WAAK,SAAS,aAAa,UAAU;AAAA,IACxC;AAGD,iBAAa,QAAQ,eAAe,MAAM;AAG1C,QAAI,OAAO,gBAAgB;AACvB,aAAO,eAAe,QAAQ,mBAAmB,CAAE,CAAA;AAAA,IACtD;AAED,YAAQ,IAAI,oCAAoC;AAAA,EACnD;AAAA,EAED,qBAAqB;AAEjB,WAAO,iBAAiB,UAAU,KAAK,YAAY;AAGnD,aAAS,iBAAiB,oBAAoB,KAAK,sBAAsB;AAGzE,aAAS,iBAAiB,WAAW,KAAK,aAAa;AAAA,EAC1D;AAAA,EAED,OAAO,WAAW;AACd,QAAI,KAAK,WAAY;AAGrB,QAAI,KAAK,eAAe;AACpB,WAAK,oBAAoB,YAAY,IAAG,IAAK,KAAK;AAAA,IACrD;AAGG,SAAK,QAAQ,OAAO,SAAS;AAGjC,QAAI,KAAK,UAAU,QAAQ;AACvB,WAAK,UAAU,OAAO,SAAS;AAAA,IAClC;AAGD,QAAI,KAAK,qBAAqB,CAAC,KAAK,uBAAuB,CAAC,KAAK,UAAU,UAAU;AACjF,WAAK,kBAAkB,OAAO,SAAS;AAAA,IAC1C;AAGD,QAAI,KAAK,MAAM,KAAK,GAAG,qBAAqB,KAAK,aAAa,KAAK,UAAU,MAAM;AAE/E,YAAM,WAAW,KAAK,UAAU,KAAK;AACrC,WAAK,GAAG,kBAAkB,SAAS,GAAG,SAAS,GAAG,SAAS,CAAC;AAAA,IAC/D;AAGW,gBAAY,IAAM;AAC9B,UAAM,aAAa,KAAK,kBAAkB,MAAO,KAAK,kBAAkB;AAIxE,SAAK,UAAU,KAAK,UAAU;AAC9B,QAAI,KAAK,UAAU,SAAS,KAAK,eAAe;AAC5C,WAAK,UAAU;IAClB;AAID,QAAI,cAAc;AAClB,QAAI,cAAc;AAElB,aAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK;AAE5C,YAAM,SAAS,IAAI;AACnB,qBAAe,KAAK,UAAU,CAAC,IAAI;AACnC,qBAAe;AAAA,IAClB;AAGD,SAAK,aAAa,KAAK,MAAM,cAAc,WAAW;AAGtD,QAAI,KAAK,aAAa,MAAM,KAAK,KAAK,MAAM,KAAK,GAAG,WAAW;AAE3D,UAAI,KAAK,eAAe,GAAG;AACvB,aAAK,GAAG,UAAU,KAAK,YAAY,KAAK,YAAY;AAAA,MACpE,OAAmB;AACH,aAAK,GAAG,UAAU,KAAK,UAAU;AAAA,MACpC;AAAA,IACJ;AAGD,QAAI,KAAK,SAAS,QAAQ;AACtB,WAAK,SAAS;IACjB;AAGD,QAAI,KAAK,UAAU,KAAK,OAAO,uBAAuB;AAClD,UAAI;AACA,aAAK,OAAO;MACf,SAAQ,OAAO;AACZ,gBAAQ,KAAK,oCAAoC,KAAK;AAAA,MACzD;AAAA,IACb,WAAmB,KAAK,UAAU,CAAC,KAAK,OAAO,uBAAuB;AAC1D,cAAQ,KAAK,0DAA0D;AAGvE,UAAI,KAAK,OAAO,+BAA+B,CAAC,KAAK,OAAO,cAAc;AACtE,gBAAQ,IAAI,8EAA8E;AAC1F,aAAK,OAAO;MACf;AAAA,IACJ;AAGD,QAAI,KAAK,UAAU,KAAK,OAAO,QAAQ;AACnC,WAAK,OAAO,OAAO,SAAS;AAAA,IAC/B;AAGD,QAAI,KAAK,YAAY,QAAQ;AACzB,WAAK,YAAY;IACpB;AAGD,QAAI,KAAK,GAAG,QAAQ;AAChB,WAAK,GAAG;IACX;AAGD,SAAK,YAAW;AAGhB,SAAK,cAAa;AAGlB,SAAK;AAGD,QAAI,KAAK,SAAS,CAAC,KAAK,qBAAqB;AAEzC,WAAK,MAAM,cAAc,KAAK,MAAM,WAAW,eAAe,KAAK,MAAM,WAAW,YAAY,mBAAmB,EAAE,UAAW,CAAA;AAChI,WAAK,MAAM,cAAc,OAAO,SAAS;AACzC,WAAK,MAAM,cAAc,KAAK,MAAM,WAAW,eAAe,KAAK,MAAM,WAAW,YAAY,oBAAoB,EAAE,UAAW,CAAA;AAAA,IACpI,WAAU,KAAK,SAAS,KAAK,qBAAqB;AAGnD,UAAI,KAAK,MAAM,iBAAiB,KAAK,MAAM,eAAe;AACtD,mBAAW,UAAU,KAAK,MAAM,cAAc,SAAS;AAEnD,cAAI,OAAO,YAAY,SAAS,iBAC5B,OAAO,YAAY,SAAS,mBAC5B,OAAO,YAAY,SAAS,gBAAgB;AAC5C,mBAAO,OAAO,SAAS;AAAA,UAC1B;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAGD,cAAc;AACV,QAAI,CAAC,KAAK,SAAS,CAAC,KAAK,UAAW;AAGpC,QAAI,KAAK,UAAU,UAAU;AAEzB,WAAK,MAAM,UAAU,QAAQ;AAAA,IACzC,OAAe;AACH,YAAM,cAAc,KAAK,UAAU,OAAO,WACxB,KAAK,UAAU,OAAO,YACtB,KAAK,UAAU,OAAO,QACtB,KAAK,UAAU,OAAO;AAExC,UAAI,aAAa;AAEb,aAAK,MAAM,UAAU,QAAQ;AAG7B,YAAI,kBAAkB;AAEtB,YAAI,KAAK,UAAU,OAAO,QAAS,oBAAmB;AACtD,YAAI,KAAK,UAAU,OAAO,SAAU,oBAAmB;AACvD,YAAI,KAAK,UAAU,OAAO,KAAM,oBAAmB;AACnD,YAAI,KAAK,UAAU,OAAO,MAAO,oBAAmB;AAGpD,YAAI,KAAK,UAAU,OAAO,MAAO,oBAAmB;AAGpD,aAAK,MAAM,gBAAgB,eAAe;AAAA,MAC1D,OAAmB;AAEH,aAAK,MAAM,UAAU,QAAQ;AAAA,MAChC;AAAA,IACJ;AAAA,EAGJ;AAAA,EAED,gBAAgB;AAEZ,QAAI,CAAC,KAAK,UAAW;AAGrB,QAAI,KAAK,UAAU,SAAU;AAG7B,QAAI,KAAK,UAAU,QAAQ,KACvB,KAAK,SAAS,iBACd,CAAC,KAAK,SAAS,cAAc,cAAc;AAC3C,WAAK,SAAS,2BAA2B;AACzC;AAAA,IACH;AAID,UAAM,cAAc,OAAO,WAAW,IAAI,GAAG,GAAG,CAAC;AACjD,UAAM,gBAAgB,KAAK,UAAU,KAAK,SAAS,WAAW,WAAW;AACzE,WAAO,WAAW,QAAQ,WAAW;AAErC,QAAI,gBAAgB,KAAK;AACrB,WAAK,SAAS,2CAA2C;AACzD;AAAA,IACH;AAAA,EACJ;AAAA,EAED,SAAS,SAAS;AACd,QAAI,KAAK,WAAY;AAErB,YAAQ,IAAI,cAAc,OAAO;AACjC,SAAK,aAAa;AAGlB,QAAI,KAAK,OAAO;AACZ,WAAK,MAAM,UAAU,WAAW;AAAA,IACnC;AAGD,QAAI,KAAK,GAAG,gBAAgB,KAAK,SAAS,WAAW;AAEjD,YAAM,YAAY;AAAA,QACd,WAAW,KAAK,SAAS;AAAA,QACzB,WAAW;AAAA,UACP,QAAQ,KAAK;AAAA,UACb,cAAc,KAAK,gBAAgB,KAAK,8BAA+B,IAAG;AAAA,UAC1E,iBAAiB,KAAK,qBAAqB;AAAA,QAC9C;AAAA,MACjB;AAEY,WAAK,GAAG,aAAa,WAAW,OAAO;AAAA,IAC1C;AAGD,QAAI,KAAK,aAAa,KAAK,UAAU,QAAQ;AACzC,WAAK,UAAU,OAAO,UAAU;AAChC,WAAK,UAAU,OAAO,WAAW;AACjC,WAAK,UAAU,OAAO,OAAO;AAC7B,WAAK,UAAU,OAAO,QAAQ;AAC9B,WAAK,UAAU,OAAO,QAAQ;AAAA,IACjC;AAGD,QAAI,KAAK,YAAY,KAAK,SAAS,cAAc;AAC7C,WAAK,SAAS,aAAa;IAC9B;AAID,SAAK,yBAAyB,WAAW,MAAM;AAE3C,YAAM,KAAK,KAAK;AAChB,YAAM,QAAQ,KAAK;AAGnB,WAAK,KAAK;AACV,WAAK,QAAQ;AAGb,WAAK,QAAO;AAGZ,WAAK,KAAK;AACV,WAAK,QAAQ;AAAA,IAChB,GAAE,GAAI;AAAA,EACV;AAAA,EAED,QAAQ,WAAW;AAEf,QAAI,KAAK,qBAAqB,KAAK,cAAc;AAC7C,WAAK;AAGL,UAAI,KAAK,uBAAuB,KAAK,cAAc;AAC/C,aAAK,gBAAgB;AACrB,aAAK,iBAAiB,YAAY;AAClC,aAAK,iBAAiB,YAAY;AAClC,aAAK,oBAAoB;AACzB,gBAAQ,IAAI,sCAAsC;AAAA,MACrD;AAGD,4BAAsB,KAAK,YAAY;AACvC;AAAA,IACH;AAGD,QAAI,CAAC,KAAK,eAAe;AACrB,WAAK,gBAAgB;AACrB,WAAK,iBAAiB,YAAY;AAElC,4BAAsB,KAAK,YAAY;AACvC;AAAA,IACH;AAGD,SAAK,kBAAkB,YAAY,KAAK;AAGxC,QAAI,KAAK,eAAe,GAAG;AAEvB,YAAM,kBAAkB,MAAO,KAAK;AAGpC,YAAM,wBAAwB,YAAY,KAAK;AAG/C,UAAI,wBAAwB,kBAAkB,KAAK;AAE/C,8BAAsB,KAAK,YAAY;AACvC;AAAA,MACH;AAID,WAAK,iBAAiB;AAGtB,UAAI,YAAY,KAAK,gBAAgB,iBAAiB;AAClD,aAAK,gBAAgB;AAAA,MACxB;AAAA,IACb,OAAe;AAEH,WAAK,gBAAgB;AAAA,IACxB;AAGD,UAAM,MAAM,YAAY;AACxB,QAAI,aAAa,KAAK,IAAI,MAAM,KAAK,gBAAgB,GAAG,IAAI;AAG5D,QAAI,KAAK,qBAAqB,KAAK,aAAa,OAAO,GAAG;AACtD,WAAK,0BAAyB;AAAA,IACjC;AAID,UAAM,mBAAmB,CAAC,KAAK,gBAAgB,KAAK,eAAe,MAAM,KAAK,iBAAiB;AAE/F,QAAI,kBAAkB;AAElB,WAAK,eAAe;AAGpB,YAAM,gBAAgB,KAAK,kBAAmB,IAAE;AAChD,UAAI,UAAU;AACd,YAAM,aAAa;AAEnB,YAAM,WAAW,YAAY;AAG7B,aAAO,KAAK,eAAe,iBAAiB,UAAU,YAAY;AAE9D,YAAI,KAAK,UAAU,KAAK,OAAO,OAAO;AAClC,gBAAM,OAAO,KAAK,OAAO,MAAM,0BAA0B,CAAC,oBAAoB,CAAC;AAC/E,qBAAW,KAAK,MAAM;AAClB,kBAAM,IAAI,EAAE,aAAa,oBAAoB;AAC7C,gBAAI,KAAK,EAAE,iBAAkB,GAAE,iBAAgB;AAAA,UAClD;AAAA,QACJ;AAGD,aAAK,OAAO,aAAa;AACzB,aAAK,eAAe;AACpB;AAAA,MACH;AAED,YAAM,SAAS,YAAY;AAG3B,UAAI,KAAK,cAAc,gBAAgB,GAAG;AACtC,gBAAQ,KAAK,8BAA8B,KAAK,WAAW,oBAAoB;AAC/E,aAAK,cAAc;AAAA,MACtB;AAGD,YAAM,QAAQ,KAAK,IAAI,KAAK,cAAc,eAAe,CAAG;AAG5D,YAAM,cAAc,YAAY;AAChC,UAAI,KAAK,SAAS,mBAAmB;AACjC,aAAK,SAAS,kBAAkB,KAAK;AAAA,MACxC;AACD,WAAK,SAAS;AACd,YAAM,YAAY,YAAY;AAG9B,UAAI,OAAO,QAAQ;AACf,cAAM,WAAW,KAAK,kBAAmB,MAAO,KAAK,kBAAmB;AACxE,eAAO,OAAO,MAAM,KAAK,MAAM,QAAQ;AACvC,eAAO,OAAO,QAAS,SAAS,YAAa;AAC7C,eAAO,OAAO,WAAY,YAAY,eAAgB;AAAA,MACzD;AAAA,IACb,OAAe;AAEH,WAAK,YAAY;AACjB,YAAM,WAAW,YAAY;AAE7B,UAAI,KAAK,UAAU,KAAK,OAAO,OAAO;AAClC,cAAM,OAAO,KAAK,OAAO,MAAM,0BAA0B,CAAC,oBAAoB,CAAC;AAC/E,mBAAW,KAAK,MAAM;AAClB,gBAAM,IAAI,EAAE,aAAa,oBAAoB;AAC7C,eAAK,EAAE,oBAAoB,EAAE,iBAAgB;AAAA,QAChD;AAAA,MACJ;AACD,WAAK,OAAO,KAAK,SAAS;AAC1B,YAAM,SAAS,YAAY;AAC3B,YAAM,cAAc,YAAY;AAChC,UAAI,KAAK,SAAS,kBAAmB,MAAK,SAAS,kBAAkB,CAAC;AACtE,WAAK,SAAS;AACd,YAAM,YAAY,YAAY;AAC9B,UAAI,OAAO,QAAQ;AACf,eAAO,OAAO,MAAM,KAAK,MAAM,KAAK,KAAK,aAAW,MAAM;AAC1D,eAAO,OAAO,QAAS,SAAS,YAAa;AAC7C,eAAO,OAAO,WAAY,YAAY,eAAgB;AAAA,MACzD;AAAA,IACJ;AAED,SAAK,iBAAiB;AAGtB,SAAK;AAGL,0BAAsB,KAAK,YAAY;AAAA,EAC1C;AAAA,EAED,QAAQ;AAEJ,YAAQ,IAAI,aAAa;AAGzB,QAAI,KAAK,OAAO;AACZ,WAAK,MAAM,QAAQ;AACnB,iBAAW,SAAS,OAAO,OAAO,KAAK,MAAM,MAAM,GAAG;AAClD,cAAM,QAAQ;AAAA,MACjB;AACD,iBAAW,SAAS,KAAK,MAAM,OAAO;AAClC,cAAM,QAAQ;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AAAA,EAED,SAAS;AAEL,YAAQ,IAAI,cAAc;AAC1B,SAAK,iBAAiB,YAAY;AAGlC,QAAI,KAAK,SAAS,CAAC,KAAK,MAAM,OAAO;AACjC,iBAAW,SAAS,OAAO,OAAO,KAAK,MAAM,MAAM,GAAG;AAClD,cAAM,QAAQ;AAAA,MACjB;AACD,iBAAW,SAAS,KAAK,MAAM,OAAO;AAClC,cAAM,QAAQ;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAGD,mBAAmB;AAUf,YAAQ,IAAI,gEAAgE;AAG5E,QAAI,KAAK,SAAS,OAAO,KAAK,MAAM,cAAc,YAAY;AAC1D,cAAQ,IAAI,oEAAoE;AAEhF,WAAK,MAAM,YAAY,SAAS,YAAY;AACxC,YAAI,KAAK,iBAAiB,OAAO,KAAK,cAAc,cAAc,YAAY;AAC1E,iBAAO,KAAK,cAAc,UAAU,UAAU;AAAA,QACjD;AACD,eAAO;AAAA,MACvB;AAAA,IACS;AAED,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA,EAKD,kBAAkB;AACd,WAAO,aAAa,CAAC,OAAO;AAC5B,YAAQ,IAAI,cAAc,OAAO,aAAa,YAAY,UAAU,EAAE;AAGtE,QAAI,OAAO,YAAY;AACnB,UAAI,KAAK,MAAM,CAAC,SAAS,eAAe,mBAAmB,GAAG;AAC1D,aAAK,GAAG;MACX;AAGD,UAAI,OAAO,aAAa;AACpB,eAAO,YAAY;AACnB,eAAO,YAAY;MACtB;AAAA,IACb,OAAe;AAEH,YAAM,eAAe,SAAS,eAAe,mBAAmB;AAChE,UAAI,cAAc;AACd,qBAAa,OAAM;AAAA,MACtB;AAGD,UAAI,KAAK,MAAM,KAAK,GAAG,eAAe;AAClC,sBAAc,KAAK,GAAG,aAAa;AACnC,aAAK,GAAG,gBAAgB;AAAA,MAC3B;AAAA,IACJ;AAGD,WAAO,YAAY,MAAM;AACrB,UAAI,KAAK,oBAAoB;AACzB,gBAAQ,IAAI,oCAAoC;AAChD,aAAK,mBAAkB;AACvB,eAAO;AAAA,MACV;AACD,aAAO;AAAA,IACnB;AAAA,EACK;AAAA;AAAA;AAAA;AAAA,EAKD,8BAA8B;AAE1B,SAAK,oBAAoB;AAAA,MACrB,QAAQ;AAAA,QACJ,YAAY;AAAA,QACZ,eAAe;AAAA,QACf,aAAa;AAAA,QACb,aAAa;AAAA,QACb,YAAY;AAAA,MACf;AAAA,MACD,UAAU;AAAA,MACV,cAAc;AAAA,MAEd,QAAQ,SAAS,WAAW;AAExB,aAAK,YAAY;AACjB,cAAM,UAAU,KAAK,WAAW;AAIhC,cAAM,WAAW,KAAK,MAAM,UAAU,CAAC,IAAI;AAG3C,YAAI,aAAa,KAAK,cAAc;AAChC,eAAK,eAAe;AAIpB,gBAAM,uBAAuB,IAAK,KAAK,IAAI,KAAK,eAAe,GAAG,CAAC,IAAI;AAGvE,eAAK,OAAO,aAAa,KAAK,IAAI,KAAK,sBAAsB,EAAE;AAC/D,eAAK,OAAO,gBAAgB,KAAK,IAAI,IAAI,sBAAsB,CAAC;AAChE,eAAK,OAAO,cAAc,KAAK,MAAM,KAAK,oBAAoB;AAC9D,eAAK,OAAO,cAAc,KAAK,MAAM,KAAK,oBAAoB;AAC9D,eAAK,OAAO,aAAa,KAAK,IAAI,OAAO,IAAK,OAAO,KAAK,eAAe,KAAM,IAAI;AAEnF,kBAAQ,IAAI,iCAAiC,KAAK,YAAY,KAAK,oBAAoB,IAAI;AAC3F,kBAAQ,IAAI,0BAA0B,KAAK,OAAO,UAAU,mBAAmB,KAAK,OAAO,aAAa,EAAE;AAC1G,kBAAQ,IAAI,UAAU,KAAK,OAAO,WAAW,YAAY,KAAK,OAAO,WAAW,WAAW,KAAK,OAAO,UAAU,EAAE;AAAA,QACtH;AAAA,MACJ;AAAA,IACb;AAAA,EACK;AAAA;AAAA;AAAA;AAAA,EAKD,oBAAoB;AAChB,QAAI,KAAK,cAAe;AAExB,YAAQ,IAAI,oDAAoD;AAChE,SAAK,gBAAgB;AACrB,SAAK,iBAAiB,YAAY;AAClC,SAAK,oBAAoB;AAGzB,QAAI,KAAK,OAAO;AACZ,WAAK,MAAM,UAAU,OAAO;AAAA,IAC/B;AAGD,WAAO,eAAe,QAAQ,mBAAmB;AAAA,MAC7C,WAAW,KAAK;AAAA,IAC5B,CAAS;AAGD,QAAI,KAAK,MAAM,KAAK,GAAG,kBAAkB;AACrC,WAAK,GAAG,iBAAiB,mCAAmC,GAAI;AAAA,IACnE;AAGD,QAAI,KAAK,aAAa,KAAK,UAAU,UAAU;AAC3C,cAAQ,IAAI,yCAAyC;AAGrD,WAAK,UAAU;AAGf,aAAO,eAAe,QAAQ,wBAAwB;AAAA,QAClD,QAAQ;AAAA,QACR,QAAQ;AAAA,MACxB,CAAa;AAID,iBAAW,MAAM;AACb,gBAAQ,IAAI,oCAAoC;AAChD,YAAI,KAAK,MAAM,KAAK,GAAG,QAAQ;AAC3B,eAAK,GAAG;QACX;AAAA,MACJ,GAAE,GAAG;AAAA,IACT;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,gCAAgC;AAC5B,UAAM,eAAe,KAAK,MAAM,KAAK,oBAAoB,GAAI;AAC7D,UAAM,UAAU,KAAK,MAAM,eAAe,EAAE;AAC5C,UAAM,UAAU,eAAe;AAC/B,WAAO,GAAG,QAAQ,SAAU,EAAC,SAAS,GAAG,GAAG,CAAC,IAAI,QAAQ,SAAQ,EAAG,SAAS,GAAG,GAAG,CAAC;AAAA,EACvF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,UAAU;AACN,YAAQ,IAAI,+BAA+B;AAG3C,QAAI,KAAK,cAAc;AACnB,2BAAqB,KAAK,YAAY;AACtC,WAAK,eAAe;AAAA,IACvB;AAGD,QAAI,KAAK,wBAAwB;AAC7B,mBAAa,KAAK,sBAAsB;AACxC,WAAK,yBAAyB;AAAA,IACjC;AAGD,WAAO,oBAAoB,UAAU,KAAK,YAAY;AACtD,aAAS,oBAAoB,oBAAoB,KAAK,sBAAsB;AAC5E,aAAS,oBAAoB,WAAW,KAAK,aAAa;AAG1D,QAAI,KAAK,UAAU;AACf,WAAK,SAAS;AACd,WAAK,WAAW;AAAA,IACnB;AAED,QAAI,KAAK,OAAO;AACZ,WAAK,MAAM;AACX,WAAK,QAAQ;AAAA,IAChB;AAED,QAAI,KAAK,SAAS;AACd,WAAK,QAAQ;AACb,WAAK,UAAU;AAAA,IAClB;AAED,QAAI,KAAK,WAAW;AAChB,WAAK,UAAU;AACf,WAAK,YAAY;AAAA,IACpB;AAED,QAAI,KAAK,aAAa;AAClB,WAAK,YAAY;AACjB,WAAK,cAAc;AAAA,IACtB;AAED,QAAI,KAAK,UAAU;AACf,WAAK,SAAS;AACd,WAAK,WAAW;AAAA,IACnB;AAED,QAAI,KAAK,IAAI;AACT,WAAK,GAAG;AACR,WAAK,KAAK;AAAA,IACb;AAED,QAAI,KAAK,QAAQ;AACb,WAAK,OAAO;AACZ,WAAK,SAAS;AAAA,IACjB;AAED,QAAI,KAAK,eAAe;AACpB,WAAK,cAAc;AACnB,WAAK,gBAAgB;AAAA,IACxB;AAGD,QAAI,KAAK,OAAO;AAEZ,UAAI,KAAK,MAAM,eAAe;AAC1B,cAAM,YAAY,CAAC,GAAG,KAAK,MAAM,cAAc,SAAS,KAAI,CAAE;AAC9D,mBAAW,YAAY,WAAW;AAC9B,eAAK,MAAM,cAAc,QAAQ;AAAA,QACpC;AAAA,MACJ;AAGD,UAAI,KAAK,MAAM,eAAe;AAC1B,mBAAW,UAAU,KAAK,MAAM,cAAc,SAAS;AACnD,cAAI,OAAO,eAAe,OAAO,OAAO,gBAAgB,YAAY;AAChE,mBAAO,YAAW;AAAA,UACrB;AAAA,QACJ;AAAA,MACJ;AAED,WAAK,QAAQ;AAAA,IAChB;AAGD,QAAI,OAAO,gBAAgB;AACvB,aAAO,eAAe,YAAY,aAAa,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,IAC1E;AAGD,WAAO,OAAO;AAGd,QAAI,OAAO,YAAY;AACnB,aAAO,WAAW,OAAO;IAC5B;AAED,QAAI,OAAO,YAAY;AACnB,aAAO,WAAW;IACrB;AAGD,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,SAAK,YAAY;AAEjB,YAAQ,IAAI,wCAAwC;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA,EAiDD,yBAAyB;AACrB,QAAI,CAAC,KAAK,MAAM,CAAC,KAAK,GAAG,SAAU;AAEnC,UAAM,WAAW,KAAK,GAAG,SAAS;AAClC,UAAM,cAAc,KAAK,GAAG,SAAS,sBAAsB;AAE3D,QAAI,SAAS,iBAAiB,QAAQ;AAElC,UAAI,KAAK,UAAU;AACf,aAAK,eAAe;AACpB,gBAAQ,IAAI,kDAAkD;AAAA,MACjE,WAEQ,cAAc,IAAI;AAEvB,aAAK,eAAe;AACpB,aAAK,iBAAiB,IAAE;AACxB,gBAAQ,IAAI,yBAAyB,WAAW,kDAAkD;AAAA,MACrG,WACQ,cAAc,IAAI;AAEvB,aAAK,eAAe;AACpB,gBAAQ,IAAI,0BAA0B,WAAW,8BAA8B;AAAA,MAC/F,OAAmB;AAEH,aAAK,eAAe;AACpB,gBAAQ,IAAI,8CAA8C,WAAW,IAAI;AAAA,MAC5E;AAAA,IACb,OAAe;AAEH,WAAK,eAAe,SAAS,SAAS,YAAY,KAAK;AAGvD,UAAI,KAAK,YAAY,KAAK,iBAAiB,GAAG;AAC1C,aAAK,eAAe;AACpB,gBAAQ,IAAI,8CAA8C;AAAA,MAC7D;AAAA,IACJ;AAED,YAAQ,IAAI,iCAAiC,KAAK,YAAY,oBAAoB,KAAK,iBAAiB,GAAI,IAAI;AAAA,EACnH;AAAA;AAAA;AAAA;AAAA,EAKD,4BAA4B;AACxB,QAAI,CAAC,KAAK,MAAM,CAAC,KAAK,GAAG,YAAY,CAAC,KAAK,GAAG,SAAS,SAAS,aAAa;AACzE;AAAA,IACH;AAGD,QAAI,KAAK,UAAU,SAAS,GAAI;AAEhC,UAAM,SAAS,KAAK,UAAU,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,KAAK,UAAU;AAC1E,UAAM,YAAY,KAAK,gBAAgB;AACvC,UAAM,mBAAmB,SAAS;AAGlC,QAAI,mBAAmB,MAAM;AACzB,YAAM,iBAAiB,KAAK,GAAG,SAAS,SAAS;AAEjD,UAAI,mBAAmB,QAAQ;AAC3B,gBAAQ,IAAI,oBAAoB,KAAK,MAAM,MAAM,CAAC,kCAAkC;AACpF,aAAK,GAAG,SAAS,SAAS,mBAAmB;AAC7C,aAAK,GAAG,SAAS;AACjB,aAAK,GAAG,SAAS;MACjC,WAAuB,mBAAmB,UAAU;AACpC,gBAAQ,IAAI,oBAAoB,KAAK,MAAM,MAAM,CAAC,+BAA+B;AACjF,aAAK,GAAG,SAAS,SAAS,mBAAmB;AAC7C,aAAK,GAAG,SAAS;AACjB,aAAK,GAAG,SAAS;MACpB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAGD,4BAA4B;AAExB,UAAM,cAAc,aAAa,QAAQ,aAAa,MAAM;AAE5D,QAAI,aAAa;AACb,cAAQ,IAAI,gDAAgD;AAE5D,WAAK,OAAO,SAAS,IAAI,GAAG,MAAM,CAAC;AAEnC,WAAK,YAAW;AAAA,IAC5B,OAAe;AACH,cAAQ,IAAI,kDAAkD;AAE9D,UAAI,KAAK,aAAa,CAAC,KAAK,UAAU,UAAU;AAC5C,aAAK,UAAU;MAClB;AAED,iBAAW,MAAM;AACb,aAAK,mBAAkB;AAAA,MAC1B,GAAE,GAAG;AAAA,IACT;AAAA,EACJ;AACL;AAAA,CAGC,MAAM;AACH,QAAM,WAAW;AACjB,SAAO,aAAa;AAAA,IAChB,YAAY,SAAS,MAAM,SAAS,cAAc,IAAI,UAAU,KAAK;AACjE,eAAS,SAAS,MAAM,EAAE,SAAS,OAAO,CAAC,MAAI;AAAA,MAAE,GAAE,aAAa,aAAa,QAAS,CAAA;AAAA,IACzF;AAAA,IACD,KAAK,SAAS,SAAS,MAAM;AACzB,UAAI;AAAE,eAAO,SAAS,IAAI,MAAM,GAAG,IAAI;AAAA,eAAY,GAAG;AAAE,gBAAQ,KAAK,EAAE,OAAO;AAAG,eAAO;AAAA,MAAO;AAAA,IAClG;AAAA,IACD,SAAS,SAAS,MAAM,KAAK;AAAE,eAAS,QAAQ,MAAM,GAAG;AAAA,IAAI;AAAA,IAC7D,eAAe,WAAW;AAAE,eAAS,SAAU;AAAA,IAAG;AAAA,IAClD,WAAW,SAAS,MAAM;AAAE,eAAS,MAAM,IAAI;AAAA,IAAI;AAAA,EAC3D;AACA;AAEA,SAAS,sBAAsB;AAE3B,UAAQ,IAAI,4CAA4C;AAGxD,QAAM,WAAW,SAAS,iBAAiB,QAAQ;AACnD,WAAS,QAAQ,YAAU;AACvB,UAAM,KAAK,OAAO,WAAW,OAAO,KAAK,OAAO,WAAW,QAAQ;AACnE,QAAI,MAAM,GAAG,aAAa,oBAAoB,GAAG;AAC7C,SAAG,aAAa,oBAAoB,EAAE,YAAW;AAAA,IACpD;AAAA,EACT,CAAK;AAGD,aAAW,MAAM;AACb;EACH,GAAE,EAAE;AACT;AAEA,SAAS,iBAAiB;AAEtB,UAAQ,IAAI,2BAA2B;AAGvC,MAAI;AACA,YAAQ,IAAI,2CAA2C;AAEvD,YAAQ,IAAI,oBAAoB,OAAO,UAAU,WAAW;AAE5D,WAAO,OAAO,IAAI;AAGlB,YAAQ,IAAI,uDAAuD;AAGnE,WAAO,KAAK,qBAAqB,IAAIX,eAAqB,KAAK,IAAI,EAAE;AACrE,WAAO,KAAK,qBAAqB,IAAIL,qBAA2B;AAAA,MAC5D,OAAO;AAAA,MACP,UAAU;AAAA,MACV,mBAAmB;AAAA,MACnB,WAAW;AAAA,MACX,WAAW;AAAA,IACvB,CAAS;AAGD,WAAO,KAAK,yBAAyB,IAAIK,eAAqB,KAAK,IAAI,EAAE;AACzE,WAAO,KAAK,yBAAyB,IAAIU,kBAAwB;AAAA,MAC7D,OAAO;AAAA,MACP,aAAa;AAAA,MACb,SAAS;AAAA,MACT,UAAUN;AAAAA,IACtB,CAAS;AAGD,YAAQ,IAAI,2CAA2C;AACvD,WAAO,KAAK,0BAA0B;AACtC,UAAM,YAAY;AAElB,aAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAChC,YAAM,QAAQ,IAAI;AAClB,YAAM,OAAO,OAAO,IAAI;AACxB,YAAM,mBAAmB,IAAIJ,eAAqB,MAAM,GAAG,CAAC;AAC5D,aAAO,KAAK,wBAAwB,KAAK,gBAAgB;AAAA,IAC5D;AAGD,YAAQ,IAAI,oBAAoB;AAChC,UAAM,kBAAkB,IAAIJ,KAAW,OAAO,KAAK,oBAAoB,OAAO,KAAK,kBAAkB;AACrG,UAAM,YAAY,IAAIA,KAAW,OAAO,KAAK,wBAAwB,OAAO,KAAK,sBAAsB;AACvG,oBAAgB,IAAI,SAAS;AAG7B,QAAI,OAAO,QAAQ,OAAO,KAAK,YAAY,OAAO,OAAO,KAAK,SAAS,eAAe,YAAY;AAC9F,aAAO,KAAK,SAAS,WAAW,MAAM,OAAO,KAAK,MAAM,IAAI,eAAe,CAAC;AAAA,IACxF,OAAe;AACH,aAAO,KAAK,MAAM,IAAI,eAAe;AAAA,IACxC;AAGD,YAAQ,IAAI,yCAAyC;AAGrD,WAAO,KAAK,oBAAoB,IAAII,eAAqB,GAAG,GAAG,CAAC;AAChE,WAAO,KAAK,oBAAoB,IAAIU,kBAAwB;AAAA,MACxD,OAAO;AAAA,MACP,aAAa;AAAA,MACb,SAAS;AAAA,IACrB,CAAS;AAGD,WAAO,KAAK,oBAAoB,IAAIV,eAAqB,GAAG,GAAG,CAAC;AAGhE,UAAM,0BAA0B,IAAIR;AACpC,QAAI,OAAO,QAAQ,OAAO,KAAK,YAAY,OAAO,OAAO,KAAK,SAAS,eAAe,YAAY;AAC9F,aAAO,KAAK,SAAS,WAAW,MAAM,OAAO,KAAK,MAAM,IAAI,uBAAuB,CAAC;AAAA,IAChG,OAAe;AACH,aAAO,KAAK,MAAM,IAAI,uBAAuB;AAAA,IAChD;AAGD,UAAM,yBAAyB;AAC/B,UAAM,0BAA0B,CAAA;AAEhC,aAAS,IAAI,GAAG,IAAI,wBAAwB,KAAK;AAC7C,YAAM,OAAO,KAAK,OAAM,IAAK,IAAI;AACjC,YAAM,WAAW,IAAII;AAAAA,QACjB,OAAO,KAAK;AAAA,QACZ,OAAO,KAAK,kBAAkB,MAAO;AAAA;AAAA,MACrD;AAGY,eAAS,SAAS;AAAA,QACd,KAAK,WAAW,KAAK;AAAA,QACrB,KAAK,WAAW,KAAK;AAAA,QACrB,KAAK,WAAW,KAAK;AAAA,MACrC;AACY,eAAS,SAAS,eAAe,EAAE,EAAE,IAAI,IAAIa,QAAc,GAAG,MAAQ,CAAC,CAAC;AAGxE,8BAAwB,IAAI,QAAQ;AACpC,8BAAwB,KAAK,QAAQ;AAAA,IACxC;AAGD,WAAO,WAAW,WAAW,qBAAqB,MAAM;AAEpD,YAAM,WAAW,OAAO,KAAK,kBAAkB,MAAK;AACpD,YAAM,OAAO,IAAIb,KAAW,OAAO,KAAK,mBAAmB,QAAQ;AAEnE,aAAO;AAAA,QACH;AAAA,QACA;AAAA,QACA,UAAU,IAAIa,QAAe;AAAA;AAAA,QAG7B,OAAO,SAAS,UAAU,OAAO,GAAK,QAAQ,UAAU;AAEpD,cAAI,CAAC,UAAU;AACX,uBAAW,IAAIA,QAAc,GAAG,GAAG,CAAC;AAAA,UACvC;AAGD,eAAK,KAAK,SAAS,KAAK,QAAQ;AAGhC,eAAK,KAAK,MAAM,IAAI,MAAM,MAAM,IAAI;AAGpC,eAAK,SAAS,MAAM,IAAI,KAAK;AAC7B,eAAK,SAAS,UAAU;AAGxB,eAAK,KAAK,UAAU;AAAA,QACvB;AAAA;AAAA,QAGD,OAAO,WAAW;AACd,cAAI,KAAK,KAAK,QAAQ;AAClB,iBAAK,KAAK,OAAO,OAAO,KAAK,IAAI;AAAA,UACpC;AACD,eAAK,KAAK,UAAU;AACpB,eAAK,SAAS,IAAI,GAAG,GAAG,CAAC;AAAA,QAC5B;AAAA,MACjB;AAAA,IACA,GAAW,IAAI,GAAG;AAGV,QAAI;AACA,UAAI,UAAU,OAAO,WAAW,IAAI,WAAW;AAC/C,UAAI,CAAC,SAAS;AAEV,eAAO,WAAW,WAAW,aAAa,MAAM;AAC5C,gBAAM,MAAM,OAAO,KAAK,qBAAqB,IAAIT,eAAqB,GAAG,GAAG,CAAC;AAC7E,gBAAM,WAAW,IAAIU,kBAAwB,EAAE,OAAO,UAAU,aAAa,MAAM,SAAS,IAAG,CAAE;AACjG,gBAAM,OAAO,IAAId,KAAW,KAAK,QAAQ;AACzC,iBAAO;AAAA,YACH;AAAA,YACA;AAAA,YACA,MAAM,QAAQ,UAAU,OAAO,GAAG;AAC9B,mBAAK,SAAS,MAAM,IAAI,KAAK;AAC7B,mBAAK,SAAS,UAAU;AACxB,mBAAK,KAAK,MAAM,IAAI,MAAM,MAAM,IAAI;AACpC,mBAAK,KAAK,UAAU;AAAA,YACvB;AAAA,YACD,QAAQ;AACJ,kBAAI,KAAK,KAAK,QAAQ;AAAE,qBAAK,KAAK,OAAO,OAAO,KAAK,IAAI;AAAA,cAAI;AAC7D,mBAAK,KAAK,UAAU;AAAA,YACvB;AAAA,UACzB;AAAA,QACA,GAAmB,IAAI,GAAG;AAAA,MAC1B,OAAmB;AAEH,eAAO,WAAW,QAAQ,aAAa,OAAO;AAAA,MACjD;AAAA,IACJ,QAAO;AAAA,IAAE;AAGV,UAAM,kBAAkB,CAAC,UAAU,SAAU,UAAU,QAAQ;AAC/D,UAAM,kBAAkB,CAAA;AAExB,eAAW,SAAS,iBAAiB;AACjC,YAAM,YAAY,OAAO,WAAW,IAAI,aAAa,OAAO,GAAG;AAC/D,UAAI,aAAa,UAAU,MAAM;AAE7B,kBAAU,KAAK,SAAS,IAAI,GAAG,QAAQ,CAAC;AACxC,YAAI,OAAO,QAAQ,OAAO,KAAK,YAAY,OAAO,OAAO,KAAK,SAAS,eAAe,YAAY;AAC9F,iBAAO,KAAK,SAAS,WAAW,MAAM,OAAO,KAAK,MAAM,IAAI,UAAU,IAAI,CAAC;AAAA,QAC/F,OAAuB;AACH,iBAAO,KAAK,MAAM,IAAI,UAAU,IAAI;AAAA,QACvC;AACD,wBAAgB,KAAK,SAAS;AAAA,MACjC;AAAA,IACJ;AAGD,WAAO,KAAK,SAAS,SAAS,QAAQ,OAAO,KAAK,OAAO,OAAO,KAAK,MAAM;AAE3E,YAAQ,IAAI,4CAA4C;AAGxD,QAAI,OAAO,QAAQ,OAAO,KAAK,YAAY,OAAO,OAAO,KAAK,SAAS,eAAe,YAAY;AAC9F,aAAO,KAAK,SAAS,WAAW,MAAM,OAAO,KAAK,MAAM,OAAO,uBAAuB,CAAC;AAAA,IACnG,OAAe;AACH,aAAO,KAAK,MAAM,OAAO,uBAAuB;AAAA,IACnD;AACD,eAAW,YAAY,yBAAyB;AAC5C,8BAAwB,OAAO,QAAQ;AAAA,IAC1C;AAGD,eAAW,aAAa,iBAAiB;AACrC,aAAO,WAAW,QAAQ,aAAa,SAAS;AAAA,IACnD;AAED,YAAQ,IAAI,oDAAoD;AAEhE,YAAQ,IAAI,2BAA2B;AAAA,EAC1C,SAAQ,OAAO;AACZ,YAAQ,MAAM,wBAAwB,KAAK;AAG3C,UAAM,eAAe,SAAS,cAAc,KAAK;AACjD,iBAAa,MAAM,WAAW;AAC9B,iBAAa,MAAM,MAAM;AACzB,iBAAa,MAAM,OAAO;AAC1B,iBAAa,MAAM,YAAY;AAC/B,iBAAa,MAAM,kBAAkB;AACrC,iBAAa,MAAM,QAAQ;AAC3B,iBAAa,MAAM,UAAU;AAC7B,iBAAa,MAAM,eAAe;AAClC,iBAAa,MAAM,SAAS;AAC5B,iBAAa,MAAM,SAAS;AAC5B,iBAAa,MAAM,YAAY;AAC/B,iBAAa,MAAM,aAAa;AAChC,iBAAa,MAAM,WAAW;AAE9B,iBAAa,YAAY;AAAA;AAAA,iBAEhB,MAAM,OAAO;AAAA;AAAA;AAAA;AAAA;AAMtB,aAAS,KAAK,YAAY,YAAY;AAGtC,aAAS,eAAe,eAAe,EAAE,iBAAiB,SAAS,MAAM;AAErE,YAAM,cAAc,KAAK;AACzB,aAAO,SAAS,OAAO,OAAO,SAAS,WAAW,YAAY;AAAA,IAC1E,CAAS;AAAA,EACJ;AACL;AAEA,IAAI,SAAS,eAAe,WAAW;AACnC,WAAS,iBAAiB,oBAAoB,mBAAmB;AACrE,OAAO;AAEH;AACJ;"}