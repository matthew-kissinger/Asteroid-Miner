class l{constructor(){this.listeners=new Map,this.queuedMessages=[],this.dispatching=!1,this.highFrequencyTypes=new Set(["transform.updated","physics.update","render.update"]),window.messageRegistry||(window.messageRegistry=new Set),window.messageRegistry.add(this),window.mainMessageBus?window.mainMessageBus!==this&&console.log("MessageBus: This instance will forward game.over events to window.mainMessageBus"):(window.mainMessageBus=this,console.log("MessageBus: Set this instance as window.mainMessageBus")),console.log("MessageBus: New instance created and added to registry")}subscribe(e,s,i=null){return this.listeners.has(e)||this.listeners.set(e,[]),this.listeners.get(e).push({callback:s,context:i}),()=>this.unsubscribe(e,s,i)}unsubscribe(e,s,i=null){if(!this.listeners.has(e))return;const n=this.listeners.get(e),o=n.findIndex(t=>t.callback===s&&t.context===i);o!==-1&&n.splice(o,1),n.length===0&&this.listeners.delete(e)}fastPublish(e,s={}){if(!this.listeners.has(e))return;const i=this.listeners.get(e),n={type:e,data:s,timestamp:Date.now()};for(let o=0;o<i.length;o++){const t=i[o];t.callback.call(t.context,n)}}publish(e,s={}){if(this.highFrequencyTypes.has(e))return this.fastPublish(e,s);if(["entity.created","entity.destroyed","component.added","component.removed","game.over"].includes(e)&&console.log(`MessageBus: Publishing ${e}`,s),e==="game.over"){if(window.mainMessageBus&&window.mainMessageBus!==this){console.log("MessageBus: Forwarding game.over event to window.mainMessageBus"),window.mainMessageBus.publish(e,s);return}if(this.listeners.has(e)){const n=this.listeners.get(e);console.log(`MessageBus: Found ${n.length} listeners for '${e}' event`)}else{console.error(`MessageBus: No listeners found for '${e}' event!`),console.log("MessageBus: Registered event types:",Array.from(this.listeners.keys())),console.trace("MessageBus: This is where the game.over event was published from"),window.game?(console.log("MessageBus: window.game exists:",window.game),console.log("MessageBus: window.game.messageBus exists:",window.game.messageBus),console.log("MessageBus: Directly calling window.game.gameOver as an emergency measure"),window.game.gameOver(s.reason||"Unknown reason")):console.error("MessageBus: window.game does not exist - critical issue");return}}if(this.listeners.has(e)){if(this.dispatching){console.log(`MessageBus: Already dispatching, queueing ${e} message`),this.queuedMessages.push({type:e,data:s});return}try{this.dispatching=!0,this.listeners.get(e).forEach((o,t)=>{try{e==="game.over"&&console.log(`MessageBus: Calling listener #${t+1} for game.over event`),o.callback.call(o.context,{type:e,data:s,timestamp:Date.now()}),e==="game.over"&&console.log(`MessageBus: Listener #${t+1} for game.over event completed successfully`)}catch(r){console.error(`Error in message listener #${t+1} (${e}):`,r),console.error("Error stack:",r.stack)}})}finally{if(this.dispatching=!1,this.queuedMessages.length>0){const n=[...this.queuedMessages];this.queuedMessages=[],n.forEach(o=>{this.publish(o.type,o.data)})}}}}queue(e,s={}){this.queuedMessages.push({type:e,data:s})}static triggerGameOver(e,s){console.log("MessageBus.triggerGameOver called:",e,"from",s);let i=null;if(window.mainMessageBus?(console.log("MessageBus: Using window.mainMessageBus for game over"),i=window.mainMessageBus):window.game&&window.game.messageBus&&(console.log("MessageBus: Using window.game.messageBus for game over"),i=window.game.messageBus),i){if(console.log("MessageBus: Publishing game.over event"),i.listeners.has("game.over")){const n=i.listeners.get("game.over");console.log(`MessageBus: Found ${n.length} game.over listeners`)}else console.warn("MessageBus: No game.over listeners found before publishing");i.publish("game.over",{reason:e,source:s})}else console.error("MessageBus: No message bus instance found for game over!")}}export{l as MessageBus};
//# sourceMappingURL=core-BBQ_RQx4.js.map
