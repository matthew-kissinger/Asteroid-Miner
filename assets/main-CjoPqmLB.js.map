{"version":3,"mappings":"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","names":["THREE.Vector3","THREE.BufferGeometry","THREE.BufferAttribute","THREE.MeshStandardMaterial","THREE.Mesh","THREE.BoxGeometry","window","THREE.CylinderGeometry","THREE.SphereGeometry","THREE.ShaderMaterial","THREE.AdditiveBlending","THREE.Points","THREE.Texture","THREE.Color","THREE.DoubleSide","THREE.RingGeometry","THREE.Group","THREE.PointsMaterial","THREE.Euler","THREE.MeshBasicMaterial","Combat"],"ignoreList":[],"sources":["../../js/main/globals.js","../../js/modules/environment/dreadnought/structure/hull.js","../../js/modules/environment/dreadnought/structure/bridge.js","../../js/modules/environment/dreadnought/systems/engines.js","../../js/modules/environment/dreadnought/systems/weapons.js","../../js/modules/environment/dreadnought/teleporter/beam.js","../../js/modules/environment/dreadnought/teleporter/particles.js","../../js/modules/environment/dreadnought/teleporter/controller.js","../../js/modules/environment/dreadnought/starDreadnought.js","../../js/modules/intro/audio/soundEffects.js","../../js/modules/intro/audio/dialogueManager.js","../../js/modules/intro/effects/portalEffect.js","../../js/modules/intro/ui/dialogueSystem.js","../../js/modules/intro/animation/arrivalPhase.js","../../js/modules/intro/animation/departurePhase.js","../../js/modules/introSequence.js","../../js/main/startupSequence.js","../../js/main/gameLoop.js","../../js/modules/debug/perfOverlay.js","../../js/main/diagnostics.js","../../js/main/gameInitializer.js","../../js/main/objectPools.js","../../js/main/difficultyManager.js","../../js/main/hordeMode.js","../../js/main/audioUpdater.js","../../js/main/gameLifecycle.js","../../js/main.js"],"sourcesContent":["// globals.js - Initialize global objects and facades\r\n\r\nimport * as THREE from 'three';\r\nimport { MessageBus } from '../core/messageBus.js';\r\nimport { getGlobalPoolRegistry } from '../modules/pooling/PoolRegistry.js';\r\n\r\n// Global debug flag - set to true for development\r\nwindow.DEBUG_MODE = false;\r\n\r\nexport function initializeGlobals() {\r\n    // Initialize Three.js global (already set by src/main.js, but ensure it's available)\r\n    if (!window.THREE) {\r\n        window.THREE = THREE;\r\n    }\r\n    \r\n    // Set up global message bus for cross-system communication\r\n    window.mainMessageBus = new MessageBus();\r\n    \r\n    // Initialize global object pool facade\r\n    initializeObjectPoolFacade();\r\n    \r\n    // Initialize global vector pool for reusing vector objects\r\n    initializeVectorPool();\r\n}\r\n\r\nfunction initializeVectorPool() {\r\n    window.vectorPool = {\r\n        pool: [],\r\n        maxSize: 100,\r\n        \r\n        get: function(x = 0, y = 0, z = 0) {\r\n            if (this.pool.length > 0) {\r\n                return this.pool.pop().set(x, y, z);\r\n            }\r\n            return new THREE.Vector3(x, y, z);\r\n        },\r\n        \r\n        release: function(vector) {\r\n            if (this.pool.length < this.maxSize) {\r\n                this.pool.push(vector);\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nfunction initializeObjectPoolFacade() {\r\n    // Bridge our global facade to the real PoolRegistry\r\n    window.objectPool = {\r\n        registry: getGlobalPoolRegistry(),\r\n        \r\n        // Get an object from a pool\r\n        get(poolName, ...args) {\r\n            try {\r\n                return this.registry.get(poolName, ...args);\r\n            } catch (e) {\r\n                // Create pool on demand if it doesn't exist\r\n                if (window.DEBUG_MODE) {\r\n                    console.log(`Creating on-demand pool: ${poolName}`);\r\n                }\r\n                // Create pool with default factory\r\n                this.registry.register(poolName, { \r\n                    factory: () => ({}),\r\n                    preallocate: 10, \r\n                    maxSize: 100 \r\n                });\r\n                return this.registry.get(poolName, ...args);\r\n            }\r\n        },\r\n        \r\n        // Return an object to a pool\r\n        release(poolName, obj) {\r\n            this.registry.release(poolName, obj);\r\n        },\r\n        \r\n        // Create or configure a pool\r\n        createPool(poolName, factory, initialSize = 10, maxSize = 100) {\r\n            this.registry.register(poolName, { \r\n                factory, \r\n                reset: (obj) => {\r\n                    if (obj && typeof obj.reset === 'function') {\r\n                        obj.reset();\r\n                    }\r\n                },\r\n                preallocate: initialSize, \r\n                maxSize \r\n            });\r\n        },\r\n        \r\n        // Get pool statistics\r\n        getStats(poolName) {\r\n            // Check if pool exists by looking at the typeToPool map\r\n            if (this.registry.typeToPool && this.registry.typeToPool.has(poolName)) {\r\n                const pool = this.registry.typeToPool.get(poolName);\r\n                return {\r\n                    available: pool.objects.length,\r\n                    maxSize: pool.maxSize,\r\n                    hits: this.registry.statsData.hits,\r\n                    misses: this.registry.statsData.misses\r\n                };\r\n            }\r\n            return null;\r\n        },\r\n        \r\n        // Clear all pools\r\n        clearAllPools() {\r\n            if (this.registry.clearAll) {\r\n                this.registry.clearAll();\r\n            } else if (this.registry.typeToPool) {\r\n                // Manual clear if clearAll doesn't exist\r\n                this.registry.typeToPool.forEach((pool, type) => {\r\n                    pool.objects = [];\r\n                });\r\n            }\r\n        }\r\n    };\r\n}","// hull.js - Creates the main hull structure for the Star Dreadnought\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport class DreadnoughtHull {\r\n    static createMainHull(scale, ship) {\r\n        // Create main hull using custom geometry for the distinctive arrow/dagger shape\r\n        const hullLength = scale;\r\n        const hullWidth = scale * 0.22;\r\n        const hullHeight = scale * 0.06;\r\n        const taperFactor = 0.15; // How much the front tapers\r\n        \r\n        // Create geometry for the main hull shape\r\n        const hullGeometry = new THREE.BufferGeometry();\r\n        \r\n        // Define vertices for the hull shape (triangulated)\r\n        const vertices = new Float32Array([\r\n            // Bottom face\r\n            -hullWidth/2, -hullHeight/2, hullLength/2,  // bottom left back\r\n            hullWidth/2, -hullHeight/2, hullLength/2,   // bottom right back\r\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\r\n            \r\n            hullWidth/2, -hullHeight/2, hullLength/2,   // bottom right back\r\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2,  // bottom right front\r\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\r\n            \r\n            // Top face\r\n            -hullWidth/2, hullHeight/2, hullLength/2,  // top left back\r\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2, // top left front\r\n            hullWidth/2, hullHeight/2, hullLength/2,   // top right back\r\n            \r\n            hullWidth/2, hullHeight/2, hullLength/2,   // top right back\r\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2, // top left front\r\n            hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top right front\r\n            \r\n            // Left face\r\n            -hullWidth/2, -hullHeight/2, hullLength/2,  // bottom left back\r\n            -hullWidth/2, hullHeight/2, hullLength/2,   // top left back\r\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\r\n            \r\n            -hullWidth/2, hullHeight/2, hullLength/2,   // top left back\r\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top left front\r\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\r\n            \r\n            // Right face\r\n            hullWidth/2, -hullHeight/2, hullLength/2,  // bottom right back\r\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom right front\r\n            hullWidth/2, hullHeight/2, hullLength/2,   // top right back\r\n            \r\n            hullWidth/2, hullHeight/2, hullLength/2,   // top right back\r\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom right front\r\n            hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top right front\r\n            \r\n            // Back face\r\n            -hullWidth/2, -hullHeight/2, hullLength/2,  // bottom left back\r\n            -hullWidth/2, hullHeight/2, hullLength/2,   // top left back\r\n            hullWidth/2, -hullHeight/2, hullLength/2,   // bottom right back\r\n            \r\n            hullWidth/2, -hullHeight/2, hullLength/2,   // bottom right back\r\n            -hullWidth/2, hullHeight/2, hullLength/2,   // top left back\r\n            hullWidth/2, hullHeight/2, hullLength/2,    // top right back\r\n            \r\n            // Front face (pointed)\r\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\r\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top left front\r\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2,  // bottom right front\r\n            \r\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2,  // bottom right front\r\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top left front\r\n            hullWidth*taperFactor, hullHeight/2, -hullLength/2    // top right front\r\n        ]);\r\n        \r\n        // Add attributes to the geometry\r\n        hullGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n        \r\n        // Material for the main hull - metallic dark gray\r\n        const hullMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x333344,\r\n            metalness: 0.8,\r\n            roughness: 0.3,\r\n            emissive: 0x111111,\r\n            emissiveIntensity: 0.2\r\n        });\r\n        \r\n        // Create the hull mesh\r\n        const hull = new THREE.Mesh(hullGeometry, hullMaterial);\r\n        hull.geometry.computeVertexNormals(); // Auto-generate normals\r\n        \r\n        // Cast shadows\r\n        hull.castShadow = true;\r\n        hull.receiveShadow = true;\r\n        \r\n        // Add to ship group\r\n        ship.add(hull);\r\n        \r\n        // Add additional hull plates for more detail\r\n        this.addHullPlates(scale, ship);\r\n        \r\n        return hull;\r\n    }\r\n    \r\n    static addHullPlates(scale, ship) {\r\n        // Add additional hull plates for more detail and segmentation\r\n        const plateLength = scale * 0.2;\r\n        const plateWidth = scale * 0.18;\r\n        const plateHeight = scale * 0.01;\r\n        const plateY = scale * 0.035; // Just above the hull\r\n        \r\n        // Create 5 plates down the center of the ship\r\n        for (let i = 0; i < 5; i++) {\r\n            const plateZ = scale * 0.4 - (i * plateLength);\r\n            \r\n            const plateGeometry = new THREE.BoxGeometry(plateWidth, plateHeight, plateLength);\r\n            const plateMaterial = new THREE.MeshStandardMaterial({\r\n                color: 0x444455,\r\n                metalness: 0.7,\r\n                roughness: 0.4,\r\n                emissive: 0x222222\r\n            });\r\n            \r\n            const plate = new THREE.Mesh(plateGeometry, plateMaterial);\r\n            plate.position.set(0, plateY, plateZ);\r\n            \r\n            plate.castShadow = true;\r\n            plate.receiveShadow = true;\r\n            \r\n            ship.add(plate);\r\n        }\r\n    }\r\n}","// bridge.js - Creates the command bridge and tower structures for the Star Dreadnought\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport class DreadnoughtBridge {\r\n    static createCommandBridge(scale, ship) {\r\n        // Command bridge superstructure - distinctive two-tower design\r\n        const bridgeHeight = scale * 0.12;\r\n        const bridgeWidth = scale * 0.06;\r\n        const bridgeDepth = scale * 0.08;\r\n        const bridgeY = scale * 0.085; // Position on top of hull\r\n        const bridgeZ = scale * 0.28; // Position toward the back\r\n        \r\n        // Bridge material - slightly lighter than hull\r\n        const bridgeMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x555566,\r\n            metalness: 0.7,\r\n            roughness: 0.3,\r\n            emissive: 0x222222,\r\n            emissiveIntensity: 0.2\r\n        });\r\n        \r\n        // Main command tower (larger)\r\n        const mainTowerGeometry = new THREE.BoxGeometry(bridgeWidth, bridgeHeight, bridgeDepth);\r\n        const mainTower = new THREE.Mesh(mainTowerGeometry, bridgeMaterial);\r\n        mainTower.position.set(0, bridgeY, bridgeZ);\r\n        mainTower.castShadow = true;\r\n        mainTower.receiveShadow = true;\r\n        ship.add(mainTower);\r\n        \r\n        // Add windows to the bridge\r\n        this.addBridgeWindows(scale, ship, bridgeY, bridgeZ);\r\n        \r\n        // Secondary command towers (smaller)\r\n        const secondaryTowerScale = 0.7; // 70% the size of main tower\r\n        const secondaryTowerGeometry = new THREE.BoxGeometry(\r\n            bridgeWidth * secondaryTowerScale, \r\n            bridgeHeight * secondaryTowerScale, \r\n            bridgeDepth * secondaryTowerScale\r\n        );\r\n        \r\n        // Left tower\r\n        const leftTower = new THREE.Mesh(secondaryTowerGeometry, bridgeMaterial);\r\n        leftTower.position.set(-bridgeWidth * 1.2, bridgeY, bridgeZ + bridgeDepth * 0.6);\r\n        leftTower.castShadow = true;\r\n        leftTower.receiveShadow = true;\r\n        ship.add(leftTower);\r\n        \r\n        // Right tower\r\n        const rightTower = new THREE.Mesh(secondaryTowerGeometry, bridgeMaterial);\r\n        rightTower.position.set(bridgeWidth * 1.2, bridgeY, bridgeZ + bridgeDepth * 0.6);\r\n        rightTower.castShadow = true;\r\n        rightTower.receiveShadow = true;\r\n        ship.add(rightTower);\r\n        \r\n        return { mainTower, leftTower, rightTower };\r\n    }\r\n    \r\n    static addBridgeWindows(scale, ship, bridgeY, bridgeZ) {\r\n        // Add illuminated windows to the bridge\r\n        const windowSize = scale * 0.003;\r\n        const windowSpacing = scale * 0.006;\r\n        const windowRows = 6;\r\n        const windowCols = 10;\r\n        const windowsStartY = bridgeY - scale * 0.02;\r\n        const windowDepth = scale * 0.001;\r\n        \r\n        // Window material - emissive for glow\r\n        const windowMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0xaabbcc,\r\n            emissive: 0xaabbcc,\r\n            emissiveIntensity: 1.0,\r\n            transparent: true,\r\n            opacity: 0.9\r\n        });\r\n        \r\n        // Create window instances\r\n        for (let row = 0; row < windowRows; row++) {\r\n            for (let col = 0; col < windowCols; col++) {\r\n                // Random chance to skip a window (for variety)\r\n                if (Math.random() > 0.85) continue;\r\n                \r\n                const windowGeometry = new THREE.BoxGeometry(windowSize, windowSize, windowDepth);\r\n                const window = new THREE.Mesh(windowGeometry, windowMaterial);\r\n                \r\n                // Position window on the front face of the bridge\r\n                window.position.set(\r\n                    (col - windowCols/2) * windowSpacing,\r\n                    windowsStartY + row * windowSpacing,\r\n                    bridgeZ + scale * 0.04 + windowDepth\r\n                );\r\n                \r\n                ship.add(window);\r\n            }\r\n        }\r\n    }\r\n}","// engines.js - Creates engine array, particles, and power control for the Star Dreadnought\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport class DreadnoughtEngines {\r\n    constructor() {\r\n        this.engineGlows = [];\r\n        this.engineTrailParticles = null;\r\n    }\r\n    \r\n    createEngineArray(scale, ship) {\r\n        // Create engine array at the back of the ship\r\n        const engineRadius = scale * 0.018;\r\n        const engineLength = scale * 0.04;\r\n        const engineZ = scale * 0.48; // Position at the back\r\n        const engineY = scale * 0.01; // Slightly above center line\r\n        \r\n        // Engine housing\r\n        const engineHousingWidth = scale * 0.2;\r\n        const engineHousingHeight = scale * 0.05;\r\n        const engineHousingLength = scale * 0.06;\r\n        \r\n        const housingGeometry = new THREE.BoxGeometry(engineHousingWidth, engineHousingHeight, engineHousingLength);\r\n        const housingMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x333344,\r\n            metalness: 0.8,\r\n            roughness: 0.4\r\n        });\r\n        \r\n        const engineHousing = new THREE.Mesh(housingGeometry, housingMaterial);\r\n        engineHousing.position.set(0, engineY, engineZ);\r\n        engineHousing.castShadow = true;\r\n        engineHousing.receiveShadow = true;\r\n        ship.add(engineHousing);\r\n        \r\n        // Engine exhaust material - blue glow for Star Wars style\r\n        const engineMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x3366ff,\r\n            emissive: 0x3366ff,\r\n            emissiveIntensity: 0.7,\r\n            transparent: true,\r\n            opacity: 0.7\r\n        });\r\n        \r\n        // Glow material (fully emissive)\r\n        const glowMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x3366ff,\r\n            emissive: 0x3366ff,\r\n            emissiveIntensity: 1.5,\r\n            transparent: true,\r\n            opacity: 0.8\r\n        });\r\n        \r\n        // Create engine exhausts - two rows of engines for Star Destroyer style\r\n        const engineRows = 2;\r\n        const enginesPerRow = 5;\r\n        const verticalSpacing = engineHousingHeight * 0.5;\r\n        \r\n        for (let row = 0; row < engineRows; row++) {\r\n            const rowY = engineY - verticalSpacing * (row - 0.5);\r\n            \r\n            for (let i = 0; i < enginesPerRow; i++) {\r\n                // Distribute engines across the width\r\n                const posX = (i - (enginesPerRow - 1) / 2) * (engineHousingWidth / (enginesPerRow - 1) * 0.8);\r\n                \r\n                // Engine exhaust\r\n                const engineGeometry = new THREE.CylinderGeometry(engineRadius, engineRadius * 1.5, engineLength, 16);\r\n                const engine = new THREE.Mesh(engineGeometry, engineMaterial);\r\n                \r\n                // Position and orient the engine\r\n                engine.position.set(posX, rowY, engineZ + engineHousingLength * 0.5);\r\n                engine.rotation.x = Math.PI / 2; // Orient horizontally\r\n                \r\n                ship.add(engine);\r\n                \r\n                // Add engine glow with additional outer glow\r\n                const glowGeometry = new THREE.SphereGeometry(engineRadius * 1.6, 16, 16);\r\n                const glow = new THREE.Mesh(glowGeometry, glowMaterial.clone());\r\n                glow.position.set(posX, rowY, engineZ + engineHousingLength * 0.5 + engineLength * 1.1);\r\n                \r\n                ship.add(glow);\r\n                this.engineGlows.push(glow);\r\n                \r\n                // Add additional outer glow for more dramatic effect\r\n                const outerGlowGeometry = new THREE.SphereGeometry(engineRadius * 2.5, 16, 16);\r\n                const outerGlowMaterial = glowMaterial.clone();\r\n                outerGlowMaterial.opacity = 0.4;\r\n                const outerGlow = new THREE.Mesh(outerGlowGeometry, outerGlowMaterial);\r\n                outerGlow.position.copy(glow.position);\r\n                \r\n                ship.add(outerGlow);\r\n                this.engineGlows.push(outerGlow);\r\n            }\r\n        }\r\n        \r\n        // Add engine trail particles\r\n        this.createEngineTrailParticles(scale, engineZ, engineHousingWidth, ship);\r\n        \r\n        return { engineHousing, engineGlows: this.engineGlows };\r\n    }\r\n    \r\n    createEngineTrailParticles(scale, engineZ, width, ship) {\r\n        const particleCount = 200;\r\n        const particleGeometry = new THREE.BufferGeometry();\r\n        \r\n        // Create arrays for particle properties\r\n        const positions = new Float32Array(particleCount * 3);\r\n        const colors = new Float32Array(particleCount * 3);\r\n        const sizes = new Float32Array(particleCount);\r\n        \r\n        // Engine positions to emit particles from\r\n        const enginePositions = [];\r\n        const enginesPerRow = 5;\r\n        \r\n        for (let i = 0; i < enginesPerRow; i++) {\r\n            const posX = (i - (enginesPerRow - 1) / 2) * (width / (enginesPerRow - 1) * 0.8);\r\n            enginePositions.push(posX);\r\n        }\r\n        \r\n        // Initialize particles\r\n        for (let i = 0; i < particleCount; i++) {\r\n            const i3 = i * 3;\r\n            \r\n            // Choose an engine position to emit from\r\n            const engineIndex = Math.floor(Math.random() * enginePositions.length);\r\n            const engineX = enginePositions[engineIndex];\r\n            \r\n            // Random offset from engine\r\n            const offsetX = (Math.random() - 0.5) * scale * 0.01;\r\n            const offsetY = (Math.random() - 0.5) * scale * 0.01;\r\n            \r\n            // Position behind the engine\r\n            const trailLength = Math.random() * scale * 0.5;\r\n            \r\n            positions[i3] = engineX + offsetX;     // x\r\n            positions[i3 + 1] = offsetY;           // y\r\n            positions[i3 + 2] = engineZ + engineX * 0.05 + trailLength; // z with slight angle\r\n            \r\n            // Blue-white colors for engine glow\r\n            colors[i3] = 0.5 + Math.random() * 0.5;     // r\r\n            colors[i3 + 1] = 0.7 + Math.random() * 0.3; // g\r\n            colors[i3 + 2] = 1.0;                       // b\r\n            \r\n            // Different sizes for depth\r\n            sizes[i] = (Math.random() * 0.5 + 0.5) * scale * 0.004;\r\n        }\r\n        \r\n        // Add attributes to geometry\r\n        particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n        particleGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n        particleGeometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\r\n        \r\n        // Particle material with custom shader\r\n        const particleMaterial = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                time: { value: 0 },\r\n                pointTexture: { value: this.createParticleTexture() }\r\n            },\r\n            vertexShader: `\r\n                attribute float size;\r\n                attribute vec3 color;\r\n                varying vec3 vColor;\r\n                uniform float time;\r\n                \r\n                void main() {\r\n                    vColor = color;\r\n                    \r\n                    // Animate size with time\r\n                    float pulseFactor = sin(time * 2.0 + position.z * 0.1) * 0.3 + 0.7;\r\n                    \r\n                    // Calculate position\r\n                    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n                    \r\n                    // Size attenuation\r\n                    gl_PointSize = size * pulseFactor * (300.0 / -mvPosition.z);\r\n                    gl_Position = projectionMatrix * mvPosition;\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                uniform sampler2D pointTexture;\r\n                varying vec3 vColor;\r\n                \r\n                void main() {\r\n                    // Sample soft particle texture\r\n                    vec4 texColor = texture2D(pointTexture, gl_PointCoord);\r\n                    \r\n                    // Apply color\r\n                    gl_FragColor = vec4(vColor, texColor.r);\r\n                }\r\n            `,\r\n            transparent: true,\r\n            depthWrite: false,\r\n            blending: THREE.AdditiveBlending,\r\n            vertexColors: true\r\n        });\r\n        \r\n        // Create particle system\r\n        this.engineTrailParticles = new THREE.Points(particleGeometry, particleMaterial);\r\n        ship.add(this.engineTrailParticles);\r\n    }\r\n    \r\n    createParticleTexture() {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = 64;\r\n        canvas.height = 64;\r\n        \r\n        const context = canvas.getContext('2d');\r\n        const gradient = context.createRadialGradient(\r\n            32, 32, 0, 32, 32, 32\r\n        );\r\n        \r\n        gradient.addColorStop(0, 'rgba(255,255,255,1)');\r\n        gradient.addColorStop(0.3, 'rgba(255,255,255,0.8)');\r\n        gradient.addColorStop(0.5, 'rgba(255,255,255,0.4)');\r\n        gradient.addColorStop(1, 'rgba(255,255,255,0)');\r\n        \r\n        context.fillStyle = gradient;\r\n        context.fillRect(0, 0, 64, 64);\r\n        \r\n        const texture = new THREE.Texture(canvas);\r\n        texture.needsUpdate = true;\r\n        return texture;\r\n    }\r\n    \r\n    // Set engines power level (0-1)\r\n    setEnginesPower(power) {\r\n        // Adjust engine glow intensity based on power level\r\n        this.engineGlows.forEach((glow, index) => {\r\n            // Alternate between main glow and outer glow\r\n            const isMainGlow = index % 2 === 0;\r\n            \r\n            if (isMainGlow) {\r\n                // Main engine glow - brighter\r\n                glow.material.emissiveIntensity = 0.8 + power * 1.2;\r\n                glow.material.opacity = 0.5 + power * 0.5;\r\n            } else {\r\n                // Outer engine glow - softer\r\n                glow.material.emissiveIntensity = 0.5 + power * 0.8;\r\n                glow.material.opacity = 0.2 + power * 0.3;\r\n            }\r\n            \r\n            // Scale the glow with power\r\n            const scale = 1 + power * 0.8;\r\n            glow.scale.set(scale, scale, scale * 1.2); // Stretch slightly on z-axis\r\n        });\r\n        \r\n        // Update engine trail particles\r\n        if (this.engineTrailParticles) {\r\n            this.engineTrailParticles.visible = power > 0.2;\r\n            \r\n            // Scale particle sizes based on power\r\n            if (this.engineTrailParticles.geometry.attributes.size) {\r\n                const sizes = this.engineTrailParticles.geometry.attributes.size.array;\r\n                const baseSizes = this.engineTrailParticles.userData.baseSizes || \r\n                                  Array.from(sizes); // Store original sizes if not saved\r\n                                  \r\n                // Save original sizes\r\n                if (!this.engineTrailParticles.userData.baseSizes) {\r\n                    this.engineTrailParticles.userData.baseSizes = baseSizes;\r\n                }\r\n                \r\n                // Scale sizes\r\n                for (let i = 0; i < sizes.length; i++) {\r\n                    sizes[i] = baseSizes[i] * (1 + power * 2);\r\n                }\r\n                \r\n                this.engineTrailParticles.geometry.attributes.size.needsUpdate = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Update engine trail particles animation\r\n    updateEngineTrails() {\r\n        if (this.engineTrailParticles && this.engineTrailParticles.material.uniforms) {\r\n            this.engineTrailParticles.material.uniforms.time.value += 0.02;\r\n        }\r\n    }\r\n}","// weapons.js - Creates turrets and surface details for the Star Dreadnought\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport class DreadnoughtWeapons {\r\n    static createSurfaceDetails(scale, ship) {\r\n        // Add surface details for more visual interest\r\n        \r\n        // Turrets along the sides\r\n        this.createTurrets(scale, ship);\r\n        \r\n        // Trenches and surface details\r\n        this.createSurfaceTrenches(scale, ship);\r\n        \r\n        // Shield generator domes\r\n        this.createShieldGenerators(scale, ship);\r\n    }\r\n    \r\n    static createTurrets(scale, ship) {\r\n        // Create turret batteries along the sides\r\n        const turretRadius = scale * 0.008;\r\n        const turretHeight = scale * 0.01;\r\n        const baseRadius = scale * 0.01;\r\n        const baseHeight = scale * 0.005;\r\n        \r\n        // Turret material\r\n        const turretMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x666677,\r\n            metalness: 0.7,\r\n            roughness: 0.3\r\n        });\r\n        \r\n        // Positions for turrets (port side)\r\n        const portPositions = [];\r\n        for (let i = 0; i < 12; i++) {\r\n            const z = scale * 0.2 - (i * scale * 0.07);\r\n            portPositions.push([-scale * 0.1, scale * 0.035, z]);\r\n        }\r\n        \r\n        // Create port side turrets\r\n        portPositions.forEach(pos => {\r\n            // Turret base\r\n            const baseGeometry = new THREE.CylinderGeometry(baseRadius, baseRadius, baseHeight, 8);\r\n            const base = new THREE.Mesh(baseGeometry, turretMaterial);\r\n            base.position.set(pos[0], pos[1], pos[2]);\r\n            ship.add(base);\r\n            \r\n            // Turret gun\r\n            const turretGeometry = new THREE.CylinderGeometry(turretRadius, turretRadius, turretHeight, 8);\r\n            const turret = new THREE.Mesh(turretGeometry, turretMaterial);\r\n            turret.position.set(pos[0], pos[1] + baseHeight * 0.5 + turretHeight * 0.5, pos[2]);\r\n            turret.rotation.x = Math.PI / 2; // Orient horizontally\r\n            turret.rotation.z = -Math.PI / 6; // Angle outward\r\n            ship.add(turret);\r\n        });\r\n        \r\n        // Positions for turrets (starboard side)\r\n        const starboardPositions = [];\r\n        for (let i = 0; i < 12; i++) {\r\n            const z = scale * 0.2 - (i * scale * 0.07);\r\n            starboardPositions.push([scale * 0.1, scale * 0.035, z]);\r\n        }\r\n        \r\n        // Create starboard side turrets\r\n        starboardPositions.forEach(pos => {\r\n            // Turret base\r\n            const baseGeometry = new THREE.CylinderGeometry(baseRadius, baseRadius, baseHeight, 8);\r\n            const base = new THREE.Mesh(baseGeometry, turretMaterial);\r\n            base.position.set(pos[0], pos[1], pos[2]);\r\n            ship.add(base);\r\n            \r\n            // Turret gun\r\n            const turretGeometry = new THREE.CylinderGeometry(turretRadius, turretRadius, turretHeight, 8);\r\n            const turret = new THREE.Mesh(turretGeometry, turretMaterial);\r\n            turret.position.set(pos[0], pos[1] + baseHeight * 0.5 + turretHeight * 0.5, pos[2]);\r\n            turret.rotation.x = Math.PI / 2; // Orient horizontally\r\n            turret.rotation.z = Math.PI / 6; // Angle outward\r\n            ship.add(turret);\r\n        });\r\n    }\r\n    \r\n    static createSurfaceTrenches(scale, ship) {\r\n        // Create surface trenches and details\r\n        const trenchWidth = scale * 0.01;\r\n        const trenchDepth = scale * 0.01;\r\n        const trenchLength = scale * 0.3;\r\n        \r\n        // Trench material - darker than hull\r\n        const trenchMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x222233,\r\n            metalness: 0.7,\r\n            roughness: 0.8,\r\n            emissive: 0x111122,\r\n            emissiveIntensity: 0.3\r\n        });\r\n        \r\n        // Center trench (inspired by Death Star trench)\r\n        const centerTrenchGeometry = new THREE.BoxGeometry(trenchWidth, trenchDepth, trenchLength);\r\n        const centerTrench = new THREE.Mesh(centerTrenchGeometry, trenchMaterial);\r\n        centerTrench.position.set(0, scale * 0.035, scale * 0.1);\r\n        ship.add(centerTrench);\r\n        \r\n        // Side trenches\r\n        const sideTrenchGeometry = new THREE.BoxGeometry(trenchWidth, trenchDepth, trenchLength * 0.7);\r\n        \r\n        // Port side trench\r\n        const portTrench = new THREE.Mesh(sideTrenchGeometry, trenchMaterial);\r\n        portTrench.position.set(-scale * 0.07, scale * 0.035, scale * 0.05);\r\n        ship.add(portTrench);\r\n        \r\n        // Starboard side trench\r\n        const starboardTrench = new THREE.Mesh(sideTrenchGeometry, trenchMaterial);\r\n        starboardTrench.position.set(scale * 0.07, scale * 0.035, scale * 0.05);\r\n        ship.add(starboardTrench);\r\n    }\r\n    \r\n    static createShieldGenerators(scale, ship) {\r\n        // Create shield generator domes\r\n        const domeRadius = scale * 0.02;\r\n        const domeY = scale * 0.05;\r\n        const domeZ = scale * 0.35;\r\n        \r\n        // Dome material - slightly transparent blue\r\n        const domeMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x3366aa,\r\n            metalness: 0.2,\r\n            roughness: 0.3,\r\n            transparent: true,\r\n            opacity: 0.6,\r\n            emissive: 0x112244,\r\n            emissiveIntensity: 0.3\r\n        });\r\n        \r\n        // Port side shield generator\r\n        const portDomeGeometry = new THREE.SphereGeometry(domeRadius, 16, 16, 0, Math.PI * 2, 0, Math.PI / 2);\r\n        const portDome = new THREE.Mesh(portDomeGeometry, domeMaterial);\r\n        portDome.position.set(-scale * 0.08, domeY, domeZ);\r\n        portDome.rotation.x = Math.PI; // Orient half-sphere\r\n        ship.add(portDome);\r\n        \r\n        // Starboard side shield generator\r\n        const starboardDomeGeometry = new THREE.SphereGeometry(domeRadius, 16, 16, 0, Math.PI * 2, 0, Math.PI / 2);\r\n        const starboardDome = new THREE.Mesh(starboardDomeGeometry, domeMaterial);\r\n        starboardDome.position.set(scale * 0.08, domeY, domeZ);\r\n        starboardDome.rotation.x = Math.PI; // Orient half-sphere\r\n        ship.add(starboardDome);\r\n        \r\n        return { portDome, starboardDome };\r\n    }\r\n}","// beam.js - Creates the teleport beam and impact ring for the Star Dreadnought\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport class TeleportBeam {\r\n    static createTeleportBeam(scale, ship) {\r\n        // Create teleport beam (initially inactive)\r\n        const beamTopRadius = scale * 0.03;\r\n        const beamBottomRadius = scale * 0.2; // Much wider at bottom for dramatic beam\r\n        const beamHeight = scale * 0.8; // Longer beam to reach further\r\n        \r\n        // Custom shader material for energy beam effect with more dynamic patterns\r\n        const beamMaterial = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                time: { value: 0.0 },\r\n                color: { value: new THREE.Color(0x33ccff) },\r\n                pulseFrequency: { value: 12.0 },\r\n                pulseAmplitude: { value: 0.3 }\r\n            },\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                \r\n                void main() {\r\n                    vUv = uv;\r\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                uniform float time;\r\n                uniform vec3 color;\r\n                uniform float pulseFrequency;\r\n                uniform float pulseAmplitude;\r\n                varying vec2 vUv;\r\n                \r\n                // Improved pattern with scrolling and pulsing\r\n                void main() {\r\n                    // Create primary energy pattern - vertical striations\r\n                    float verticalPattern = sin(vUv.y * 50.0 - time * 3.0) * 0.5 + 0.5;\r\n                    \r\n                    // Create horizontal pulse bands\r\n                    float horizontalPulse = sin(vUv.y * pulseFrequency - time * 2.0) * pulseAmplitude + (1.0 - pulseAmplitude);\r\n                    \r\n                    // Edge glow effect with distortion\r\n                    float edgeEffect = smoothstep(0.0, 0.4, vUv.x) * smoothstep(1.0, 0.6, vUv.x);\r\n                    \r\n                    // Swirling energy effect\r\n                    float swirl = sin(vUv.y * 30.0 + vUv.x * 5.0 + time * 4.0) * 0.5 + 0.5;\r\n                    \r\n                    // Combine effects\r\n                    float pattern = mix(verticalPattern, swirl, 0.5) * horizontalPulse * edgeEffect;\r\n                    \r\n                    // Add vertical fade for more realistic beam\r\n                    float opacity = (1.0 - vUv.y * 0.8) * 0.9;\r\n                    \r\n                    // Pulsing brightness based on time\r\n                    float pulse = sin(time * 3.0) * 0.1 + 0.9;\r\n                    \r\n                    // Combine final color \r\n                    vec3 finalColor = color * pulse;\r\n                    \r\n                    // Output final color with combined opacity\r\n                    gl_FragColor = vec4(finalColor, opacity * pattern);\r\n                }\r\n            `,\r\n            transparent: true,\r\n            side: THREE.DoubleSide,\r\n            blending: THREE.AdditiveBlending // Use additive blending for glowing effect\r\n        });\r\n        \r\n        // Create beam cone\r\n        const beamGeometry = new THREE.CylinderGeometry(beamBottomRadius, beamTopRadius, beamHeight, 32, 16, true);\r\n        const teleportBeam = new THREE.Mesh(beamGeometry, beamMaterial);\r\n        \r\n        // Position beam below the ship facing down\r\n        teleportBeam.position.set(0, -beamHeight/2, -scale * 0.1);\r\n        teleportBeam.rotation.x = Math.PI; // Point downward\r\n        \r\n        // Hide beam initially\r\n        teleportBeam.visible = false;\r\n        \r\n        // Add to ship\r\n        ship.add(teleportBeam);\r\n        \r\n        return teleportBeam;\r\n    }\r\n    \r\n    static createBeamImpactRing(scale, ship) {\r\n        // Create a flat ring at the beam impact point\r\n        const ringGeometry = new THREE.RingGeometry(scale * 0.1, scale * 0.22, 32);\r\n        const ringMaterial = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                time: { value: 0.0 },\r\n                color: { value: new THREE.Color(0x33ccff) }\r\n            },\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                void main() {\r\n                    vUv = uv;\r\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                uniform float time;\r\n                uniform vec3 color;\r\n                varying vec2 vUv;\r\n                \r\n                void main() {\r\n                    // Animated ripple effect\r\n                    float ripple = sin(distance(vUv, vec2(0.5)) * 20.0 - time * 5.0) * 0.5 + 0.5;\r\n                    \r\n                    // Rotating element\r\n                    float angle = atan(vUv.y - 0.5, vUv.x - 0.5);\r\n                    float rotatingPattern = sin(angle * 8.0 + time * 3.0) * 0.5 + 0.5;\r\n                    \r\n                    // Pulsing opacity\r\n                    float pulse = sin(time * 2.0) * 0.3 + 0.7;\r\n                    \r\n                    // Combine patterns\r\n                    float pattern = mix(ripple, rotatingPattern, 0.5) * pulse;\r\n                    \r\n                    gl_FragColor = vec4(color, pattern * 0.7);\r\n                }\r\n            `,\r\n            transparent: true,\r\n            side: THREE.DoubleSide,\r\n            blending: THREE.AdditiveBlending,\r\n            depthWrite: false\r\n        });\r\n        \r\n        const impactRing = new THREE.Mesh(ringGeometry, ringMaterial);\r\n        \r\n        // Position the ring below the beam's end\r\n        impactRing.position.set(0, -scale * 1.0, -scale * 0.1);\r\n        impactRing.rotation.x = -Math.PI/2; // Face downward\r\n        \r\n        // Hide initially\r\n        impactRing.visible = false;\r\n        \r\n        // Add to ship\r\n        ship.add(impactRing);\r\n        \r\n        return impactRing;\r\n    }\r\n}","// particles.js - Creates teleport particle systems for the Star Dreadnought\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport class TeleportParticles {\r\n    static createTeleportParticles(scale, ship) {\r\n        // Create particle system for teleport beam\r\n        const particleCount = 800; // More particles\r\n        const particleGeometry = new THREE.BufferGeometry();\r\n        \r\n        // Create arrays for particle properties\r\n        const positions = new Float32Array(particleCount * 3);\r\n        const colors = new Float32Array(particleCount * 3);\r\n        const sizes = new Float32Array(particleCount);\r\n        \r\n        // Initialize particle positions in a cone shape with more variation\r\n        for (let i = 0; i < particleCount; i++) {\r\n            const i3 = i * 3;\r\n            \r\n            // Determine if this should be an inner or outer particle\r\n            const isInnerBeam = Math.random() > 0.3;\r\n            \r\n            // Random position within the cone or surrounding area\r\n            const radius = isInnerBeam ? \r\n                Math.random() * scale * 0.03 : // Inner beam\r\n                scale * 0.03 + Math.random() * scale * 0.17; // Outer beam area\r\n            \r\n            const theta = Math.random() * Math.PI * 2;\r\n            const height = -(Math.random() * scale * 0.8); // Full beam height\r\n            \r\n            // Convert to Cartesian\r\n            positions[i3] = radius * Math.cos(theta);     // x\r\n            positions[i3 + 1] = height;                   // y (negative for downward direction)\r\n            positions[i3 + 2] = radius * Math.sin(theta); // z\r\n            \r\n            // Gradient colors from cyan to blue with variation\r\n            if (isInnerBeam) {\r\n                // Brighter inner beam\r\n                colors[i3] = 0.3 + Math.random() * 0.2;       // r\r\n                colors[i3 + 1] = 0.9 + Math.random() * 0.1;   // g\r\n                colors[i3 + 2] = 1.0;                         // b\r\n            } else {\r\n                // Cooler outer particles\r\n                colors[i3] = 0.1 + Math.random() * 0.1;       // r \r\n                colors[i3 + 1] = 0.7 + Math.random() * 0.3;   // g\r\n                colors[i3 + 2] = 0.9 + Math.random() * 0.1;   // b\r\n            }\r\n            \r\n            // Varied particle sizes\r\n            sizes[i] = isInnerBeam ? \r\n                scale * 0.002 + Math.random() * scale * 0.002 : // Small inner particles\r\n                scale * 0.004 + Math.random() * scale * 0.006;  // Larger outer particles\r\n        }\r\n        \r\n        // Add attributes to geometry\r\n        particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n        particleGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n        particleGeometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\r\n        \r\n        // Particle material with custom shader for better glow\r\n        const particleMaterial = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                time: { value: 0 },\r\n                pointTexture: { value: this.createParticleTexture() }\r\n            },\r\n            vertexShader: `\r\n                attribute float size;\r\n                attribute vec3 color;\r\n                varying vec3 vColor;\r\n                uniform float time;\r\n                \r\n                void main() {\r\n                    vColor = color;\r\n                    \r\n                    // Animate size with time\r\n                    float pulseFactor = sin(time * 2.0 + position.z * 0.1) * 0.3 + 0.7;\r\n                    \r\n                    // Calculate position\r\n                    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n                    \r\n                    // Size attenuation\r\n                    gl_PointSize = size * pulseFactor * (300.0 / -mvPosition.z);\r\n                    gl_Position = projectionMatrix * mvPosition;\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                uniform sampler2D pointTexture;\r\n                varying vec3 vColor;\r\n                \r\n                void main() {\r\n                    // Sample soft particle texture\r\n                    vec4 texColor = texture2D(pointTexture, gl_PointCoord);\r\n                    \r\n                    // Apply color\r\n                    gl_FragColor = vec4(vColor, texColor.r);\r\n                }\r\n            `,\r\n            transparent: true,\r\n            depthWrite: false,\r\n            blending: THREE.AdditiveBlending,\r\n            vertexColors: true\r\n        });\r\n        \r\n        // Create particle system\r\n        const teleportParticles = new THREE.Points(particleGeometry, particleMaterial);\r\n        teleportParticles.visible = false;\r\n        \r\n        // Position particle system\r\n        teleportParticles.position.set(0, 0, -scale * 0.1);\r\n        \r\n        // Add to ship\r\n        ship.add(teleportParticles);\r\n        \r\n        return teleportParticles;\r\n    }\r\n    \r\n    static createParticleTexture() {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = 64;\r\n        canvas.height = 64;\r\n        \r\n        const context = canvas.getContext('2d');\r\n        const gradient = context.createRadialGradient(\r\n            32, 32, 0, 32, 32, 32\r\n        );\r\n        \r\n        gradient.addColorStop(0, 'rgba(255,255,255,1)');\r\n        gradient.addColorStop(0.3, 'rgba(255,255,255,0.8)');\r\n        gradient.addColorStop(0.5, 'rgba(255,255,255,0.4)');\r\n        gradient.addColorStop(1, 'rgba(255,255,255,0)');\r\n        \r\n        context.fillStyle = gradient;\r\n        context.fillRect(0, 0, 64, 64);\r\n        \r\n        const texture = new THREE.Texture(canvas);\r\n        texture.needsUpdate = true;\r\n        return texture;\r\n    }\r\n    \r\n    static animateParticles(teleportParticles) {\r\n        if (!teleportParticles || !teleportParticles.visible) return;\r\n        \r\n        // Moving particles\r\n        const positions = teleportParticles.geometry.attributes.position.array;\r\n        \r\n        // Move particles downward and reset when they reach bottom\r\n        for (let i = 0; i < positions.length; i += 3) {\r\n            // Move particle down faster\r\n            positions[i + 1] -= 5;\r\n            \r\n            // Add slight horizontal movement for realism\r\n            positions[i] += (Math.random() - 0.5) * 2;\r\n            positions[i + 2] += (Math.random() - 0.5) * 2;\r\n            \r\n            // Reset particle when it gets too far\r\n            if (positions[i + 1] < -1000) {\r\n                // Get a reference position to place particle within beam\r\n                const isInnerBeam = Math.random() > 0.3;\r\n                const radius = isInnerBeam ? \r\n                    Math.random() * 40 : // Inner beam\r\n                    40 + Math.random() * 180; // Outer area\r\n                const theta = Math.random() * Math.PI * 2;\r\n                \r\n                positions[i] = radius * Math.cos(theta);     // x\r\n                positions[i + 1] = -(Math.random() * 400);   // y (reset to top of beam)\r\n                positions[i + 2] = radius * Math.sin(theta); // z\r\n            }\r\n        }\r\n        \r\n        // Update buffer geometry\r\n        teleportParticles.geometry.attributes.position.needsUpdate = true;\r\n    }\r\n}","// controller.js - Controls teleport beam activation and animation for the Star Dreadnought\r\n\r\nimport { TeleportParticles } from './particles.js';\r\n\r\nexport class TeleportController {\r\n    constructor() {\r\n        this.teleportBeam = null;\r\n        this.teleportParticles = null;\r\n        this.impactRing = null;\r\n        this.teleportBeamActive = false;\r\n    }\r\n    \r\n    setComponents(teleportBeam, teleportParticles, impactRing) {\r\n        this.teleportBeam = teleportBeam;\r\n        this.teleportParticles = teleportParticles;\r\n        this.impactRing = impactRing;\r\n    }\r\n    \r\n    // Activate teleport beam\r\n    activateTeleportBeam() {\r\n        if (this.teleportBeam) {\r\n            this.teleportBeam.visible = true;\r\n            this.teleportParticles.visible = true;\r\n            this.impactRing.visible = true;\r\n            this.teleportBeamActive = true;\r\n            \r\n            // Reset animation time\r\n            this.teleportBeam.material.uniforms.time.value = 0;\r\n            this.impactRing.material.uniforms.time.value = 0;\r\n            if (this.teleportParticles.material.uniforms) {\r\n                this.teleportParticles.material.uniforms.time.value = 0;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Deactivate teleport beam\r\n    deactivateTeleportBeam() {\r\n        if (this.teleportBeam) {\r\n            this.teleportBeam.visible = false;\r\n            this.teleportParticles.visible = false;\r\n            this.impactRing.visible = false;\r\n            this.teleportBeamActive = false;\r\n        }\r\n    }\r\n    \r\n    // Update teleport beam effect\r\n    updateTeleportBeam(progress = 0) {\r\n        if (!this.teleportBeamActive) return;\r\n        \r\n        // Update shader time uniforms for animation\r\n        const timeIncrement = 0.02;\r\n        \r\n        // Update beam animation\r\n        if (this.teleportBeam && this.teleportBeam.material.uniforms) {\r\n            this.teleportBeam.material.uniforms.time.value += timeIncrement;\r\n            \r\n            // Pulse the beam based on progress\r\n            const intensity = 0.3 + Math.sin(progress * Math.PI * 6) * 0.1;\r\n            this.teleportBeam.material.uniforms.pulseAmplitude.value = intensity;\r\n        }\r\n        \r\n        // Update impact ring\r\n        if (this.impactRing && this.impactRing.material.uniforms) {\r\n            this.impactRing.material.uniforms.time.value += timeIncrement;\r\n            \r\n            // Scale the impact ring with progress\r\n            const ringScale = 1.0 + Math.sin(progress * Math.PI * 3) * 0.2;\r\n            this.impactRing.scale.set(ringScale, ringScale, 1);\r\n        }\r\n        \r\n        // Animate particles\r\n        if (this.teleportParticles && this.teleportParticles.material.uniforms) {\r\n            this.teleportParticles.material.uniforms.time.value += timeIncrement;\r\n            \r\n            // Use the static method from TeleportParticles for animation\r\n            TeleportParticles.animateParticles(this.teleportParticles);\r\n        }\r\n    }\r\n    \r\n    // Get current beam active state\r\n    isBeamActive() {\r\n        return this.teleportBeamActive;\r\n    }\r\n}","// starDreadnought.js - Main class for the massive Star Dreadnought ship\r\n// Refactored to delegate to specialized modules\r\n\r\nimport * as THREE from 'three';\r\nimport { DreadnoughtHull } from './structure/hull.js';\r\nimport { DreadnoughtBridge } from './structure/bridge.js';\r\nimport { DreadnoughtEngines } from './systems/engines.js';\r\nimport { DreadnoughtWeapons } from './systems/weapons.js';\r\nimport { TeleportBeam } from './teleporter/beam.js';\r\nimport { TeleportParticles } from './teleporter/particles.js';\r\nimport { TeleportController } from './teleporter/controller.js';\r\n\r\nexport class StarDreadnought {\r\n    constructor(scene) {\r\n        this.scene = scene;\r\n        this.ship = null;\r\n        \r\n        // Initialize component systems\r\n        this.engines = new DreadnoughtEngines();\r\n        this.teleportController = new TeleportController();\r\n        \r\n        // Create ship model\r\n        this.createShipModel();\r\n        \r\n        // Add to scene\r\n        this.scene.add(this.ship);\r\n        \r\n        console.log(\"Star Dreadnought created\");\r\n    }\r\n    \r\n    createShipModel() {\r\n        // Create a group for the entire ship\r\n        this.ship = new THREE.Group();\r\n        this.ship.name = 'starDreadnought';\r\n        \r\n        // Set scale - this is a massive ship\r\n        const shipScale = 1200; // Overall scale factor\r\n        \r\n        // Delegate construction to specialized modules\r\n        this.createStructure(shipScale);\r\n        this.createSystems(shipScale);\r\n        this.createTeleporter(shipScale);\r\n    }\r\n    \r\n    createStructure(scale) {\r\n        // Main hull - elongated wedge shape\r\n        DreadnoughtHull.createMainHull(scale, this.ship);\r\n        \r\n        // Command bridge superstructure\r\n        DreadnoughtBridge.createCommandBridge(scale, this.ship);\r\n    }\r\n    \r\n    createSystems(scale) {\r\n        // Engine array with particles and power control\r\n        this.engines.createEngineArray(scale, this.ship);\r\n        \r\n        // Surface details: turrets, trenches, shield generators\r\n        DreadnoughtWeapons.createSurfaceDetails(scale, this.ship);\r\n    }\r\n    \r\n    createTeleporter(scale) {\r\n        // Create teleport beam and impact ring\r\n        const teleportBeam = TeleportBeam.createTeleportBeam(scale, this.ship);\r\n        const impactRing = TeleportBeam.createBeamImpactRing(scale, this.ship);\r\n        \r\n        // Create teleport particles\r\n        const teleportParticles = TeleportParticles.createTeleportParticles(scale, this.ship);\r\n        \r\n        // Set up teleport controller with components\r\n        this.teleportController.setComponents(teleportBeam, teleportParticles, impactRing);\r\n    }\r\n    \r\n    // Set engines power level (0-1)\r\n    setEnginesPower(power) {\r\n        this.engines.setEnginesPower(power);\r\n    }\r\n    \r\n    // Activate teleport beam\r\n    activateTeleportBeam() {\r\n        this.teleportController.activateTeleportBeam();\r\n    }\r\n    \r\n    // Deactivate teleport beam\r\n    deactivateTeleportBeam() {\r\n        this.teleportController.deactivateTeleportBeam();\r\n    }\r\n    \r\n    // Update teleport beam effect\r\n    updateTeleportBeam(progress) {\r\n        this.teleportController.updateTeleportBeam(progress);\r\n        this.engines.updateEngineTrails();\r\n    }\r\n    \r\n    // Check if teleport beam is active\r\n    get teleportBeamActive() {\r\n        return this.teleportController.isBeamActive();\r\n    }\r\n    \r\n    // Get ship group for external access\r\n    getShip() {\r\n        return this.ship;\r\n    }\r\n    \r\n    // Get engine glows for external effects\r\n    getEngineGlows() {\r\n        return this.engines.engineGlows;\r\n    }\r\n    \r\n    // Update method for any ongoing animations\r\n    update(deltaTime) {\r\n        // Update engine trail animations\r\n        this.engines.updateEngineTrails();\r\n        \r\n        // Update teleport beam if active\r\n        if (this.teleportController.isBeamActive()) {\r\n            this.teleportController.updateTeleportBeam();\r\n        }\r\n    }\r\n    \r\n    // Cleanup method\r\n    dispose() {\r\n        if (this.ship) {\r\n            this.scene.remove(this.ship);\r\n            \r\n            // Traverse and dispose of geometries and materials\r\n            this.ship.traverse((child) => {\r\n                if (child.geometry) {\r\n                    child.geometry.dispose();\r\n                }\r\n                if (child.material) {\r\n                    if (Array.isArray(child.material)) {\r\n                        child.material.forEach(material => material.dispose());\r\n                    } else {\r\n                        child.material.dispose();\r\n                    }\r\n                }\r\n            });\r\n            \r\n            this.ship = null;\r\n        }\r\n    }\r\n}","// soundEffects.js - Tone.js sound effects for intro sequence\r\n\r\n/**\r\n * Creates all intro sequence sound effects using Tone.js\r\n * @param {AudioManager} audioManager - Reference to the main audio manager\r\n * @returns {Object} Object containing all intro sound effects\r\n */\r\nexport function createIntroSoundEffects(audioManager) {\r\n    if (typeof Tone === 'undefined') {\r\n        console.error(\"Tone.js not available for intro sound effects\");\r\n        return {};\r\n    }\r\n    \r\n    try {\r\n        console.log(\"Creating intro sequence sound effects...\");\r\n        \r\n        const introSounds = {};\r\n        \r\n        // Create warp portal sound\r\n        introSounds.warp = createWarpSound(audioManager);\r\n        \r\n        // Create ship arrival sound\r\n        introSounds.shipArrival = createShipArrivalSound(audioManager);\r\n        \r\n        // Create teleport beam sound\r\n        introSounds.teleport = createTeleportSound(audioManager);\r\n        \r\n        console.log(\"Intro sequence sound effects created\");\r\n        return introSounds;\r\n    } catch (error) {\r\n        console.error(\"Error creating intro sound effects:\", error);\r\n        return {};\r\n    }\r\n}\r\n\r\n// Create warp portal sound effect\r\nfunction createWarpSound(audioManager) {\r\n    try {\r\n        // Use Tone.Destination directly - audio system might not be fully initialized yet\r\n        const destination = Tone.Destination;\r\n        \r\n        // Filter for warp sound\r\n        const warpFilter = new Tone.Filter({\r\n            type: \"lowpass\",\r\n            frequency: 2000,\r\n            Q: 2\r\n        }).connect(destination);\r\n        \r\n        // Add reverb for spaciousness\r\n        const warpReverb = new Tone.Reverb({\r\n            decay: 2,\r\n            wet: 0.5\r\n        }).connect(warpFilter);\r\n        \r\n        // Create synth for warp sound\r\n        const warpSynth = new Tone.FMSynth({\r\n            harmonicity: 3,\r\n            modulationIndex: 10,\r\n            oscillator: {\r\n                type: \"sine\"\r\n            },\r\n            envelope: {\r\n                attack: 0.1,\r\n                decay: 0.2,\r\n                sustain: 0.8,\r\n                release: 1.5\r\n            },\r\n            modulation: {\r\n                type: \"square\"\r\n            },\r\n            modulationEnvelope: {\r\n                attack: 0.5,\r\n                decay: 0.1,\r\n                sustain: 0.2,\r\n                release: 0.5\r\n            }\r\n        }).connect(warpReverb);\r\n        \r\n        // Create noise component for texture\r\n        const noiseFilter = new Tone.Filter({\r\n            type: \"bandpass\",\r\n            frequency: 700,\r\n            Q: 0.6\r\n        }).connect(destination);\r\n        \r\n        const noiseGain = new Tone.Gain(0.3).connect(noiseFilter);\r\n        const noise = new Tone.Noise(\"pink\").connect(noiseGain);\r\n        \r\n        // Create sound object with proper scope\r\n        const soundObject = {\r\n            lastPlayTime: 0, // Track when we last played this sound\r\n            play: function() {\r\n                if (audioManager && audioManager.muted) return;\r\n                \r\n                const now = Tone.now();\r\n                \r\n                // Prevent playing if it was played too recently (within 0.1 seconds)\r\n                if (now - this.lastPlayTime < 0.1) {\r\n                    console.log(\"Preventing too rapid warp sound playback\");\r\n                    return;\r\n                }\r\n                \r\n                // Update last play time\r\n                this.lastPlayTime = now;\r\n                \r\n                // Set volume - reduced by 40%\r\n                const volumeLevel = audioManager ? audioManager.sfxVolume * 0.36 : 0.18;\r\n                warpSynth.volume.value = Tone.gainToDb(volumeLevel);\r\n                \r\n                // Start noise component with reduced volume\r\n                noise.start();\r\n                \r\n                // Play descending sequence for portal forming\r\n                warpSynth.triggerAttack(\"C5\", now);\r\n                warpSynth.frequency.exponentialRampTo(\"C2\", 2, now);\r\n                \r\n                // Fade out noise after 3 seconds - start with lower gain\r\n                noiseGain.gain.setValueAtTime(0.18, now);\r\n                noiseGain.gain.exponentialRampTo(0.01, 3, now + 1);\r\n                \r\n                // Stop synth and noise after 3 seconds\r\n                setTimeout(() => {\r\n                    warpSynth.triggerRelease();\r\n                    setTimeout(() => {\r\n                        noise.stop();\r\n                    }, 500);\r\n                }, 3000);\r\n            }\r\n        };\r\n        \r\n        return soundObject;\r\n    } catch (error) {\r\n        console.error(\"Error creating warp sound:\", error);\r\n        return { play: () => {} };\r\n    }\r\n}\r\n\r\n// Create ship arrival sound effect\r\nfunction createShipArrivalSound(audioManager) {\r\n    try {\r\n        // Use Tone.Destination directly - audio system might not be fully initialized yet\r\n        const destination = Tone.Destination;\r\n        \r\n        // Filter for arrival sound\r\n        const arrivalFilter = new Tone.Filter({\r\n            type: \"lowpass\",\r\n            frequency: 1200,\r\n            Q: 1\r\n        }).connect(destination);\r\n        \r\n        // Create synth for ship arrival sound\r\n        const arrivalSynth = new Tone.PolySynth(Tone.Synth, {\r\n            oscillator: {\r\n                type: \"triangle\"\r\n            },\r\n            envelope: {\r\n                attack: 0.02,\r\n                decay: 0.3,\r\n                sustain: 0.1,\r\n                release: 0.8\r\n            }\r\n        }).connect(arrivalFilter);\r\n        \r\n        // Create deep bass for engine rumble\r\n        const rumbleFilter = new Tone.Filter({\r\n            type: \"lowpass\",\r\n            frequency: 200,\r\n            Q: 0.5\r\n        }).connect(destination);\r\n        \r\n        const rumbleSynth = new Tone.Synth({\r\n            oscillator: {\r\n                type: \"sine\"\r\n            },\r\n            envelope: {\r\n                attack: 0.1,\r\n                decay: 0.3,\r\n                sustain: 0.6,\r\n                release: 1\r\n            }\r\n        }).connect(rumbleFilter);\r\n        \r\n        // Return the sound object\r\n        return {\r\n            play: () => {\r\n                if (audioManager && audioManager.muted) return;\r\n                \r\n                const now = Tone.now();\r\n                \r\n                // Set volume - reduced by 40%\r\n                const volumeLevel = audioManager ? audioManager.sfxVolume * 0.42 : 0.24;\r\n                arrivalSynth.volume.value = Tone.gainToDb(volumeLevel);\r\n                rumbleSynth.volume.value = Tone.gainToDb(volumeLevel * 0.8); // Further reduced rumble\r\n                \r\n                // Play dramatic chord for ship appearance\r\n                arrivalSynth.triggerAttackRelease([\"G3\", \"D4\", \"A4\"], 1.5, now);\r\n                \r\n                // Add engine rumble\r\n                rumbleSynth.triggerAttack(\"G1\", now);\r\n                rumbleSynth.frequency.exponentialRampTo(\"C2\", 2, now + 0.5);\r\n                \r\n                // Stop rumble after 2 seconds\r\n                setTimeout(() => {\r\n                    rumbleSynth.triggerRelease();\r\n                }, 2000);\r\n            }\r\n        };\r\n    } catch (error) {\r\n        console.error(\"Error creating ship arrival sound:\", error);\r\n        return { play: () => {} };\r\n    }\r\n}\r\n\r\n// Create teleport beam sound effect\r\nfunction createTeleportSound(audioManager) {\r\n    try {\r\n        // Use Tone.Destination directly - audio system might not be fully initialized yet\r\n        const destination = Tone.Destination;\r\n        \r\n        // Filter for teleport sound\r\n        const teleportFilter = new Tone.Filter({\r\n            type: \"bandpass\",\r\n            frequency: 800,\r\n            Q: 2\r\n        }).connect(destination);\r\n        \r\n        // Add chorus for otherworldly effect\r\n        const teleportChorus = new Tone.Chorus({\r\n            frequency: 1.5,\r\n            delayTime: 3.5,\r\n            depth: 0.7,\r\n            wet: 0.5\r\n        }).connect(teleportFilter).start();\r\n        \r\n        // Create synth for teleport beam\r\n        const teleportSynth = new Tone.Synth({\r\n            oscillator: {\r\n                type: \"sine\"\r\n            },\r\n            envelope: {\r\n                attack: 0.05,\r\n                decay: 0.2,\r\n                sustain: 0.8,\r\n                release: 1\r\n            }\r\n        }).connect(teleportChorus);\r\n        \r\n        // Create high-pitched accent for the beam\r\n        const beamFilter = new Tone.Filter({\r\n            type: \"highpass\",\r\n            frequency: 2000,\r\n            Q: 1\r\n        }).connect(destination);\r\n        \r\n        const beamSynth = new Tone.Synth({\r\n            oscillator: {\r\n                type: \"square\"\r\n            },\r\n            envelope: {\r\n                attack: 0.01,\r\n                decay: 0.1,\r\n                sustain: 0.6,\r\n                release: 0.5\r\n            }\r\n        }).connect(beamFilter);\r\n        \r\n        // Return the sound object\r\n        return {\r\n            play: () => {\r\n                if (audioManager && audioManager.muted) return;\r\n                \r\n                const now = Tone.now();\r\n                \r\n                // Set volume - reduced by 40%\r\n                const volumeLevel = audioManager ? audioManager.sfxVolume * 0.3 : 0.18;\r\n                teleportSynth.volume.value = Tone.gainToDb(volumeLevel);\r\n                beamSynth.volume.value = Tone.gainToDb(volumeLevel * 0.4); // Further reduced high pitch\r\n                \r\n                // Play upward sweep for teleport activation\r\n                teleportSynth.triggerAttack(\"C4\", now);\r\n                teleportSynth.frequency.exponentialRampTo(\"C6\", 1.5, now);\r\n                \r\n                // Add high-pitched beam activation sound\r\n                beamSynth.triggerAttackRelease(\"E7\", 0.1, now + 0.3);\r\n                setTimeout(() => {\r\n                    beamSynth.triggerAttackRelease(\"G7\", 0.1, now + 0.5);\r\n                }, 200);\r\n                \r\n                // Release after 2 seconds\r\n                setTimeout(() => {\r\n                    teleportSynth.triggerRelease();\r\n                }, 2000);\r\n            }\r\n        };\r\n    } catch (error) {\r\n        console.error(\"Error creating teleport sound:\", error);\r\n        return { play: () => {} };\r\n    }\r\n}","// dialogueManager.js - Manages loading and playing dialogue WAV files for intro sequence\r\n\r\nimport { getAbsolutePath } from '../../../utils/pathUtils.js';\r\n\r\n/**\r\n * Load dialogue WAV files (1.wav through 8.wav)\r\n * @returns {Array} Array of Audio elements for dialogue files\r\n */\r\nexport function loadDialogueWavs() {\r\n    console.log(\"Loading dialogue WAV files...\");\r\n    \r\n    const dialogueWavs = [];\r\n    \r\n    try {\r\n        // Load 8 dialogue WAV files\r\n        for (let i = 1; i <= 8; i++) {\r\n            const audioPath = getAbsolutePath(`sounds/dialogue/${i}.wav`);\r\n            console.log(`Attempting to load dialogue file: ${audioPath}`);\r\n            \r\n            // Create audio element\r\n            const audio = new Audio();\r\n            \r\n            // Setup event handlers before setting src to avoid race conditions\r\n            audio.addEventListener('canplaythrough', () => {\r\n                console.log(`Dialogue WAV ${i} loaded successfully`);\r\n            });\r\n            \r\n            audio.addEventListener('error', (e) => {\r\n                console.warn(`Dialogue WAV ${i} not found or couldn't be loaded - this is normal if you haven't added the files yet`);\r\n                // Don't log the full error object as it's noisy\r\n            });\r\n            \r\n            // Set source after adding event listeners\r\n            audio.src = audioPath;\r\n            \r\n            // Store reference even if loading fails - the game will just skip playing it\r\n            dialogueWavs.push(audio);\r\n        }\r\n        \r\n        console.log(\"Dialogue WAV files setup complete - they'll be used if available\");\r\n        return dialogueWavs;\r\n    } catch (error) {\r\n        console.error(\"Error in dialogue WAV files setup:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\n/**\r\n * Play a specific dialogue WAV file\r\n * @param {Array} dialogueWavs - Array of dialogue audio elements\r\n * @param {number} index - Index of the dialogue to play\r\n * @param {AudioManager} audioManager - Audio manager for volume control\r\n */\r\nexport function playDialogueWav(dialogueWavs, index, audioManager) {\r\n    // Only play WAVs for the first 8 dialogues (the ones with voice acting)\r\n    if (index >= 8 || !dialogueWavs[index]) {\r\n        return;\r\n    }\r\n    \r\n    try {\r\n        const dialogueAudio = dialogueWavs[index];\r\n        \r\n        // Only attempt to play if the file has actually loaded successfully\r\n        // We can check this by examining the networkState or readyState\r\n        if (dialogueAudio.readyState > 0 && dialogueAudio.error === null) {\r\n            dialogueAudio.volume = audioManager ? audioManager.sfxVolume * 0.8 : 0.5;\r\n            dialogueAudio.currentTime = 0;\r\n            \r\n            // Try to play and catch any potential errors\r\n            const playPromise = dialogueAudio.play();\r\n            if (playPromise !== undefined) {\r\n                playPromise.catch(err => {\r\n                    console.warn(`Couldn't play dialogue WAV ${index}: ${err.message}`);\r\n                });\r\n            }\r\n        } else {\r\n            console.log(`Skipping dialogue WAV ${index + 1} (not loaded)`);\r\n        }\r\n    } catch (error) {\r\n        console.warn(`Error playing dialogue WAV ${index + 1}, continuing without audio`, error.message);\r\n    }\r\n}","// portalEffect.js - Manages the warp portal visual effects for intro sequence\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport class PortalEffect {\r\n    constructor() {\r\n        this.warpTunnel = null;\r\n        this.warpPortal = null;\r\n        this.portalParticles = null;\r\n        this.setupPortalEffect();\r\n    }\r\n    \r\n    setupPortalEffect() {\r\n        // Create a circular portal instead of a particle tower\r\n        const portalGeometry = new THREE.RingGeometry(0, 400, 64);\r\n        const portalMaterial = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                time: { value: 0 },\r\n                color: { value: new THREE.Color(0x6633aa) }\r\n            },\r\n            vertexShader: `\r\n                precision highp float;\r\n                varying vec2 vUv;\r\n                void main() {\r\n                    vUv = uv;\r\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                precision highp float;\r\n                uniform float time;\r\n                uniform vec3 color;\r\n                varying vec2 vUv;\r\n                \r\n                void main() {\r\n                    float distFromCenter = length(vUv - vec2(0.5, 0.5)) * 2.0;\r\n                    float ripple = sin(distFromCenter * 20.0 - time * 3.0) * 0.5 + 0.5;\r\n                    float alpha = (1.0 - distFromCenter) * ripple;\r\n                    \r\n                    vec3 finalColor = color * (0.8 + ripple * 0.4);\r\n                    gl_FragColor = vec4(finalColor, alpha);\r\n                }\r\n            `,\r\n            transparent: true,\r\n            side: THREE.DoubleSide\r\n        });\r\n        \r\n        this.warpPortal = new THREE.Mesh(portalGeometry, portalMaterial);\r\n        \r\n        // Create a subtle particle system around the portal for effect\r\n        const particleCount = 500;\r\n        const particles = new THREE.BufferGeometry();\r\n        const positions = new Float32Array(particleCount * 3);\r\n        \r\n        for (let i = 0; i < particleCount; i++) {\r\n            const angle = Math.random() * Math.PI * 2;\r\n            const radius = 350 + Math.random() * 150;\r\n            positions[i * 3] = Math.cos(angle) * radius;\r\n            positions[i * 3 + 1] = Math.sin(angle) * radius;\r\n            positions[i * 3 + 2] = (Math.random() - 0.5) * 50;\r\n        }\r\n        \r\n        particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n        \r\n        const particleMaterial = new THREE.PointsMaterial({\r\n            color: 0xaa33ff,\r\n            size: 3,\r\n            transparent: true,\r\n            blending: THREE.AdditiveBlending\r\n        });\r\n        \r\n        this.portalParticles = new THREE.Points(particles, particleMaterial);\r\n        \r\n        // Group the portal elements\r\n        this.warpTunnel = new THREE.Group();\r\n        this.warpTunnel.add(this.warpPortal);\r\n        this.warpTunnel.add(this.portalParticles);\r\n    }\r\n    \r\n    /**\r\n     * Update portal shader uniforms and animations\r\n     */\r\n    updatePortalEffect() {\r\n        if (this.warpPortal && this.warpPortal.material.uniforms) {\r\n            this.warpPortal.material.uniforms.time.value += 0.016;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Set portal opacity for fade effects\r\n     * @param {number} opacity - Opacity value between 0 and 1\r\n     */\r\n    setOpacity(opacity) {\r\n        if (this.portalParticles && this.portalParticles.material) {\r\n            this.portalParticles.material.opacity = opacity;\r\n        }\r\n        if (this.warpPortal && this.warpPortal.material) {\r\n            this.warpPortal.material.opacity = opacity;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Set portal scale\r\n     * @param {number} scale - Scale factor\r\n     */\r\n    setScale(scale) {\r\n        if (this.warpTunnel) {\r\n            this.warpTunnel.scale.set(scale, scale, 1);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Set portal position\r\n     * @param {THREE.Vector3} position - Position vector\r\n     */\r\n    setPosition(position) {\r\n        if (this.warpTunnel) {\r\n            this.warpTunnel.position.copy(position);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Set portal rotation\r\n     * @param {THREE.Euler} rotation - Rotation euler angles\r\n     */\r\n    setRotation(rotation) {\r\n        if (this.warpTunnel) {\r\n            this.warpTunnel.rotation.copy(rotation);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Set portal visibility\r\n     * @param {boolean} visible - Whether portal should be visible\r\n     */\r\n    setVisible(visible) {\r\n        if (this.warpTunnel) {\r\n            this.warpTunnel.visible = visible;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Get the portal group for adding to scene\r\n     * @returns {THREE.Group} The warp tunnel group\r\n     */\r\n    getPortalGroup() {\r\n        return this.warpTunnel;\r\n    }\r\n    \r\n    /**\r\n     * Clean up portal resources\r\n     */\r\n    dispose() {\r\n        if (this.warpPortal) {\r\n            if (this.warpPortal.geometry) this.warpPortal.geometry.dispose();\r\n            if (this.warpPortal.material) this.warpPortal.material.dispose();\r\n        }\r\n        if (this.portalParticles) {\r\n            if (this.portalParticles.geometry) this.portalParticles.geometry.dispose();\r\n            if (this.portalParticles.material) this.portalParticles.material.dispose();\r\n        }\r\n        this.warpTunnel = null;\r\n        this.warpPortal = null;\r\n        this.portalParticles = null;\r\n    }\r\n}","// dialogueSystem.js - Manages dialogue UI and typing animation for intro sequence\r\n\r\nimport { playDialogueWav } from '../audio/dialogueManager.js';\r\n\r\nexport class DialogueSystem {\r\n    constructor() {\r\n        this.dialogueBox = null;\r\n        this.dialogueText = null;\r\n        this.currentDialogueIndex = 0;\r\n        this.isTyping = false;\r\n        this.typeInterval = null;\r\n        this.dialogueWavs = [];\r\n        this.audioManager = null;\r\n        \r\n        // Dialogue lines\r\n        this.dialogueLines = [\r\n            \"CORP CONTROLLER: [static] Belter #337, status check. Your cryostasis cycle is now complete.\",\r\n            \"CORP CONTROLLER: Welcome to your deployment in the Sol System, circa 2077. As you can see, Earth is... well... let's just say \\\"available for unrestricted mining operations\\\" now.\",\r\n            \"CORP CONTROLLER: CorpEx Resource Acquisition reminds you that all planetary bodies in this system are now classified as \\\"unclaimed assets\\\" following the... unfortunate global circumstances.\",\r\n            \"CORP CONTROLLER: Your primary objective is resource extraction from the asteroid belt. Initial scans show promising mineral concentrations untouched since the evacuation.\",\r\n            \"CORP CONTROLLER: The Stargate remains your lifeline. Return for fuel, upgrades, trading, and your allocated 15 minutes of daily entertainment. Remember, a happy belter is a productive belter!\",\r\n            \"CORP CONTROLLER: Resource extraction targets are non-negotiable. Failure to meet quotas will result in extension of your 42-year contract.\",\r\n            \"CORP CONTROLLER: Oh, and our long-range scans have detected spectral drone activity in adjacent sectors. Remnants of old defense systems, probably. Nothing a resourceful belter like you can't handle.\",\r\n            \"CORP CONTROLLER: Connection terminating in 3...2...1... Don't die out there, #337. Replacement clones are expensive.\",\r\n            \"[TRANSMISSION TERMINATED]\",\r\n            \"[BELTER #337 DEPLOYMENT ACTIVE]\"\r\n        ];\r\n    }\r\n    \r\n    /**\r\n     * Initialize the dialogue system with required dependencies\r\n     * @param {Array} dialogueWavs - Array of loaded dialogue audio elements\r\n     * @param {AudioManager} audioManager - Audio manager for volume control\r\n     */\r\n    initialize(dialogueWavs, audioManager) {\r\n        this.dialogueWavs = dialogueWavs;\r\n        this.audioManager = audioManager;\r\n    }\r\n    \r\n    /**\r\n     * Setup the dialogue UI elements\r\n     */\r\n    setupDialogueUI() {\r\n        // Create dialogue box\r\n        this.dialogueBox = document.createElement('div');\r\n        this.dialogueBox.id = 'intro-dialogue';\r\n        this.dialogueBox.style.position = 'fixed';\r\n        this.dialogueBox.style.bottom = '50px';\r\n        this.dialogueBox.style.left = '50%';\r\n        this.dialogueBox.style.transform = 'translateX(-50%)';\r\n        this.dialogueBox.style.width = '80%';\r\n        this.dialogueBox.style.maxWidth = '800px';\r\n        this.dialogueBox.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\r\n        this.dialogueBox.style.color = '#30f0c0';\r\n        this.dialogueBox.style.border = '1px solid #30f0c0';\r\n        this.dialogueBox.style.borderRadius = '5px';\r\n        this.dialogueBox.style.padding = '15px';\r\n        this.dialogueBox.style.fontFamily = 'Courier New, monospace';\r\n        this.dialogueBox.style.fontSize = '16px';\r\n        this.dialogueBox.style.zIndex = '10000';\r\n        this.dialogueBox.style.textShadow = '0 0 5px #30f0c0';\r\n        this.dialogueBox.style.boxShadow = '0 0 10px rgba(48, 240, 192, 0.3)';\r\n        this.dialogueBox.style.opacity = '0';\r\n        this.dialogueBox.style.transition = 'opacity 0.5s';\r\n        \r\n        // Add dialogue text element\r\n        this.dialogueText = document.createElement('div');\r\n        this.dialogueText.style.lineHeight = '1.5';\r\n        \r\n        this.dialogueBox.appendChild(this.dialogueText);\r\n        document.body.appendChild(this.dialogueBox);\r\n        \r\n        // Fade in dialogue box\r\n        setTimeout(() => {\r\n            this.dialogueBox.style.opacity = '1';\r\n        }, 200);\r\n    }\r\n    \r\n    /**\r\n     * Type out the next dialogue line with animation\r\n     * @param {number} sequenceTime - Current sequence time for auto-advance logic\r\n     * @param {boolean} isPlaying - Whether intro sequence is still playing\r\n     * @returns {boolean} True if there are more dialogues, false if complete\r\n     */\r\n    typeNextDialogue(sequenceTime = 0, isPlaying = true) {\r\n        if (this.currentDialogueIndex >= this.dialogueLines.length) {\r\n            return false;\r\n        }\r\n        \r\n        const line = this.dialogueLines[this.currentDialogueIndex];\r\n        \r\n        // Play the appropriate dialogue WAV file\r\n        playDialogueWav(this.dialogueWavs, this.currentDialogueIndex, this.audioManager);\r\n        \r\n        this.currentDialogueIndex++;\r\n        \r\n        // Clear previous text\r\n        this.dialogueText.textContent = '';\r\n        \r\n        // Show dialogue box if not visible\r\n        if (this.dialogueBox.style.opacity === '0') {\r\n            this.dialogueBox.style.opacity = '1';\r\n        }\r\n        \r\n        // Type out text\r\n        let charIndex = 0;\r\n        this.isTyping = true;\r\n        \r\n        // Clear previous interval if exists\r\n        if (this.typeInterval) {\r\n            clearInterval(this.typeInterval);\r\n        }\r\n        \r\n        // Special effects for transmission terminated line\r\n        if (line.includes(\"TRANSMISSION TERMINATED\") || line.includes(\"DEPLOYMENT ACTIVE\")) {\r\n            this.dialogueText.style.color = '#ff3030';\r\n        } else {\r\n            this.dialogueText.style.color = '#30f0c0';\r\n        }\r\n        \r\n        // Type each character with random speed for effect\r\n        this.typeInterval = setInterval(() => {\r\n            if (charIndex < line.length) {\r\n                this.dialogueText.textContent += line.charAt(charIndex);\r\n                charIndex++;\r\n                \r\n                // Typing sound disabled - uiClick sound not available\r\n                // Could be re-enabled when proper UI sounds are added to the audio system\r\n            } else {\r\n                clearInterval(this.typeInterval);\r\n                this.typeInterval = null;\r\n                this.isTyping = false;\r\n                \r\n                // Automatically advance to next dialogue after a delay\r\n                // but only for certain progress points in the sequence\r\n                if (sequenceTime < 22) { // Don't auto advance during the very end\r\n                    const waitTime = Math.max(line.length * 50, 3000); // Longer lines stay longer\r\n                    setTimeout(() => {\r\n                        if (!this.isTyping && isPlaying) {\r\n                            this.typeNextDialogue(sequenceTime, isPlaying);\r\n                        }\r\n                    }, waitTime);\r\n                }\r\n            }\r\n        }, 30); // Base typing speed\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Get current dialogue index\r\n     * @returns {number} Current dialogue index\r\n     */\r\n    getCurrentDialogueIndex() {\r\n        return this.currentDialogueIndex;\r\n    }\r\n    \r\n    /**\r\n     * Check if currently typing\r\n     * @returns {boolean} True if typing animation is active\r\n     */\r\n    getIsTyping() {\r\n        return this.isTyping;\r\n    }\r\n    \r\n    /**\r\n     * Clean up dialogue system resources\r\n     */\r\n    cleanup() {\r\n        // Clear typing interval if running\r\n        if (this.typeInterval) {\r\n            clearInterval(this.typeInterval);\r\n            this.typeInterval = null;\r\n        }\r\n        \r\n        // Remove dialogue box if it exists\r\n        if (this.dialogueBox && this.dialogueBox.parentNode) {\r\n            this.dialogueBox.parentNode.removeChild(this.dialogueBox);\r\n            this.dialogueBox = null;\r\n            this.dialogueText = null;\r\n        }\r\n        \r\n        // Reset state\r\n        this.currentDialogueIndex = 0;\r\n        this.isTyping = false;\r\n    }\r\n}","// arrivalPhase.js - Manages the ship arrival phase of the intro sequence\r\n\r\nimport * as THREE from 'three';\r\n\r\n/**\r\n * Update the arrival phase animation (portal, ship arrival and player deployment)\r\n * @param {number} progress - Progress through arrival phase (0-1)\r\n * @param {Object} context - Context object containing all necessary references\r\n */\r\nexport function updateArrivalPhase(progress, context) {\r\n    const {\r\n        portalEffect,\r\n        starDreadnought,\r\n        camera,\r\n        spaceship,\r\n        introSounds,\r\n        flashOverlay\r\n    } = context;\r\n    \r\n    // Portal animation\r\n    portalEffect.updatePortalEffect();\r\n    \r\n    // Position portal outside the asteroid belt\r\n    portalEffect.setPosition(new THREE.Vector3(30000, 5000, 0));\r\n    portalEffect.setRotation(new THREE.Euler(0, 0, Math.PI/2));\r\n    \r\n    // PORTAL GROWTH phase (0-0.2)\r\n    if (progress < 0.2) {\r\n        // Grow portal\r\n        const portalProgress = progress / 0.2;\r\n        const portalScale = portalProgress * 3.5;\r\n        portalEffect.setScale(portalScale);\r\n        \r\n        // Medium-distance side view of portal formation\r\n        camera.position.set(0, 6000, 12000);\r\n        camera.lookAt(30000, 5000, 0); // Look at portal\r\n    }\r\n    \r\n    // SHIP EMERGENCE and JOURNEY phase (0.2-0.7)\r\n    if (progress >= 0.2 && progress < 0.7) {\r\n        // Make ship visible when it first emerges\r\n        if (progress >= 0.2 && !starDreadnought.ship.visible) {\r\n            starDreadnought.ship.visible = true;\r\n            flashOverlay(0.3);\r\n            \r\n            // Play arrival sound using Tone.js\r\n            if (introSounds.shipArrival) {\r\n                introSounds.shipArrival.play();\r\n            }\r\n        }\r\n        \r\n        // Smooth continuous movement along Bezier curve\r\n        const t = (progress - 0.2) / 0.5; // Normalized time for this phase\r\n        const easeInOut = t < 0.5 \r\n            ? 2 * t * t \r\n            : 1 - Math.pow(-2 * t + 2, 2) / 2;\r\n        \r\n        // Bezier curve control points for ship path\r\n        const start = new THREE.Vector3(30000, 5000, 0);        // Portal position\r\n        const control = new THREE.Vector3(26000, 5300, -2000);  // Control point for curve\r\n        const end = new THREE.Vector3(22000, 5000, 0);          // Final position above belt\r\n        \r\n        // Calculate position along quadratic Bezier curve\r\n        const p0 = new THREE.Vector3();\r\n        const p1 = new THREE.Vector3();\r\n        const p2 = new THREE.Vector3();\r\n        \r\n        p0.copy(start).multiplyScalar(Math.pow(1-easeInOut, 2));\r\n        p1.copy(control).multiplyScalar(2 * (1-easeInOut) * easeInOut);\r\n        p2.copy(end).multiplyScalar(easeInOut * easeInOut);\r\n        \r\n        const position = new THREE.Vector3()\r\n            .add(p0)\r\n            .add(p1)\r\n            .add(p2);\r\n        \r\n        // Add subtle vertical oscillation like a naval vessel\r\n        position.y += Math.sin(progress * Math.PI * 3) * 80;\r\n        \r\n        // Update ship position\r\n        starDreadnought.ship.position.copy(position);\r\n        \r\n        // Engine power during journey\r\n        const enginePower = 0.4 + easeInOut * 0.6;\r\n        starDreadnought.setEnginesPower(enginePower);\r\n        \r\n        // Fade out portal as ship moves away\r\n        if (progress > 0.3) {\r\n            const portalFade = Math.min((progress - 0.3) / 0.3, 1.0);\r\n            portalEffect.setOpacity(1 - portalFade);\r\n        }\r\n        \r\n        // Tracking shot alongside ship journey\r\n        const shipPos = starDreadnought.ship.position.clone();\r\n        camera.position.set(\r\n            shipPos.x - 3000, \r\n            shipPos.y + 1000, \r\n            8000\r\n        );\r\n        camera.lookAt(shipPos);\r\n    }\r\n    \r\n    // PLAYER DEPLOYMENT phase (0.7-1.0)\r\n    if (progress >= 0.7) {\r\n        // Ensure portal is fully invisible\r\n        portalEffect.setOpacity(0);\r\n        \r\n        // Activate teleport beam if not already active\r\n        if (progress < 0.75 && !starDreadnought.teleportBeamActive) {\r\n            starDreadnought.activateTeleportBeam();\r\n            \r\n            // Play teleport sound using Tone.js\r\n            if (introSounds.teleport) {\r\n                introSounds.teleport.play();\r\n            }\r\n        }\r\n        \r\n        // Update teleport beam\r\n        starDreadnought.updateTeleportBeam(progress);\r\n        \r\n        // Deploy player ship\r\n        if (progress > 0.8 && spaceship && !spaceship.mesh.visible) {\r\n            // Position player ship BELOW dreadnought but ABOVE the asteroid belt\r\n            const dreadPos = starDreadnought.ship.position;\r\n            spaceship.mesh.position.set(\r\n                dreadPos.x, \r\n                dreadPos.y - 2000, // 2000 units below dreadnought\r\n                dreadPos.z\r\n            );\r\n            \r\n            // Properly undock the ship - this is critical to update game state\r\n            if (spaceship.isDocked) {\r\n                console.log(\"Undocking player ship during intro sequence\");\r\n                spaceship.isDocked = false; // Force undock directly to avoid position reset\r\n                spaceship.mesh.visible = true;\r\n            } else {\r\n                spaceship.mesh.visible = true;\r\n            }\r\n            \r\n            // Store final player position\r\n            context.finalPlayerPosition = spaceship.mesh.position.clone();\r\n            \r\n            // Add shield effect to player ship\r\n            createPlayerShieldEffect(spaceship, context);\r\n            \r\n            // Flash effect for ship appearance\r\n            flashOverlay(0.3);\r\n        }\r\n        \r\n        // Teleport beam view camera\r\n        const shipPos = starDreadnought.ship.position.clone();\r\n        const t = (progress - 0.7) / 0.3;\r\n        camera.position.set(\r\n            shipPos.x - 2000 + t * 2000,\r\n            shipPos.y + 2000,\r\n            5000 - t * 3000\r\n        );\r\n        \r\n        // Look at midpoint between ship and deployed player\r\n        const lookY = shipPos.y - 1000;\r\n        camera.lookAt(shipPos.x, lookY, shipPos.z);\r\n    }\r\n}\r\n\r\n/**\r\n * Create shield effect around player ship\r\n * @param {Object} spaceship - Player spaceship object\r\n * @param {Object} context - Context object for storing shield effect reference\r\n */\r\nfunction createPlayerShieldEffect(spaceship, context) {\r\n    // Create a sphere slightly larger than the player ship\r\n    const geometry = new THREE.SphereGeometry(30, 32, 32);\r\n    const material = new THREE.MeshBasicMaterial({\r\n        color: 0x88ccff,\r\n        transparent: true, \r\n        opacity: 0.6,\r\n        side: THREE.DoubleSide\r\n    });\r\n    \r\n    context.playerShieldEffect = new THREE.Mesh(geometry, material);\r\n    context.playerShieldEffect.scale.set(1.2, 1.2, 1.2);\r\n    spaceship.mesh.add(context.playerShieldEffect);\r\n    \r\n    // Add pulsing animation\r\n    context.shieldPulseTime = 0;\r\n}","// departurePhase.js - Manages the ship departure phase of the intro sequence\r\n\r\nimport * as THREE from 'three';\r\n\r\n/**\r\n * Update the departure phase animation (ship rotation, portal reappearance, and departure)\r\n * @param {number} progress - Progress through departure phase (0-1)\r\n * @param {Object} context - Context object containing all necessary references\r\n */\r\nexport function updateDeparturePhase(progress, context) {\r\n    const {\r\n        portalEffect,\r\n        starDreadnought,\r\n        camera,\r\n        introSounds,\r\n        flashOverlay\r\n    } = context;\r\n    \r\n    // Simple departure sequence: rotate ship 180 degrees and go back through original portal\r\n    \r\n    // Original portal location\r\n    const portalPos = new THREE.Vector3(30000, 5000, 0);\r\n    \r\n    // FIRST HALF: Ship rotates and portal reappears (0-0.5)\r\n    if (progress < 0.5) {\r\n        // Turn off teleport beam at start\r\n        if (progress < 0.1 && starDreadnought.teleportBeamActive) {\r\n            starDreadnought.deactivateTeleportBeam();\r\n        }\r\n        \r\n        // Make portal visible again at original position\r\n        if (progress > 0.1) {\r\n            // Position portal back at original entry point\r\n            portalEffect.setPosition(portalPos);\r\n            portalEffect.setVisible(true);\r\n            portalEffect.setRotation(new THREE.Euler(0, 0, Math.PI/2)); // Original orientation\r\n            \r\n            // Portal should be at full size immediately\r\n            portalEffect.setScale(3.5);\r\n            \r\n            // Fade in portal\r\n            const portalProgress = Math.min((progress - 0.1) / 0.3, 1.0);\r\n            portalEffect.setOpacity(portalProgress);\r\n        }\r\n        \r\n        // Simple 180 degree rotation\r\n        if (progress > 0.2) {\r\n            const rotateProgress = Math.min((progress - 0.2) / 0.3, 1.0);\r\n            const startRot = Math.PI/2;  // Currently facing center\r\n            const endRot = 3 * Math.PI/2; // 180 degree rotation (facing back toward original portal)\r\n            starDreadnought.ship.rotation.y = startRot + (endRot - startRot) * rotateProgress;\r\n        }\r\n        \r\n        // Fixed camera position from the side to view the rotation\r\n        const shipPos = starDreadnought.ship.position.clone();\r\n        camera.position.set(\r\n            shipPos.x,\r\n            shipPos.y + 3000, // High-ish angle\r\n            shipPos.z + 8000  // Side view\r\n        );\r\n        camera.lookAt(shipPos);\r\n    }\r\n    \r\n    // SECOND HALF: Ship accelerates through original portal and disappears (0.5-1.0)\r\n    else {\r\n        // Calculate movement progress for this phase\r\n        const moveProgress = (progress - 0.5) / 0.5;\r\n        \r\n        // Ship position calculation - go back toward original portal\r\n        const startPos = new THREE.Vector3(22000, 5000, 0); // Ship's current position\r\n        const beyondPos = new THREE.Vector3(35000, 5000, 0); // Beyond portal\r\n        \r\n        // Simple acceleration curve\r\n        const easeIn = moveProgress * moveProgress; // Accelerating movement\r\n        \r\n        // Ship position calculation\r\n        let position;\r\n        if (moveProgress < 0.7) {\r\n            // Move to portal\r\n            const t = easeIn / 0.5; // Normalized and accelerated\r\n            position = new THREE.Vector3().lerpVectors(startPos, portalPos, t);\r\n        } else {\r\n            // Continue beyond portal\r\n            const t = (moveProgress - 0.7) / 0.3;\r\n            position = new THREE.Vector3().lerpVectors(portalPos, beyondPos, t);\r\n        }\r\n        \r\n        // Update ship position\r\n        starDreadnought.ship.position.copy(position);\r\n        \r\n        // Increase engine power for dramatic exit\r\n        starDreadnought.setEnginesPower(0.7 + moveProgress * 0.8);\r\n        \r\n        // Flash when ship enters portal\r\n        if (moveProgress > 0.6 && moveProgress < 0.63) {\r\n            flashOverlay(0.4);\r\n            \r\n            // Play warp sound for re-entry but only exactly once at 0.61\r\n            if (introSounds.warp && Math.abs(moveProgress - 0.61) < 0.01) {\r\n                introSounds.warp.play();\r\n            }\r\n        }\r\n        \r\n        // Hide ship after it enters portal\r\n        if (moveProgress > 0.65) {\r\n            starDreadnought.ship.visible = false;\r\n        }\r\n        \r\n        // Collapse portal at the very end\r\n        if (moveProgress > 0.9) {\r\n            const collapseProgress = (moveProgress - 0.9) / 0.1;\r\n            const collapseScale = (1 - collapseProgress) * 3.5;\r\n            portalEffect.setScale(collapseScale);\r\n        }\r\n        \r\n        // Static camera position showing ship's departure path\r\n        const shipPos = startPos.clone(); // Use initial position as reference\r\n        camera.position.set(\r\n            shipPos.x - 2000,\r\n            shipPos.y + 3000,\r\n            10000 // Side view\r\n        );\r\n        // Look at the midpoint of the departure path\r\n        const lookPos = new THREE.Vector3().lerpVectors(startPos, portalPos, 0.5);\r\n        camera.lookAt(lookPos);\r\n    }\r\n}","// introSequence.js - Manages the cinematic Star Dreadnought intro sequence\r\n\r\nimport * as THREE from 'three';\r\nimport { StarDreadnought } from './environment/starDreadnought.js';\r\nimport { createIntroSoundEffects } from './intro/audio/soundEffects.js';\r\nimport { loadDialogueWavs } from './intro/audio/dialogueManager.js';\r\nimport { PortalEffect } from './intro/effects/portalEffect.js';\r\nimport { DialogueSystem } from './intro/ui/dialogueSystem.js';\r\nimport { updateArrivalPhase } from './intro/animation/arrivalPhase.js';\r\nimport { updateDeparturePhase } from './intro/animation/departurePhase.js';\r\n\r\nexport class IntroSequence {\r\n    constructor(scene, camera, spaceship, audioManager) {\r\n        this.scene = scene;\r\n        this.camera = camera;\r\n        this.spaceship = spaceship;\r\n        this.audio = audioManager;\r\n        this.isPlaying = false;\r\n        this.sequenceTime = 0;\r\n        this.onComplete = null;\r\n        this.skipEnabled = false; // Only enable skip after first playthrough\r\n        \r\n        // Save initial camera position\r\n        this.initialCameraPosition = null;\r\n        this.initialCameraRotation = null;\r\n        \r\n        // Create StarDreadnought instance\r\n        this.starDreadnought = new StarDreadnought(scene);\r\n        \r\n        // Setup portal effect\r\n        this.portalEffect = new PortalEffect();\r\n        \r\n        // Overlay for flash effects\r\n        this.setupOverlay();\r\n        \r\n        // Setup dialogue system\r\n        this.dialogueSystem = new DialogueSystem();\r\n        \r\n        // Custom sound effects\r\n        this.introSounds = {};\r\n        \r\n        // Dialogue WAV files\r\n        this.dialogueWavs = [];\r\n        \r\n        \r\n        console.log(\"Intro sequence initialized\");\r\n        \r\n        // Load dialogue WAV files\r\n        this.dialogueWavs = loadDialogueWavs();\r\n        \r\n        // Create custom Tone.js sound effects\r\n        this.introSounds = createIntroSoundEffects(this.audio);\r\n        \r\n        // Initialize dialogue system\r\n        this.dialogueSystem.initialize(this.dialogueWavs, this.audio);\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    setupOverlay() {\r\n        // Create a DOM overlay for the flash effect\r\n        this.overlay = document.createElement('div');\r\n        this.overlay.id = 'intro-overlay';\r\n        this.overlay.style.position = 'fixed';\r\n        this.overlay.style.top = '0';\r\n        this.overlay.style.left = '0';\r\n        this.overlay.style.width = '100%';\r\n        this.overlay.style.height = '100%';\r\n        this.overlay.style.backgroundColor = '#aa33ff'; // Match portal color\r\n        this.overlay.style.opacity = '0';\r\n        this.overlay.style.transition = 'opacity 0.5s';\r\n        this.overlay.style.pointerEvents = 'none';\r\n        this.overlay.style.zIndex = '9999';\r\n        \r\n        // Add to DOM but hide initially\r\n        document.body.appendChild(this.overlay);\r\n    }\r\n    \r\n    startSequence(onComplete) {\r\n        if (this.isPlaying) return;\r\n        \r\n        console.log(\"Starting intro sequence...\");\r\n        this.isPlaying = true;\r\n        this.sequenceTime = 0;\r\n        this.onComplete = onComplete;\r\n        \r\n        // Store initial camera state to restore player camera after sequence\r\n        this.initialCameraPosition = this.camera.position.clone();\r\n        this.initialCameraRotation = this.camera.rotation.clone();\r\n        \r\n        // Position camera for initial view of portal forming\r\n        this.camera.position.set(0, 6000, 12000);\r\n        this.camera.lookAt(30000, 5000, 0); // Look at where portal will appear\r\n        \r\n        // Hide player ship during sequence\r\n        if (this.spaceship && this.spaceship.mesh) {\r\n            this.spaceship.mesh.visible = false;\r\n            \r\n            // Disable ship thrusters to prevent any movement\r\n            if (this.spaceship.thrust) {\r\n                this.spaceship.thrust.forward = false;\r\n                this.spaceship.thrust.backward = false;\r\n                this.spaceship.thrust.left = false;\r\n                this.spaceship.thrust.right = false;\r\n                this.spaceship.thrust.boost = false;\r\n            }\r\n            \r\n            // Make sure velocity is zero\r\n            if (this.spaceship.velocity) {\r\n                this.spaceship.velocity.set(0, 0, 0);\r\n            }\r\n        }\r\n        \r\n        // Add portal to scene\r\n        this.scene.add(this.portalEffect.getPortalGroup());\r\n        \r\n        // Position the star dreadnought initially outside the scene\r\n        this.starDreadnought.ship.position.set(35000, 5000, 0); // Off-screen\r\n        this.starDreadnought.ship.rotation.y = Math.PI/2; // Face toward center\r\n        this.starDreadnought.ship.visible = false;\r\n        \r\n        // Start sequence animation\r\n        this.animate = this.animate.bind(this);\r\n        this.lastTime = performance.now();\r\n        requestAnimationFrame(this.animate);\r\n        \r\n        // Setup skip functionality\r\n        this.setupSkipHandler();\r\n        \r\n        // Setup dialogue UI\r\n        this.dialogueSystem.setupDialogueUI();\r\n        \r\n        // Start first dialogue line\r\n        setTimeout(() => {\r\n            this.dialogueSystem.typeNextDialogue(this.sequenceTime, this.isPlaying);\r\n        }, 2000);\r\n        \r\n        // Play warp sound\r\n        if (this.introSounds.warp) {\r\n            this.introSounds.warp.play();\r\n        }\r\n    }\r\n    \r\n    animate(currentTime) {\r\n        if (!this.isPlaying) return;\r\n        \r\n        // Slower pace for more sublime experience\r\n        const deltaTime = Math.min((currentTime - this.lastTime) / 1000, 0.1) * 0.4; // 60% slower\r\n        this.lastTime = currentTime;\r\n        \r\n        // Update sequence timer\r\n        this.sequenceTime += deltaTime;\r\n        \r\n        // Just TWO phases - arrival and departure\r\n        if (this.sequenceTime < 14.0) {\r\n            // Phase 1: Portal, ship arrival and player deployment (0-14s)\r\n            const context = this.createAnimationContext();\r\n            updateArrivalPhase(this.sequenceTime / 14.0, context);\r\n        } else if (this.sequenceTime < 24.0) {\r\n            // Phase 2: Ship departure (14-24s)\r\n            const context = this.createAnimationContext();\r\n            updateDeparturePhase((this.sequenceTime - 14.0) / 10.0, context);\r\n        } else {\r\n            // Sequence complete\r\n            this.completeSequence();\r\n            return;\r\n        }\r\n        \r\n        requestAnimationFrame(this.animate);\r\n    }\r\n    \r\n    /**\r\n     * Create context object for animation phases\r\n     * @returns {Object} Context containing all necessary references\r\n     */\r\n    createAnimationContext() {\r\n        return {\r\n            portalEffect: this.portalEffect,\r\n            starDreadnought: this.starDreadnought,\r\n            camera: this.camera,\r\n            spaceship: this.spaceship,\r\n            introSounds: this.introSounds,\r\n            flashOverlay: this.flashOverlay.bind(this),\r\n            finalPlayerPosition: this.finalPlayerPosition,\r\n            playerShieldEffect: this.playerShieldEffect,\r\n            shieldPulseTime: this.shieldPulseTime\r\n        };\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    flashOverlay(maxOpacity = 0.6) {\r\n        if (!this.overlay) return;\r\n        \r\n        // Flash overlay effect\r\n        this.overlay.style.opacity = maxOpacity.toString();\r\n        \r\n        // Fade out after flash\r\n        setTimeout(() => {\r\n            this.overlay.style.opacity = '0';\r\n        }, 300);\r\n    }\r\n    \r\n    setupSkipHandler() {\r\n        // Add skip button\r\n        const skipButton = document.createElement('div');\r\n        skipButton.id = 'skip-intro-button';\r\n        skipButton.textContent = 'SKIP INTRO';\r\n        skipButton.style.position = 'fixed';\r\n        skipButton.style.bottom = '10px';\r\n        skipButton.style.left = '50%';\r\n        skipButton.style.transform = 'translateX(-50%)';\r\n        skipButton.style.padding = '10px 15px';\r\n        skipButton.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\r\n        skipButton.style.color = '#30f0c0';\r\n        skipButton.style.border = '1px solid #30f0c0';\r\n        skipButton.style.borderRadius = '5px';\r\n        skipButton.style.cursor = 'pointer';\r\n        skipButton.style.zIndex = '10000';\r\n        skipButton.style.fontFamily = 'Courier New, monospace';\r\n        skipButton.style.boxShadow = '0 0 10px rgba(48, 240, 192, 0.3)';\r\n        \r\n        skipButton.addEventListener('click', () => {\r\n            this.skipSequence();\r\n        });\r\n        \r\n        document.body.appendChild(skipButton);\r\n        this.skipButton = skipButton;\r\n    }\r\n    \r\n    skipSequence() {\r\n        console.log(\"Skipping intro sequence\");\r\n        \r\n        // Position ship exactly where the intro would have positioned it\r\n        if (this.spaceship && this.spaceship.mesh) {\r\n            // Position where the dreadnought would have deployed the ship\r\n            // Dreadnought ends at (22000, 5000, 0), ship is 2000 units below\r\n            this.spaceship.mesh.position.set(22000, 3000, 0);\r\n            this.spaceship.mesh.rotation.set(0, 0, 0);\r\n            \r\n            // Make sure ship is NOT docked\r\n            this.spaceship.isDocked = false;\r\n            this.spaceship.mesh.visible = true;\r\n            \r\n            // Ensure ship has proper health and fuel values\r\n            if (this.spaceship.hull <= 0) {\r\n                console.log(\"Fixing spaceship hull from\", this.spaceship.hull, \"to 100\");\r\n                this.spaceship.hull = 100;\r\n            }\r\n            if (this.spaceship.shield <= 0) {\r\n                console.log(\"Fixing spaceship shield from\", this.spaceship.shield, \"to 50\");\r\n                this.spaceship.shield = 50;\r\n            }\r\n            if (this.spaceship.fuel <= 0) {\r\n                console.log(\"Fixing spaceship fuel from\", this.spaceship.fuel, \"to 100\");\r\n                this.spaceship.fuel = 100;\r\n            }\r\n        }\r\n        \r\n        // End the sequence immediately\r\n        this.completeSequence();\r\n        \r\n        // Don't show stargate UI - player should be in space after skipping\r\n        // Just ensure the ship is properly set to undocked state\r\n        if (window.gameInstance && window.gameInstance.spaceship) {\r\n            window.gameInstance.spaceship.isDocked = false;\r\n            console.log(\"Ship set to undocked state after skip\");\r\n            \r\n            // Double-check health values on the global instance too\r\n            if (window.gameInstance.spaceship.hull <= 0) {\r\n                console.log(\"Fixing global spaceship hull to 100\");\r\n                window.gameInstance.spaceship.hull = 100;\r\n            }\r\n            if (window.gameInstance.spaceship.fuel <= 0) {\r\n                console.log(\"Fixing global spaceship fuel to 100\");\r\n                window.gameInstance.spaceship.fuel = 100;\r\n            }\r\n        }\r\n    }\r\n    \r\n    completeSequence() {\r\n        console.log(\"Intro sequence complete\");\r\n        this.isPlaying = false;\r\n        \r\n        // Remove warp tunnel from scene\r\n        this.scene.remove(this.portalEffect.getPortalGroup());\r\n        \r\n        // Hide dreadnought\r\n        this.starDreadnought.ship.visible = false;\r\n        \r\n        // Enable skip button for next time\r\n        this.skipEnabled = true;\r\n        \r\n        // Remove shield effect from player\r\n        if (this.playerShieldEffect) {\r\n            this.spaceship.mesh.remove(this.playerShieldEffect);\r\n            this.playerShieldEffect = null;\r\n        }\r\n        \r\n        // Remove skip button if it exists\r\n        if (this.skipButton) {\r\n            document.body.removeChild(this.skipButton);\r\n            this.skipButton = null;\r\n        }\r\n        \r\n        // Remove overlay from DOM completely\r\n        if (this.overlay) {\r\n            document.body.removeChild(this.overlay);\r\n            this.overlay = null;\r\n        }\r\n        \r\n        // Clean up dialogue system\r\n        this.dialogueSystem.cleanup();\r\n        \r\n        // Make sure player ship is visible but DO NOT reset position\r\n        if (this.spaceship && this.spaceship.mesh) {\r\n            this.spaceship.mesh.visible = true;\r\n            \r\n            // IMPORTANT: Make sure ship is properly undocked\r\n            if (this.spaceship.isDocked) {\r\n                console.log(\"Forcing ship to undocked state after intro sequence\");\r\n                this.spaceship.isDocked = false;\r\n            }\r\n            \r\n            // Log the final player position for debugging\r\n            console.log(\"Player final position:\", \r\n                this.spaceship.mesh.position.x, \r\n                this.spaceship.mesh.position.y, \r\n                this.spaceship.mesh.position.z\r\n            );\r\n        }\r\n        \r\n        // Call completion callback if provided\r\n        if (this.onComplete && typeof this.onComplete === 'function') {\r\n            // Use setTimeout to make sure this executes after the animation frame\r\n            setTimeout(() => {\r\n                console.log(\"Executing intro sequence completion callback\");\r\n                this.onComplete();\r\n            }, 100);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clean up resources when intro sequence is no longer needed\r\n     */\r\n    destroy() {\r\n        // Cancel animation frame if running\r\n        if (this.animationFrameId) {\r\n            cancelAnimationFrame(this.animationFrameId);\r\n            this.animationFrameId = null;\r\n        }\r\n        \r\n        // Clean up dialogue system\r\n        this.dialogueSystem.cleanup();\r\n        \r\n        if (this.overlay && this.overlay.parentNode) {\r\n            this.overlay.parentNode.removeChild(this.overlay);\r\n        }\r\n        \r\n        // Remove skip handler\r\n        document.removeEventListener('keydown', this.skipHandler);\r\n        \r\n        // Clean up portal effect\r\n        if (this.portalEffect) {\r\n            this.portalEffect.dispose();\r\n        }\r\n        \r\n        // Dispose of star dreadnought resources\r\n        if (this.starDreadnought && typeof this.starDreadnought.destroy === 'function') {\r\n            this.starDreadnought.destroy();\r\n        }\r\n        \r\n        // Dispose of Tone.js sound effects\r\n        if (this.introSounds) {\r\n            Object.values(this.introSounds).forEach(sound => {\r\n                if (sound.dispose && typeof sound.dispose === 'function') {\r\n                    sound.dispose();\r\n                }\r\n            });\r\n            this.introSounds = {};\r\n        }\r\n        \r\n        // Clear references to help GC\r\n        this.scene = null;\r\n        this.camera = null;\r\n        this.spaceship = null;\r\n        this.audio = null;\r\n        this.starDreadnought = null;\r\n        this.portalEffect = null;\r\n        this.dialogueSystem = null;\r\n        this.dialogueWavs = [];\r\n    }\r\n} ","// startupSequence.js - Asset preloads and intro flow management\r\n\r\nimport { IntroSequence } from '../modules/introSequence.js';\r\n\r\nexport class StartupSequence {\r\n    constructor(game) {\r\n        this.game = game;\r\n        this.introSequence = null;\r\n        this.introSequenceActive = false;\r\n    }\r\n    \r\n    // Initialize game in sequence, showing start screen first and loading non-essentials after\r\n    async initializeGameSequence() {\r\n        try {\r\n            \r\n            // Add a small delay to let browser stabilize after page load\r\n            await new Promise(resolve => setTimeout(resolve, 100));\r\n            \r\n            // Resume audio context if needed (browser autoplay policy)\r\n            if (this.game.audio && this.game.audio.audioContext && this.game.audio.audioContext.state === 'suspended') {\r\n                try {\r\n                    this.game.audio.resumeAudioContext();\r\n                } catch (e) {\r\n                }\r\n            }\r\n            \r\n            // Show the start screen immediately\r\n            if (this.game.ui && this.game.ui.startScreen) {\r\n                this.game.ui.startScreen.show();\r\n            } else {\r\n                this.fallbackToDefaultBehavior();\r\n            }\r\n            \r\n            // Start game loop with warm-up frames\r\n            requestAnimationFrame(this.game.boundAnimate);\r\n            \r\n            // Initialize remaining systems in the background after start screen is shown\r\n            this.initializeRemainingSystemsAsync();\r\n            \r\n        } catch (error) {\r\n            \r\n            // Show error in UI if possible\r\n            if (this.game.ui && this.game.ui.showError) {\r\n                this.game.ui.showError(\"Failed to initialize game: \" + error.message);\r\n            } else {\r\n                alert(\"Failed to initialize game: \" + error.message);\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Initialize remaining systems asynchronously after showing the start screen\r\n    async initializeRemainingSystemsAsync() {\r\n        try {\r\n            // Start loading audio in the background\r\n            this.loadAudioAsync();\r\n            \r\n            // Initialize combat systems asynchronously\r\n            if (!this.game.combat) {\r\n                const { Combat } = await import('../modules/combat.js');\r\n                this.game.combat = new Combat(this.game.scene, this.game.spaceship);\r\n                \r\n                // Ensure the ECS world in combat is properly initialized\r\n                if (this.game.combat.world) {\r\n                } else {\r\n                    // Add a check to ensure the player entity exists\r\n                    setTimeout(() => {\r\n                        if (this.game.combat.world && this.game.combat.playerEntity) {\r\n                        } else {\r\n                            console.warn(\"Combat ECS world or player entity not available after delay, recreating...\");\r\n                            if (this.game.combat.createPlayerReferenceEntity) {\r\n                                this.game.combat.createPlayerReferenceEntity();\r\n                            }\r\n                        }\r\n                    }, 1000);\r\n                }\r\n            }\r\n            \r\n            // Initialize common object pools after start screen is shown\r\n            setTimeout(() => {\r\n                this.game.initializeObjectPools();\r\n                \r\n                // Pre-warm essential shaders and projectile assets after start screen is shown\r\n                this.game.preWarmBasicShaders();\r\n            }, 100);\r\n        } catch (error) {\r\n        }\r\n    }\r\n    \r\n    // Load audio asynchronously after showing the start screen\r\n    async loadAudioAsync() {\r\n        try {\r\n            if (this.game.audio) {\r\n                // Initialize audio in the background\r\n                this.game.audio.initialize().then(() => {\r\n                }).catch(error => {\r\n                });\r\n            }\r\n        } catch (error) {\r\n        }\r\n    }\r\n    \r\n    fallbackToDefaultBehavior() {\r\n        // Start the game immediately with default settings\r\n        this.game.startDocked();\r\n    }\r\n    \r\n    initIntroSequence() {\r\n        // Initialize the intro sequence module\r\n        this.introSequence = new IntroSequence(\r\n            this.game.scene,\r\n            this.game.camera,\r\n            this.game.spaceship,\r\n            this.game.audio  // Pass audio manager as 4th parameter\r\n        );\r\n        \r\n        // Set the completion callback\r\n        this.introSequence.onComplete = () => {\r\n            this.completeIntroSequence();\r\n        };\r\n    }\r\n    \r\n    startIntroSequence() {\r\n        if (!this.introSequence) {\r\n            this.initIntroSequence();\r\n        }\r\n        \r\n        this.introSequenceActive = true;\r\n        this.game.introSequenceActive = true;\r\n        \r\n        // Disable all enemies during intro sequence\r\n        if (this.game.combat && this.game.combat.world && this.game.combat.world.enemySystem) {\r\n            this.game.combat.world.enemySystem.freezeAllEnemies();\r\n        }\r\n        \r\n        // Hide UI elements during intro\r\n        if (this.game.ui && this.game.ui.combatDisplay) {\r\n            this.game.ui.combatDisplay.hide();\r\n        }\r\n        \r\n        // Player controls are automatically disabled during intro via introSequenceActive flag\r\n        // The InputHandler checks window.game.introSequenceActive\r\n        \r\n        // Hide the stargate UI immediately when intro starts\r\n        if (this.game.ui && this.game.ui.stargateInterface) {\r\n            this.game.ui.stargateInterface.hide();\r\n        }\r\n        \r\n        // Also hide the entire UI during intro\r\n        if (this.game.ui) {\r\n            this.game.ui.hideUI();\r\n        }\r\n        \r\n        // Position spaceship for intro\r\n        if (this.game.spaceship && this.game.spaceship.mesh) {\r\n            this.game.spaceship.mesh.position.set(0, 0, 50);\r\n            this.game.spaceship.mesh.rotation.set(0, 0, 0);\r\n        }\r\n        \r\n        // Start the intro sequence\r\n        this.introSequence.startSequence(() => {\r\n            this.completeIntroSequence();\r\n        });\r\n    }\r\n    \r\n    completeIntroSequence() {\r\n        this.introSequenceActive = false;\r\n        this.game.introSequenceActive = false;\r\n        \r\n        // Mark intro as played so it doesn't play again\r\n        localStorage.setItem('introPlayed', 'true');\r\n        \r\n        // Re-enable enemies after intro\r\n        if (this.game.combat && this.game.combat.world && this.game.combat.world.enemySystem) {\r\n            this.game.combat.world.enemySystem.unfreezeAllEnemies();\r\n        }\r\n        \r\n        // Ensure stargate UI is hidden after intro\r\n        if (this.game.ui && this.game.ui.stargateInterface) {\r\n            this.game.ui.stargateInterface.hide();\r\n        }\r\n        \r\n        // Start game based on whether player wants to be docked or not\r\n        // Always start undocked after intro\r\n        if (this.game.ui) {\r\n            this.game.ui.showUI();\r\n        }\r\n        \r\n        // After intro, player should stay where they were deployed\r\n        // Only ensure the spaceship is undocked, don't reset position\r\n        if (this.game.spaceship) {\r\n            // Make sure spaceship is undocked\r\n            if (this.game.spaceship.isDocked) {\r\n                this.game.spaceship.undock();\r\n            }\r\n            // Log current position for debugging\r\n            if (this.game.spaceship.mesh) {\r\n                console.log(\"Player position after intro:\", \r\n                    this.game.spaceship.mesh.position.x,\r\n                    this.game.spaceship.mesh.position.y,\r\n                    this.game.spaceship.mesh.position.z\r\n                );\r\n            }\r\n        }\r\n        \r\n        // Player controls are automatically re-enabled when introSequenceActive is set to false\r\n        // The InputHandler checks window.game.introSequenceActive\r\n        \r\n        // Show combat display after intro\r\n        if (this.game.ui && this.game.ui.combatDisplay) {\r\n            this.game.ui.combatDisplay.show();\r\n        }\r\n        \r\n        // Emit event for other systems\r\n        if (window.mainMessageBus) {\r\n            window.mainMessageBus.publish('intro.completed', {});\r\n        }\r\n        \r\n    }\r\n}","// gameLoop.js - Ticking and requestAnimationFrame wiring\r\n\r\nexport class GameLoop {\r\n    constructor(game) {\r\n        this.game = game;\r\n        \r\n        // Frame rate cap (defaults to auto/monitor refresh rate)\r\n        this.frameRateCap = 0; // Will be updated by settings or refresh rate detection\r\n        this.warmupFrames = 10; // Number of frames to skip for timing stabilization\r\n        this.currentWarmupFrame = 0;\r\n        this.performanceStable = false;\r\n        \r\n        // Time tracking for frame rate cap and FPS calculation\r\n        this.lastFrameTime = 0;\r\n        this.actualFrameTime = 0;\r\n        this.frameStartTime = 0;\r\n        this.accumulator = 0;\r\n        this.fixedDeltaTime = 1/60; // Fixed 60 Hz update rate\r\n        \r\n        // FPS averaging for smoother display\r\n        this.fpsBuffer = [];\r\n        this.fpsBufferSize = 15; // Smaller buffer for more responsive updates\r\n        \r\n        // Pre-bind animate method to avoid creating a new function every frame\r\n        this.boundAnimate = this.animate.bind(this);\r\n        \r\n        // Reusable deltaTime variable to avoid creating new variables in hot path\r\n        this.deltaTime = 0;\r\n        \r\n        // Performance tracking\r\n        this.lastUpdateTime = performance.now();\r\n        this.frameCount = 0;\r\n        this.currentFPS = 0;\r\n    }\r\n    \r\n    start() {\r\n        requestAnimationFrame(this.boundAnimate);\r\n    }\r\n    \r\n    animate(timestamp) {\r\n        // Handle warm-up frames for timing stabilization\r\n        if (this.currentWarmupFrame < this.warmupFrames) {\r\n            this.currentWarmupFrame++;\r\n            \r\n            // Initialize timing on first real frame after warm-up\r\n            if (this.currentWarmupFrame === this.warmupFrames) {\r\n                this.lastFrameTime = timestamp;\r\n                this.frameStartTime = performance.now();\r\n                this.lastUpdateTime = performance.now();\r\n                this.performanceStable = true;\r\n            }\r\n            \r\n            // Continue warm-up\r\n            requestAnimationFrame(this.boundAnimate);\r\n            return;\r\n        }\r\n        \r\n        // Initialize frame timing if needed (fallback)\r\n        if (!this.lastFrameTime) {\r\n            this.lastFrameTime = timestamp;\r\n            this.frameStartTime = performance.now();\r\n            // Request next frame and return\r\n            requestAnimationFrame(this.boundAnimate);\r\n            return; // Skip first frame to establish baseline\r\n        }\r\n        \r\n        // Track actual frame time for FPS calculation\r\n        this.actualFrameTime = timestamp - this.lastFrameTime;\r\n        \r\n        // Frame rate cap handling\r\n        if (this.frameRateCap > 0) {\r\n            // Calculate target frame duration in milliseconds\r\n            const targetFrameTime = 1000 / this.frameRateCap;\r\n            \r\n            // Calculate elapsed time since last rendered frame\r\n            const elapsedSinceLastFrame = timestamp - this.lastFrameTime;\r\n            \r\n            // If we haven't reached the target frame time yet, skip this frame\r\n            if (elapsedSinceLastFrame < targetFrameTime - 0.5) { // Subtract small amount to account for timing imprecision\r\n                // Request next frame and return early\r\n                requestAnimationFrame(this.boundAnimate);\r\n                return;\r\n            }\r\n            \r\n            // Update timing for next frame - use the exact target time\r\n            // This helps maintain a more consistent frame rate\r\n            this.lastFrameTime += targetFrameTime;\r\n            \r\n            // If we're more than one frame behind, catch up to avoid spiraling\r\n            if (timestamp - this.lastFrameTime > targetFrameTime) {\r\n                this.lastFrameTime = timestamp - targetFrameTime;\r\n            }\r\n        } else {\r\n            // No frame rate cap - update normally\r\n            this.lastFrameTime = timestamp;\r\n        }\r\n        \r\n        // Calculate delta time for this frame - prevent huge deltas\r\n        const now = performance.now();\r\n        const rawDelta = Math.min((now - this.lastUpdateTime) / 1000, 0.1); // Cap at 100ms to prevent explosion on tab switch\r\n        this.lastUpdateTime = now;\r\n        \r\n        // Update accumulator for fixed timestep\r\n        this.accumulator += rawDelta;\r\n        \r\n        // Perform fixed timestep updates\r\n        // This keeps physics and gameplay consistent regardless of frame rate\r\n        while (this.accumulator >= this.fixedDeltaTime) {\r\n            // Use fixed delta for deterministic updates\r\n            this.deltaTime = this.fixedDeltaTime;\r\n            \r\n            // Store game time before update\r\n            this.game.gameTime += this.deltaTime;\r\n            \r\n            // Update all game systems\r\n            this.game.update(this.deltaTime);\r\n            \r\n            this.accumulator -= this.fixedDeltaTime;\r\n        }\r\n        \r\n        // Interpolation factor for rendering (unused for now, but useful for smooth rendering)\r\n        // const alpha = this.accumulator / this.fixedDeltaTime;\r\n        \r\n        // Render the frame\r\n        if (this.game.renderer && this.game.renderer.render) {\r\n            this.game.renderer.render();\r\n        }\r\n        \r\n        // Update FPS calculation\r\n        this.updateFPS();\r\n        \r\n        // Request next frame\r\n        requestAnimationFrame(this.boundAnimate);\r\n    }\r\n    \r\n    updateFPS() {\r\n        const now = performance.now();\r\n        const instantFPS = this.actualFrameTime ? 1000 / this.actualFrameTime : 60;\r\n        \r\n        // Add to FPS buffer with weighted preference to more recent readings\r\n        // This helps the FPS display stabilize faster when frame rate changes\r\n        this.fpsBuffer.push(instantFPS);\r\n        if (this.fpsBuffer.length > this.fpsBufferSize) {\r\n            this.fpsBuffer.shift(); // Remove oldest value\r\n        }\r\n        \r\n        // Use weighted average to more accurately represent current FPS\r\n        // Gives more importance to recent frames\r\n        let totalWeight = 0;\r\n        let weightedSum = 0;\r\n        \r\n        for (let i = 0; i < this.fpsBuffer.length; i++) {\r\n            // Weight increases linearly with frame index (newer frames get higher weight)\r\n            const weight = i + 1;\r\n            weightedSum += this.fpsBuffer[i] * weight;\r\n            totalWeight += weight;\r\n        }\r\n        \r\n        // Calculate weighted average for smoother display\r\n        this.currentFPS = Math.round(weightedSum / totalWeight);\r\n        \r\n        // Only update FPS display every few frames to reduce DOM operations\r\n        if (this.frameCount % 5 === 0 && this.game.ui && this.game.ui.updateFPS) {\r\n            // If capped, show cap information along with actual FPS\r\n            if (this.frameRateCap > 0) {\r\n                this.game.ui.updateFPS(this.currentFPS, this.frameRateCap);\r\n            } else {\r\n                this.game.ui.updateFPS(this.currentFPS);\r\n            }\r\n        }\r\n        \r\n        // Count frames for performance monitoring\r\n        this.frameCount++;\r\n    }\r\n    \r\n    setFrameRateCap(cap) {\r\n        this.frameRateCap = cap;\r\n    }\r\n    \r\n    applyFrameRateSettings() {\r\n        // Apply frame rate settings from UI\r\n        if (this.game.ui && this.game.ui.settings) {\r\n            const frameRateSetting = this.game.ui.settings.getFrameRateCap ? \r\n                                   this.game.ui.settings.getFrameRateCap() : 0;\r\n            \r\n            if (frameRateSetting === 'auto' || frameRateSetting === 0) {\r\n                // Auto-detect based on refresh rate\r\n                this.setFrameRateCap(0); // Unlimited for now\r\n                \r\n                // Try to detect monitor refresh rate\r\n                this.detectRefreshRate().then(rate => {\r\n                    if (rate && rate > 0) {\r\n                        this.setFrameRateCap(rate);\r\n                    }\r\n                });\r\n            } else {\r\n                // Use manual setting\r\n                this.setFrameRateCap(parseInt(frameRateSetting));\r\n            }\r\n        }\r\n    }\r\n    \r\n    async detectRefreshRate() {\r\n        // Try to detect the monitor's refresh rate\r\n        // This is a simple heuristic that measures frame timing\r\n        return new Promise((resolve) => {\r\n            let frames = 0;\r\n            let startTime = 0;\r\n            const samples = [];\r\n            \r\n            const measure = (timestamp) => {\r\n                if (frames === 0) {\r\n                    startTime = timestamp;\r\n                } else if (frames > 10 && frames <= 70) {\r\n                    // Collect samples after warm-up\r\n                    const delta = timestamp - startTime;\r\n                    samples.push(delta);\r\n                    startTime = timestamp;\r\n                }\r\n                \r\n                frames++;\r\n                \r\n                if (frames < 80) {\r\n                    requestAnimationFrame(measure);\r\n                } else {\r\n                    // Calculate average frame time\r\n                    if (samples.length > 0) {\r\n                        const avgFrameTime = samples.reduce((a, b) => a + b, 0) / samples.length;\r\n                        const detectedRate = Math.round(1000 / avgFrameTime);\r\n                        \r\n                        // Round to common refresh rates\r\n                        const commonRates = [30, 60, 75, 90, 120, 144, 165, 240, 360];\r\n                        let closestRate = 60;\r\n                        let minDiff = Math.abs(detectedRate - 60);\r\n                        \r\n                        for (const rate of commonRates) {\r\n                            const diff = Math.abs(detectedRate - rate);\r\n                            if (diff < minDiff) {\r\n                                minDiff = diff;\r\n                                closestRate = rate;\r\n                            }\r\n                        }\r\n                        \r\n                        // Only use detected rate if we're confident\r\n                        if (minDiff < 5) {\r\n                            resolve(closestRate);\r\n                        } else {\r\n                            resolve(0); // Fallback to unlimited\r\n                        }\r\n                    } else {\r\n                        resolve(0);\r\n                    }\r\n                }\r\n            };\r\n            \r\n            requestAnimationFrame(measure);\r\n        });\r\n    }\r\n    \r\n    destroy() {\r\n        // Cancel animation frame\r\n        if (this.boundAnimate) {\r\n            cancelAnimationFrame(this.boundAnimate);\r\n            this.boundAnimate = null;\r\n        }\r\n    }\r\n}","// perfOverlay.js - Minimal scaffold for performance overlay toggle (F3)\r\n// Feature flag default ON per V07_TIGHTENING\r\n\r\nconst FEATURE_FLAG = true; // V07_TIGHTENING default ON\r\n\r\nexport class PerfOverlay {\r\n  constructor() {\r\n    // Global perf sink\r\n    if (!window.__perf) {\r\n      window.__perf = {\r\n        enabled: false,\r\n        fps: 0,\r\n        simMs: 0,\r\n        renderMs: 0,\r\n        drawCalls: 0,\r\n        visibleInstances: 0,\r\n        pools: { hits: 0, misses: 0 },\r\n        gc: 0,\r\n        systems: {},\r\n      };\r\n    }\r\n\r\n    this.panel = null;\r\n    this.lastUpdate = 0;\r\n    this.updateHzMs = 500; // ~2Hz\r\n\r\n    // optional GC observer (best-effort)\r\n    try {\r\n      if ('PerformanceObserver' in window && performance && performance.observe) {\r\n        // no-op, older API; fallback below\r\n      }\r\n      if ('PerformanceObserver' in window) {\r\n        const obs = new PerformanceObserver((list) => {\r\n          for (const entry of list.getEntries()) {\r\n            if (entry.entryType === 'gc') {\r\n              if (!window.__perf.gc) window.__perf.gc = 0;\r\n              window.__perf.gc += 1;\r\n            }\r\n          }\r\n        });\r\n        obs.observe({ entryTypes: ['gc'] });\r\n        this._gcObserver = obs;\r\n      }\r\n    } catch {}\r\n\r\n    if (FEATURE_FLAG) {\r\n      // Hook F3 toggle\r\n      document.addEventListener('keydown', (e) => {\r\n        if (e.key === 'F3') {\r\n          this.toggle();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  toggle() {\r\n    window.__perf.enabled = !window.__perf.enabled;\r\n    if (window.__perf.enabled) {\r\n      this.ensurePanel();\r\n      this.renderOnce();\r\n    } else {\r\n      this.destroy();\r\n    }\r\n  }\r\n\r\n  ensurePanel() {\r\n    if (this.panel) return;\r\n    const el = document.createElement('div');\r\n    el.id = 'perf-overlay';\r\n    el.style.position = 'fixed';\r\n    el.style.top = '8px';\r\n    el.style.right = '8px';\r\n    el.style.minWidth = '220px';\r\n    el.style.maxWidth = '320px';\r\n    el.style.background = 'rgba(0,0,0,0.6)';\r\n    el.style.color = '#9ef7ff';\r\n    el.style.fontFamily = 'monospace';\r\n    el.style.fontSize = '12px';\r\n    el.style.lineHeight = '1.4';\r\n    el.style.padding = '8px 10px';\r\n    el.style.border = '1px solid rgba(158,247,255,0.3)';\r\n    el.style.borderRadius = '6px';\r\n    el.style.zIndex = '99999';\r\n    el.style.pointerEvents = 'none';\r\n    el.innerHTML = this.renderContent();\r\n    document.body.appendChild(el);\r\n    this.panel = el;\r\n\r\n    // Start a lightweight interval to update ~2Hz\r\n    this.interval = setInterval(() => this.renderOnce(), this.updateHzMs);\r\n  }\r\n\r\n  renderOnce() {\r\n    if (!this.panel) return;\r\n    this.panel.innerHTML = this.renderContent();\r\n  }\r\n\r\n  renderContent() {\r\n    const p = window.__perf;\r\n    const systems = p.systems ? Object.entries(p.systems).slice(0, 8) : [];\r\n    const sysHtml = systems.map(([k,v]) => `<div>${k}: ${Number(v).toFixed(2)} ms</div>`).join('');\r\n    return (\r\n      `<div style=\\\"opacity:.85\\\">` +\r\n      `<div><b>Perf Overlay</b> (F3)</div>` +\r\n      `<div>FPS: ${Math.round(p.fps || 0)}</div>` +\r\n      `<div>Sim: ${Number(p.simMs || 0).toFixed(2)} ms</div>` +\r\n      `<div>Render: ${Number(p.renderMs || 0).toFixed(2)} ms</div>` +\r\n      `<div>DrawCalls: ${p.drawCalls || 0}</div>` +\r\n      `<div>Instances: ${p.visibleInstances || 0}</div>` +\r\n      `<div>Pool hits/misses: ${(p.pools?.hits||0)} / ${(p.pools?.misses||0)}</div>` +\r\n      `<div>GC: ${p.gc || 0}</div>` +\r\n      `<div style=\\\"margin-top:6px; border-top:1px solid rgba(158,247,255,.2)\\\">` +\r\n      `<div><b>Systems</b></div>` + sysHtml +\r\n      `</div>` +\r\n      `</div>`\r\n    );\r\n  }\r\n\r\n  destroy() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval);\r\n      this.interval = null;\r\n    }\r\n    if (this._gcObserver && this._gcObserver.disconnect) {\r\n      this._gcObserver.disconnect();\r\n      this._gcObserver = null;\r\n    }\r\n    if (this.panel && this.panel.parentNode) {\r\n      this.panel.parentNode.removeChild(this.panel);\r\n    }\r\n    this.panel = null;\r\n  }\r\n}\r\n\r\nexport function initPerfOverlay() {\r\n  // Create once, attach to window for future hooks\r\n  if (!window.__perfOverlay) {\r\n    window.__perfOverlay = new PerfOverlay();\r\n  }\r\n  return window.__perfOverlay;\r\n}\r\n\r\n\r\n","// diagnostics.js - Performance overlay and debug toggles\r\n\r\nimport { initPerfOverlay } from '../modules/debug/perfOverlay.js';\r\n\r\nexport class Diagnostics {\r\n    constructor(game) {\r\n        this.game = game;\r\n        this.setupDiagnostics();\r\n    }\r\n    \r\n    setupDiagnostics() {\r\n        // Perf overlay & sink\r\n        initPerfOverlay();\r\n        if (!window.__perf) window.__perf = {};\r\n        window.__perf.enabled = false;\r\n        \r\n        // Add debug command for FPS limit\r\n        window.setFPSLimit = (limit) => {\r\n            if (this.game.gameLoop) {\r\n                this.game.gameLoop.setFrameRateCap(limit);\r\n                return `FPS limit set to ${limit > 0 ? limit : 'unlimited'}`;\r\n            }\r\n            return \"Game loop not initialized\";\r\n        };\r\n        \r\n        // Add debug command for performance monitoring\r\n        window.togglePerf = () => {\r\n            window.__perf.enabled = !window.__perf.enabled;\r\n            \r\n            if (window.__perf.enabled) {\r\n                // Initialize performance monitor if needed\r\n                if (this.game.ui && this.game.ui.initializePerformanceMonitor) {\r\n                    this.game.ui.initializePerformanceMonitor();\r\n                }\r\n                \r\n                // Force memory stats update\r\n                if (window.MemoryStats) {\r\n                    window.MemoryStats.update();\r\n                    window.MemoryStats.logReport();\r\n                }\r\n            } else {\r\n                // Remove performance monitor if it exists\r\n                const statsElement = document.getElementById('performance-stats');\r\n                if (statsElement) {\r\n                    statsElement.remove();\r\n                }\r\n                \r\n                // Clear interval if it exists\r\n                if (this.game.ui && this.game.ui.statsInterval) {\r\n                    clearInterval(this.game.ui.statsInterval);\r\n                    this.game.ui.statsInterval = null;\r\n                }\r\n            }\r\n            \r\n            return window.__perf.enabled ? \"enabled\" : \"disabled\";\r\n        };\r\n        \r\n        // Add global debug command to trigger intro sequence\r\n        window.playIntro = () => {\r\n            if (this.game.startupSequence && this.game.startupSequence.startIntroSequence) {\r\n                    this.game.startupSequence.startIntroSequence();\r\n                return \"Playing intro sequence...\";\r\n            }\r\n            return \"Intro sequence not available\";\r\n        };\r\n        \r\n        // Add debug command to toggle debug mode\r\n        window.toggleDebug = () => {\r\n            window.DEBUG_MODE = !window.DEBUG_MODE;\r\n            return `Debug mode ${window.DEBUG_MODE ? 'enabled' : 'disabled'}`;\r\n        };\r\n        \r\n        // Add debug command to show game state\r\n        window.gameState = () => {\r\n            return {\r\n                isGameOver: this.game.isGameOver,\r\n                isDocked: this.game.spaceship?.isDocked,\r\n                introActive: this.game.introSequenceActive,\r\n                hordeActive: this.game.isHordeActive,\r\n                fps: this.game.gameLoop?.currentFPS,\r\n                gameTime: this.game.gameTime,\r\n                difficulty: this.game.difficultyManager?.currentLevel\r\n            };\r\n        };\r\n        \r\n        // Add debug command to force horde mode\r\n        window.startHorde = () => {\r\n            if (this.game.activateHordeMode) {\r\n                this.game.activateHordeMode();\r\n                return \"Horde mode activated!\";\r\n            }\r\n            return \"Horde mode not available\";\r\n        };\r\n        \r\n        // Add debug command for memory stats\r\n        window.memStats = () => {\r\n            if (window.MemoryStats) {\r\n                window.MemoryStats.update();\r\n                return window.MemoryStats.getReport();\r\n            }\r\n            return \"Memory stats not available\";\r\n        };\r\n        \r\n        // Add debug command to check object pool stats\r\n        window.poolStats = (poolName) => {\r\n            if (window.objectPool && window.objectPool.getStats) {\r\n                if (poolName) {\r\n                    return window.objectPool.getStats(poolName);\r\n                } else {\r\n                    // Get stats for all pools\r\n                    const allStats = {};\r\n                    const pools = ['projectile', 'enemy', 'particle', 'hitEffect', 'explosion'];\r\n                    for (const pool of pools) {\r\n                        const stats = window.objectPool.getStats(pool);\r\n                        if (stats) {\r\n                            allStats[pool] = stats;\r\n                        }\r\n                    }\r\n                    return allStats;\r\n                }\r\n            }\r\n            return \"Object pool not available\";\r\n        };\r\n        \r\n        // Add command to check entity count\r\n        window.entityCount = () => {\r\n            if (this.game.combat && this.game.combat.world && this.game.combat.world.entityManager) {\r\n                const entities = this.game.combat.world.entityManager.entities.size;\r\n                const systems = this.game.combat.world.systemManager.systems.length;\r\n                return {\r\n                    entities,\r\n                    systems,\r\n                    sceneChildren: this.game.scene?.children.length\r\n                };\r\n            }\r\n            return \"ECS world not available\";\r\n        };\r\n        \r\n    }\r\n}","// gameInitializer.js - Game initialization logic\r\n\r\nimport { Renderer } from '../modules/renderer.js';\r\nimport { Spaceship } from '../modules/spaceship.js';\r\nimport { Physics } from '../modules/physics.js';\r\nimport { Environment } from '../modules/environment.js';\r\nimport { Controls } from '../modules/controls.js';\r\nimport { UI } from '../modules/ui.js';\r\nimport { AudioManager } from '../modules/audio/audio.js';\r\n\r\nexport class GameInitializer {\r\n    constructor(game) {\r\n        this.game = game;\r\n    }\r\n    \r\n    initializeCore() {\r\n        // Create audio manager first but don't initialize yet\r\n        if (window.DEBUG_MODE) console.log(\"Creating audio manager...\");\r\n        this.game.audio = new AudioManager();\r\n        \r\n        // Initialize renderer first\r\n        if (window.DEBUG_MODE) console.log(\"Creating renderer...\");\r\n        this.game.renderer = new Renderer();\r\n        if (window.DEBUG_MODE) console.log(\"Renderer created, getting scene...\");\r\n        \r\n        // Access scene and camera directly rather than through getters\r\n        this.game.scene = this.game.renderer.scene;\r\n        this.game.camera = this.game.renderer.camera;\r\n        \r\n        if (window.DEBUG_MODE) console.log(\"Scene and camera references obtained\");\r\n        \r\n        // Share camera reference with scene for easy access by other components\r\n        this.game.scene.camera = this.game.camera;\r\n        \r\n        // Initialize essential components needed for the start screen\r\n        if (window.DEBUG_MODE) console.log(\"Initializing essential components...\");\r\n        \r\n        // Initialize physics\r\n        this.game.physics = new Physics(this.game.scene);\r\n        \r\n        // Set camera reference in physics\r\n        this.game.physics.setCamera(this.game.camera);\r\n        \r\n        // Initialize environment (essential components only)\r\n        this.game.environment = new Environment(this.game.scene);\r\n        \r\n        // Initialize spaceship\r\n        if (window.DEBUG_MODE) console.log(\"Creating spaceship...\");\r\n        this.game.spaceship = new Spaceship(this.game.scene);\r\n        \r\n        // Set spaceship reference in physics\r\n        this.game.physics.setSpaceship(this.game.spaceship);\r\n        \r\n        // Set spaceship reference in environment (for VibeVerse portals)\r\n        this.game.environment.setSpaceship(this.game.spaceship);\r\n        \r\n        // Initialize UI\r\n        this.game.ui = new UI(this.game.spaceship, this.game.environment);\r\n        \r\n        // Share audio reference with UI for sound-based components\r\n        this.game.ui.setAudio(this.game.audio);\r\n        \r\n        // Initialize controls last, as it depends on other components\r\n        this.game.controls = new Controls(this.game.spaceship, this.game.physics, this.game.environment, this.game.ui);\r\n        \r\n        // Share controls reference with UI for bidirectional communication\r\n        this.game.ui.setControls(this.game.controls);\r\n        \r\n        // Initialize settings\r\n        if (window.DEBUG_MODE) console.log(\"Initializing settings...\");\r\n        this.game.ui.initializeSettings(this.game);\r\n    }\r\n    \r\n    setupEventHandlers() {\r\n        // Handle window resize\r\n        window.addEventListener('resize', this.game.handleResize.bind(this.game));\r\n        \r\n        // Handle visibility change to pause/resume game\r\n        document.addEventListener('visibilitychange', this.game.handleVisibilityChange.bind(this.game));\r\n        \r\n        // Handle keyboard events\r\n        document.addEventListener('keydown', this.game.handleKeyDown.bind(this.game));\r\n    }\r\n    \r\n    startDocked() {\r\n        // Start the game with the spaceship docked at the stargate\r\n        console.log(\"Starting game in docked state\");\r\n        \r\n        if (this.game.spaceship) {\r\n            // Start docked at the stargate - position is handled by spaceship.dock()\r\n            if (!this.game.spaceship.isDocked) {\r\n                console.log(\"Docking spaceship...\");\r\n                this.game.spaceship.dock();\r\n            } else {\r\n                console.log(\"Spaceship already docked\");\r\n            }\r\n        } else {\r\n            console.error(\"No spaceship found!\");\r\n        }\r\n        \r\n        // Set initial camera position for docked state\r\n        if (this.game.camera) {\r\n            this.game.camera.position.set(0, 1500, 0);\r\n            console.log(\"Camera position set for docked state\");\r\n        }\r\n        \r\n        // Update docking system to reflect docked state\r\n        if (this.game.controls && this.game.controls.dockingSystem) {\r\n            // The docking system tracks the spaceship's docked state automatically\r\n            this.game.controls.dockingSystem.isDocked = true;\r\n            console.log(\"Docking system updated\");\r\n        }\r\n        \r\n        // Start the game UI\r\n        if (this.game.ui && this.game.ui.stargateInterface) {\r\n            console.log(\"Showing stargate UI...\");\r\n            this.game.ui.stargateInterface.showStargateUI();\r\n        } else {\r\n            console.error(\"No stargate interface found!\", this.game.ui);\r\n        }\r\n    }\r\n}","// objectPools.js - Object pool initialization and management\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport class ObjectPools {\r\n    constructor(game) {\r\n        this.game = game;\r\n    }\r\n    \r\n    // Pre-warm only the most essential shaders needed for immediate gameplay\r\n    preWarmBasicShaders() {\r\n        \r\n        // Create template projectile geometry and materials\r\n        this.projectileGeometry = new THREE.SphereGeometry(1.8, 12, 12);\r\n        this.projectileMaterial = new THREE.MeshStandardMaterial({\r\n            color: 0x00ffff,\r\n            emissive: 0x00ffff,\r\n            emissiveIntensity: 5,\r\n            metalness: 0.7,\r\n            roughness: 0.3\r\n        });\r\n        \r\n        // Create simple dummy objects to warm up the renderer\r\n        const dummyProjectile = new THREE.Mesh(this.projectileGeometry, this.projectileMaterial);\r\n        \r\n        // Add to scene temporarily\r\n        this.game.scene.add(dummyProjectile);\r\n        \r\n        // Force shader compilation for better performance\r\n        this.game.renderer.renderer.compile(this.game.scene, this.game.camera);\r\n        \r\n        // Remove dummy object after compilation\r\n        this.game.renderer._withGuard(() => this.game.scene.remove(dummyProjectile));\r\n        \r\n    }\r\n    \r\n    initializeObjectPools() {\r\n        \r\n        try {\r\n            // Initialize hit effect pool\r\n            if (!this.hitEffectGeometry) {\r\n                this.hitEffectGeometry = new THREE.SphereGeometry(2, 8, 8);\r\n            }\r\n            \r\n            window.objectPool.createPool('hitEffect', () => {\r\n                const material = new THREE.MeshBasicMaterial({\r\n                    color: 0xff5500,\r\n                    emissive: 0xff5500,\r\n                    transparent: true,\r\n                    opacity: 0.8\r\n                });\r\n                \r\n                const mesh = new THREE.Mesh(this.hitEffectGeometry, material);\r\n                mesh.visible = false;\r\n                \r\n                return {\r\n                    mesh: mesh,\r\n                    material: material,\r\n                    reset: function(color = 0xff5500, size = 1) {\r\n                        this.material.color.set(color);\r\n                        this.material.opacity = 0.8;\r\n                        this.mesh.scale.set(size, size, size);\r\n                        this.mesh.visible = true;\r\n                    },\r\n                    clear: function() {\r\n                        if (this.mesh.parent) {\r\n                            this.mesh.parent.remove(this.mesh);\r\n                        }\r\n                        this.mesh.visible = false;\r\n                    }\r\n                };\r\n            }, 5, 20);\r\n            \r\n            // Initialize projectile pool (if not already initialized by ProjectilePoolManager)\r\n            if (!this.projectileGeometry) {\r\n                this.projectileGeometry = new THREE.SphereGeometry(1.8, 12, 12);\r\n            }\r\n            \r\n            // The projectile pool is now managed by ProjectilePoolManager\r\n            // We just ensure the geometry is pre-created for shader warming\r\n            \r\n            // Initialize particle pool for explosions\r\n            const particleGeometry = new THREE.SphereGeometry(0.5, 4, 4);\r\n            const particleMaterial = new THREE.MeshBasicMaterial({\r\n                color: 0xff5500,\r\n                emissive: 0xff5500,\r\n                transparent: true\r\n            });\r\n            \r\n            window.objectPool.createPool('particle', () => {\r\n                const mesh = new THREE.Mesh(particleGeometry, particleMaterial.clone());\r\n                mesh.visible = false;\r\n                \r\n                return {\r\n                    mesh: mesh,\r\n                    velocity: new THREE.Vector3(),\r\n                    life: 0,\r\n                    reset: function(position, velocity, color = 0xff5500) {\r\n                        this.mesh.position.copy(position);\r\n                        this.velocity.copy(velocity);\r\n                        this.mesh.material.color.set(color);\r\n                        this.mesh.material.opacity = 1;\r\n                        this.mesh.visible = true;\r\n                        this.life = 1;\r\n                    },\r\n                    update: function(delta) {\r\n                        this.life -= delta * 2; // Fade out over 0.5 seconds\r\n                        if (this.life <= 0) {\r\n                            this.clear();\r\n                            return false;\r\n                        }\r\n                        \r\n                        this.mesh.position.add(this.velocity.clone().multiplyScalar(delta));\r\n                        this.mesh.material.opacity = this.life;\r\n                        return true;\r\n                    },\r\n                    clear: function() {\r\n                        if (this.mesh.parent) {\r\n                            this.mesh.parent.remove(this.mesh);\r\n                        }\r\n                        this.mesh.visible = false;\r\n                        this.life = 0;\r\n                    }\r\n                };\r\n            }, 20, 100);\r\n            \r\n            // Initialize explosion effect pool\r\n            const particleCount = 15;\r\n            window.objectPool.createPool('explosion', () => {\r\n                const container = new THREE.Group();\r\n                const particles = [];\r\n                \r\n                for (let i = 0; i < particleCount; i++) {\r\n                    const particle = window.objectPool.get('particle');\r\n                    if (particle) {\r\n                        particles.push(particle);\r\n                    }\r\n                }\r\n                \r\n                return {\r\n                    container: container,\r\n                    particles: particles,\r\n                    active: false,\r\n                    reset: function(position, color = 0xff5500, force = 50) {\r\n                        this.container.position.copy(position);\r\n                        this.active = true;\r\n                        \r\n                        // Reset all particles with random velocities\r\n                        for (let i = 0; i < particleCount; i++) {\r\n                            if (this.particles[i]) {\r\n                                const velocity = new THREE.Vector3(\r\n                                    (Math.random() - 0.5) * force,\r\n                                    (Math.random() - 0.5) * force,\r\n                                    (Math.random() - 0.5) * force\r\n                                );\r\n                                this.particles[i].reset(new THREE.Vector3(), velocity, color);\r\n                                this.container.add(this.particles[i].mesh);\r\n                            }\r\n                        }\r\n                        \r\n                        if (!this.container.parent) {\r\n                            window.game.scene.add(this.container);\r\n                        }\r\n                    },\r\n                    update: function(delta) {\r\n                        if (!this.active) return false;\r\n                        \r\n                        let anyAlive = false;\r\n                        for (let i = 0; i < particleCount; i++) {\r\n                            if (this.particles[i] && this.particles[i].life > 0) {\r\n                                if (this.particles[i].update(delta)) {\r\n                                    anyAlive = true;\r\n                                }\r\n                            }\r\n                        }\r\n                        \r\n                        if (!anyAlive) {\r\n                            this.clear();\r\n                            return false;\r\n                        }\r\n                        \r\n                        return true;\r\n                    },\r\n                    clear: function() {\r\n                        this.active = false;\r\n                        \r\n                        // Clear all particles\r\n                        for (let i = 0; i < particleCount; i++) {\r\n                            if (this.particles[i]) {\r\n                                this.particles[i].clear();\r\n                            }\r\n                        }\r\n                        \r\n                        if (this.container.parent) {\r\n                            this.container.parent.remove(this.container);\r\n                        }\r\n                    }\r\n                };\r\n            }, 5, 20);\r\n            \r\n        } catch (error) {\r\n            console.error(\"Error initializing object pools:\", error);\r\n        }\r\n    }\r\n}","// difficultyManager.js - Dynamic difficulty scaling\r\n\r\nexport class DifficultyManager {\r\n    constructor() {\r\n        this.params = {\r\n            maxEnemies: 10,\r\n            spawnInterval: 3,\r\n            enemyHealth: 20,\r\n            enemyDamage: 15,\r\n            enemySpeed: 700\r\n        };\r\n        this.gameTime = 0;\r\n        this.currentLevel = 1;\r\n    }\r\n    \r\n    update(deltaTime) {\r\n        // Update game time in minutes\r\n        this.gameTime += deltaTime;\r\n        const minutes = this.gameTime / 60;\r\n        \r\n        // Calculate level based on minutes played\r\n        // Level increases every 3 minutes\r\n        const newLevel = Math.floor(minutes / 3) + 1;\r\n        \r\n        // Only update if level changed\r\n        if (newLevel !== this.currentLevel) {\r\n            this.currentLevel = newLevel;\r\n            \r\n            // Get difficulty multiplier: 1x at level 1, 1.5x at level 2, 2x at level 3, etc.\r\n            // Cap at level 5 (3x difficulty) for fairness\r\n            const difficultyMultiplier = 1 + (Math.min(this.currentLevel - 1, 4) * 0.5);\r\n            \r\n            // Update parameters\r\n            this.params.maxEnemies = Math.min(10 * difficultyMultiplier, 30);\r\n            this.params.spawnInterval = Math.max(3 / difficultyMultiplier, 1);\r\n            this.params.enemyHealth = Math.floor(20 * difficultyMultiplier);\r\n            this.params.enemyDamage = Math.floor(15 * difficultyMultiplier);\r\n            this.params.enemySpeed = Math.min(700 * (1 + (0.2 * (this.currentLevel - 1))), 1400);\r\n            \r\n            if (window.DEBUG_MODE) {\r\n                console.log(`Difficulty increased to level ${this.currentLevel} (${difficultyMultiplier}x)`);\r\n                console.log(`Parameters: maxEnemies=${this.params.maxEnemies}, spawnInterval=${this.params.spawnInterval}`);\r\n                console.log(`Health=${this.params.enemyHealth}, Damage=${this.params.enemyDamage}, Speed=${this.params.enemySpeed}`);\r\n            }\r\n        }\r\n    }\r\n}","// hordeMode.js - Horde mode management\r\n\r\nexport class HordeMode {\r\n    constructor(game) {\r\n        this.game = game;\r\n        this.isActive = false;\r\n        this.startTime = 0;\r\n        this.survivalTime = 0;\r\n    }\r\n    \r\n    /**\r\n     * Activate horde mode (extreme survival challenge)\r\n     */\r\n    activate() {\r\n        if (this.isActive) return; // Already active\r\n        \r\n        if (window.DEBUG_MODE) console.log(\"ACTIVATING HORDE MODE - EXTREME SURVIVAL CHALLENGE\");\r\n        this.isActive = true;\r\n        this.startTime = performance.now();\r\n        this.survivalTime = 0;\r\n        \r\n        // Store horde state in game\r\n        this.game.isHordeActive = true;\r\n        this.game.hordeStartTime = this.startTime;\r\n        this.game.hordeSurvivalTime = this.survivalTime;\r\n        \r\n        // Play an intense sound to signal the start of horde mode\r\n        if (this.game.audio) {\r\n            this.game.audio.playSound('boink');\r\n        }\r\n        \r\n        // Notify UI to update\r\n        window.mainMessageBus.publish('horde.activated', {\r\n            startTime: this.startTime\r\n        });\r\n        \r\n        // Notify the player\r\n        if (this.game.ui && this.game.ui.showNotification) {\r\n            this.game.ui.showNotification(\"HORDE MODE ACTIVATED - SURVIVE!\", 5000);\r\n        }\r\n        \r\n        // Force player to undock if currently docked\r\n        if (this.game.spaceship && this.game.spaceship.isDocked) {\r\n            if (window.DEBUG_MODE) console.log(\"Horde mode forcing undock from stargate\");\r\n            \r\n            // Undock the ship\r\n            this.game.spaceship.undock();\r\n            \r\n            // Notify the docking system\r\n            window.mainMessageBus.publish('player.requestUndock', {\r\n                forced: true,\r\n                reason: \"horde_mode_activation\"\r\n            });\r\n            \r\n            // CRITICAL FIX: Explicitly show the HUD after forcing undock\r\n            // Use a short delay to ensure undocking process is complete\r\n            setTimeout(() => {\r\n                if (window.DEBUG_MODE) console.log(\"Horde mode ensuring HUD is visible\");\r\n                if (this.game.ui && this.game.ui.showUI) {\r\n                    this.game.ui.showUI();\r\n                }\r\n            }, 200);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Update horde mode survival time\r\n     */\r\n    update() {\r\n        if (this.isActive) {\r\n            this.survivalTime = performance.now() - this.startTime;\r\n            this.game.hordeSurvivalTime = this.survivalTime;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Format horde survival time as MM:SS\r\n     * @returns {string} Formatted time string\r\n     */\r\n    getFormattedSurvivalTime() {\r\n        const totalSeconds = Math.floor(this.survivalTime / 1000);\r\n        const minutes = Math.floor(totalSeconds / 60);\r\n        const seconds = totalSeconds % 60;\r\n        return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n    }\r\n}","// audioUpdater.js - Game audio state management\r\n\r\nexport class AudioUpdater {\r\n    constructor(game) {\r\n        this.game = game;\r\n    }\r\n    \r\n    // Update game sounds based on current game state\r\n    update() {\r\n        if (!this.game.audio || !this.game.spaceship) return;\r\n        \r\n        // Handle thruster sounds based on current thrust state\r\n        if (this.game.spaceship.isDocked) {\r\n            // No thruster sounds when docked\r\n            this.game.audio.stopSound('thrust');\r\n        } else {\r\n            const isThrusting = this.game.spaceship.thrust.forward || \r\n                              this.game.spaceship.thrust.backward || \r\n                              this.game.spaceship.thrust.left || \r\n                              this.game.spaceship.thrust.right;\r\n                              \r\n            if (isThrusting) {\r\n                // Play thrust sound if not already playing\r\n                this.game.audio.playSound('thrust');\r\n                \r\n                // Calculate thrust intensity for volume\r\n                let thrustIntensity = 0.5; // Base level\r\n                \r\n                if (this.game.spaceship.thrust.forward) thrustIntensity += 0.2;\r\n                if (this.game.spaceship.thrust.backward) thrustIntensity += 0.1;\r\n                if (this.game.spaceship.thrust.left) thrustIntensity += 0.1;\r\n                if (this.game.spaceship.thrust.right) thrustIntensity += 0.1;\r\n                \r\n                // Boost increases volume\r\n                if (this.game.spaceship.thrust.boost) thrustIntensity *= 1.5;\r\n                \r\n                // Set thrust volume\r\n                this.game.audio.setThrustVolume(thrustIntensity);\r\n            } else {\r\n                // Stop thrust sound if no thrusters active\r\n                this.game.audio.stopSound('thrust');\r\n            }\r\n        }\r\n        \r\n        // Mining sound is handled by the mining system integration\r\n    }\r\n}","// gameLifecycle.js - Game lifecycle management (game over, cleanup, destruction)\r\n\r\nexport class GameLifecycle {\r\n    constructor(game) {\r\n        this.game = game;\r\n    }\r\n    \r\n    checkGameOver() {\r\n        // Make sure spaceship exists\r\n        if (!this.game.spaceship) return;\r\n        \r\n        // Don't check for game over conditions if the ship is docked\r\n        if (this.game.spaceship.isDocked) return;\r\n        \r\n        // Check if out of fuel and not near stargate\r\n        if (this.game.spaceship.fuel <= 0 && !this.game.environment.stargate.isNearby(this.game.spaceship.mesh.position)) {\r\n            this.gameOver('Out of fuel! You drift endlessly through space...');\r\n        }\r\n    }\r\n    \r\n    gameOver(reason) {\r\n        if (this.game.isGameOver) return; // Prevent multiple game over triggers\r\n        \r\n        this.game.isGameOver = true;\r\n        \r\n        \r\n        // Stop the game loop\r\n        if (this.game.boundAnimate) {\r\n            cancelAnimationFrame(this.game.boundAnimate);\r\n        }\r\n        \r\n        // Show game over UI\r\n        if (this.game.ui) {\r\n            // Check if it's a horde mode game over\r\n            if (this.game.hordeMode && this.game.hordeMode.isActive) {\r\n                const survivalTime = this.game.hordeMode.getFormattedSurvivalTime();\r\n                this.game.ui.showGameOver(`HORDE MODE - Survived: ${survivalTime}\\\\n${reason}`);\r\n            } else {\r\n                this.game.ui.showGameOver(reason);\r\n            }\r\n        }\r\n        \r\n        // Play game over sound\r\n        if (this.game.audio) {\r\n            this.game.audio.playSound('gameOver');\r\n        }\r\n        \r\n        // Cleanup after a delay\r\n        this.game.gameOverCleanupTimeout = setTimeout(() => {\r\n            this.cleanup();\r\n        }, 5000);\r\n    }\r\n    \r\n    cleanup() {\r\n        // Basic cleanup when game ends\r\n        \r\n        // Clear pools\r\n        if (window.objectPool && window.objectPool.clearAllPools) {\r\n            window.objectPool.clearAllPools();\r\n        }\r\n        \r\n        // Stop all audio\r\n        if (this.game.audio && this.game.audio.cleanup) {\r\n            this.game.audio.cleanup();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Clean up all game resources, event listeners, and references\r\n     * Call this when the game is no longer needed to prevent memory leaks\r\n     */\r\n    destroy() {\r\n        \r\n        // Destroy game loop\r\n        if (this.game.gameLoop) {\r\n            this.game.gameLoop.destroy();\r\n            this.game.gameLoop = null;\r\n        }\r\n        \r\n        // Clear any pending timeouts\r\n        if (this.game.gameOverCleanupTimeout) {\r\n            clearTimeout(this.game.gameOverCleanupTimeout);\r\n            this.game.gameOverCleanupTimeout = null;\r\n        }\r\n        \r\n        // Remove event listeners\r\n        window.removeEventListener('resize', this.game.handleResize);\r\n        document.removeEventListener('visibilitychange', this.game.handleVisibilityChange);\r\n        document.removeEventListener('keydown', this.game.handleKeyDown);\r\n        \r\n        // Clean up modules\r\n        if (this.game.renderer) {\r\n            this.game.renderer.dispose();\r\n            this.game.renderer = null;\r\n        }\r\n        \r\n        if (this.game.audio) {\r\n            this.game.audio.dispose();\r\n            this.game.audio = null;\r\n        }\r\n        \r\n        if (this.game.physics) {\r\n            this.game.physics.dispose();\r\n            this.game.physics = null;\r\n        }\r\n        \r\n        if (this.game.spaceship) {\r\n            this.game.spaceship.dispose();\r\n            this.game.spaceship = null;\r\n        }\r\n        \r\n        if (this.game.environment) {\r\n            this.game.environment.dispose();\r\n            this.game.environment = null;\r\n        }\r\n        \r\n        if (this.game.controls) {\r\n            this.game.controls.dispose();\r\n            this.game.controls = null;\r\n        }\r\n        \r\n        if (this.game.ui) {\r\n            this.game.ui.dispose();\r\n            this.game.ui = null;\r\n        }\r\n        \r\n        if (this.game.combat) {\r\n            this.game.combat.dispose();\r\n            this.game.combat = null;\r\n        }\r\n        \r\n        // Clear global references\r\n        window.game = null;\r\n        \r\n    }\r\n}","// main.js - Main entry point for the game (ultra-lean refactored version)\r\n\r\nimport { Combat } from './modules/combat.js';\r\n\r\n// Import refactored modules\r\nimport { initializeGlobals } from './main/globals.js';\r\nimport { StartupSequence } from './main/startupSequence.js';\r\nimport { GameLoop } from './main/gameLoop.js';\r\nimport { Diagnostics } from './main/diagnostics.js';\r\nimport { GameInitializer } from './main/gameInitializer.js';\r\nimport { ObjectPools } from './main/objectPools.js';\r\nimport { DifficultyManager } from './main/difficultyManager.js';\r\nimport { HordeMode } from './main/hordeMode.js';\r\nimport { AudioUpdater } from './main/audioUpdater.js';\r\nimport { GameLifecycle } from './main/gameLifecycle.js';\r\n\r\nexport class Game {\r\n    constructor() {\r\n        // Initialize globals first\r\n        initializeGlobals();\r\n        \r\n        \r\n        // Make game instance globally accessible for emergency access\r\n        window.game = this;\r\n        \r\n        // Subscribe to global events\r\n        window.mainMessageBus.subscribe('game.over', (data) => this.lifecycle.gameOver(data.reason || 'Game Over'));\r\n        \r\n        try {\r\n            // Initialize core game systems\r\n            this.initializer = new GameInitializer(this);\r\n            this.initializer.initializeCore();\r\n            \r\n            // Game state\r\n            this.isGameOver = false;\r\n            this.introSequenceActive = false;\r\n            this.gameTime = 0;\r\n            \r\n            // Detect mobile device\r\n            this.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||\r\n                           (window.matchMedia && window.matchMedia('(max-width: 768px)').matches);\r\n            \r\n            // Initialize managers\r\n            this.difficultyManager = new DifficultyManager();\r\n            this.hordeMode = new HordeMode(this);\r\n            this.audioUpdater = new AudioUpdater(this);\r\n            this.lifecycle = new GameLifecycle(this);\r\n            this.objectPools = new ObjectPools(this);\r\n            \r\n            // Register event handlers\r\n            this.initializer.setupEventHandlers();\r\n            \r\n            // Initialize game loop\r\n            this.gameLoop = new GameLoop(this);\r\n            this.boundAnimate = this.gameLoop.boundAnimate;\r\n            \r\n            // Apply frame rate settings if available\r\n            if (this.ui && this.ui.settings) {\r\n                this.gameLoop.applyFrameRateSettings();\r\n            }\r\n            \r\n            // Initialize startup sequence\r\n            this.startupSequence = new StartupSequence(this);\r\n            \r\n            // Initialize diagnostics\r\n            this.diagnostics = new Diagnostics(this);\r\n            \r\n            // Start the initialization sequence\r\n            this.startupSequence.initializeGameSequence();\r\n            \r\n        } catch (error) {\r\n                throw error;\r\n        }\r\n    }\r\n    \r\n    // Delegation methods\r\n    initIntroSequence() {\r\n        this.startupSequence.initIntroSequence();\r\n    }\r\n    \r\n    startIntroSequence() {\r\n        this.startupSequence.startIntroSequence();\r\n    }\r\n    \r\n    completeIntroSequence() {\r\n        this.startupSequence.completeIntroSequence();\r\n    }\r\n    \r\n    preWarmBasicShaders() {\r\n        this.objectPools.preWarmBasicShaders();\r\n    }\r\n    \r\n    initializeObjectPools() {\r\n        this.objectPools.initializeObjectPools();\r\n    }\r\n    \r\n    startDocked() {\r\n        this.initializer.startDocked();\r\n    }\r\n    \r\n    setupEventHandlers() {\r\n        this.initializer.setupEventHandlers();\r\n    }\r\n    \r\n    initializeDifficultyManager() {\r\n        // Compatibility method - difficulty manager is now initialized in constructor\r\n    }\r\n    \r\n    activateHordeMode() {\r\n        this.hordeMode.activate();\r\n    }\r\n    \r\n    getFormattedHordeSurvivalTime() {\r\n        return this.hordeMode.getFormattedSurvivalTime();\r\n    }\r\n    \r\n    updateAudio() {\r\n        this.audioUpdater.update();\r\n    }\r\n    \r\n    checkGameOver() {\r\n        this.lifecycle.checkGameOver();\r\n    }\r\n    \r\n    gameOver(reason) {\r\n        this.lifecycle.gameOver(reason);\r\n    }\r\n    \r\n    cleanup() {\r\n        this.lifecycle.cleanup();\r\n    }\r\n    \r\n    destroy() {\r\n        this.lifecycle.destroy();\r\n    }\r\n    \r\n    // Main update loop\r\n    update(deltaTime) {\r\n        if (this.isGameOver) return;\r\n        \r\n        // Update horde mode\r\n        this.hordeMode.update();\r\n        \r\n        // Update physics\r\n        this.physics.update(deltaTime);\r\n        \r\n        // Update spaceship\r\n        if (this.spaceship.update) {\r\n            this.spaceship.update(deltaTime);\r\n        }\r\n        \r\n        // Update difficulty manager (but not during intro sequence)\r\n        if (this.difficultyManager && !this.introSequenceActive && !this.spaceship.isDocked) {\r\n            this.difficultyManager.update(deltaTime);\r\n        }\r\n        \r\n        // Update coordinates in HUD after physics update\r\n        if (this.ui && this.ui.updateCoordinates && this.spaceship && this.spaceship.mesh) {\r\n            const position = this.spaceship.mesh.position;\r\n            this.ui.updateCoordinates(position.x, position.y, position.z);\r\n        }\r\n        \r\n        // Update controls\r\n        if (this.controls.update) {\r\n            this.controls.update();\r\n        }\r\n        \r\n        // Update combat\r\n        this.updateCombat(deltaTime);\r\n        \r\n        // Update environment\r\n        if (this.environment.update) {\r\n            this.environment.update(deltaTime, this.camera);\r\n        }\r\n        \r\n        // Update UI\r\n        if (this.ui.update) {\r\n            this.ui.update();\r\n        }\r\n        \r\n        // Update audio\r\n        this.updateAudio();\r\n        \r\n        // Check for game over conditions\r\n        this.checkGameOver();\r\n        \r\n        // Update ECS world\r\n        this.updateECSWorld(deltaTime);\r\n    }\r\n    \r\n    updateCombat(deltaTime) {\r\n        // Ensure the combat system's player entity is always up to date\r\n        if (this.combat && this.combat.updatePlayerReference) {\r\n            try {\r\n                this.combat.updatePlayerReference();\r\n            } catch (error) {\r\n            }\r\n        } else if (this.combat && !this.combat.updatePlayerReference) {\r\n            \r\n            // Try to initialize player entity directly if method is missing\r\n            if (this.combat.createPlayerReferenceEntity && !this.combat.playerEntity) {\r\n                this.combat.createPlayerReferenceEntity();\r\n            }\r\n        }\r\n        \r\n        // Update combat systems - this will update the ECS world\r\n        if (this.combat && this.combat.update) {\r\n            this.combat.update(deltaTime);\r\n        }\r\n    }\r\n    \r\n    updateECSWorld(deltaTime) {\r\n        // Update the ECS world with the current delta time - skip during intro sequence\r\n        if (this.world && !this.introSequenceActive) {\r\n            // Fixed-step for ECS using same delta to keep in lockstep\r\n            this.world.messageBus && this.world.messageBus.fastPublish && this.world.messageBus.fastPublish('world.preUpdate', { deltaTime });\r\n            this.world.systemManager.update(deltaTime);\r\n            this.world.messageBus && this.world.messageBus.fastPublish && this.world.messageBus.fastPublish('world.postUpdate', { deltaTime });\r\n        } else if (this.world && this.introSequenceActive) {\r\n            // If intro is active, only update essential systems but not enemy systems\r\n            // This is a fallback in case freezeAllEnemies() wasn't called or doesn't work\r\n            if (this.world.entityManager && this.world.systemManager) {\r\n                for (const system of this.world.systemManager.systems) {\r\n                    // Skip enemy-related systems during intro\r\n                    if (system.constructor.name !== 'EnemySystem' && \r\n                        system.constructor.name !== 'EnemyAISystem' && \r\n                        system.constructor.name !== 'CombatSystem') {\r\n                        system.update(deltaTime);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Event handlers\r\n    handleResize = () => {\r\n        if (this.renderer) {\r\n            this.renderer.handleResize();\r\n        }\r\n    }\r\n    \r\n    handleVisibilityChange = () => {\r\n        if (document.hidden) {\r\n            // Pause game when tab is not visible\r\n            if (this.audio) {\r\n                this.audio.pauseAllSounds();\r\n            }\r\n        } else {\r\n            // Resume game when tab becomes visible\r\n            if (this.audio) {\r\n                this.audio.resumeAllSounds();\r\n            }\r\n        }\r\n    }\r\n    \r\n    handleKeyDown = (event) => {\r\n        // Global key handlers\r\n        if (event.key === 'Escape') {\r\n            if (this.ui && this.ui.togglePauseMenu) {\r\n                this.ui.togglePauseMenu();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Entry point - called from bootstrap.js or directly\r\nfunction startGameMainModule() {\r\n    try {\r\n        // Create loading overlay - hide the black loading screen after initialization\r\n        const loadingOverlay = document.getElementById('loading-overlay');\r\n        if (loadingOverlay) {\r\n            // Add a small delay to ensure everything is properly loaded\r\n            setTimeout(() => {\r\n                loadingOverlay.style.opacity = '0';\r\n                loadingOverlay.style.transition = 'opacity 1s ease-in-out';\r\n                setTimeout(() => {\r\n                    if (loadingOverlay.parentNode) {\r\n                        loadingOverlay.remove();\r\n                    }\r\n                }, 1000);\r\n            }, 100);\r\n        }\r\n\r\n\r\n        // Create game instance (globals initialized in constructor)\r\n        window.game = new Game();\r\n\r\n    } catch (error) {\r\n        \r\n        // Show error message to user\r\n        const errorMessage = document.createElement('div');\r\n        errorMessage.style.position = 'fixed';\r\n        errorMessage.style.top = '50%';\r\n        errorMessage.style.left = '50%';\r\n        errorMessage.style.transform = 'translate(-50%, -50%)';\r\n        errorMessage.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\r\n        errorMessage.style.color = '#ff3030';\r\n        errorMessage.style.padding = '20px';\r\n        errorMessage.style.borderRadius = '10px';\r\n        errorMessage.style.border = '1px solid #ff3030';\r\n        errorMessage.style.zIndex = '9999';\r\n        errorMessage.style.textAlign = 'center';\r\n        errorMessage.style.fontFamily = 'Courier New, monospace';\r\n        errorMessage.style.maxWidth = '80%';\r\n        \r\n        errorMessage.innerHTML = `\r\n            <h2>Error Starting Game</h2>\r\n            <p>${error.message}</p>\r\n            <p>Check the console for more details (F12).</p>\r\n            <p>You can try refreshing the page or clearing your browser cache.</p>\r\n            <button id=\"reload-button\" style=\"background: #ff3030; color: white; border: none; padding: 10px; margin-top: 20px; cursor: pointer;\">Reload Page</button>\r\n        `;\r\n        \r\n        document.body.appendChild(errorMessage);\r\n        \r\n        // Add event listener to reload button\r\n        document.getElementById('reload-button').addEventListener('click', () => {\r\n            // Add cache-busting parameter to the URL\r\n            const cacheBuster = Date.now();\r\n            window.location.href = window.location.pathname + '?cache=' + cacheBuster;\r\n        });\r\n    }\r\n}\r\n\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', startGameMainModule);\r\n} else {\r\n    // DOM is already ready\r\n    startGameMainModule();\r\n}"],"file":"assets/main-CjoPqmLB.js"}