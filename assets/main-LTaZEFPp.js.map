{"version":3,"file":"main-LTaZEFPp.js","sources":["../../js/modules/environment/starDreadnought.js","../../js/modules/introSequence.js","../../js/modules/debug/perfOverlay.js","../../js/main.js"],"sourcesContent":["// starDreadnought.js - Creates and manages the massive Star Dreadnought ship\n\nimport * as THREE from 'three';\n\nexport class StarDreadnought {\n    constructor(scene) {\n        this.scene = scene;\n        this.ship = null;\n        this.engineGlows = [];\n        this.teleportBeam = null;\n        this.teleportBeamParticles = null;\n        this.teleportBeamActive = false;\n        \n        // Create ship model programmatically\n        this.createShipModel();\n        \n        // Add to scene\n        this.scene.add(this.ship);\n        \n        console.log(\"Star Dreadnought created\");\n    }\n    \n    createShipModel() {\n        // Create a group for the entire ship\n        this.ship = new THREE.Group();\n        this.ship.name = 'starDreadnought';\n        \n        // Set scale - this is a massive ship\n        const shipScale = 1200; // Overall scale factor\n        \n        // Main hull - elongated wedge shape\n        this.createMainHull(shipScale);\n        \n        // Command bridge superstructure\n        this.createCommandBridge(shipScale);\n        \n        // Engine array\n        this.createEngineArray(shipScale);\n        \n        // Surface details\n        this.createSurfaceDetails(shipScale);\n        \n        // Teleport beam (initially inactive)\n        this.createTeleportBeam(shipScale);\n    }\n    \n    createMainHull(scale) {\n        // Create main hull using custom geometry for the distinctive arrow/dagger shape\n        const hullLength = scale;\n        const hullWidth = scale * 0.22;\n        const hullHeight = scale * 0.06;\n        const taperFactor = 0.15; // How much the front tapers\n        \n        // Create geometry for the main hull shape\n        const hullGeometry = new THREE.BufferGeometry();\n        \n        // Define vertices for the hull shape (triangulated)\n        const vertices = new Float32Array([\n            // Bottom face\n            -hullWidth/2, -hullHeight/2, hullLength/2,  // bottom left back\n            hullWidth/2, -hullHeight/2, hullLength/2,   // bottom right back\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\n            \n            hullWidth/2, -hullHeight/2, hullLength/2,   // bottom right back\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2,  // bottom right front\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\n            \n            // Top face\n            -hullWidth/2, hullHeight/2, hullLength/2,  // top left back\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2, // top left front\n            hullWidth/2, hullHeight/2, hullLength/2,   // top right back\n            \n            hullWidth/2, hullHeight/2, hullLength/2,   // top right back\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2, // top left front\n            hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top right front\n            \n            // Left face\n            -hullWidth/2, -hullHeight/2, hullLength/2,  // bottom left back\n            -hullWidth/2, hullHeight/2, hullLength/2,   // top left back\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\n            \n            -hullWidth/2, hullHeight/2, hullLength/2,   // top left back\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top left front\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\n            \n            // Right face\n            hullWidth/2, -hullHeight/2, hullLength/2,  // bottom right back\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom right front\n            hullWidth/2, hullHeight/2, hullLength/2,   // top right back\n            \n            hullWidth/2, hullHeight/2, hullLength/2,   // top right back\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom right front\n            hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top right front\n            \n            // Back face\n            -hullWidth/2, -hullHeight/2, hullLength/2,  // bottom left back\n            -hullWidth/2, hullHeight/2, hullLength/2,   // top left back\n            hullWidth/2, -hullHeight/2, hullLength/2,   // bottom right back\n            \n            hullWidth/2, -hullHeight/2, hullLength/2,   // bottom right back\n            -hullWidth/2, hullHeight/2, hullLength/2,   // top left back\n            hullWidth/2, hullHeight/2, hullLength/2,    // top right back\n            \n            // Front face (pointed)\n            -hullWidth*taperFactor, -hullHeight/2, -hullLength/2, // bottom left front\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top left front\n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2,  // bottom right front\n            \n            hullWidth*taperFactor, -hullHeight/2, -hullLength/2,  // bottom right front\n            -hullWidth*taperFactor, hullHeight/2, -hullLength/2,  // top left front\n            hullWidth*taperFactor, hullHeight/2, -hullLength/2    // top right front\n        ]);\n        \n        // Calculate normals for lighting\n        const normals = new Float32Array(vertices.length);\n        \n        // Add attributes to the geometry\n        hullGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n        \n        // Material for the main hull - metallic dark gray\n        const hullMaterial = new THREE.MeshStandardMaterial({\n            color: 0x333344,\n            metalness: 0.8,\n            roughness: 0.3,\n            emissive: 0x111111,\n            emissiveIntensity: 0.2\n        });\n        \n        // Create the hull mesh\n        const hull = new THREE.Mesh(hullGeometry, hullMaterial);\n        hull.geometry.computeVertexNormals(); // Auto-generate normals\n        \n        // Cast shadows\n        hull.castShadow = true;\n        hull.receiveShadow = true;\n        \n        // Add to ship group\n        this.ship.add(hull);\n        \n        // Add additional hull plates for more detail\n        this.addHullPlates(scale, hull);\n    }\n    \n    addHullPlates(scale, parentHull) {\n        // Add additional hull plates for more detail and segmentation\n        const plateLength = scale * 0.2;\n        const plateWidth = scale * 0.18;\n        const plateHeight = scale * 0.01;\n        const plateY = scale * 0.035; // Just above the hull\n        \n        // Create 5 plates down the center of the ship\n        for (let i = 0; i < 5; i++) {\n            const plateZ = scale * 0.4 - (i * plateLength);\n            \n            const plateGeometry = new THREE.BoxGeometry(plateWidth, plateHeight, plateLength);\n            const plateMaterial = new THREE.MeshStandardMaterial({\n                color: 0x444455,\n                metalness: 0.7,\n                roughness: 0.4,\n                emissive: 0x222222\n            });\n            \n            const plate = new THREE.Mesh(plateGeometry, plateMaterial);\n            plate.position.set(0, plateY, plateZ);\n            \n            plate.castShadow = true;\n            plate.receiveShadow = true;\n            \n            this.ship.add(plate);\n        }\n    }\n    \n    createCommandBridge(scale) {\n        // Command bridge superstructure - distinctive two-tower design\n        const bridgeHeight = scale * 0.12;\n        const bridgeWidth = scale * 0.06;\n        const bridgeDepth = scale * 0.08;\n        const bridgeY = scale * 0.085; // Position on top of hull\n        const bridgeZ = scale * 0.28; // Position toward the back\n        \n        // Bridge material - slightly lighter than hull\n        const bridgeMaterial = new THREE.MeshStandardMaterial({\n            color: 0x555566,\n            metalness: 0.7,\n            roughness: 0.3,\n            emissive: 0x222222,\n            emissiveIntensity: 0.2\n        });\n        \n        // Main command tower (larger)\n        const mainTowerGeometry = new THREE.BoxGeometry(bridgeWidth, bridgeHeight, bridgeDepth);\n        const mainTower = new THREE.Mesh(mainTowerGeometry, bridgeMaterial);\n        mainTower.position.set(0, bridgeY, bridgeZ);\n        mainTower.castShadow = true;\n        mainTower.receiveShadow = true;\n        this.ship.add(mainTower);\n        \n        // Add windows to the bridge\n        this.addBridgeWindows(scale, mainTower, bridgeY);\n        \n        // Secondary command towers (smaller)\n        const secondaryTowerScale = 0.7; // 70% the size of main tower\n        const secondaryTowerGeometry = new THREE.BoxGeometry(\n            bridgeWidth * secondaryTowerScale, \n            bridgeHeight * secondaryTowerScale, \n            bridgeDepth * secondaryTowerScale\n        );\n        \n        // Left tower\n        const leftTower = new THREE.Mesh(secondaryTowerGeometry, bridgeMaterial);\n        leftTower.position.set(-bridgeWidth * 1.2, bridgeY, bridgeZ + bridgeDepth * 0.6);\n        leftTower.castShadow = true;\n        leftTower.receiveShadow = true;\n        this.ship.add(leftTower);\n        \n        // Right tower\n        const rightTower = new THREE.Mesh(secondaryTowerGeometry, bridgeMaterial);\n        rightTower.position.set(bridgeWidth * 1.2, bridgeY, bridgeZ + bridgeDepth * 0.6);\n        rightTower.castShadow = true;\n        rightTower.receiveShadow = true;\n        this.ship.add(rightTower);\n    }\n    \n    addBridgeWindows(scale, bridgeTower, bridgeY) {\n        // Add illuminated windows to the bridge\n        const windowSize = scale * 0.003;\n        const windowSpacing = scale * 0.006;\n        const windowRows = 6;\n        const windowCols = 10;\n        const windowsStartY = bridgeY - scale * 0.02;\n        const windowDepth = scale * 0.001;\n        \n        // Window material - emissive for glow\n        const windowMaterial = new THREE.MeshStandardMaterial({\n            color: 0xaabbcc,\n            emissive: 0xaabbcc,\n            emissiveIntensity: 1.0,\n            transparent: true,\n            opacity: 0.9\n        });\n        \n        // Create window instances\n        for (let row = 0; row < windowRows; row++) {\n            for (let col = 0; col < windowCols; col++) {\n                // Random chance to skip a window (for variety)\n                if (Math.random() > 0.85) continue;\n                \n                const windowGeometry = new THREE.BoxGeometry(windowSize, windowSize, windowDepth);\n                const window = new THREE.Mesh(windowGeometry, windowMaterial);\n                \n                // Position window on the front face of the bridge\n                window.position.set(\n                    (col - windowCols/2) * windowSpacing,\n                    windowsStartY + row * windowSpacing,\n                    bridgeTower.position.z + scale * 0.04 + windowDepth\n                );\n                \n                this.ship.add(window);\n            }\n        }\n    }\n    \n    createEngineArray(scale) {\n        // Create engine array at the back of the ship\n        const engineRadius = scale * 0.018;\n        const engineLength = scale * 0.04;\n        const engineZ = scale * 0.48; // Position at the back\n        const engineY = scale * 0.01; // Slightly above center line\n        \n        // Engine housing\n        const engineHousingWidth = scale * 0.2;\n        const engineHousingHeight = scale * 0.05;\n        const engineHousingLength = scale * 0.06;\n        \n        const housingGeometry = new THREE.BoxGeometry(engineHousingWidth, engineHousingHeight, engineHousingLength);\n        const housingMaterial = new THREE.MeshStandardMaterial({\n            color: 0x333344,\n            metalness: 0.8,\n            roughness: 0.4\n        });\n        \n        const engineHousing = new THREE.Mesh(housingGeometry, housingMaterial);\n        engineHousing.position.set(0, engineY, engineZ);\n        engineHousing.castShadow = true;\n        engineHousing.receiveShadow = true;\n        this.ship.add(engineHousing);\n        \n        // Engine exhaust material - blue glow for Star Wars style\n        const engineMaterial = new THREE.MeshStandardMaterial({\n            color: 0x3366ff,\n            emissive: 0x3366ff,\n            emissiveIntensity: 0.7,\n            transparent: true,\n            opacity: 0.7\n        });\n        \n        // Glow material (fully emissive)\n        const glowMaterial = new THREE.MeshStandardMaterial({\n            color: 0x3366ff,\n            emissive: 0x3366ff,\n            emissiveIntensity: 1.5,\n            transparent: true,\n            opacity: 0.8\n        });\n        \n        // Create engine exhausts - two rows of engines for Star Destroyer style\n        const engineRows = 2;\n        const enginesPerRow = 5;\n        const verticalSpacing = engineHousingHeight * 0.5;\n        \n        for (let row = 0; row < engineRows; row++) {\n            const rowY = engineY - verticalSpacing * (row - 0.5);\n            \n            for (let i = 0; i < enginesPerRow; i++) {\n                // Distribute engines across the width\n                const posX = (i - (enginesPerRow - 1) / 2) * (engineHousingWidth / (enginesPerRow - 1) * 0.8);\n                \n                // Engine exhaust\n                const engineGeometry = new THREE.CylinderGeometry(engineRadius, engineRadius * 1.5, engineLength, 16);\n                const engine = new THREE.Mesh(engineGeometry, engineMaterial);\n                \n                // Position and orient the engine\n                engine.position.set(posX, rowY, engineZ + engineHousingLength * 0.5);\n                engine.rotation.x = Math.PI / 2; // Orient horizontally\n                \n                this.ship.add(engine);\n                \n                // Add engine glow with additional outer glow\n                const glowGeometry = new THREE.SphereGeometry(engineRadius * 1.6, 16, 16);\n                const glow = new THREE.Mesh(glowGeometry, glowMaterial.clone());\n                glow.position.set(posX, rowY, engineZ + engineHousingLength * 0.5 + engineLength * 1.1);\n                \n                this.ship.add(glow);\n                this.engineGlows.push(glow);\n                \n                // Add additional outer glow for more dramatic effect\n                const outerGlowGeometry = new THREE.SphereGeometry(engineRadius * 2.5, 16, 16);\n                const outerGlowMaterial = glowMaterial.clone();\n                outerGlowMaterial.opacity = 0.4;\n                const outerGlow = new THREE.Mesh(outerGlowGeometry, outerGlowMaterial);\n                outerGlow.position.copy(glow.position);\n                \n                this.ship.add(outerGlow);\n                this.engineGlows.push(outerGlow);\n            }\n        }\n        \n        // Add engine trail particles\n        this.createEngineTrailParticles(scale, engineZ, engineHousingWidth);\n    }\n    \n    createSurfaceDetails(scale) {\n        // Add surface details for more visual interest\n        \n        // Turrets along the sides\n        this.createTurrets(scale);\n        \n        // Trenches and surface details\n        this.createSurfaceTrenches(scale);\n        \n        // Shield generator domes\n        this.createShieldGenerators(scale);\n    }\n    \n    createTurrets(scale) {\n        // Create turret batteries along the sides\n        const turretRadius = scale * 0.008;\n        const turretHeight = scale * 0.01;\n        const baseRadius = scale * 0.01;\n        const baseHeight = scale * 0.005;\n        \n        // Turret material\n        const turretMaterial = new THREE.MeshStandardMaterial({\n            color: 0x666677,\n            metalness: 0.7,\n            roughness: 0.3\n        });\n        \n        // Positions for turrets (port side)\n        const portPositions = [];\n        for (let i = 0; i < 12; i++) {\n            const z = scale * 0.2 - (i * scale * 0.07);\n            portPositions.push([-scale * 0.1, scale * 0.035, z]);\n        }\n        \n        // Create port side turrets\n        portPositions.forEach(pos => {\n            // Turret base\n            const baseGeometry = new THREE.CylinderGeometry(baseRadius, baseRadius, baseHeight, 8);\n            const base = new THREE.Mesh(baseGeometry, turretMaterial);\n            base.position.set(pos[0], pos[1], pos[2]);\n            this.ship.add(base);\n            \n            // Turret gun\n            const turretGeometry = new THREE.CylinderGeometry(turretRadius, turretRadius, turretHeight, 8);\n            const turret = new THREE.Mesh(turretGeometry, turretMaterial);\n            turret.position.set(pos[0], pos[1] + baseHeight * 0.5 + turretHeight * 0.5, pos[2]);\n            turret.rotation.x = Math.PI / 2; // Orient horizontally\n            turret.rotation.z = -Math.PI / 6; // Angle outward\n            this.ship.add(turret);\n        });\n        \n        // Positions for turrets (starboard side)\n        const starboardPositions = [];\n        for (let i = 0; i < 12; i++) {\n            const z = scale * 0.2 - (i * scale * 0.07);\n            starboardPositions.push([scale * 0.1, scale * 0.035, z]);\n        }\n        \n        // Create starboard side turrets\n        starboardPositions.forEach(pos => {\n            // Turret base\n            const baseGeometry = new THREE.CylinderGeometry(baseRadius, baseRadius, baseHeight, 8);\n            const base = new THREE.Mesh(baseGeometry, turretMaterial);\n            base.position.set(pos[0], pos[1], pos[2]);\n            this.ship.add(base);\n            \n            // Turret gun\n            const turretGeometry = new THREE.CylinderGeometry(turretRadius, turretRadius, turretHeight, 8);\n            const turret = new THREE.Mesh(turretGeometry, turretMaterial);\n            turret.position.set(pos[0], pos[1] + baseHeight * 0.5 + turretHeight * 0.5, pos[2]);\n            turret.rotation.x = Math.PI / 2; // Orient horizontally\n            turret.rotation.z = Math.PI / 6; // Angle outward\n            this.ship.add(turret);\n        });\n    }\n    \n    createSurfaceTrenches(scale) {\n        // Create surface trenches and details\n        const trenchWidth = scale * 0.01;\n        const trenchDepth = scale * 0.01;\n        const trenchLength = scale * 0.3;\n        \n        // Trench material - darker than hull\n        const trenchMaterial = new THREE.MeshStandardMaterial({\n            color: 0x222233,\n            metalness: 0.7,\n            roughness: 0.8,\n            emissive: 0x111122,\n            emissiveIntensity: 0.3\n        });\n        \n        // Center trench (inspired by Death Star trench)\n        const centerTrenchGeometry = new THREE.BoxGeometry(trenchWidth, trenchDepth, trenchLength);\n        const centerTrench = new THREE.Mesh(centerTrenchGeometry, trenchMaterial);\n        centerTrench.position.set(0, scale * 0.035, scale * 0.1);\n        this.ship.add(centerTrench);\n        \n        // Side trenches\n        const sideTrenchGeometry = new THREE.BoxGeometry(trenchWidth, trenchDepth, trenchLength * 0.7);\n        \n        // Port side trench\n        const portTrench = new THREE.Mesh(sideTrenchGeometry, trenchMaterial);\n        portTrench.position.set(-scale * 0.07, scale * 0.035, scale * 0.05);\n        this.ship.add(portTrench);\n        \n        // Starboard side trench\n        const starboardTrench = new THREE.Mesh(sideTrenchGeometry, trenchMaterial);\n        starboardTrench.position.set(scale * 0.07, scale * 0.035, scale * 0.05);\n        this.ship.add(starboardTrench);\n    }\n    \n    createShieldGenerators(scale) {\n        // Create shield generator domes\n        const domeRadius = scale * 0.02;\n        const domeY = scale * 0.05;\n        const domeZ = scale * 0.35;\n        \n        // Dome material - slightly transparent blue\n        const domeMaterial = new THREE.MeshStandardMaterial({\n            color: 0x3366aa,\n            metalness: 0.2,\n            roughness: 0.3,\n            transparent: true,\n            opacity: 0.6,\n            emissive: 0x112244,\n            emissiveIntensity: 0.3\n        });\n        \n        // Port side shield generator\n        const portDomeGeometry = new THREE.SphereGeometry(domeRadius, 16, 16, 0, Math.PI * 2, 0, Math.PI / 2);\n        const portDome = new THREE.Mesh(portDomeGeometry, domeMaterial);\n        portDome.position.set(-scale * 0.08, domeY, domeZ);\n        portDome.rotation.x = Math.PI; // Orient half-sphere\n        this.ship.add(portDome);\n        \n        // Starboard side shield generator\n        const starboardDomeGeometry = new THREE.SphereGeometry(domeRadius, 16, 16, 0, Math.PI * 2, 0, Math.PI / 2);\n        const starboardDome = new THREE.Mesh(starboardDomeGeometry, domeMaterial);\n        starboardDome.position.set(scale * 0.08, domeY, domeZ);\n        starboardDome.rotation.x = Math.PI; // Orient half-sphere\n        this.ship.add(starboardDome);\n    }\n    \n    createTeleportBeam(scale) {\n        // Create teleport beam (initially inactive)\n        const beamTopRadius = scale * 0.03;\n        const beamBottomRadius = scale * 0.2; // Much wider at bottom for dramatic beam\n        const beamHeight = scale * 0.8; // Longer beam to reach further\n        \n        // Custom shader material for energy beam effect with more dynamic patterns\n        const beamMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                time: { value: 0.0 },\n                color: { value: new THREE.Color(0x33ccff) },\n                pulseFrequency: { value: 12.0 },\n                pulseAmplitude: { value: 0.3 }\n            },\n            vertexShader: `\n                varying vec2 vUv;\n                \n                void main() {\n                    vUv = uv;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                }\n            `,\n            fragmentShader: `\n                uniform float time;\n                uniform vec3 color;\n                uniform float pulseFrequency;\n                uniform float pulseAmplitude;\n                varying vec2 vUv;\n                \n                // Improved pattern with scrolling and pulsing\n                void main() {\n                    // Create primary energy pattern - vertical striations\n                    float verticalPattern = sin(vUv.y * 50.0 - time * 3.0) * 0.5 + 0.5;\n                    \n                    // Create horizontal pulse bands\n                    float horizontalPulse = sin(vUv.y * pulseFrequency - time * 2.0) * pulseAmplitude + (1.0 - pulseAmplitude);\n                    \n                    // Edge glow effect with distortion\n                    float edgeEffect = smoothstep(0.0, 0.4, vUv.x) * smoothstep(1.0, 0.6, vUv.x);\n                    \n                    // Swirling energy effect\n                    float swirl = sin(vUv.y * 30.0 + vUv.x * 5.0 + time * 4.0) * 0.5 + 0.5;\n                    \n                    // Combine effects\n                    float pattern = mix(verticalPattern, swirl, 0.5) * horizontalPulse * edgeEffect;\n                    \n                    // Add vertical fade for more realistic beam\n                    float opacity = (1.0 - vUv.y * 0.8) * 0.9;\n                    \n                    // Pulsing brightness based on time\n                    float pulse = sin(time * 3.0) * 0.1 + 0.9;\n                    \n                    // Combine final color \n                    vec3 finalColor = color * pulse;\n                    \n                    // Output final color with combined opacity\n                    gl_FragColor = vec4(finalColor, opacity * pattern);\n                }\n            `,\n            transparent: true,\n            side: THREE.DoubleSide,\n            blending: THREE.AdditiveBlending // Use additive blending for glowing effect\n        });\n        \n        // Create beam cone\n        const beamGeometry = new THREE.CylinderGeometry(beamBottomRadius, beamTopRadius, beamHeight, 32, 16, true);\n        this.teleportBeam = new THREE.Mesh(beamGeometry, beamMaterial);\n        \n        // Position beam below the ship facing down\n        this.teleportBeam.position.set(0, -beamHeight/2, -scale * 0.1);\n        this.teleportBeam.rotation.x = Math.PI; // Point downward\n        \n        // Hide beam initially\n        this.teleportBeam.visible = false;\n        \n        // Add to ship\n        this.ship.add(this.teleportBeam);\n        \n        // Create teleport beam particles\n        this.createTeleportParticles(scale);\n        \n        // Create beam impact ring effect\n        this.createBeamImpactRing(scale);\n    }\n    \n    createBeamImpactRing(scale) {\n        // Create a flat ring at the beam impact point\n        const ringGeometry = new THREE.RingGeometry(scale * 0.1, scale * 0.22, 32);\n        const ringMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                time: { value: 0.0 },\n                color: { value: new THREE.Color(0x33ccff) }\n            },\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                }\n            `,\n            fragmentShader: `\n                uniform float time;\n                uniform vec3 color;\n                varying vec2 vUv;\n                \n                void main() {\n                    // Animated ripple effect\n                    float ripple = sin(distance(vUv, vec2(0.5)) * 20.0 - time * 5.0) * 0.5 + 0.5;\n                    \n                    // Rotating element\n                    float angle = atan(vUv.y - 0.5, vUv.x - 0.5);\n                    float rotatingPattern = sin(angle * 8.0 + time * 3.0) * 0.5 + 0.5;\n                    \n                    // Pulsing opacity\n                    float pulse = sin(time * 2.0) * 0.3 + 0.7;\n                    \n                    // Combine patterns\n                    float pattern = mix(ripple, rotatingPattern, 0.5) * pulse;\n                    \n                    gl_FragColor = vec4(color, pattern * 0.7);\n                }\n            `,\n            transparent: true,\n            side: THREE.DoubleSide,\n            blending: THREE.AdditiveBlending,\n            depthWrite: false\n        });\n        \n        this.impactRing = new THREE.Mesh(ringGeometry, ringMaterial);\n        \n        // Position the ring below the beam's end\n        this.impactRing.position.set(0, -scale * 1.0, -scale * 0.1);\n        this.impactRing.rotation.x = -Math.PI/2; // Face downward\n        \n        // Hide initially\n        this.impactRing.visible = false;\n        \n        // Add to ship\n        this.ship.add(this.impactRing);\n    }\n    \n    createTeleportParticles(scale) {\n        // Create particle system for teleport beam\n        const particleCount = 800; // More particles\n        const particleGeometry = new THREE.BufferGeometry();\n        \n        // Create arrays for particle properties\n        const positions = new Float32Array(particleCount * 3);\n        const colors = new Float32Array(particleCount * 3);\n        const sizes = new Float32Array(particleCount);\n        \n        // Initialize particle positions in a cone shape with more variation\n        for (let i = 0; i < particleCount; i++) {\n            const i3 = i * 3;\n            \n            // Determine if this should be an inner or outer particle\n            const isInnerBeam = Math.random() > 0.3;\n            \n            // Random position within the cone or surrounding area\n            const radius = isInnerBeam ? \n                Math.random() * scale * 0.03 : // Inner beam\n                scale * 0.03 + Math.random() * scale * 0.17; // Outer beam area\n            \n            const theta = Math.random() * Math.PI * 2;\n            const height = -(Math.random() * scale * 0.8); // Full beam height\n            \n            // Convert to Cartesian\n            positions[i3] = radius * Math.cos(theta);     // x\n            positions[i3 + 1] = height;                   // y (negative for downward direction)\n            positions[i3 + 2] = radius * Math.sin(theta); // z\n            \n            // Gradient colors from cyan to blue with variation\n            if (isInnerBeam) {\n                // Brighter inner beam\n                colors[i3] = 0.3 + Math.random() * 0.2;       // r\n                colors[i3 + 1] = 0.9 + Math.random() * 0.1;   // g\n                colors[i3 + 2] = 1.0;                         // b\n            } else {\n                // Cooler outer particles\n                colors[i3] = 0.1 + Math.random() * 0.1;       // r \n                colors[i3 + 1] = 0.7 + Math.random() * 0.3;   // g\n                colors[i3 + 2] = 0.9 + Math.random() * 0.1;   // b\n            }\n            \n            // Varied particle sizes\n            sizes[i] = isInnerBeam ? \n                scale * 0.002 + Math.random() * scale * 0.002 : // Small inner particles\n                scale * 0.004 + Math.random() * scale * 0.006;  // Larger outer particles\n        }\n        \n        // Add attributes to geometry\n        particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n        particleGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n        particleGeometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\n        \n        // Particle material with custom shader for better glow\n        const particleMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                time: { value: 0 },\n                pointTexture: { value: this.createParticleTexture() }\n            },\n            vertexShader: `\n                attribute float size;\n                attribute vec3 color;\n                varying vec3 vColor;\n                uniform float time;\n                \n                void main() {\n                    vColor = color;\n                    \n                    // Animate size with time\n                    float pulseFactor = sin(time * 2.0 + position.z * 0.1) * 0.3 + 0.7;\n                    \n                    // Calculate position\n                    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n                    \n                    // Size attenuation\n                    gl_PointSize = size * pulseFactor * (300.0 / -mvPosition.z);\n                    gl_Position = projectionMatrix * mvPosition;\n                }\n            `,\n            fragmentShader: `\n                uniform sampler2D pointTexture;\n                varying vec3 vColor;\n                \n                void main() {\n                    // Sample soft particle texture\n                    vec4 texColor = texture2D(pointTexture, gl_PointCoord);\n                    \n                    // Apply color\n                    gl_FragColor = vec4(vColor, texColor.r);\n                }\n            `,\n            transparent: true,\n            depthWrite: false,\n            blending: THREE.AdditiveBlending,\n            vertexColors: true\n        });\n        \n        // Create particle system\n        this.teleportParticles = new THREE.Points(particleGeometry, particleMaterial);\n        this.teleportParticles.visible = false;\n        \n        // Position particle system\n        this.teleportParticles.position.set(0, 0, -scale * 0.1);\n        \n        // Add to ship\n        this.ship.add(this.teleportParticles);\n    }\n    \n    createParticleTexture() {\n        const canvas = document.createElement('canvas');\n        canvas.width = 64;\n        canvas.height = 64;\n        \n        const context = canvas.getContext('2d');\n        const gradient = context.createRadialGradient(\n            32, 32, 0, 32, 32, 32\n        );\n        \n        gradient.addColorStop(0, 'rgba(255,255,255,1)');\n        gradient.addColorStop(0.3, 'rgba(255,255,255,0.8)');\n        gradient.addColorStop(0.5, 'rgba(255,255,255,0.4)');\n        gradient.addColorStop(1, 'rgba(255,255,255,0)');\n        \n        context.fillStyle = gradient;\n        context.fillRect(0, 0, 64, 64);\n        \n        const texture = new THREE.Texture(canvas);\n        texture.needsUpdate = true;\n        return texture;\n    }\n    \n    createEngineTrailParticles(scale, engineZ, width) {\n        const particleCount = 200;\n        const particleGeometry = new THREE.BufferGeometry();\n        \n        // Create arrays for particle properties\n        const positions = new Float32Array(particleCount * 3);\n        const colors = new Float32Array(particleCount * 3);\n        const sizes = new Float32Array(particleCount);\n        \n        // Engine positions to emit particles from\n        const enginePositions = [];\n        const enginesPerRow = 5;\n        \n        for (let i = 0; i < enginesPerRow; i++) {\n            const posX = (i - (enginesPerRow - 1) / 2) * (width / (enginesPerRow - 1) * 0.8);\n            enginePositions.push(posX);\n        }\n        \n        // Initialize particles\n        for (let i = 0; i < particleCount; i++) {\n            const i3 = i * 3;\n            \n            // Choose an engine position to emit from\n            const engineIndex = Math.floor(Math.random() * enginePositions.length);\n            const engineX = enginePositions[engineIndex];\n            \n            // Random offset from engine\n            const offsetX = (Math.random() - 0.5) * scale * 0.01;\n            const offsetY = (Math.random() - 0.5) * scale * 0.01;\n            \n            // Position behind the engine\n            const trailLength = Math.random() * scale * 0.5;\n            \n            positions[i3] = engineX + offsetX;     // x\n            positions[i3 + 1] = offsetY;           // y\n            positions[i3 + 2] = engineZ + engineX * 0.05 + trailLength; // z with slight angle\n            \n            // Blue-white colors for engine glow\n            colors[i3] = 0.5 + Math.random() * 0.5;     // r\n            colors[i3 + 1] = 0.7 + Math.random() * 0.3; // g\n            colors[i3 + 2] = 1.0;                       // b\n            \n            // Different sizes for depth\n            sizes[i] = (Math.random() * 0.5 + 0.5) * scale * 0.004;\n        }\n        \n        // Add attributes to geometry\n        particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n        particleGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n        particleGeometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\n        \n        // Particle material with custom shader\n        const particleMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                time: { value: 0 },\n                pointTexture: { value: this.createParticleTexture() }\n            },\n            vertexShader: `\n                attribute float size;\n                attribute vec3 color;\n                varying vec3 vColor;\n                uniform float time;\n                \n                void main() {\n                    vColor = color;\n                    \n                    // Animate size with time\n                    float pulseFactor = sin(time * 2.0 + position.z * 0.1) * 0.3 + 0.7;\n                    \n                    // Calculate position\n                    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n                    \n                    // Size attenuation\n                    gl_PointSize = size * pulseFactor * (300.0 / -mvPosition.z);\n                    gl_Position = projectionMatrix * mvPosition;\n                }\n            `,\n            fragmentShader: `\n                uniform sampler2D pointTexture;\n                varying vec3 vColor;\n                \n                void main() {\n                    // Sample soft particle texture\n                    vec4 texColor = texture2D(pointTexture, gl_PointCoord);\n                    \n                    // Apply color\n                    gl_FragColor = vec4(vColor, texColor.r);\n                }\n            `,\n            transparent: true,\n            depthWrite: false,\n            blending: THREE.AdditiveBlending,\n            vertexColors: true\n        });\n        \n        // Create particle system\n        this.engineTrailParticles = new THREE.Points(particleGeometry, particleMaterial);\n        this.ship.add(this.engineTrailParticles);\n    }\n    \n    // Set engines power level (0-1)\n    setEnginesPower(power) {\n        // Adjust engine glow intensity based on power level\n        this.engineGlows.forEach((glow, index) => {\n            // Alternate between main glow and outer glow\n            const isMainGlow = index % 2 === 0;\n            \n            if (isMainGlow) {\n                // Main engine glow - brighter\n                glow.material.emissiveIntensity = 0.8 + power * 1.2;\n                glow.material.opacity = 0.5 + power * 0.5;\n            } else {\n                // Outer engine glow - softer\n                glow.material.emissiveIntensity = 0.5 + power * 0.8;\n                glow.material.opacity = 0.2 + power * 0.3;\n            }\n            \n            // Scale the glow with power\n            const scale = 1 + power * 0.8;\n            glow.scale.set(scale, scale, scale * 1.2); // Stretch slightly on z-axis\n        });\n        \n        // Update engine trail particles\n        if (this.engineTrailParticles) {\n            this.engineTrailParticles.visible = power > 0.2;\n            \n            // Scale particle sizes based on power\n            if (this.engineTrailParticles.geometry.attributes.size) {\n                const sizes = this.engineTrailParticles.geometry.attributes.size.array;\n                const baseSizes = this.engineTrailParticles.userData.baseSizes || \n                                  Array.from(sizes); // Store original sizes if not saved\n                                  \n                // Save original sizes\n                if (!this.engineTrailParticles.userData.baseSizes) {\n                    this.engineTrailParticles.userData.baseSizes = baseSizes;\n                }\n                \n                // Scale sizes\n                for (let i = 0; i < sizes.length; i++) {\n                    sizes[i] = baseSizes[i] * (1 + power * 2);\n                }\n                \n                this.engineTrailParticles.geometry.attributes.size.needsUpdate = true;\n            }\n        }\n    }\n    \n    // Activate teleport beam\n    activateTeleportBeam() {\n        if (this.teleportBeam) {\n            this.teleportBeam.visible = true;\n            this.teleportParticles.visible = true;\n            this.impactRing.visible = true;\n            this.teleportBeamActive = true;\n            \n            // Reset animation time\n            this.teleportBeam.material.uniforms.time.value = 0;\n            this.impactRing.material.uniforms.time.value = 0;\n            if (this.teleportParticles.material.uniforms) {\n                this.teleportParticles.material.uniforms.time.value = 0;\n            }\n        }\n    }\n    \n    // Deactivate teleport beam\n    deactivateTeleportBeam() {\n        if (this.teleportBeam) {\n            this.teleportBeam.visible = false;\n            this.teleportParticles.visible = false;\n            this.impactRing.visible = false;\n            this.teleportBeamActive = false;\n        }\n    }\n    \n    // Update teleport beam effect\n    updateTeleportBeam(progress) {\n        if (!this.teleportBeamActive) return;\n        \n        // Update shader time uniforms for animation\n        const timeIncrement = 0.02;\n        \n        if (this.teleportBeam && this.teleportBeam.material.uniforms) {\n            this.teleportBeam.material.uniforms.time.value += timeIncrement;\n            \n            // Pulse the beam based on progress\n            const intensity = 0.3 + Math.sin(progress * Math.PI * 6) * 0.1;\n            this.teleportBeam.material.uniforms.pulseAmplitude.value = intensity;\n        }\n        \n        // Update impact ring\n        if (this.impactRing && this.impactRing.material.uniforms) {\n            this.impactRing.material.uniforms.time.value += timeIncrement;\n            \n            // Scale the impact ring with progress\n            const ringScale = 1.0 + Math.sin(progress * Math.PI * 3) * 0.2;\n            this.impactRing.scale.set(ringScale, ringScale, 1);\n        }\n        \n        // Animate particles\n        if (this.teleportParticles && this.teleportParticles.material.uniforms) {\n            this.teleportParticles.material.uniforms.time.value += timeIncrement;\n            \n            // Moving particles\n            const positions = this.teleportParticles.geometry.attributes.position.array;\n            \n            // Move particles downward and reset when they reach bottom\n            for (let i = 0; i < positions.length; i += 3) {\n                // Move particle down faster\n                positions[i + 1] -= 5;\n                \n                // Add slight horizontal movement for realism\n                positions[i] += (Math.random() - 0.5) * 2;\n                positions[i + 2] += (Math.random() - 0.5) * 2;\n                \n                // Reset particle when it gets too far\n                if (positions[i + 1] < -1000) {\n                    // Get a reference position to place particle within beam\n                    const isInnerBeam = Math.random() > 0.3;\n                    const radius = isInnerBeam ? \n                        Math.random() * 40 : // Inner beam\n                        40 + Math.random() * 180; // Outer area\n                    const theta = Math.random() * Math.PI * 2;\n                    \n                    positions[i] = radius * Math.cos(theta);     // x\n                    positions[i + 1] = -(Math.random() * 400);   // y (reset to top of beam)\n                    positions[i + 2] = radius * Math.sin(theta); // z\n                }\n            }\n            \n            // Update buffer geometry\n            this.teleportParticles.geometry.attributes.position.needsUpdate = true;\n        }\n        \n        // Update engine trails if they exist\n        if (this.engineTrailParticles && this.engineTrailParticles.material.uniforms) {\n            this.engineTrailParticles.material.uniforms.time.value += timeIncrement;\n        }\n    }\n} ","// introSequence.js - Manages the cinematic Star Dreadnought intro sequence\n\nimport * as THREE from 'three';\nimport { StarDreadnought } from './environment/starDreadnought.js';\nimport { getAbsolutePath } from '../utils/pathUtils.js';\n\nexport class IntroSequence {\n    constructor(scene, camera, spaceship, audioManager) {\n        this.scene = scene;\n        this.camera = camera;\n        this.spaceship = spaceship;\n        this.audio = audioManager;\n        this.isPlaying = false;\n        this.sequenceTime = 0;\n        this.onComplete = null;\n        this.skipEnabled = false; // Only enable skip after first playthrough\n        \n        // Save initial camera position\n        this.initialCameraPosition = null;\n        this.initialCameraRotation = null;\n        \n        // Create StarDreadnought instance\n        this.starDreadnought = new StarDreadnought(scene);\n        \n        // Setup portal effect\n        this.setupPortalEffect();\n        \n        // Overlay for flash effects\n        this.setupOverlay();\n        \n        // Dialogue elements\n        this.dialogueBox = null;\n        this.dialogueText = null;\n        this.currentDialogueIndex = 0;\n        this.isTyping = false;\n        this.typeInterval = null;\n        \n        // Custom sound effects\n        this.introSounds = {};\n        \n        // Dialogue WAV files\n        this.dialogueWavs = [];\n        \n        // Dialogue lines\n        this.dialogueLines = [\n            \"CORP CONTROLLER: [static] Belter #337, status check. Your cryostasis cycle is now complete.\",\n            \"CORP CONTROLLER: Welcome to your deployment in the Sol System, circa 2077. As you can see, Earth is... well... let's just say \\\"available for unrestricted mining operations\\\" now.\",\n            \"CORP CONTROLLER: CorpEx Resource Acquisition reminds you that all planetary bodies in this system are now classified as \\\"unclaimed assets\\\" following the... unfortunate global circumstances.\",\n            \"CORP CONTROLLER: Your primary objective is resource extraction from the asteroid belt. Initial scans show promising mineral concentrations untouched since the evacuation.\",\n            \"CORP CONTROLLER: The Stargate remains your lifeline. Return for fuel, upgrades, trading, and your allocated 15 minutes of daily entertainment. Remember, a happy belter is a productive belter!\",\n            \"CORP CONTROLLER: Resource extraction targets are non-negotiable. Failure to meet quotas will result in extension of your 42-year contract.\",\n            \"CORP CONTROLLER: Oh, and our long-range scans have detected spectral drone activity in adjacent sectors. Remnants of old defense systems, probably. Nothing a resourceful belter like you can't handle.\",\n            \"CORP CONTROLLER: Connection terminating in 3...2...1... Don't die out there, #337. Replacement clones are expensive.\",\n            \"[TRANSMISSION TERMINATED]\",\n            \"[BELTER #337 DEPLOYMENT ACTIVE]\"\n        ];\n        \n        console.log(\"Intro sequence initialized\");\n        \n        // Load dialogue WAV files\n        this.loadDialogueWavs();\n        \n        // Create custom Tone.js sound effects\n        this.createIntroSoundEffects();\n    }\n    \n    // Load dialogue WAV files (1.wav through 8.wav)\n    loadDialogueWavs() {\n        console.log(\"Loading dialogue WAV files...\");\n        \n        try {\n            // Load 8 dialogue WAV files\n            for (let i = 1; i <= 8; i++) {\n                const audioPath = getAbsolutePath(`sounds/dialogue/${i}.wav`);\n                console.log(`Attempting to load dialogue file: ${audioPath}`);\n                \n                // Create audio element\n                const audio = new Audio();\n                \n                // Setup event handlers before setting src to avoid race conditions\n                audio.addEventListener('canplaythrough', () => {\n                    console.log(`Dialogue WAV ${i} loaded successfully`);\n                });\n                \n                audio.addEventListener('error', (e) => {\n                    console.warn(`Dialogue WAV ${i} not found or couldn't be loaded - this is normal if you haven't added the files yet`);\n                    // Don't log the full error object as it's noisy\n                });\n                \n                // Set source after adding event listeners\n                audio.src = audioPath;\n                \n                // Store reference even if loading fails - the game will just skip playing it\n                this.dialogueWavs.push(audio);\n            }\n            \n            console.log(\"Dialogue WAV files setup complete - they'll be used if available\");\n        } catch (error) {\n            console.error(\"Error in dialogue WAV files setup:\", error);\n        }\n    }\n    \n    // Create custom Tone.js sound effects for the intro sequence\n    createIntroSoundEffects() {\n        if (typeof Tone === 'undefined') {\n            console.error(\"Tone.js not available for intro sound effects\");\n            return;\n        }\n        \n        try {\n            console.log(\"Creating intro sequence sound effects...\");\n            \n            // Create warp portal sound\n            this.createWarpSound();\n            \n            // Create ship arrival sound\n            this.createShipArrivalSound();\n            \n            // Create teleport beam sound\n            this.createTeleportSound();\n            \n            console.log(\"Intro sequence sound effects created\");\n        } catch (error) {\n            console.error(\"Error creating intro sound effects:\", error);\n        }\n    }\n    \n    // Create warp portal sound effect\n    createWarpSound() {\n        try {\n            // Connect to master effects chain if available\n            const destination = this.audio && this.audio.masterEQ ? \n                this.audio.masterEQ : Tone.Destination;\n            \n            // Filter for warp sound\n            const warpFilter = new Tone.Filter({\n                type: \"lowpass\",\n                frequency: 2000,\n                Q: 2\n            }).connect(destination);\n            \n            // Add reverb for spaciousness\n            const warpReverb = new Tone.Reverb({\n                decay: 2,\n                wet: 0.5\n            }).connect(warpFilter);\n            \n            // Create synth for warp sound\n            const warpSynth = new Tone.FMSynth({\n                harmonicity: 3,\n                modulationIndex: 10,\n                oscillator: {\n                    type: \"sine\"\n                },\n                envelope: {\n                    attack: 0.1,\n                    decay: 0.2,\n                    sustain: 0.8,\n                    release: 1.5\n                },\n                modulation: {\n                    type: \"square\"\n                },\n                modulationEnvelope: {\n                    attack: 0.5,\n                    decay: 0.1,\n                    sustain: 0.2,\n                    release: 0.5\n                }\n            }).connect(warpReverb);\n            \n            // Create noise component for texture\n            const noiseFilter = new Tone.Filter({\n                type: \"bandpass\",\n                frequency: 700,\n                Q: 0.6\n            }).connect(destination);\n            \n            const noiseGain = new Tone.Gain(0.3).connect(noiseFilter);\n            const noise = new Tone.Noise(\"pink\").connect(noiseGain);\n            \n            // Store the sound\n            this.introSounds.warp = {\n                lastPlayTime: 0, // Track when we last played this sound\n                play: () => {\n                    if (this.audio && this.audio.muted) return;\n                    \n                    const now = Tone.now();\n                    \n                    // Prevent playing if it was played too recently (within 0.1 seconds)\n                    if (now - this.introSounds.warp.lastPlayTime < 0.1) {\n                        console.log(\"Preventing too rapid warp sound playback\");\n                        return;\n                    }\n                    \n                    // Update last play time\n                    this.introSounds.warp.lastPlayTime = now;\n                    \n                    // Set volume - reduced by 40%\n                    const volumeLevel = this.audio ? this.audio.sfxVolume * 0.36 : 0.18;\n                    warpSynth.volume.value = Tone.gainToDb(volumeLevel);\n                    \n                    // Start noise component with reduced volume\n                    noise.start();\n                    \n                    // Play descending sequence for portal forming\n                    warpSynth.triggerAttack(\"C5\", now);\n                    warpSynth.frequency.exponentialRampTo(\"C2\", 2, now);\n                    \n                    // Fade out noise after 3 seconds - start with lower gain\n                    noiseGain.gain.setValueAtTime(0.18, now);\n                    noiseGain.gain.exponentialRampTo(0.01, 3, now + 1);\n                    \n                    // Stop synth and noise after 3 seconds\n                    setTimeout(() => {\n                        warpSynth.triggerRelease();\n                        setTimeout(() => {\n                            noise.stop();\n                        }, 500);\n                    }, 3000);\n                }\n            };\n        } catch (error) {\n            console.error(\"Error creating warp sound:\", error);\n        }\n    }\n    \n    // Create ship arrival sound effect\n    createShipArrivalSound() {\n        try {\n            // Connect to master effects chain if available\n            const destination = this.audio && this.audio.masterEQ ? \n                this.audio.masterEQ : Tone.Destination;\n            \n            // Filter for arrival sound\n            const arrivalFilter = new Tone.Filter({\n                type: \"lowpass\",\n                frequency: 1200,\n                Q: 1\n            }).connect(destination);\n            \n            // Create synth for ship arrival sound\n            const arrivalSynth = new Tone.PolySynth(Tone.Synth, {\n                oscillator: {\n                    type: \"triangle\"\n                },\n                envelope: {\n                    attack: 0.02,\n                    decay: 0.3,\n                    sustain: 0.1,\n                    release: 0.8\n                }\n            }).connect(arrivalFilter);\n            \n            // Create deep bass for engine rumble\n            const rumbleFilter = new Tone.Filter({\n                type: \"lowpass\",\n                frequency: 200,\n                Q: 0.5\n            }).connect(destination);\n            \n            const rumbleSynth = new Tone.Synth({\n                oscillator: {\n                    type: \"sine\"\n                },\n                envelope: {\n                    attack: 0.1,\n                    decay: 0.3,\n                    sustain: 0.6,\n                    release: 1\n                }\n            }).connect(rumbleFilter);\n            \n            // Store the sound\n            this.introSounds.shipArrival = {\n                play: () => {\n                    if (this.audio && this.audio.muted) return;\n                    \n                    const now = Tone.now();\n                    \n                    // Set volume - reduced by 40%\n                    const volumeLevel = this.audio ? this.audio.sfxVolume * 0.42 : 0.24;\n                    arrivalSynth.volume.value = Tone.gainToDb(volumeLevel);\n                    rumbleSynth.volume.value = Tone.gainToDb(volumeLevel * 0.8); // Further reduced rumble\n                    \n                    // Play dramatic chord for ship appearance\n                    arrivalSynth.triggerAttackRelease([\"G3\", \"D4\", \"A4\"], 1.5, now);\n                    \n                    // Add engine rumble\n                    rumbleSynth.triggerAttack(\"G1\", now);\n                    rumbleSynth.frequency.exponentialRampTo(\"C2\", 2, now + 0.5);\n                    \n                    // Stop rumble after 2 seconds\n                    setTimeout(() => {\n                        rumbleSynth.triggerRelease();\n                    }, 2000);\n                }\n            };\n        } catch (error) {\n            console.error(\"Error creating ship arrival sound:\", error);\n        }\n    }\n    \n    // Create teleport beam sound effect\n    createTeleportSound() {\n        try {\n            // Connect to master effects chain if available\n            const destination = this.audio && this.audio.masterEQ ? \n                this.audio.masterEQ : Tone.Destination;\n            \n            // Filter for teleport sound\n            const teleportFilter = new Tone.Filter({\n                type: \"bandpass\",\n                frequency: 800,\n                Q: 2\n            }).connect(destination);\n            \n            // Add chorus for otherworldly effect\n            const teleportChorus = new Tone.Chorus({\n                frequency: 1.5,\n                delayTime: 3.5,\n                depth: 0.7,\n                wet: 0.5\n            }).connect(teleportFilter).start();\n            \n            // Create synth for teleport beam\n            const teleportSynth = new Tone.Synth({\n                oscillator: {\n                    type: \"sine\"\n                },\n                envelope: {\n                    attack: 0.05,\n                    decay: 0.2,\n                    sustain: 0.8,\n                    release: 1\n                }\n            }).connect(teleportChorus);\n            \n            // Create high-pitched accent for the beam\n            const beamFilter = new Tone.Filter({\n                type: \"highpass\",\n                frequency: 2000,\n                Q: 1\n            }).connect(destination);\n            \n            const beamSynth = new Tone.Synth({\n                oscillator: {\n                    type: \"square\"\n                },\n                envelope: {\n                    attack: 0.01,\n                    decay: 0.1,\n                    sustain: 0.6,\n                    release: 0.5\n                }\n            }).connect(beamFilter);\n            \n            // Store the sound\n            this.introSounds.teleport = {\n                play: () => {\n                    if (this.audio && this.audio.muted) return;\n                    \n                    const now = Tone.now();\n                    \n                    // Set volume - reduced by 40%\n                    const volumeLevel = this.audio ? this.audio.sfxVolume * 0.3 : 0.18;\n                    teleportSynth.volume.value = Tone.gainToDb(volumeLevel);\n                    beamSynth.volume.value = Tone.gainToDb(volumeLevel * 0.4); // Further reduced high pitch\n                    \n                    // Play upward sweep for teleport activation\n                    teleportSynth.triggerAttack(\"C4\", now);\n                    teleportSynth.frequency.exponentialRampTo(\"C6\", 1.5, now);\n                    \n                    // Add high-pitched beam activation sound\n                    beamSynth.triggerAttackRelease(\"E7\", 0.1, now + 0.3);\n                    setTimeout(() => {\n                        beamSynth.triggerAttackRelease(\"G7\", 0.1, now + 0.5);\n                    }, 200);\n                    \n                    // Release after 2 seconds\n                    setTimeout(() => {\n                        teleportSynth.triggerRelease();\n                    }, 2000);\n                }\n            };\n        } catch (error) {\n            console.error(\"Error creating teleport sound:\", error);\n        }\n    }\n    \n    setupDialogueUI() {\n        // Create dialogue box\n        this.dialogueBox = document.createElement('div');\n        this.dialogueBox.id = 'intro-dialogue';\n        this.dialogueBox.style.position = 'fixed';\n        this.dialogueBox.style.bottom = '50px';\n        this.dialogueBox.style.left = '50%';\n        this.dialogueBox.style.transform = 'translateX(-50%)';\n        this.dialogueBox.style.width = '80%';\n        this.dialogueBox.style.maxWidth = '800px';\n        this.dialogueBox.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n        this.dialogueBox.style.color = '#30f0c0';\n        this.dialogueBox.style.border = '1px solid #30f0c0';\n        this.dialogueBox.style.borderRadius = '5px';\n        this.dialogueBox.style.padding = '15px';\n        this.dialogueBox.style.fontFamily = 'Courier New, monospace';\n        this.dialogueBox.style.fontSize = '16px';\n        this.dialogueBox.style.zIndex = '10000';\n        this.dialogueBox.style.textShadow = '0 0 5px #30f0c0';\n        this.dialogueBox.style.boxShadow = '0 0 10px rgba(48, 240, 192, 0.3)';\n        this.dialogueBox.style.opacity = '0';\n        this.dialogueBox.style.transition = 'opacity 0.5s';\n        \n        // Add dialogue text element\n        this.dialogueText = document.createElement('div');\n        this.dialogueText.style.lineHeight = '1.5';\n        \n        this.dialogueBox.appendChild(this.dialogueText);\n        document.body.appendChild(this.dialogueBox);\n        \n        // Fade in dialogue box\n        setTimeout(() => {\n            this.dialogueBox.style.opacity = '1';\n        }, 200);\n    }\n    \n    typeNextDialogue() {\n        if (this.currentDialogueIndex >= this.dialogueLines.length) {\n            return;\n        }\n        \n        const line = this.dialogueLines[this.currentDialogueIndex];\n        \n        // Play the appropriate dialogue WAV file\n        // Only play WAVs for the first 8 dialogues (the ones with voice acting)\n        if (this.currentDialogueIndex < 8 && this.dialogueWavs[this.currentDialogueIndex]) {\n            try {\n                const dialogueAudio = this.dialogueWavs[this.currentDialogueIndex];\n                \n                // Only attempt to play if the file has actually loaded successfully\n                // We can check this by examining the networkState or readyState\n                if (dialogueAudio.readyState > 0 && dialogueAudio.error === null) {\n                    dialogueAudio.volume = this.audio ? this.audio.sfxVolume * 0.8 : 0.5;\n                    dialogueAudio.currentTime = 0;\n                    \n                    // Try to play and catch any potential errors\n                    const playPromise = dialogueAudio.play();\n                    if (playPromise !== undefined) {\n                        playPromise.catch(err => {\n                            console.warn(`Couldn't play dialogue WAV ${this.currentDialogueIndex}: ${err.message}`);\n                        });\n                    }\n                } else {\n                    console.log(`Skipping dialogue WAV ${this.currentDialogueIndex + 1} (not loaded)`);\n                }\n            } catch (error) {\n                console.warn(`Error playing dialogue WAV ${this.currentDialogueIndex + 1}, continuing without audio`, error.message);\n            }\n        }\n        \n        this.currentDialogueIndex++;\n        \n        // Clear previous text\n        this.dialogueText.textContent = '';\n        \n        // Show dialogue box if not visible\n        if (this.dialogueBox.style.opacity === '0') {\n            this.dialogueBox.style.opacity = '1';\n        }\n        \n        // Type out text\n        let charIndex = 0;\n        this.isTyping = true;\n        \n        // Clear previous interval if exists\n        if (this.typeInterval) {\n            clearInterval(this.typeInterval);\n        }\n        \n        // Special effects for transmission terminated line\n        if (line.includes(\"TRANSMISSION TERMINATED\") || line.includes(\"DEPLOYMENT ACTIVE\")) {\n            this.dialogueText.style.color = '#ff3030';\n        } else {\n            this.dialogueText.style.color = '#30f0c0';\n        }\n        \n        // Type each character with random speed for effect\n        this.typeInterval = setInterval(() => {\n            if (charIndex < line.length) {\n                this.dialogueText.textContent += line.charAt(charIndex);\n                charIndex++;\n                \n                // Play typing sound\n                if (this.audio && this.audio.playSound && charIndex % 3 === 0) {\n                    // Try to play a typing sound if available\n                    if (typeof this.audio.playSound === 'function') {\n                        try {\n                            this.audio.playSound('uiClick', 0.1); // Low volume typing sound\n                        } catch (e) {\n                            // Ignore if sound not available\n                        }\n                    }\n                }\n            } else {\n                clearInterval(this.typeInterval);\n                this.typeInterval = null;\n                this.isTyping = false;\n                \n                // Automatically advance to next dialogue after a delay\n                // but only for certain progress points in the sequence\n                if (this.sequenceTime < 22) { // Don't auto advance during the very end\n                    const waitTime = Math.max(line.length * 50, 3000); // Longer lines stay longer\n                    setTimeout(() => {\n                        if (!this.isTyping && this.isPlaying) {\n                            this.typeNextDialogue();\n                        }\n                    }, waitTime);\n                }\n            }\n        }, 30); // Base typing speed\n    }\n    \n    setupPortalEffect() {\n        // Create a circular portal instead of a particle tower\n        const portalGeometry = new THREE.RingGeometry(0, 400, 64);\n        const portalMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                time: { value: 0 },\n                color: { value: new THREE.Color(0x6633aa) }\n            },\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                }\n            `,\n            fragmentShader: `\n                uniform float time;\n                uniform vec3 color;\n                varying vec2 vUv;\n                \n                void main() {\n                    float distFromCenter = length(vUv - vec2(0.5, 0.5)) * 2.0;\n                    float ripple = sin(distFromCenter * 20.0 - time * 3.0) * 0.5 + 0.5;\n                    float alpha = (1.0 - distFromCenter) * ripple;\n                    \n                    vec3 finalColor = color * (0.8 + ripple * 0.4);\n                    gl_FragColor = vec4(finalColor, alpha);\n                }\n            `,\n            transparent: true,\n            side: THREE.DoubleSide\n        });\n        \n        this.warpPortal = new THREE.Mesh(portalGeometry, portalMaterial);\n        \n        // Create a subtle particle system around the portal for effect\n        const particleCount = 500;\n        const particles = new THREE.BufferGeometry();\n        const positions = new Float32Array(particleCount * 3);\n        \n        for (let i = 0; i < particleCount; i++) {\n            const angle = Math.random() * Math.PI * 2;\n            const radius = 350 + Math.random() * 150;\n            positions[i * 3] = Math.cos(angle) * radius;\n            positions[i * 3 + 1] = Math.sin(angle) * radius;\n            positions[i * 3 + 2] = (Math.random() - 0.5) * 50;\n        }\n        \n        particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n        \n        const particleMaterial = new THREE.PointsMaterial({\n            color: 0xaa33ff,\n            size: 3,\n            transparent: true,\n            blending: THREE.AdditiveBlending\n        });\n        \n        this.portalParticles = new THREE.Points(particles, particleMaterial);\n        \n        // Group the portal elements\n        this.warpTunnel = new THREE.Group();\n        this.warpTunnel.add(this.warpPortal);\n        this.warpTunnel.add(this.portalParticles);\n    }\n    \n    setupOverlay() {\n        // Create a DOM overlay for the flash effect\n        this.overlay = document.createElement('div');\n        this.overlay.id = 'intro-overlay';\n        this.overlay.style.position = 'fixed';\n        this.overlay.style.top = '0';\n        this.overlay.style.left = '0';\n        this.overlay.style.width = '100%';\n        this.overlay.style.height = '100%';\n        this.overlay.style.backgroundColor = '#aa33ff'; // Match portal color\n        this.overlay.style.opacity = '0';\n        this.overlay.style.transition = 'opacity 0.5s';\n        this.overlay.style.pointerEvents = 'none';\n        this.overlay.style.zIndex = '9999';\n        \n        // Add to DOM but hide initially\n        document.body.appendChild(this.overlay);\n    }\n    \n    startSequence(onComplete) {\n        if (this.isPlaying) return;\n        \n        console.log(\"Starting intro sequence...\");\n        this.isPlaying = true;\n        this.sequenceTime = 0;\n        this.onComplete = onComplete;\n        \n        // Store initial camera state to restore player camera after sequence\n        this.initialCameraPosition = this.camera.position.clone();\n        this.initialCameraRotation = this.camera.rotation.clone();\n        \n        // Position camera for initial view of portal forming\n        this.camera.position.set(0, 6000, 12000);\n        this.camera.lookAt(30000, 5000, 0); // Look at where portal will appear\n        \n        // Hide player ship during sequence\n        if (this.spaceship && this.spaceship.mesh) {\n            this.spaceship.mesh.visible = false;\n            \n            // Disable ship thrusters to prevent any movement\n            if (this.spaceship.thrust) {\n                this.spaceship.thrust.forward = false;\n                this.spaceship.thrust.backward = false;\n                this.spaceship.thrust.left = false;\n                this.spaceship.thrust.right = false;\n                this.spaceship.thrust.boost = false;\n            }\n            \n            // Make sure velocity is zero\n            if (this.spaceship.velocity) {\n                this.spaceship.velocity.set(0, 0, 0);\n            }\n        }\n        \n        // Add portal to scene\n        this.scene.add(this.warpTunnel);\n        \n        // Position the star dreadnought initially outside the scene\n        this.starDreadnought.ship.position.set(35000, 5000, 0); // Off-screen\n        this.starDreadnought.ship.rotation.y = Math.PI/2; // Face toward center\n        this.starDreadnought.ship.visible = false;\n        \n        // Start sequence animation\n        this.animate = this.animate.bind(this);\n        this.lastTime = performance.now();\n        requestAnimationFrame(this.animate);\n        \n        // Setup skip functionality\n        this.setupSkipHandler();\n        \n        // Setup dialogue UI\n        this.setupDialogueUI();\n        \n        // Start first dialogue line\n        setTimeout(() => {\n            this.typeNextDialogue();\n        }, 2000);\n        \n        // Play warp sound\n        if (this.introSounds.warp) {\n            // Initialize lastPlayTime for the first play\n            this.introSounds.warp.lastPlayTime = Tone.now() - 1; // Ensure it's been at least 1 second\n            this.introSounds.warp.play();\n        }\n    }\n    \n    animate(currentTime) {\n        if (!this.isPlaying) return;\n        \n        // Slower pace for more sublime experience\n        const deltaTime = Math.min((currentTime - this.lastTime) / 1000, 0.1) * 0.4; // 60% slower\n        this.lastTime = currentTime;\n        \n        // Update sequence timer\n        this.sequenceTime += deltaTime;\n        \n        // Just TWO phases - arrival and departure\n        if (this.sequenceTime < 14.0) {\n            // Phase 1: Portal, ship arrival and player deployment (0-14s)\n            this.updateArrivalPhase(this.sequenceTime / 14.0);\n        } else if (this.sequenceTime < 24.0) {\n            // Phase 2: Ship departure (14-24s)\n            this.updateDeparturePhase((this.sequenceTime - 14.0) / 10.0);\n        } else {\n            // Sequence complete\n            this.completeSequence();\n            return;\n        }\n        \n        requestAnimationFrame(this.animate);\n    }\n    \n    updateArrivalPhase(progress) {\n        // Portal animation\n        if (this.warpPortal && this.warpPortal.material.uniforms) {\n            this.warpPortal.material.uniforms.time.value += 0.016;\n        }\n        \n        // Position portal outside the asteroid belt\n        this.warpTunnel.position.set(30000, 5000, 0);\n        this.warpTunnel.rotation.z = Math.PI/2;\n        \n        // PORTAL GROWTH phase (0-0.2)\n        if (progress < 0.2) {\n            // Grow portal\n            const portalProgress = progress / 0.2;\n            const portalScale = portalProgress * 3.5;\n            this.warpTunnel.scale.set(portalScale, portalScale, 1);\n            \n            // Medium-distance side view of portal formation\n            this.camera.position.set(0, 6000, 12000);\n            this.camera.lookAt(30000, 5000, 0); // Look at portal\n        }\n        \n        // SHIP EMERGENCE and JOURNEY phase (0.2-0.7)\n        if (progress >= 0.2 && progress < 0.7) {\n            // Make ship visible when it first emerges\n            if (progress >= 0.2 && !this.starDreadnought.ship.visible) {\n                this.starDreadnought.ship.visible = true;\n                this.flashOverlay(0.3);\n                \n                // Play arrival sound using Tone.js\n                if (this.introSounds.shipArrival) {\n                    this.introSounds.shipArrival.play();\n                }\n            }\n            \n            // Smooth continuous movement along Bezier curve\n            const t = (progress - 0.2) / 0.5; // Normalized time for this phase\n            const easeInOut = t < 0.5 \n                ? 2 * t * t \n                : 1 - Math.pow(-2 * t + 2, 2) / 2;\n            \n            // Bezier curve control points for ship path\n            const start = new THREE.Vector3(30000, 5000, 0);        // Portal position\n            const control = new THREE.Vector3(26000, 5300, -2000);  // Control point for curve\n            const end = new THREE.Vector3(22000, 5000, 0);          // Final position above belt\n            \n            // Calculate position along quadratic Bezier curve\n            const p0 = new THREE.Vector3();\n            const p1 = new THREE.Vector3();\n            const p2 = new THREE.Vector3();\n            \n            p0.copy(start).multiplyScalar(Math.pow(1-easeInOut, 2));\n            p1.copy(control).multiplyScalar(2 * (1-easeInOut) * easeInOut);\n            p2.copy(end).multiplyScalar(easeInOut * easeInOut);\n            \n            const position = new THREE.Vector3()\n                .add(p0)\n                .add(p1)\n                .add(p2);\n            \n            // Add subtle vertical oscillation like a naval vessel\n            position.y += Math.sin(progress * Math.PI * 3) * 80;\n            \n            // Update ship position\n            this.starDreadnought.ship.position.copy(position);\n            \n            // Engine power during journey\n            const enginePower = 0.4 + easeInOut * 0.6;\n            this.starDreadnought.setEnginesPower(enginePower);\n            \n            // Fade out portal as ship moves away\n            if (progress > 0.3) {\n                const portalFade = Math.min((progress - 0.3) / 0.3, 1.0);\n                if (this.portalParticles.material) {\n                    this.portalParticles.material.opacity = 1 - portalFade;\n                }\n                if (this.warpPortal.material) {\n                    this.warpPortal.material.opacity = 1 - portalFade;\n                }\n            }\n            \n            // Tracking shot alongside ship journey\n            const shipPos = this.starDreadnought.ship.position.clone();\n            this.camera.position.set(\n                shipPos.x - 3000, \n                shipPos.y + 1000, \n                8000\n            );\n            this.camera.lookAt(shipPos);\n        }\n        \n        // PLAYER DEPLOYMENT phase (0.7-1.0)\n        if (progress >= 0.7) {\n            // Ensure portal is fully invisible\n            if (this.portalParticles.material) {\n                this.portalParticles.material.opacity = 0;\n            }\n            if (this.warpPortal.material) {\n                this.warpPortal.material.opacity = 0;\n            }\n            \n            // Activate teleport beam if not already active\n            if (progress < 0.75 && !this.starDreadnought.teleportBeamActive) {\n                this.starDreadnought.activateTeleportBeam();\n                \n                // Play teleport sound using Tone.js\n                if (this.introSounds.teleport) {\n                    this.introSounds.teleport.play();\n                }\n            }\n            \n            // Update teleport beam\n            this.starDreadnought.updateTeleportBeam(progress);\n            \n            // Deploy player ship\n            if (progress > 0.8 && this.spaceship && !this.spaceship.mesh.visible) {\n                // Position player ship BELOW dreadnought but ABOVE the asteroid belt\n                const dreadPos = this.starDreadnought.ship.position;\n                this.spaceship.mesh.position.set(\n                    dreadPos.x, \n                    dreadPos.y - 2000, // 2000 units below dreadnought\n                    dreadPos.z\n                );\n                \n                // Properly undock the ship - this is critical to update game state\n                if (this.spaceship.isDocked) {\n                    console.log(\"Undocking player ship during intro sequence\");\n                    this.spaceship.isDocked = false; // Force undock directly to avoid position reset\n                    this.spaceship.mesh.visible = true;\n                } else {\n                    this.spaceship.mesh.visible = true;\n                }\n                \n                // Store final player position\n                this.finalPlayerPosition = this.spaceship.mesh.position.clone();\n                \n                // Add shield effect to player ship\n                this.createPlayerShieldEffect();\n                \n                // Flash effect for ship appearance\n                this.flashOverlay(0.3);\n            }\n            \n            // Teleport beam view camera\n            const shipPos = this.starDreadnought.ship.position.clone();\n            const t = (progress - 0.7) / 0.3;\n            this.camera.position.set(\n                shipPos.x - 2000 + t * 2000,\n                shipPos.y + 2000,\n                5000 - t * 3000\n            );\n            \n            // Look at midpoint between ship and deployed player\n            const lookY = shipPos.y - 1000;\n            this.camera.lookAt(shipPos.x, lookY, shipPos.z);\n        }\n    }\n    \n    updateDeparturePhase(progress) {\n        // Simple departure sequence: rotate ship 180 degrees and go back through original portal\n        \n        // Original portal location\n        const portalPos = new THREE.Vector3(30000, 5000, 0);\n        \n        // FIRST HALF: Ship rotates and portal reappears (0-0.5)\n        if (progress < 0.5) {\n            // Turn off teleport beam at start\n            if (progress < 0.1 && this.starDreadnought.teleportBeamActive) {\n                this.starDreadnought.deactivateTeleportBeam();\n            }\n            \n            // Make portal visible again at original position\n            if (progress > 0.1) {\n                // Position portal back at original entry point\n                this.warpTunnel.position.copy(portalPos);\n                this.warpTunnel.visible = true;\n                this.warpTunnel.rotation.z = Math.PI/2; // Original orientation\n                \n                // Portal should be at full size immediately\n                this.warpTunnel.scale.set(3.5, 3.5, 1);\n                \n                // Fade in portal\n                const portalProgress = Math.min((progress - 0.1) / 0.3, 1.0);\n                if (this.portalParticles.material) {\n                    this.portalParticles.material.opacity = portalProgress;\n                }\n                if (this.warpPortal.material) {\n                    this.warpPortal.material.opacity = portalProgress;\n                }\n            }\n            \n            // Simple 180 degree rotation\n            if (progress > 0.2) {\n                const rotateProgress = Math.min((progress - 0.2) / 0.3, 1.0);\n                const startRot = Math.PI/2;  // Currently facing center\n                const endRot = 3 * Math.PI/2; // 180 degree rotation (facing back toward original portal)\n                this.starDreadnought.ship.rotation.y = startRot + (endRot - startRot) * rotateProgress;\n            }\n            \n            // Fixed camera position from the side to view the rotation\n            const shipPos = this.starDreadnought.ship.position.clone();\n            this.camera.position.set(\n                shipPos.x,\n                shipPos.y + 3000, // High-ish angle\n                shipPos.z + 8000  // Side view\n            );\n            this.camera.lookAt(shipPos);\n        }\n        \n        // SECOND HALF: Ship accelerates through original portal and disappears (0.5-1.0)\n        else {\n            // Calculate movement progress for this phase\n            const moveProgress = (progress - 0.5) / 0.5;\n            \n            // Ship position calculation - go back toward original portal\n            const startPos = new THREE.Vector3(22000, 5000, 0); // Ship's current position\n            const beyondPos = new THREE.Vector3(35000, 5000, 0); // Beyond portal\n            \n            // Simple acceleration curve\n            const easeIn = moveProgress * moveProgress; // Accelerating movement\n            \n            // Ship position calculation\n            let position;\n            if (moveProgress < 0.7) {\n                // Move to portal\n                const t = easeIn / 0.5; // Normalized and accelerated\n                position = new THREE.Vector3().lerpVectors(startPos, portalPos, t);\n            } else {\n                // Continue beyond portal\n                const t = (moveProgress - 0.7) / 0.3;\n                position = new THREE.Vector3().lerpVectors(portalPos, beyondPos, t);\n            }\n            \n            // Update ship position\n            this.starDreadnought.ship.position.copy(position);\n            \n            // Increase engine power for dramatic exit\n            this.starDreadnought.setEnginesPower(0.7 + moveProgress * 0.8);\n            \n            // Flash when ship enters portal\n            if (moveProgress > 0.6 && moveProgress < 0.63) {\n                this.flashOverlay(0.4);\n                \n                // Play warp sound for re-entry but only exactly once at 0.61\n                if (this.introSounds.warp && Math.abs(moveProgress - 0.61) < 0.01) {\n                    this.introSounds.warp.play();\n                }\n            }\n            \n            // Hide ship after it enters portal\n            if (moveProgress > 0.65) {\n                this.starDreadnought.ship.visible = false;\n            }\n            \n            // Collapse portal at the very end\n            if (moveProgress > 0.9) {\n                const collapseProgress = (moveProgress - 0.9) / 0.1;\n                const collapseScale = (1 - collapseProgress) * 3.5;\n                this.warpTunnel.scale.set(collapseScale, collapseScale, 1);\n            }\n            \n            // Static camera position showing ship's departure path\n            const shipPos = startPos.clone(); // Use initial position as reference\n            this.camera.position.set(\n                shipPos.x - 2000,\n                shipPos.y + 3000,\n                10000 // Side view\n            );\n            // Look at the midpoint of the departure path\n            const lookPos = new THREE.Vector3().lerpVectors(startPos, portalPos, 0.5);\n            this.camera.lookAt(lookPos);\n        }\n    }\n    \n    createPlayerShieldEffect() {\n        // Create a sphere slightly larger than the player ship\n        const geometry = new THREE.SphereGeometry(30, 32, 32);\n        const material = new THREE.MeshBasicMaterial({\n            color: 0x88ccff,\n            transparent: true, \n            opacity: 0.6,\n            side: THREE.DoubleSide\n        });\n        \n        this.playerShieldEffect = new THREE.Mesh(geometry, material);\n        this.playerShieldEffect.scale.set(1.2, 1.2, 1.2);\n        this.spaceship.mesh.add(this.playerShieldEffect);\n        \n        // Add pulsing animation\n        this.shieldPulseTime = 0;\n    }\n    \n    // Update portal shader uniforms\n    updatePortalEffect() {\n        if (this.warpPortal && this.warpPortal.material.uniforms) {\n            this.warpPortal.material.uniforms.time.value += 0.016;\n        }\n    }\n    \n    flashOverlay(maxOpacity = 0.6) {\n        if (!this.overlay) return;\n        \n        // Flash overlay effect\n        this.overlay.style.opacity = maxOpacity.toString();\n        \n        // Fade out after flash\n        setTimeout(() => {\n            this.overlay.style.opacity = '0';\n        }, 300);\n    }\n    \n    setupSkipHandler() {\n        // Add skip button\n        const skipButton = document.createElement('div');\n        skipButton.id = 'skip-intro-button';\n        skipButton.textContent = 'SKIP INTRO';\n        skipButton.style.position = 'fixed';\n        skipButton.style.bottom = '10px';\n        skipButton.style.left = '50%';\n        skipButton.style.transform = 'translateX(-50%)';\n        skipButton.style.padding = '10px 15px';\n        skipButton.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n        skipButton.style.color = '#30f0c0';\n        skipButton.style.border = '1px solid #30f0c0';\n        skipButton.style.borderRadius = '5px';\n        skipButton.style.cursor = 'pointer';\n        skipButton.style.zIndex = '10000';\n        skipButton.style.fontFamily = 'Courier New, monospace';\n        skipButton.style.boxShadow = '0 0 10px rgba(48, 240, 192, 0.3)';\n        \n        skipButton.addEventListener('click', () => {\n            this.skipSequence();\n        });\n        \n        document.body.appendChild(skipButton);\n        this.skipButton = skipButton;\n    }\n    \n    skipSequence() {\n        console.log(\"Skipping intro sequence\");\n        \n        // End the sequence immediately\n        this.completeSequence();\n        \n        // Make sure the ship is properly docked\n        if (this.spaceship) {\n            // Ensure the ship is docked\n            this.spaceship.isDocked = true;\n            \n            // Set ship to proper docking position if necessary\n            if (this.spaceship.mesh) {\n                // Position near stargate (these values should match your stargate position)\n                this.spaceship.mesh.position.set(22000, 5000, 0);\n            }\n        }\n        \n        // Show the stargate UI terminal\n        // Access the game instance to use its docking functionality\n        if (window.gameInstance && \n            window.gameInstance.controls && \n            window.gameInstance.controls.dockingSystem) {\n            \n            // Explicitly show stargate UI\n            setTimeout(() => {\n                window.gameInstance.controls.dockingSystem.dockWithStargate();\n                console.log(\"Stargate UI shown after skip\");\n            }, 100);\n        }\n    }\n    \n    completeSequence() {\n        console.log(\"Intro sequence complete\");\n        this.isPlaying = false;\n        \n        // Remove warp tunnel from scene\n        this.scene.remove(this.warpTunnel);\n        \n        // Hide dreadnought\n        this.starDreadnought.ship.visible = false;\n        \n        // Enable skip button for next time\n        this.skipEnabled = true;\n        \n        // Remove shield effect from player\n        if (this.playerShieldEffect) {\n            this.spaceship.mesh.remove(this.playerShieldEffect);\n            this.playerShieldEffect = null;\n        }\n        \n        // Remove skip button if it exists\n        if (this.skipButton) {\n            document.body.removeChild(this.skipButton);\n            this.skipButton = null;\n        }\n        \n        // Remove overlay from DOM completely\n        if (this.overlay) {\n            document.body.removeChild(this.overlay);\n            this.overlay = null;\n        }\n        \n        // Remove dialogue box if it exists\n        if (this.dialogueBox) {\n            document.body.removeChild(this.dialogueBox);\n            this.dialogueBox = null;\n        }\n        \n        // Clear typing interval if running\n        if (this.typeInterval) {\n            clearInterval(this.typeInterval);\n            this.typeInterval = null;\n        }\n        \n        // Make sure player ship is visible but DO NOT reset position\n        if (this.spaceship && this.spaceship.mesh) {\n            this.spaceship.mesh.visible = true;\n            \n            // IMPORTANT: Make sure ship is properly undocked\n            if (this.spaceship.isDocked) {\n                console.log(\"Forcing ship to undocked state after intro sequence\");\n                this.spaceship.isDocked = false;\n            }\n            \n            // Log the final player position for debugging\n            console.log(\"Player final position:\", \n                this.spaceship.mesh.position.x, \n                this.spaceship.mesh.position.y, \n                this.spaceship.mesh.position.z\n            );\n        }\n        \n        // Call completion callback if provided\n        if (this.onComplete && typeof this.onComplete === 'function') {\n            // Use setTimeout to make sure this executes after the animation frame\n            setTimeout(() => {\n                console.log(\"Executing intro sequence completion callback\");\n                this.onComplete();\n            }, 100);\n        }\n    }\n\n    /**\n     * Clean up resources when intro sequence is no longer needed\n     */\n    destroy() {\n        // Cancel animation frame if running\n        if (this.animationFrameId) {\n            cancelAnimationFrame(this.animationFrameId);\n            this.animationFrameId = null;\n        }\n        \n        // Clean up dialogue interval\n        if (this.typeInterval) {\n            clearInterval(this.typeInterval);\n            this.typeInterval = null;\n        }\n        \n        // Clean up DOM elements\n        if (this.dialogueBox && this.dialogueBox.parentNode) {\n            this.dialogueBox.parentNode.removeChild(this.dialogueBox);\n        }\n        \n        if (this.overlay && this.overlay.parentNode) {\n            this.overlay.parentNode.removeChild(this.overlay);\n        }\n        \n        // Remove skip handler\n        document.removeEventListener('keydown', this.skipHandler);\n        \n        // Remove portal effect from scene\n        if (this.portalMesh && this.portalMesh.parent) {\n            this.portalMesh.parent.remove(this.portalMesh);\n        }\n        if (this.portalFlare && this.portalFlare.parent) {\n            this.portalFlare.parent.remove(this.portalFlare);\n        }\n        \n        // Dispose of THREE.js objects\n        if (this.portalMesh) {\n            if (this.portalMesh.geometry) this.portalMesh.geometry.dispose();\n            if (this.portalMesh.material) this.portalMesh.material.dispose();\n        }\n        if (this.portalFlare) {\n            if (this.portalFlare.geometry) this.portalFlare.geometry.dispose();\n            if (this.portalFlare.material) this.portalFlare.material.dispose();\n        }\n        \n        // Dispose of star dreadnought resources\n        if (this.starDreadnought && typeof this.starDreadnought.destroy === 'function') {\n            this.starDreadnought.destroy();\n        }\n        \n        // Dispose of Tone.js sound effects\n        if (this.introSounds) {\n            Object.values(this.introSounds).forEach(sound => {\n                if (sound.dispose && typeof sound.dispose === 'function') {\n                    sound.dispose();\n                }\n            });\n            this.introSounds = {};\n        }\n        \n        // Clear references to help GC\n        this.scene = null;\n        this.camera = null;\n        this.spaceship = null;\n        this.audio = null;\n        this.starDreadnought = null;\n        this.portalMesh = null;\n        this.portalFlare = null;\n        this.portalGeometry = null;\n        this.portalMaterial = null;\n        this.dialogueWavs = [];\n    }\n} ","// perfOverlay.js - Minimal scaffold for performance overlay toggle (F3)\n// Feature flag default ON per V07_TIGHTENING\n\nconst FEATURE_FLAG = true; // V07_TIGHTENING default ON\n\nexport class PerfOverlay {\n  constructor() {\n    // Global perf sink\n    if (!window.__perf) {\n      window.__perf = {\n        enabled: false,\n        fps: 0,\n        simMs: 0,\n        renderMs: 0,\n        drawCalls: 0,\n        visibleInstances: 0,\n        pools: { hits: 0, misses: 0 },\n        gc: 0,\n        systems: {},\n      };\n    }\n\n    this.panel = null;\n    this.lastUpdate = 0;\n    this.updateHzMs = 500; // ~2Hz\n\n    // optional GC observer (best-effort)\n    try {\n      if ('PerformanceObserver' in window && performance && performance.observe) {\n        // no-op, older API; fallback below\n      }\n      if ('PerformanceObserver' in window) {\n        const obs = new PerformanceObserver((list) => {\n          for (const entry of list.getEntries()) {\n            if (entry.entryType === 'gc') {\n              if (!window.__perf.gc) window.__perf.gc = 0;\n              window.__perf.gc += 1;\n            }\n          }\n        });\n        obs.observe({ entryTypes: ['gc'] });\n        this._gcObserver = obs;\n      }\n    } catch {}\n\n    if (FEATURE_FLAG) {\n      // Hook F3 toggle\n      document.addEventListener('keydown', (e) => {\n        if (e.key === 'F3') {\n          this.toggle();\n        }\n      });\n    }\n  }\n\n  toggle() {\n    window.__perf.enabled = !window.__perf.enabled;\n    if (window.__perf.enabled) {\n      this.ensurePanel();\n      this.renderOnce();\n    } else {\n      this.destroy();\n    }\n  }\n\n  ensurePanel() {\n    if (this.panel) return;\n    const el = document.createElement('div');\n    el.id = 'perf-overlay';\n    el.style.position = 'fixed';\n    el.style.top = '8px';\n    el.style.right = '8px';\n    el.style.minWidth = '220px';\n    el.style.maxWidth = '320px';\n    el.style.background = 'rgba(0,0,0,0.6)';\n    el.style.color = '#9ef7ff';\n    el.style.fontFamily = 'monospace';\n    el.style.fontSize = '12px';\n    el.style.lineHeight = '1.4';\n    el.style.padding = '8px 10px';\n    el.style.border = '1px solid rgba(158,247,255,0.3)';\n    el.style.borderRadius = '6px';\n    el.style.zIndex = '99999';\n    el.style.pointerEvents = 'none';\n    el.innerHTML = this.renderContent();\n    document.body.appendChild(el);\n    this.panel = el;\n\n    // Start a lightweight interval to update ~2Hz\n    this.interval = setInterval(() => this.renderOnce(), this.updateHzMs);\n  }\n\n  renderOnce() {\n    if (!this.panel) return;\n    this.panel.innerHTML = this.renderContent();\n  }\n\n  renderContent() {\n    const p = window.__perf;\n    const systems = p.systems ? Object.entries(p.systems).slice(0, 8) : [];\n    const sysHtml = systems.map(([k,v]) => `<div>${k}: ${Number(v).toFixed(2)} ms</div>`).join('');\n    return (\n      `<div style=\\\"opacity:.85\\\">` +\n      `<div><b>Perf Overlay</b> (F3)</div>` +\n      `<div>FPS: ${Math.round(p.fps || 0)}</div>` +\n      `<div>Sim: ${Number(p.simMs || 0).toFixed(2)} ms</div>` +\n      `<div>Render: ${Number(p.renderMs || 0).toFixed(2)} ms</div>` +\n      `<div>DrawCalls: ${p.drawCalls || 0}</div>` +\n      `<div>Instances: ${p.visibleInstances || 0}</div>` +\n      `<div>Pool hits/misses: ${(p.pools?.hits||0)} / ${(p.pools?.misses||0)}</div>` +\n      `<div>GC: ${p.gc || 0}</div>` +\n      `<div style=\\\"margin-top:6px; border-top:1px solid rgba(158,247,255,.2)\\\">` +\n      `<div><b>Systems</b></div>` + sysHtml +\n      `</div>` +\n      `</div>`\n    );\n  }\n\n  destroy() {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n    if (this._gcObserver && this._gcObserver.disconnect) {\n      this._gcObserver.disconnect();\n      this._gcObserver = null;\n    }\n    if (this.panel && this.panel.parentNode) {\n      this.panel.parentNode.removeChild(this.panel);\n    }\n    this.panel = null;\n  }\n}\n\nexport function initPerfOverlay() {\n  // Create once, attach to window for future hooks\n  if (!window.__perfOverlay) {\n    window.__perfOverlay = new PerfOverlay();\n  }\n  return window.__perfOverlay;\n}\n\n\n","// main.js - Main entry point for the game\n\n// Global debug flag - set to true for development\nwindow.DEBUG_MODE = false;\n\nimport * as THREE from 'three';\nimport { Renderer } from './modules/renderer.js';\nimport { Spaceship } from './modules/spaceship.js';\nimport { Physics } from './modules/physics.js';\nimport { Environment } from './modules/environment.js';\nimport { Controls } from './modules/controls.js';\nimport { UI } from './modules/ui.js';\nimport { AudioManager } from './modules/audio.js';\nimport { Combat } from './modules/combat.js';\nimport { MessageBus } from './core/messageBus.js';\nimport { IntroSequence } from './modules/introSequence.js';\nimport { DifficultyManager } from './core/difficultyManager.js';\nimport { getGlobalPoolRegistry } from './modules/pooling/PoolRegistry.js';\nimport { initPerfOverlay } from './modules/debug/perfOverlay.js';\n\n// Global vector pool for reusing vector objects\nwindow.vectorPool = {\n    pool: [],\n    maxSize: 100,\n    \n    get: function(x = 0, y = 0, z = 0) {\n        if (this.pool.length > 0) {\n            return this.pool.pop().set(x, y, z);\n        }\n        return new THREE.Vector3(x, y, z);\n    },\n    \n    release: function(vector) {\n        if (this.pool.length < this.maxSize) {\n            this.pool.push(vector);\n        }\n    }\n};\n\nclass Game {\n    constructor() {\n        console.log(\"Initializing game...\");\n        \n        // Make game instance globally accessible for emergency access\n        window.game = this;\n        \n        // Set up global message bus for cross-system communication\n        window.mainMessageBus = new MessageBus();\n        window.mainMessageBus.subscribe('game.over', this.gameOver.bind(this));\n        \n        try {\n            // Create audio manager first but don't initialize yet\n            console.log(\"Creating audio manager...\");\n            this.audio = new AudioManager();\n            \n            // Initialize renderer first\n            console.log(\"Creating renderer...\");\n            this.renderer = new Renderer();\n            console.log(\"Renderer created, getting scene...\");\n            \n            // Access scene and camera directly rather than through getters\n            this.scene = this.renderer.scene;\n            this.camera = this.renderer.camera;\n            \n            console.log(\"Scene and camera references obtained\");\n            \n            // Share camera reference with scene for easy access by other components\n            this.scene.camera = this.camera;\n            \n            // Initialize essential components needed for the start screen\n            console.log(\"Initializing essential components...\");\n            \n            // Initialize physics\n            this.physics = new Physics(this.scene);\n            \n            // Set camera reference in physics\n            this.physics.setCamera(this.camera);\n            \n            // Initialize environment (essential components only)\n            this.environment = new Environment(this.scene);\n            \n            // Initialize spaceship\n            console.log(\"Creating spaceship...\");\n            this.spaceship = new Spaceship(this.scene);\n            \n            // Set spaceship reference in physics\n            this.physics.setSpaceship(this.spaceship);\n            \n            // Set spaceship reference in environment (for VibeVerse portals)\n            this.environment.setSpaceship(this.spaceship);\n            \n            // Initialize UI\n            this.ui = new UI(this.spaceship, this.environment);\n            \n            // Share audio reference with UI for sound-based components\n            this.ui.setAudio(this.audio);\n            \n            // Initialize controls last, as it depends on other components\n            this.controls = new Controls(this.spaceship, this.physics, this.environment, this.ui);\n            \n            // Share controls reference with UI for bidirectional communication\n            this.ui.setControls(this.controls);\n            \n            // Initialize settings\n            console.log(\"Initializing settings...\");\n            this.ui.initializeSettings(this);\n            \n            // Game state\n            this.isGameOver = false;\n            this.lastUpdateTime = performance.now();\n            this.frameCount = 0;\n            this.currentFPS = 0;\n            this.introSequenceActive = false; // Flag to prevent player control during intro\n            this.gameTime = 0; // Track total game time in seconds\n\n            // Perf overlay & sink\n            initPerfOverlay();\n            if (!window.__perf) window.__perf = {};\n            window.__perf.enabled = false;\n            \n            // Detect mobile device\n            this.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||\n                           (window.matchMedia && window.matchMedia('(max-width: 768px)').matches);\n            \n            // Frame rate cap (defaults to auto/monitor refresh rate)\n            this.frameRateCap = 0; // Will be updated by settings or refresh rate detection\n            \n            // Apply settings if available (restored block)\n            if (this.ui && this.ui.settings) {\n                // If using 'auto' setting, apply refresh rate detection\n                if (this.ui.settings.settings.frameRateCap === 'auto') {\n                    const refreshRate = this.ui.settings.monitorRefreshRate || 60;\n                    \n                    // Mobile devices: cap at 60fps for battery life\n                    if (this.isMobile) {\n                        this.frameRateCap = 60;\n                        console.log(`Mobile device detected: capping at 60fps for battery life`);\n                    }\n                    // High refresh displays: use fixed timestep with interpolation\n                    else if (refreshRate > 65) {\n                        this.frameRateCap = 0; // Unlimited with fixed timestep\n                        console.log(`High refresh display (${refreshRate}Hz): using fixed timestep with interpolation`);\n                    } else {\n                        this.frameRateCap = refreshRate;\n                        console.log(`Standard display: matching refresh rate at ${refreshRate}Hz`);\n                    }\n                } else {\n                    // Otherwise use the specific setting value\n                    this.frameRateCap = parseInt(this.ui.settings.settings.frameRateCap) || 0;\n                    \n                    // Override for mobile if unlimited is selected\n                    if (this.isMobile && this.frameRateCap === 0) {\n                        this.frameRateCap = 60;\n                        console.log(`Mobile device: overriding unlimited to 60fps`);\n                    }\n                }\n                console.log(`Applied frame rate cap: ${this.frameRateCap}`);\n            }\n            \n            // Time tracking for frame rate cap and FPS calculation\n            this.lastFrameTime = 0;\n            this.actualFrameTime = 0;\n            this.frameStartTime = 0;\n            this.accumulator = 0;\n            this.fixedDeltaTime = 1/60; // Fixed 60 Hz update rate\n            \n            // FPS averaging for smoother display\n            this.fpsBuffer = [];\n            this.fpsBufferSize = 15; // Smaller buffer for more responsive updates\n            \n            // Initialize difficulty manager \n            console.log(\"Initializing difficulty manager...\");\n            this.initializeDifficultyManager();\n            \n            // Register event handlers\n            this.setupEventHandlers();\n            \n            // Pre-bind animate method to avoid creating a new function every frame\n            this.boundAnimate = this.animate.bind(this);\n            \n            // Reusable deltaTime variable to avoid creating new variables in hot path\n            this.deltaTime = 0;\n            \n            // Start the initialization sequence\n            this.initializeGameSequence();\n            \n        } catch (error) {\n            console.error(\"Error in game initialization:\", error);\n            throw error; // Re-throw to show in the UI\n        }\n    }\n    \n    // Initialize game in sequence, showing start screen first and loading non-essentials after\n    async initializeGameSequence() {\n        try {\n            console.log(\"Starting game initialization sequence...\");\n            \n            // Resume audio context if needed (browser autoplay policy)\n            if (this.audio && this.audio.audioContext && this.audio.audioContext.state === 'suspended') {\n                try {\n                    this.audio.resumeAudioContext();\n                } catch (e) {\n                    console.log(\"Audio context couldn't be resumed yet, will try again after user interaction\");\n                }\n            }\n            \n            // Show the start screen immediately\n            if (this.ui && this.ui.startScreen) {\n                console.log(\"Showing start screen\");\n                this.ui.startScreen.show();\n            } else {\n                console.error(\"Start screen not found, falling back to default behavior\");\n                this.fallbackToDefaultBehavior();\n            }\n            \n            // Start game loop (even though we're on start screen)\n            requestAnimationFrame(this.boundAnimate);\n            \n            // Initialize remaining systems in the background after start screen is shown\n            this.initializeRemainingSystemsAsync();\n            \n            console.log(\"Game initialization sequence completed successfully\");\n        } catch (error) {\n            console.error(\"Error during game initialization sequence:\", error);\n            \n            // Show error in UI if possible\n            if (this.ui && this.ui.showError) {\n                this.ui.showError(\"Failed to initialize game: \" + error.message);\n            } else {\n                alert(\"Failed to initialize game: \" + error.message);\n            }\n        }\n    }\n    \n    // Initialize remaining systems asynchronously after showing the start screen\n    async initializeRemainingSystemsAsync() {\n        try {\n            // Start loading audio in the background\n            this.loadAudioAsync();\n            \n            // Initialize combat systems asynchronously\n            console.log(\"Initializing combat module asynchronously...\");\n            if (!this.combat) {\n                this.combat = new Combat(this.scene, this.spaceship);\n                \n                // Ensure the ECS world in combat is properly initialized\n                if (this.combat.world) {\n                    console.log(\"Combat ECS world successfully created\");\n                } else {\n                    console.log(\"Waiting for combat ECS world to initialize...\");\n                    // Add a check to ensure the player entity exists\n                    setTimeout(() => {\n                        if (this.combat.world && this.combat.playerEntity) {\n                            console.log(\"Combat ECS world and player entity initialized after delay\");\n                        } else {\n                            console.warn(\"Combat ECS world or player entity not available after delay, recreating...\");\n                            if (this.combat.createPlayerReferenceEntity) {\n                                this.combat.createPlayerReferenceEntity();\n                            }\n                        }\n                    }, 1000);\n                }\n            }\n            \n            // Initialize common object pools after start screen is shown\n            setTimeout(() => {\n                this.initializeObjectPools();\n                \n                // Pre-warm essential shaders and projectile assets after start screen is shown\n                this.preWarmBasicShaders();\n            }, 100);\n        } catch (error) {\n            console.error(\"Error initializing remaining systems:\", error);\n        }\n    }\n    \n    // Load audio asynchronously after showing the start screen\n    async loadAudioAsync() {\n        try {\n            if (this.audio) {\n                // Initialize audio in the background\n                console.log(\"Initializing audio system asynchronously...\");\n                this.audio.initialize().then(() => {\n                    console.log(\"Audio system initialization complete\");\n                }).catch(error => {\n                    console.error(\"Error initializing audio:\", error);\n                });\n            }\n        } catch (error) {\n            console.error(\"Error loading audio:\", error);\n        }\n    }\n    \n    // Pre-warm only the most essential shaders needed for immediate gameplay\n    preWarmBasicShaders() {\n        console.log(\"Pre-warming essential shaders...\");\n        \n        // Create template projectile geometry and materials\n        this.projectileGeometry = new THREE.SphereGeometry(1.8, 12, 12);\n        this.projectileMaterial = new THREE.MeshStandardMaterial({\n            color: 0x00ffff,\n            emissive: 0x00ffff,\n            emissiveIntensity: 5,\n            metalness: 0.7,\n            roughness: 0.3\n        });\n        \n        // Create simple dummy objects to warm up the renderer\n        const dummyProjectile = new THREE.Mesh(this.projectileGeometry, this.projectileMaterial);\n        \n        // Add to scene temporarily\n        this.scene.add(dummyProjectile);\n        \n        // Force shader compilation for better performance\n            this.renderer.renderer.compile(this.scene, this.camera);\n        \n        // Remove dummy object after compilation\n            this.renderer._withGuard(() => this.scene.remove(dummyProjectile));\n        \n        console.log(\"Essential shaders pre-warmed\");\n    }\n    \n    // Initialize object pools for commonly created objects\n    initializeObjectPools() {\n        console.log(\"Initializing object pools...\");\n        \n        // Hit effect pool\n        window.objectPool.createPool('hitEffect', () => {\n            // Create geometry only once\n            if (!this.hitEffectGeometry) {\n                this.hitEffectGeometry = new THREE.SphereGeometry(1, 8, 8);\n            }\n            \n            // Create a default material that will be customized on get()\n            const material = new THREE.MeshBasicMaterial({\n                color: 0xffffff,\n                transparent: true,\n                opacity: 0.8\n            });\n            \n            // Create the mesh\n            const mesh = new THREE.Mesh(this.hitEffectGeometry, material);\n            \n            // Return an object with reset and clear methods\n            return {\n                mesh: mesh,\n                material: material,\n                \n                // Reset function for when the object is retrieved from the pool\n                reset: function(color = 0xff5500, size = 1) {\n                    this.material.color.set(color);\n                    this.material.opacity = 0.8;\n                    this.mesh.scale.set(size, size, size);\n                    this.mesh.visible = true;\n                },\n                \n                // Clear function for when the object is returned to the pool\n                clear: function() {\n                    if (this.mesh.parent) {\n                        this.mesh.parent.remove(this.mesh);\n                    }\n                    this.mesh.visible = false;\n                }\n            };\n        }, 20, 100); // Pre-create 20, max 100\n        \n        // Projectile pool\n        window.objectPool.createPool('projectile', () => {\n            // Create projectile geometry only once\n            if (!this.projectileGeometry) {\n                this.projectileGeometry = new THREE.SphereGeometry(2, 8, 8);\n            }\n            \n            // Create a default material that will be customized on get()\n            const material = new THREE.MeshStandardMaterial({\n                color: 0x00ffff,\n                emissive: 0x00ffff,\n                emissiveIntensity: 1,\n                metalness: 0.3,\n                roughness: 0.2\n            });\n            \n            // Create the mesh\n            const mesh = new THREE.Mesh(this.projectileGeometry, material);\n            \n            // Return an object with reset and clear methods\n            return {\n                mesh: mesh,\n                material: material,\n                velocity: new THREE.Vector3(),\n                \n                // Reset function for when the object is retrieved from the pool\n                reset: function(position, direction, speed = 500, color = 0x00ffff) {\n                    // Set position\n                    this.mesh.position.copy(position);\n                    \n                    // Set velocity based on direction and speed\n                    this.velocity.copy(direction).normalize().multiplyScalar(speed);\n                    \n                    // Set color\n                    this.material.color.set(color);\n                    this.material.emissive.set(color);\n                    \n                    // Make visible\n                    this.mesh.visible = true;\n                },\n                \n                // Clear function for when the object is returned to the pool\n                clear: function() {\n                    if (this.mesh.parent) {\n                        this.mesh.parent.remove(this.mesh);\n                    }\n                    this.mesh.visible = false;\n                    this.velocity.set(0, 0, 0);\n                }\n            };\n        }, 50, 200); // Pre-create 50, max 200\n        \n        // Particle effect pool\n        window.objectPool.createPool('particleEffect', () => {\n            // Create particles\n            const particleCount = 20;\n            const particles = new THREE.BufferGeometry();\n            \n            // Use typed arrays for better performance\n            const positions = new Float32Array(particleCount * 3);\n            const colors = new Float32Array(particleCount * 3);\n            \n            // Initialize particle positions and colors\n            for (let i = 0; i < particleCount; i++) {\n                const i3 = i * 3;\n                // All particles start at origin\n                positions[i3] = 0;\n                positions[i3 + 1] = 0;\n                positions[i3 + 2] = 0;\n                \n                // Default white color\n                colors[i3] = 1;\n                colors[i3 + 1] = 1;\n                colors[i3 + 2] = 1;\n            }\n            \n            // Set particle attributes\n            particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n            particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n            \n            // Create particle material\n            const particleMaterial = new THREE.PointsMaterial({\n                size: 3,\n                transparent: true,\n                opacity: 0.8,\n                vertexColors: true,\n                blending: THREE.AdditiveBlending\n            });\n            \n            // Create particle system\n            const particleSystem = new THREE.Points(particles, particleMaterial);\n            \n            // Return an object with reset and clear methods\n            return {\n                system: particleSystem,\n                velocities: new Float32Array(particleCount * 3),\n                lifetime: new Float32Array(particleCount),\n                maxLifetime: new Float32Array(particleCount),\n                \n                // Reset function for when the object is retrieved from the pool\n                reset: function(position, color = new THREE.Color(1, 1, 1), size = 3, particleSpeed = 20) {\n                    // Set particle system position\n                    this.system.position.copy(position);\n                    \n                    // Get position and color arrays\n                    const positions = this.system.geometry.attributes.position.array;\n                    const colors = this.system.geometry.attributes.color.array;\n                    \n                    // Set material size\n                    this.system.material.size = size;\n                    \n                    // Initialize particles\n                    for (let i = 0; i < particleCount; i++) {\n                        const i3 = i * 3;\n                        \n                        // Reset particle position to center\n                        positions[i3] = 0;\n                        positions[i3 + 1] = 0;\n                        positions[i3 + 2] = 0;\n                        \n                        // Set particle color\n                        colors[i3] = color.r;\n                        colors[i3 + 1] = color.g;\n                        colors[i3 + 2] = color.b;\n                        \n                        // Random velocity in all directions\n                        const theta = Math.random() * Math.PI * 2;\n                        const phi = Math.random() * Math.PI;\n                        \n                        this.velocities[i3] = Math.sin(phi) * Math.cos(theta) * (Math.random() * particleSpeed);\n                        this.velocities[i3 + 1] = Math.sin(phi) * Math.sin(theta) * (Math.random() * particleSpeed);\n                        this.velocities[i3 + 2] = Math.cos(phi) * (Math.random() * particleSpeed);\n                        \n                        // Random lifetime\n                        this.maxLifetime[i] = 0.5 + Math.random() * 1.5; // 0.5 to 2 seconds\n                        this.lifetime[i] = this.maxLifetime[i];\n                    }\n                    \n                    // Update attributes\n                    this.system.geometry.attributes.position.needsUpdate = true;\n                    this.system.geometry.attributes.color.needsUpdate = true;\n                    \n                    // Make visible and add to scene\n                    this.system.visible = true;\n                    if (!this.system.parent) {\n                        window.game.scene.add(this.system);\n                    }\n                    \n                    // Start the animation\n                    this.animate();\n                },\n                \n                // Animation function\n                animate: function() {\n                    if (!this.system.visible) return;\n                    \n                    // Get position and color arrays\n                    const positions = this.system.geometry.attributes.position.array;\n                    const colors = this.system.geometry.attributes.color.array;\n                    \n                    // Track if any particles are still alive\n                    let anyAlive = false;\n                    \n                    // Update particles\n                    for (let i = 0; i < particleCount; i++) {\n                        const i3 = i * 3;\n                        \n                        // Update lifetime\n                        this.lifetime[i] -= 0.016; // Approximate 60fps\n                        \n                        // Skip dead particles\n                        if (this.lifetime[i] <= 0) continue;\n                        \n                        anyAlive = true;\n                        \n                        // Move particle based on velocity\n                        positions[i3] += this.velocities[i3] * 0.016;\n                        positions[i3 + 1] += this.velocities[i3 + 1] * 0.016;\n                        positions[i3 + 2] += this.velocities[i3 + 2] * 0.016;\n                        \n                        // Update alpha based on lifetime\n                        const lifeRatio = this.lifetime[i] / this.maxLifetime[i];\n                        this.system.material.opacity = lifeRatio;\n                    }\n                    \n                    // Update attributes\n                    this.system.geometry.attributes.position.needsUpdate = true;\n                    \n                    // Continue animation if particles are still alive\n                    if (anyAlive) {\n                        requestAnimationFrame(this.animate.bind(this));\n                    } else {\n                        this.clear();\n                    }\n                },\n                \n                // Clear function for when the object is returned to the pool\n                clear: function() {\n                    if (this.system.parent) {\n                        this.system.parent.remove(this.system);\n                    }\n                    this.system.visible = false;\n                }\n            };\n        }, 10, 50); // Pre-create 10, max 50\n        \n        console.log(\"Object pools initialized\");\n    }\n    \n    startDocked() {\n        // Start the game docked with the stargate for tutorial/intro\n        // Make sure the ship is already docked\n        if (this.spaceship) {\n            // Ensure the ship is docked\n            if (!this.spaceship.isDocked) {\n        this.spaceship.dock();\n            }\n        }\n        \n        // Show stargate UI after a short delay\n        setTimeout(() => {\n            if (this.controls && this.controls.dockingSystem) {\n                // Just show stargate UI without changing state\n                this.controls.dockingSystem.dockWithStargate();\n                console.log(\"Stargate UI shown\");\n            } else {\n                console.error(\"Controls or dockingSystem not available\");\n            }\n        }, 500);\n    }\n    \n    /**\n     * Initialize the intro sequence\n     */\n    initIntroSequence() {\n        console.log(\"Initializing intro sequence...\");\n        \n        // Create intro sequence instance\n        this.introSequence = new IntroSequence(\n            this.scene,\n            this.camera,\n            this.spaceship,\n            this.audio\n        );\n        \n        // Store original camera and player positions\n        this.originalCameraPosition = this.camera.position.clone();\n        this.originalCameraRotation = this.camera.rotation.clone();\n        \n        console.log(\"Intro sequence initialized\");\n    }\n    \n    /**\n     * Start the intro sequence\n     */\n    startIntroSequence() {\n        if (!this.introSequence) {\n            this.initIntroSequence();\n        }\n        \n        console.log(\"Starting intro sequence...\");\n        this.introSequenceActive = true; // Mark intro as active to prevent player control\n        \n        // Freeze all enemies during intro sequence\n        if (this.combat && this.combat.world && this.combat.enemySystem) {\n            console.log(\"Freezing all enemies for intro sequence\");\n            this.combat.enemySystem.freezeAllEnemies();\n        } else if (window.game && window.game.ecsWorld && window.game.ecsWorld.enemySystem) {\n            console.log(\"Freezing all enemies via global reference for intro sequence\");\n            window.game.ecsWorld.enemySystem.freezeAllEnemies();\n        }\n        \n        // Set initial camera position to match intro sequence starting position\n        // This prevents any camera flash from being visible\n        this.camera.position.set(0, 6000, 12000);\n        this.camera.lookAt(30000, 5000, 0);\n        \n        // Disable player controls\n        if (this.controls && this.controls.inputHandler) {\n            this.controls.inputHandler.enabled = false;\n        }\n        \n        // Explicitly hide stargate UI\n        if (this.ui && this.ui.stargateInterface) {\n            console.log(\"Explicitly hiding stargate UI before intro sequence\");\n            this.ui.stargateInterface.hideStargateUI();\n        }\n        \n        // Hide all UI elements\n        if (this.ui) {\n            this.ui.hideUI();\n        }\n        \n        // Make sure player ship is initially hidden\n        if (this.spaceship && this.spaceship.mesh) {\n            this.spaceship.mesh.visible = false;\n        }\n        \n        // Start the sequence with a completion callback\n        this.introSequence.startSequence(() => {\n            this.completeIntroSequence();\n        });\n    }\n    \n    /**\n     * Handle completion of the intro sequence\n     */\n    completeIntroSequence() {\n        console.log(\"Intro sequence completed - final phase\");\n        \n        // Unfreeze all enemies after intro sequence\n        if (this.combat && this.combat.world && this.combat.enemySystem) {\n            console.log(\"Unfreezing all enemies after intro sequence\");\n            this.combat.enemySystem.unfreezeAllEnemies();\n        } else if (window.game && window.game.ecsWorld && window.game.ecsWorld.enemySystem) {\n            console.log(\"Unfreezing all enemies via global reference after intro sequence\");\n            window.game.ecsWorld.enemySystem.unfreezeAllEnemies();\n        }\n        \n        // Explicitly hide stargate UI if it's visible\n        if (this.ui && this.ui.stargateInterface) {\n            console.log(\"Explicitly hiding stargate UI after intro sequence\");\n            this.ui.stargateInterface.hideStargateUI();\n        }\n        \n        // Mark intro as complete - now the player can control the ship/camera\n        this.introSequenceActive = false;\n        \n        // Show all UI elements AFTER marking intro inactive\n        if (this.ui) {\n            console.log(\"Showing game UI elements after intro completion\");\n            this.ui.showUI();\n        }\n        \n        // Make sure the player ship is visible and UNDOCKED\n        if (this.spaceship && this.spaceship.mesh) {\n            this.spaceship.mesh.visible = true;\n            \n            // Force undocked state\n            if (this.spaceship.isDocked) {\n                console.log(\"Forcing undocked state in completeIntroSequence\");\n                this.spaceship.isDocked = false;\n            }\n        }\n        \n        // NOW is when we re-enable player controls (at the very end)\n        if (this.controls && this.controls.inputHandler) {\n            console.log(\"Re-enabling player controls\");\n            this.controls.inputHandler.enabled = true;\n        }\n        \n        // Mark intro as played in local storage\n        localStorage.setItem('introPlayed', 'true');\n        \n        // Emit event for other systems\n        if (window.mainMessageBus) {\n            window.mainMessageBus.publish('intro.completed', {});\n        }\n        \n        console.log(\"Game starting after intro sequence\");\n    }\n    \n    setupEventHandlers() {\n        // Handle window resize\n        window.addEventListener('resize', this.handleResize);\n        \n        // Handle visibility change to pause/resume game\n        document.addEventListener('visibilitychange', this.handleVisibilityChange);\n        \n        // Handle keyboard events\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n    \n    update(deltaTime) {\n        if (this.isGameOver) return;\n        \n        // Update horde mode survival time if active\n        if (this.isHordeActive) {\n            this.hordeSurvivalTime = performance.now() - this.hordeStartTime;\n        }\n        \n            // Update physics\n            this.physics.update(deltaTime);\n        \n        // Update spaceship\n        if (this.spaceship.update) {\n            this.spaceship.update(deltaTime);\n        }\n        \n        // Update difficulty manager (but not during intro sequence)\n        if (this.difficultyManager && !this.introSequenceActive && !this.spaceship.isDocked) {\n            this.difficultyManager.update(deltaTime);\n        }\n        \n        // Update coordinates in HUD after physics update\n        if (this.ui && this.ui.updateCoordinates && this.spaceship && this.spaceship.mesh) {\n            // Use direct position reference instead of creating a new object\n            const position = this.spaceship.mesh.position;\n            this.ui.updateCoordinates(position.x, position.y, position.z);\n        }\n        \n        // Calculate instantaneous FPS based on frame time\n        const now = performance.now();\n        const instantFPS = this.actualFrameTime ? 1000 / this.actualFrameTime : 60;\n        \n        // Add to FPS buffer with weighted preference to more recent readings\n        // This helps the FPS display stabilize faster when frame rate changes\n        this.fpsBuffer.push(instantFPS);\n        if (this.fpsBuffer.length > this.fpsBufferSize) {\n            this.fpsBuffer.shift(); // Remove oldest value\n        }\n        \n        // Use weighted average to more accurately represent current FPS\n        // Gives more importance to recent frames\n        let totalWeight = 0;\n        let weightedSum = 0;\n        \n        for (let i = 0; i < this.fpsBuffer.length; i++) {\n            // Weight increases linearly with frame index (newer frames get higher weight)\n            const weight = i + 1;\n            weightedSum += this.fpsBuffer[i] * weight;\n            totalWeight += weight;\n        }\n        \n        // Calculate weighted average for smoother display\n        this.currentFPS = Math.round(weightedSum / totalWeight);\n        \n        // Only update FPS display every few frames to reduce DOM operations\n        if (this.frameCount % 5 === 0 && this.ui && this.ui.updateFPS) {\n            // If capped, show cap information along with actual FPS\n            if (this.frameRateCap > 0) {\n                this.ui.updateFPS(this.currentFPS, this.frameRateCap);\n            } else {\n                this.ui.updateFPS(this.currentFPS);\n            }\n        }\n        \n        // Update controls\n        if (this.controls.update) {\n            this.controls.update();\n        }\n        \n        // Ensure the combat system's player entity is always up to date\n        if (this.combat && this.combat.updatePlayerReference) {\n            try {\n                this.combat.updatePlayerReference();\n            } catch (error) {\n                console.warn(\"Error updating player reference:\", error);\n            }\n        } else if (this.combat && !this.combat.updatePlayerReference) {\n            console.warn(\"Combat module does not have updatePlayerReference method\");\n            \n            // Try to initialize player entity directly if method is missing\n            if (this.combat.createPlayerReferenceEntity && !this.combat.playerEntity) {\n                console.log(\"Creating player entity directly since updatePlayerReference is not available\");\n                this.combat.createPlayerReferenceEntity();\n            }\n        }\n        \n        // Update combat systems - this will update the ECS world\n        if (this.combat && this.combat.update) {\n            this.combat.update(deltaTime);\n        }\n        \n        // Update environment\n        if (this.environment.update) {\n            this.environment.update();\n        }\n        \n        // Update UI\n        if (this.ui.update) {\n            this.ui.update();\n        }\n        \n        // Update audio\n        this.updateAudio();\n        \n        // Check for game over conditions\n        this.checkGameOver();\n        \n        // Count frames for performance monitoring\n        this.frameCount++;\n        \n            // Update the ECS world with the current delta time - skip during intro sequence\n            if (this.world && !this.introSequenceActive) {\n                // Fixed-step for ECS using same delta to keep in lockstep\n                this.world.messageBus && this.world.messageBus.fastPublish && this.world.messageBus.fastPublish('world.preUpdate', { deltaTime });\n                this.world.systemManager.update(deltaTime);\n                this.world.messageBus && this.world.messageBus.fastPublish && this.world.messageBus.fastPublish('world.postUpdate', { deltaTime });\n            } else if (this.world && this.introSequenceActive) {\n            // If intro is active, only update essential systems but not enemy systems\n            // This is a fallback in case freezeAllEnemies() wasn't called or doesn't work\n            if (this.world.entityManager && this.world.systemManager) {\n                for (const system of this.world.systemManager.systems) {\n                    // Skip enemy-related systems during intro\n                    if (system.constructor.name !== 'EnemySystem' && \n                        system.constructor.name !== 'EnemyAISystem' && \n                        system.constructor.name !== 'CombatSystem') {\n                        system.update(deltaTime);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Update game sounds based on current game state\n    updateAudio() {\n        if (!this.audio || !this.spaceship) return;\n        \n        // Handle thruster sounds based on current thrust state\n        if (this.spaceship.isDocked) {\n            // No thruster sounds when docked\n            this.audio.stopSound('thrust');\n        } else {\n            const isThrusting = this.spaceship.thrust.forward || \n                              this.spaceship.thrust.backward || \n                              this.spaceship.thrust.left || \n                              this.spaceship.thrust.right;\n                              \n            if (isThrusting) {\n                // Play thrust sound if not already playing\n                this.audio.playSound('thrust');\n                \n                // Calculate thrust intensity for volume\n                let thrustIntensity = 0.5; // Base level\n                \n                if (this.spaceship.thrust.forward) thrustIntensity += 0.2;\n                if (this.spaceship.thrust.backward) thrustIntensity += 0.1;\n                if (this.spaceship.thrust.left) thrustIntensity += 0.1;\n                if (this.spaceship.thrust.right) thrustIntensity += 0.1;\n                \n                // Boost increases volume\n                if (this.spaceship.thrust.boost) thrustIntensity *= 1.5;\n                \n                // Set thrust volume\n                this.audio.setThrustVolume(thrustIntensity);\n            } else {\n                // Stop thrust sound if no thrusters active\n                this.audio.stopSound('thrust');\n            }\n        }\n        \n        // Mining sound is handled by the mining system integration\n    }\n    \n    checkGameOver() {\n        // Make sure spaceship exists\n        if (!this.spaceship) return;\n        \n        // Don't check for game over conditions if the ship is docked\n        if (this.spaceship.isDocked) return;\n        \n        // Check if out of fuel and not near stargate\n        if (this.spaceship.fuel <= 0 && \n            this.controls.dockingSystem && \n            !this.controls.dockingSystem.nearStargate) {\n            this.gameOver(\"Your ship ran out of fuel\");\n            return;\n        }\n        \n        // Check for collision with sun\n        // Reuse a single vector for calculation instead of creating a new one\n        const sunPosition = window.vectorPool.get(0, 0, 0);\n        const distanceToSun = this.spaceship.mesh.position.distanceTo(sunPosition);\n        window.vectorPool.release(sunPosition);\n        \n        if (distanceToSun < 400) { // Sun collision radius\n            this.gameOver(\"Your ship was destroyed by the sun's heat\");\n            return;\n        }\n    }\n    \n    gameOver(message) {\n        if (this.isGameOver) return;\n        \n        console.log(\"Game over:\", message);\n        this.isGameOver = true;\n        \n        // Play explosion sound\n        if (this.audio) {\n            this.audio.playSound('explosion');\n        }\n        \n        // Show game over screen with resources collected\n        if (this.ui.showGameOver && this.controls.resources) {\n            // Add horde mode information to the game stats\n            const gameStats = {\n                resources: this.controls.resources,\n                hordeMode: {\n                    active: this.isHordeActive,\n                    survivalTime: this.isHordeActive ? this.getFormattedHordeSurvivalTime() : \"00:00\",\n                    rawSurvivalTime: this.hordeSurvivalTime || 0\n                }\n            };\n            \n            this.ui.showGameOver(gameStats, message);\n        }\n        \n        // Stop spaceship movement if it exists\n        if (this.spaceship && this.spaceship.thrust) {\n            this.spaceship.thrust.forward = false;\n            this.spaceship.thrust.backward = false;\n            this.spaceship.thrust.left = false;\n            this.spaceship.thrust.right = false;\n            this.spaceship.thrust.boost = false;\n        }\n        \n        // Stop all control inputs\n        if (this.controls && this.controls.inputHandler) {\n            this.controls.inputHandler.exitPointerLock();\n        }\n        \n        // Set a timeout to clean up resources after the game over screen has been shown\n        // This ensures all final animations and sounds can play before cleanup\n        this.gameOverCleanupTimeout = setTimeout(() => {\n            // Keep references to the UI and audio for the game over screen\n            const ui = this.ui;\n            const audio = this.audio;\n            \n            // Prevent these specific modules from being cleaned up\n            this.ui = null;\n            this.audio = null;\n            \n            // Clean up other resources\n            this.destroy();\n            \n            // Restore references for the game over screen\n            this.ui = ui;\n            this.audio = audio;\n        }, 5000); // 5 seconds delay\n    }\n    \n    animate(timestamp) {\n        // Initialize frame timing if needed\n        if (!this.lastFrameTime) {\n            this.lastFrameTime = timestamp;\n            this.frameStartTime = performance.now();\n            // Request next frame and return\n            requestAnimationFrame(this.boundAnimate);\n            return; // Skip first frame to establish baseline\n        }\n        \n        // Track actual frame time for FPS calculation\n        this.actualFrameTime = timestamp - this.lastFrameTime;\n        \n        // Frame rate cap handling\n        if (this.frameRateCap > 0) {\n            // Calculate target frame duration in milliseconds\n            const targetFrameTime = 1000 / this.frameRateCap;\n            \n            // Calculate elapsed time since last rendered frame\n            const elapsedSinceLastFrame = timestamp - this.lastFrameTime;\n            \n            // If we haven't reached the target frame time yet, skip this frame\n            if (elapsedSinceLastFrame < targetFrameTime - 0.5) { // Subtract small amount to account for timing imprecision\n                // Request next frame and return early\n                requestAnimationFrame(this.boundAnimate);\n                return;\n            }\n            \n            // Update timing for next frame - use the exact target time\n            // This helps maintain a more consistent frame rate\n            this.lastFrameTime += targetFrameTime;\n            \n            // If we're more than one frame behind, catch up to avoid spiraling\n            if (timestamp - this.lastFrameTime > targetFrameTime) {\n                this.lastFrameTime = timestamp;\n            }\n        } else {\n            // No cap, just update the frame time\n            this.lastFrameTime = timestamp;\n        }\n        \n        // Calculate delta time\n        const now = performance.now();\n        let frameDelta = Math.min(now - this.lastUpdateTime, 100) / 1000; // Clamped to 100ms\n        \n        // For high refresh rates (>90Hz), use fixed timestep with interpolation\n        // This ensures consistent physics regardless of display refresh rate\n        if (!this.frameRateCap || this.frameRateCap > 90) {\n            // Accumulate time for fixed timestep\n            this.accumulator += frameDelta;\n            \n            // Fixed timestep updates (60Hz physics)\n            const fixedTimestep = 1/60;\n            let updates = 0;\n            const maxUpdates = 3; // Prevent spiral of death\n            \n            const simStart = performance.now();\n            while (this.accumulator >= fixedTimestep && updates < maxUpdates) {\n                // Snapshot transforms before step for interpolation\n                if (this.combat && this.combat.world) {\n                    const ents = this.combat.world.getEntitiesWithComponents(['TransformComponent']);\n                    for (const e of ents) {\n                        const t = e.getComponent('TransformComponent');\n                        t && t.snapshotPrevious && t.snapshotPrevious();\n                    }\n                }\n                this.update(fixedTimestep);\n                this.accumulator -= fixedTimestep;\n                updates++;\n            }\n            const simEnd = performance.now();\n            \n            // If we're behind, catch up without spiraling\n            if (this.accumulator > fixedTimestep * maxUpdates) {\n                this.accumulator = fixedTimestep;\n            }\n            \n            // Interpolation factor for smooth rendering\n            const alpha = this.accumulator / fixedTimestep;\n            \n            // Render with interpolation (could be used for smoother visuals)\n            const renderStart = performance.now();\n            // Interpolate visuals\n            if (this.renderer.interpolateMeshes) this.renderer.interpolateMeshes(alpha);\n            this.renderer.render();\n            const renderEnd = performance.now();\n\n            // Update perf sink\n            if (window.__perf) {\n                const frameFps = this.actualFrameTime ? (1000 / this.actualFrameTime) : 60;\n                window.__perf.fps = Math.round(frameFps);\n                window.__perf.simMs = (simEnd - simStart) || 0;\n                window.__perf.renderMs = (renderEnd - renderStart) || 0;\n            }\n        } else {\n            // For locked frame rates, use simple delta time\n            this.deltaTime = frameDelta;\n            const simStart = performance.now();\n            // Snapshot transforms before variable step (still provide some interpolation)\n            if (this.combat && this.combat.world) {\n                const ents = this.combat.world.getEntitiesWithComponents(['TransformComponent']);\n                for (const e of ents) {\n                    const t = e.getComponent('TransformComponent');\n                    t && t.snapshotPrevious && t.snapshotPrevious();\n                }\n            }\n            this.update(this.deltaTime);\n            const simEnd = performance.now();\n            const renderStart = performance.now();\n            if (this.renderer.interpolateMeshes) this.renderer.interpolateMeshes(1);\n            this.renderer.render();\n            const renderEnd = performance.now();\n            if (window.__perf) {\n                window.__perf.fps = Math.round(1 / (this.deltaTime||0.016));\n                window.__perf.simMs = (simEnd - simStart) || 0;\n                window.__perf.renderMs = (renderEnd - renderStart) || 0;\n            }\n        }\n        \n        this.lastUpdateTime = now;\n        \n        // Update frame counter\n        this.frameCount++;\n        \n        // Request next frame at the END of the animation cycle\n        requestAnimationFrame(this.boundAnimate);\n    }\n    \n    pause() {\n        // Pause game logic here\n        console.log('Game paused');\n        \n        // Mute audio when game is paused\n        if (this.audio) {\n            this.audio.muted = true;\n            for (const sound of Object.values(this.audio.sounds)) {\n                sound.muted = true;\n            }\n            for (const track of this.audio.music) {\n                track.muted = true;\n            }\n        }\n    }\n    \n    resume() {\n        // Resume game logic here\n        console.log('Game resumed');\n        this.lastUpdateTime = performance.now(); // Reset timer to avoid large delta\n        \n        // Unmute audio when game is resumed\n        if (this.audio && !this.audio.muted) {\n            for (const sound of Object.values(this.audio.sounds)) {\n                sound.muted = false;\n            }\n            for (const track of this.audio.music) {\n                track.muted = false;\n            }\n        }\n    }\n    \n    // Create a fallback for the initOptimizedECS method that is causing errors\n    initOptimizedECS() {\n        // [PRESERVED FOR FUTURE SCALING]\n        // This method is a placeholder for a potential future implementation\n        // of the optimized ECS system using TypedArrays and Data-Oriented Design.\n        // \n        // The optimized components, systems and DataStore code are preserved \n        // in the codebase for future performance scaling needs, such as:\n        // - Massive asteroid fields (1000+ asteroids)\n        // - Large-scale space battles\n        // - Advanced particle systems\n        console.log(\"initOptimizedECS called - This is a placeholder implementation\");\n        \n        // Check if we need to initialize optimized systems\n        if (this.world && typeof this.world.getSystem !== 'function') {\n            console.log(\"Adding getSystem method to World class to fix compatibility issues\");\n            // Add getSystem method to World prototype if it doesn't exist\n            this.world.getSystem = function(systemType) {\n                if (this.systemManager && typeof this.systemManager.getSystem === 'function') {\n                    return this.systemManager.getSystem(systemType);\n                }\n                return null;\n            };\n        }\n        \n        return true;\n    }\n    \n    /**\n     * Toggle debug mode\n     */\n    toggleDebugMode() {\n        window.DEBUG_MODE = !window.DEBUG_MODE;\n        console.log(`Debug mode ${window.DEBUG_MODE ? 'enabled' : 'disabled'}`);\n        \n        // Initialize or remove performance monitor\n        if (window.DEBUG_MODE) {\n            if (this.ui && !document.getElementById('performance-stats')) {\n                this.ui.initializePerformanceMonitor();\n            }\n            \n            // Force memory stats update\n            if (window.MemoryStats) {\n                window.MemoryStats.update();\n                window.MemoryStats.logReport();\n            }\n        } else {\n            // Remove performance monitor if it exists\n            const statsElement = document.getElementById('performance-stats');\n            if (statsElement) {\n                statsElement.remove();\n            }\n            \n            // Clear interval if it exists\n            if (this.ui && this.ui.statsInterval) {\n                clearInterval(this.ui.statsInterval);\n                this.ui.statsInterval = null;\n            }\n        }\n        \n        // Add global debug command to trigger intro sequence\n        window.playIntro = () => {\n            if (this.startIntroSequence) {\n                console.log(\"Manually triggering intro sequence\");\n                this.startIntroSequence();\n                return \"Playing intro sequence...\";\n            }\n            return \"Intro sequence not available\";\n        };\n    }\n    \n    /**\n     * Initialize difficulty manager when combat system is ready\n     */\n    initializeDifficultyManager() {\n        // Initialize difficulty manager for dynamic difficulty scaling\n        this.difficultyManager = {\n            params: {\n                maxEnemies: 10,\n                spawnInterval: 3,\n                enemyHealth: 20,\n                enemyDamage: 15,\n                enemySpeed: 700\n            },\n            gameTime: 0,\n            currentLevel: 1,\n            \n            update: function(deltaTime) {\n                // Update game time in minutes\n                this.gameTime += deltaTime;\n                const minutes = this.gameTime / 60;\n                \n                // Calculate level based on minutes played\n                // Level increases every 3 minutes\n                const newLevel = Math.floor(minutes / 3) + 1;\n                \n                // Only update if level changed\n                if (newLevel !== this.currentLevel) {\n                    this.currentLevel = newLevel;\n                    \n                    // Get difficulty multiplier: 1x at level 1, 1.5x at level 2, 2x at level 3, etc.\n                    // Cap at level 5 (3x difficulty) for fairness\n                    const difficultyMultiplier = 1 + (Math.min(this.currentLevel - 1, 4) * 0.5);\n                    \n                    // Update parameters\n                    this.params.maxEnemies = Math.min(10 * difficultyMultiplier, 30);\n                    this.params.spawnInterval = Math.max(3 / difficultyMultiplier, 1);\n                    this.params.enemyHealth = Math.floor(20 * difficultyMultiplier);\n                    this.params.enemyDamage = Math.floor(15 * difficultyMultiplier);\n                    this.params.enemySpeed = Math.min(700 * (1 + (0.2 * (this.currentLevel - 1))), 1400);\n                    \n                    console.log(`Difficulty increased to level ${this.currentLevel} (${difficultyMultiplier}x)`);\n                    console.log(`Parameters: maxEnemies=${this.params.maxEnemies}, spawnInterval=${this.params.spawnInterval}`);\n                    console.log(`Health=${this.params.enemyHealth}, Damage=${this.params.enemyDamage}, Speed=${this.params.enemySpeed}`);\n                }\n            }\n        };\n    }\n    \n    /**\n     * Activate horde mode (extreme survival challenge)\n     */\n    activateHordeMode() {\n        if (this.isHordeActive) return; // Already active\n        \n        console.log(\"ACTIVATING HORDE MODE - EXTREME SURVIVAL CHALLENGE\");\n        this.isHordeActive = true;\n        this.hordeStartTime = performance.now();\n        this.hordeSurvivalTime = 0;\n        \n        // Play an intense sound to signal the start of horde mode\n        if (this.audio) {\n            this.audio.playSound('boink');\n        }\n        \n        // Notify UI to update\n        window.mainMessageBus.publish('horde.activated', {\n            startTime: this.hordeStartTime\n        });\n        \n        // Notify the player\n        if (this.ui && this.ui.showNotification) {\n            this.ui.showNotification(\"HORDE MODE ACTIVATED - SURVIVE!\", 5000);\n        }\n        \n        // Force player to undock if currently docked\n        if (this.spaceship && this.spaceship.isDocked) {\n            console.log(\"Horde mode forcing undock from stargate\");\n            \n            // Undock the ship\n            this.spaceship.undock();\n            \n            // Notify the docking system\n            window.mainMessageBus.publish('player.requestUndock', {\n                forced: true,\n                reason: \"horde_mode_activation\"\n            });\n            \n            // CRITICAL FIX: Explicitly show the HUD after forcing undock\n            // Use a short delay to ensure undocking process is complete\n            setTimeout(() => {\n                console.log(\"Horde mode ensuring HUD is visible\");\n                if (this.ui && this.ui.showUI) {\n                    this.ui.showUI();\n                }\n            }, 200);\n        }\n    }\n    \n    /**\n     * Format horde survival time as MM:SS\n     * @returns {string} Formatted time string\n     */\n    getFormattedHordeSurvivalTime() {\n        const totalSeconds = Math.floor(this.hordeSurvivalTime / 1000);\n        const minutes = Math.floor(totalSeconds / 60);\n        const seconds = totalSeconds % 60;\n        return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    }\n    \n    /**\n     * Clean up all game resources, event listeners, and references\n     * Call this when the game is no longer needed to prevent memory leaks\n     */\n    destroy() {\n        console.log(\"Cleaning up game resources...\");\n        \n        // Cancel animation frame\n        if (this.boundAnimate) {\n            cancelAnimationFrame(this.boundAnimate);\n            this.boundAnimate = null;\n        }\n        \n        // Clear any pending timeouts\n        if (this.gameOverCleanupTimeout) {\n            clearTimeout(this.gameOverCleanupTimeout);\n            this.gameOverCleanupTimeout = null;\n        }\n        \n        // Remove event listeners\n        window.removeEventListener('resize', this.handleResize);\n        document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n        document.removeEventListener('keydown', this.handleKeyDown);\n        \n        // Clean up modules\n        if (this.renderer) {\n            this.renderer.dispose();\n            this.renderer = null;\n        }\n        \n        if (this.audio) {\n            this.audio.dispose();\n            this.audio = null;\n        }\n        \n        if (this.physics) {\n            this.physics.dispose();\n            this.physics = null;\n        }\n        \n        if (this.spaceship) {\n            this.spaceship.dispose();\n            this.spaceship = null;\n        }\n        \n        if (this.environment) {\n            this.environment.dispose();\n            this.environment = null;\n        }\n        \n        if (this.controls) {\n            this.controls.dispose();\n            this.controls = null;\n        }\n        \n        if (this.ui) {\n            this.ui.dispose();\n            this.ui = null;\n        }\n        \n        if (this.combat) {\n            this.combat.dispose();\n            this.combat = null;\n        }\n        \n        if (this.introSequence) {\n            this.introSequence.destroy();\n            this.introSequence = null;\n        }\n        \n        // Clean up ECS world\n        if (this.world) {\n            // Destroy all entities\n            if (this.world.entityManager) {\n                const entityIds = [...this.world.entityManager.entities.keys()];\n                for (const entityId of entityIds) {\n                    this.world.destroyEntity(entityId);\n                }\n            }\n            \n            // Destroy all systems\n            if (this.world.systemManager) {\n                for (const system of this.world.systemManager.systems) {\n                    if (system.onDestroyed && typeof system.onDestroyed === 'function') {\n                        system.onDestroyed();\n                    }\n                }\n            }\n            \n            this.world = null;\n        }\n        \n        // Unsubscribe from MessageBus\n        if (window.mainMessageBus) {\n            window.mainMessageBus.unsubscribe('game.over', this.gameOver.bind(this));\n        }\n        \n        // Clear global references\n        window.game = null;\n        \n        // Clear object pools\n        if (window.vectorPool) {\n            window.vectorPool.pool = [];\n        }\n        \n        if (window.objectPool) {\n            window.objectPool.clearAllPools();\n        }\n        \n        // Clear references\n        this.scene = null;\n        this.camera = null;\n        this.fpsBuffer = [];\n        \n        console.log(\"Game resources cleaned up successfully\");\n    }\n    \n    /**\n     * Handle window resize event\n     * @private\n     */\n    handleResize = () => {\n        if (this.renderer) {\n            this.renderer.handleResize();\n        }\n    }\n    \n    /**\n     * Handle visibility change event\n     * @private\n     */\n    handleVisibilityChange = () => {\n        if (document.hidden) {\n            this.pause();\n        } else {\n            this.resume();\n        }\n    }\n    \n    /**\n     * Handle key down event\n     * @param {KeyboardEvent} e Key event\n     * @private\n     */\n    handleKeyDown = (e) => {\n        if (e.key === 'Escape' && document.pointerLockElement) {\n            document.exitPointerLock();\n        }\n        \n        // Add audio mute toggle (M key)\n        if (e.key.toLowerCase() === 'm' && this.audio) {\n            const isMuted = this.audio.toggleMute();\n            console.log(`Audio ${isMuted ? 'muted' : 'unmuted'}`);\n        }\n        \n        // Add debug mode toggle (D key + Shift)\n        if (e.key.toLowerCase() === 'd' && e.shiftKey) {\n            this.toggleDebugMode();\n        }\n    }\n    \n    // Fallback to old behavior if start screen is not available\n    fallbackToDefaultBehavior() {\n        // Check if intro has been played before\n        const introPlayed = localStorage.getItem('introPlayed') === 'true';\n        \n        if (introPlayed) {\n            console.log(\"Intro already played, starting in docked state\");\n            // Only set initial camera position if we're not doing the intro\n            this.camera.position.set(0, 1500, 0);\n            // Only start docked if we've already seen the intro\n            this.startDocked();\n        } else {\n            console.log(\"First time playing, preparing for intro sequence\");\n            // Make sure ship is docked but DON'T show the UI\n            if (this.spaceship && !this.spaceship.isDocked) {\n                this.spaceship.dock();\n            }\n            // Start intro with a small delay to ensure everything is loaded\n            setTimeout(() => {\n                this.startIntroSequence();\n            }, 500);\n        }\n    }\n}\n\n// Bridge legacy window.objectPool to unified PoolRegistry (no-alloc facade)\n(() => {\n    const registry = getGlobalPoolRegistry();\n    window.objectPool = {\n        createPool: function(type, factory, initialSize = 10, maxSize = 100) {\n            registry.register(type, { factory, reset: (o)=>{}, preallocate: initialSize, maxSize });\n        },\n        get: function(type, ...args) {\n            try { return registry.get(type, ...args); } catch (e) { console.warn(e.message); return null; }\n        },\n        release: function(type, obj) { registry.release(type, obj); },\n        clearAllPools: function() { registry.clearAll(); },\n        clearPool: function(type) { registry.clear(type); }\n    };\n})();\n\nfunction startGameMainModule() {\n    // Add a console message to help debug loading issues\n    console.log(\"DOM ready, starting game initialization...\");\n    \n    // Initialize the game directly instead of using a loading screen\n    console.log(\"Creating game instance...\");\n    \n    // Initialize the game with error handling\n    try {\n        console.log(\"Checking for THREE module availability...\");\n        // Log THREE availability for debugging\n        console.log(\"THREE available:\", typeof THREE !== 'undefined');\n        \n        window.game = new Game(); // Initialize the game\n        \n        // Preload projectile assets to prevent stutter\n        console.log(\"Precomputing projectile assets and warming shaders...\");\n        \n        // Create template projectile geometry and materials\n        window.game.projectileGeometry = new THREE.SphereGeometry(1.8, 12, 12);\n        window.game.projectileMaterial = new THREE.MeshStandardMaterial({\n            color: 0x00ffff,\n            emissive: 0x00ffff,\n            emissiveIntensity: 5,\n            metalness: 0.7,\n            roughness: 0.3\n        });\n        \n        // Create template glow geometry and material\n        window.game.projectileGlowGeometry = new THREE.SphereGeometry(2.4, 16, 16);\n        window.game.projectileGlowMaterial = new THREE.MeshBasicMaterial({\n            color: 0x00ffff,\n            transparent: true,\n            opacity: 0.4,\n            blending: THREE.AdditiveBlending\n        });\n        \n        // Precompute trail particle geometries for different sizes\n        console.log(\"Precomputing trail particle geometries...\");\n        window.game.trailParticleGeometries = [];\n        const numPoints = 20; // Match the number in addProjectileTrail\n        \n        for (let i = 0; i < numPoints; i++) {\n            const ratio = i / numPoints;\n            const size = 0.5 * (1 - ratio); // Match the size calculation in addProjectileTrail\n            const particleGeometry = new THREE.SphereGeometry(size, 8, 8);\n            window.game.trailParticleGeometries.push(particleGeometry);\n        }\n        \n        // Force shader compilation for better performance\n        console.log(\"Warming shaders...\");\n        const dummyProjectile = new THREE.Mesh(window.game.projectileGeometry, window.game.projectileMaterial);\n        const dummyGlow = new THREE.Mesh(window.game.projectileGlowGeometry, window.game.projectileGlowMaterial);\n        dummyProjectile.add(dummyGlow);\n        \n        // Add to scene temporarily\n        this.renderer._withGuard(() => window.game.scene.add(dummyProjectile));\n        \n        // Precompute and warm shaders for explosion and hit effects\n        console.log(\"Precomputing explosion effect assets...\");\n        \n        // Create template explosion particle geometry and materials\n        window.game.explosionGeometry = new THREE.SphereGeometry(1, 8, 8);\n        window.game.explosionMaterial = new THREE.MeshBasicMaterial({\n            color: 0xff5500,\n            transparent: true,\n            opacity: 0.8\n        });\n        \n        // Create template hit effect geometry\n        window.game.hitEffectGeometry = new THREE.SphereGeometry(1, 8, 8);\n        \n        // Create dummy explosion particles for shader warming\n        const dummyExplosionContainer = new THREE.Group();\n        this.renderer._withGuard(() => window.game.scene.add(dummyExplosionContainer));\n        \n        // Create a sample of explosion particles with various sizes\n        const explosionParticleCount = 20;\n        const dummyExplosionParticles = [];\n        \n        for (let i = 0; i < explosionParticleCount; i++) {\n            const size = Math.random() * 2 + 1;\n            const particle = new THREE.Mesh(\n                window.game.explosionGeometry,\n                window.game.explosionMaterial.clone() // Clone material for individual control\n            );\n            \n            // Position out of view but still rendered\n            particle.position.set(\n                Math.random() * 10 - 5,\n                Math.random() * 10 - 5,\n                Math.random() * 10 - 5\n            );\n            particle.position.multiplyScalar(10).add(new THREE.Vector3(0, -10000, 0));\n            \n            // Add to container\n            dummyExplosionContainer.add(particle);\n            dummyExplosionParticles.push(particle);\n        }\n        \n        // Create explosion particle effect pool\n        window.objectPool.createPool('explosionParticle', () => {\n            // Reuse the geometry and create a cloned material\n            const material = window.game.explosionMaterial.clone();\n            const mesh = new THREE.Mesh(window.game.explosionGeometry, material);\n            \n            return {\n                mesh: mesh,\n                material: material,\n                velocity: new THREE.Vector3(),\n                \n                // Reset function when retrieved from pool\n                reset: function(position, size = 1.0, color = 0xff5500) {\n                    // Check if position is defined, use default if not\n                    if (!position) {\n                        position = new THREE.Vector3(0, 0, 0);\n                    }\n                    \n                    // Set position\n                    this.mesh.position.copy(position);\n                    \n                    // Set size\n                    this.mesh.scale.set(size, size, size);\n                    \n                    // Set color and opacity\n                    this.material.color.set(color);\n                    this.material.opacity = 0.8;\n                    \n                    // Make visible\n                    this.mesh.visible = true;\n                },\n                \n                // Clear function when returned to pool\n                clear: function() {\n                    if (this.mesh.parent) {\n                        this.mesh.parent.remove(this.mesh);\n                    }\n                    this.mesh.visible = false;\n                    this.velocity.set(0, 0, 0);\n                }\n            };\n        }, 50, 200); // Pre-create 50, max 200\n        \n        // Ensure hitEffect pool exists before using it during warming\n        try {\n            let testHit = window.objectPool.get('hitEffect');\n            if (!testHit) {\n                // Minimal factory mirroring initializeObjectPools behavior\n                window.objectPool.createPool('hitEffect', () => {\n                    const geo = window.game.hitEffectGeometry || new THREE.SphereGeometry(1, 8, 8);\n                    const material = new THREE.MeshBasicMaterial({ color: 0xffffff, transparent: true, opacity: 0.8 });\n                    const mesh = new THREE.Mesh(geo, material);\n                    return {\n                        mesh,\n                        material,\n                        reset(color = 0xff5500, size = 1) {\n                            this.material.color.set(color);\n                            this.material.opacity = 0.8;\n                            this.mesh.scale.set(size, size, size);\n                            this.mesh.visible = true;\n                        },\n                        clear() {\n                            if (this.mesh.parent) { this.mesh.parent.remove(this.mesh); }\n                            this.mesh.visible = false;\n                        }\n                    };\n                }, 10, 100);\n            } else {\n                // Put back the test object since we just probed\n                window.objectPool.release('hitEffect', testHit);\n            }\n        } catch {}\n\n        // Create variation of hit effects with different colors for shader warming\n        const hitEffectColors = [0xff5500, 0x3399ff, 0xff0000, 0xffff00];\n        const dummyHitEffects = [];\n        \n        for (const color of hitEffectColors) {\n            const hitEffect = window.objectPool.get('hitEffect', color, 1.5);\n            if (hitEffect && hitEffect.mesh) {\n                // Position far away but still rendered\n                hitEffect.mesh.position.set(0, -10100, 0);\n                this.renderer._withGuard(() => window.game.scene.add(hitEffect.mesh));\n                dummyHitEffects.push(hitEffect);\n            }\n        }\n        \n        // Force shader compilation for all new objects\n        window.game.renderer.renderer.compile(window.game.scene, window.game.camera);\n        \n        console.log(\"Cleaning up dummy objects after warming...\");\n        \n        // Remove dummy explosion container after compilation\n        this.renderer._withGuard(() => window.game.scene.remove(dummyExplosionContainer));\n        for (const particle of dummyExplosionParticles) {\n            dummyExplosionContainer.remove(particle);\n        }\n        \n        // Return hit effects to pool\n        for (const hitEffect of dummyHitEffects) {\n            window.objectPool.release('hitEffect', hitEffect);\n        }\n        \n        console.log(\"Precomputed assets and shaders warmed successfully\");\n        \n        console.log(\"Game started successfully\");\n    } catch (error) {\n        console.error(\"Error starting game:\", error);\n        \n        // Show error message to user\n        const errorMessage = document.createElement('div');\n        errorMessage.style.position = 'fixed';\n        errorMessage.style.top = '50%';\n        errorMessage.style.left = '50%';\n        errorMessage.style.transform = 'translate(-50%, -50%)';\n        errorMessage.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n        errorMessage.style.color = '#ff3030';\n        errorMessage.style.padding = '20px';\n        errorMessage.style.borderRadius = '10px';\n        errorMessage.style.border = '1px solid #ff3030';\n        errorMessage.style.zIndex = '9999';\n        errorMessage.style.textAlign = 'center';\n        errorMessage.style.fontFamily = 'Courier New, monospace';\n        errorMessage.style.maxWidth = '80%';\n        \n        errorMessage.innerHTML = `\n            <h2>Error Starting Game</h2>\n            <p>${error.message}</p>\n            <p>Check the console for more details (F12).</p>\n            <p>You can try refreshing the page or clearing your browser cache.</p>\n            <button id=\"reload-button\" style=\"background: #ff3030; color: white; border: none; padding: 10px; margin-top: 20px; cursor: pointer;\">Reload Page</button>\n        `;\n        \n        document.body.appendChild(errorMessage);\n        \n        // Add event listener to reload button\n        document.getElementById('reload-button').addEventListener('click', () => {\n            // Add cache-busting parameter to the URL\n            const cacheBuster = Date.now();\n            window.location.href = window.location.pathname + '?cache=' + cacheBuster;\n        });\n    }\n}\n\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', startGameMainModule);\n} else {\n    // DOM is already ready (e.g., module imported after DOMContentLoaded)\n    startGameMainModule();\n} "],"names":["StarDreadnought","scene","THREE.Group","shipScale","scale","hullLength","hullWidth","hullHeight","taperFactor","hullGeometry","THREE.BufferGeometry","vertices","THREE.BufferAttribute","hullMaterial","THREE.MeshStandardMaterial","hull","THREE.Mesh","parentHull","plateLength","plateWidth","plateHeight","plateY","i","plateZ","plateGeometry","THREE.BoxGeometry","plateMaterial","plate","bridgeHeight","bridgeWidth","bridgeDepth","bridgeY","bridgeZ","bridgeMaterial","mainTowerGeometry","mainTower","secondaryTowerScale","secondaryTowerGeometry","leftTower","rightTower","bridgeTower","windowSize","windowSpacing","windowRows","windowCols","windowsStartY","windowDepth","windowMaterial","row","col","windowGeometry","window","engineRadius","engineLength","engineZ","engineY","engineHousingWidth","engineHousingHeight","engineHousingLength","housingGeometry","housingMaterial","engineHousing","engineMaterial","glowMaterial","engineRows","enginesPerRow","verticalSpacing","rowY","posX","engineGeometry","THREE.CylinderGeometry","engine","glowGeometry","THREE.SphereGeometry","glow","outerGlowGeometry","outerGlowMaterial","outerGlow","turretRadius","turretHeight","baseRadius","baseHeight","turretMaterial","portPositions","z","pos","baseGeometry","base","turretGeometry","turret","starboardPositions","trenchWidth","trenchDepth","trenchLength","trenchMaterial","centerTrenchGeometry","centerTrench","sideTrenchGeometry","portTrench","starboardTrench","domeRadius","domeY","domeZ","domeMaterial","portDomeGeometry","portDome","starboardDomeGeometry","starboardDome","beamTopRadius","beamBottomRadius","beamHeight","beamMaterial","THREE.ShaderMaterial","THREE.Color","THREE.DoubleSide","THREE.AdditiveBlending","beamGeometry","ringGeometry","THREE.RingGeometry","ringMaterial","particleGeometry","positions","colors","sizes","i3","isInnerBeam","radius","theta","height","particleMaterial","THREE.Points","canvas","context","gradient","texture","THREE.Texture","width","enginePositions","engineIndex","engineX","offsetX","offsetY","trailLength","power","index","baseSizes","progress","timeIncrement","intensity","ringScale","IntroSequence","camera","spaceship","audioManager","audioPath","getAbsolutePath","audio","e","error","destination","warpFilter","warpReverb","warpSynth","noiseFilter","noiseGain","noise","now","volumeLevel","arrivalFilter","arrivalSynth","rumbleFilter","rumbleSynth","teleportFilter","teleportChorus","teleportSynth","beamFilter","beamSynth","line","dialogueAudio","playPromise","err","charIndex","waitTime","portalGeometry","portalMaterial","particleCount","particles","angle","THREE.PointsMaterial","onComplete","currentTime","deltaTime","portalScale","t","easeInOut","start","THREE.Vector3","control","end","p0","p1","p2","position","enginePower","portalFade","shipPos","dreadPos","lookY","portalPos","portalProgress","rotateProgress","startRot","endRot","moveProgress","startPos","beyondPos","easeIn","collapseScale","lookPos","geometry","material","THREE.MeshBasicMaterial","maxOpacity","skipButton","sound","PerfOverlay","obs","list","entry","el","p","sysHtml","k","v","_a","_b","initPerfOverlay","x","y","vector","Game","__publicField","isMuted","MessageBus","AudioManager","Renderer","Physics","Environment","Spaceship","UI","Controls","refreshRate","Combat","dummyProjectile","color","size","direction","speed","particleSpeed","phi","anyAlive","lifeRatio","instantFPS","totalWeight","weightedSum","weight","system","thrustIntensity","sunPosition","distanceToSun","message","gameStats","ui","timestamp","targetFrameTime","frameDelta","fixedTimestep","updates","maxUpdates","simStart","ents","simEnd","alpha","renderStart","renderEnd","frameFps","track","systemType","statsElement","minutes","newLevel","difficultyMultiplier","totalSeconds","seconds","entityIds","entityId","registry","getGlobalPoolRegistry","type","factory","initialSize","maxSize","args","obj","startGameMainModule","THREE","numPoints","dummyGlow","dummyExplosionContainer","explosionParticleCount","dummyExplosionParticles","particle","testHit","geo","hitEffectColors","dummyHitEffects","hitEffect","errorMessage","cacheBuster"],"mappings":"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"}